using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CompanyManagementSystem.Models;
using CompanyManagementSystem.Data;
using System.Threading.Tasks;
using System.Linq;

namespace CompanyManagementSystem.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    // [Authorize(Roles = "SuperAdmin")] // Restrict access to SuperAdmin role for creating clients
    public class OrderController : ControllerBase
    {
        private readonly AppDbContext _context;
        
        public OrderController(AppDbContext context)
        {
            _context = context;
        }

        // POST: api/Order
        [HttpPost]
        public async Task<IActionResult> AddOrder([FromBody] Order order)
        {
            if (order == null)
            {
                return BadRequest("Order data is required.");
            }

            // Ensure orderId is not set (it will be auto-generated by the database)
            order.Id = 0;

            // Handle ClientId property
            if (order.ClientId.HasValue)
            {
                var client = await _context.Clients.FindAsync(order.ClientId.Value);
                if (client == null)
                {
                    return BadRequest("Invalid Client Id.");
                }
                order.ClientName = client;
            }

            // Add order to the DbContext
            _context.Orders.Add(order);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetOrderById), new { id = order.Id }, order);
        }

        // GET: api/Order
        [HttpGet]
        [AllowAnonymous] // Allow anonymous users to view all orders
        public async Task<IActionResult> GetAllOrders()
        {
            var orders = await _context.Orders.Include(o => o.ClientName).ToListAsync();
            var orderDtos = orders.Select(o => new
            {
                o.Id,
                o.ClientOrderNo,
                ClientName = o.ClientName?.Name,
                o.OrderDate,
                o.Status
            }).ToList();
            return Ok(orderDtos);
        }

        // GET: api/Order/{id}
        [HttpGet("{id}")]
        [AllowAnonymous] // Allow anonymous users to view a specific order
        public async Task<IActionResult> GetOrderById(int id)
        {
            var order = await _context.Orders.Include(o => o.ClientName).FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                return NotFound("Order not found.");
            }

            return Ok(order);
        }

        // DELETE: api/Order/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await _context.Orders.FindAsync(id);

            if (order == null)
            {
                return NotFound("Order not found.");
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return Ok("Order deleted successfully.");
        }
    }
}