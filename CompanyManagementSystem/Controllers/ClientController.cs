using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CompanyManagementSystem.Models;
using CompanyManagementSystem.Data;
using System.Threading.Tasks;
using System.Linq;
using System.Globalization;

namespace CompanyManagementSystem.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    // [Authorize(Roles = "SuperAdmin")] // Restrict access to SuperAdmin role for creating clients
    public class ClientController : ControllerBase
    {
        private readonly AppDbContext _context;

        public ClientController(AppDbContext context)
        {
            _context = context;
        }

        // POST: api/Client
        [HttpPost]
        // [Authorize(Roles = "SuperAdmin")] // Restrict access to SuperAdmin role
        public async Task<IActionResult> AddClient([FromBody] Client client)
        {
            if (client == null)
            {
                return BadRequest("Client data is required.");
            }


            // Ensure clientId is not set (it will be auto-generated by the database)
            client.Id = 0;

            // Handle LedgerId property
            if (client.LedgerId.HasValue)
            {
                var ledger = await _context.Companies.FindAsync(client.LedgerId.Value);
                if (ledger == null)
                {
                    return BadRequest("Invalid Company Id.");
                }
                client.Ledger = ledger;
            }

            // Add client to the DbContext
            _context.Clients.Add(client);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetClientById), new { id = client.Id }, client);
        }
        // GET: api/Client
        [HttpGet]
        [AllowAnonymous] // Allow anonymous users to view all clients
        public async Task<IActionResult> GetAllClients()
        {
            var clients = await _context.Clients.Include(c => c.Ledger).ToListAsync();
            var clientDtos = clients.Select(c => new
            {
                c.Id,
                c.Name,
                LedgerName = c.Ledger?.Name,
                c.ContactPincode,
                GSTDate = c.GSTDate.HasValue ? c.GSTDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : null
            }).ToList();
            return Ok(clientDtos);
        }

        // GET: api/Client/{id}
        [HttpGet("{id}")]
        [AllowAnonymous] // Allow anonymous users to view a specific client
        public async Task<IActionResult> GetClientById(int id)
        {
            var client = await _context.Clients.FindAsync(id);

            if (client == null)
            {
                return NotFound("Client not found.");
            }

            return Ok(client);
        }

        // DELETE: api/Client/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteClient(int id)
        {
            var client = await _context.Clients.FindAsync(id);

            if (client == null)
            {
                return NotFound("Client not found.");
            }

            _context.Clients.Remove(client);
            await _context.SaveChangesAsync();

            return Ok("Client deleted successfully.");
        }
    }
}
