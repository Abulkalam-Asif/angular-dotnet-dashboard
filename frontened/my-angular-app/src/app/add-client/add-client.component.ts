import { Component, OnInit } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ClientService } from '../services/client.service';

@Component({
  selector: 'app-add-client',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './add-client.component.html',
  styleUrls: ['./add-client.component.css'],
})
export class AddClientComponent implements OnInit {
  newClient: any = {
    Name: '',
    PANNo: '',
    Code: '',
    Station: '',
    CreditPeriod: '',
    GSTNo: '',
    CINNo: '',
    IECNo: '',
    GSTDate: '',
    SACCode: '',
    LedgerId: null,
    VATNo: '',
    TINno: '',
    STNo: '',
    Remarks: '',
    ContactName: '',
    ContactMobile: '',
    ContactEmail: '',
    ContactAddress: '',
    ContactState: '',
    ContactCountry: '',
    ContactPincode: '',
    IsInvoiceFormat: false,
    IsKYC: false,
    StateCode: '',
  };

  ledgers: any[] = [];

  constructor(
    private authService: AuthService,
    private router: Router,
    private clientService: ClientService
  ) {}

  ngOnInit() {
    this.fetchLedgers();
  }

  fetchLedgers() {
    this.clientService.getLedgers().subscribe({
      next: (data) => {
        this.ledgers = data;
        console.log(data);
      },
      error: (error) => {
        console.error('Failed to fetch ledgers:', error);
      },
    });
  }

  // Add a new client
  addClient() {
    this.newClient = {
      name: '',
      PANNo: '',
      Code: '',
      Station: '',
      CreditPeriod: '',
      GSTNo: '',
      CINNo: '',
      IECNo: '',
      GSTDate: '',
      SACCode: '',
      LedgerId: null,
      VATNo: '',
      TINno: '',
      STNo: '',
      Remarks: '',
      ContactName: '',
      ContactMobile: '',
      ContactEmail: '',
      ContactAddress: '',
      ContactState: '',
      ContactCountry: '',
      ContactPincode: '',
      IsInvoiceFormat: false,
      IsKYC: false,
      StateCode: '',
    };
  }

  // Remove an client
  removeClient(index: number) {
    this.newClient.clients.splice(index, 1);
  }

  // Add a new financial record
  addFinancial() {
    this.newClient.financials.push({
      financialId: 0, // Auto-generated by the backend
      revenue: 0,
      expenses: 0,
      profit: 0,
      clientId: 0, // Will be set to the clientId after submission
      client: '', // Will be set to the client name after submission
    });
  }

  // Remove a financial record
  removeFinancial(index: number) {
    this.newClient.financials.splice(index, 1);
  }

  // Submit the form
  onSubmit() {
    // Ensure clientId is not set (it will be auto-generated by the backend)
    delete this.newClient.Id;

    // Call the API to add the client
    this.authService.addClient(this.newClient).subscribe({
      next: () => {
        alert('Client added successfully!');
        this.router.navigate(['/client-dashboard']); // Redirect to client dashboard
      },
      error: (error) => {
        console.error('Failed to add client:', error); // Log the error
        alert('Failed to add client. Please try again.');
      },
    });
  }
}
