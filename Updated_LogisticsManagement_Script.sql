USE [master]
GO
/****** Object:  Database [I3MSExtracted]    Script Date: 2/15/2025 9:02:57 AM ******/
CREATE DATABASE [I3MSExtracted]
 CONTAINMENT = NONE
 ON  PRIMARY 
NAME = N'db_kapl_data', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\I3MSExtracted_data.mdf' , SIZE = 841088KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB)
LOG ON
( NAME = N'db_kapl_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\I3MSExtractedt_data_log.ldf' , SIZE = 2560KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10%)
WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [I3MSExtracted] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [I3MSExtracted].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [I3MSExtracted] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [I3MSExtracted] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [I3MSExtracted] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [I3MSExtracted] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [I3MSExtracted] SET ARITHABORT OFF 
GO
ALTER DATABASE [I3MSExtracted] SET AUTO_CLOSE ON 
GO
ALTER DATABASE [I3MSExtracted] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [I3MSExtracted] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [I3MSExtracted] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [I3MSExtracted] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [I3MSExtracted] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [I3MSExtracted] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [I3MSExtracted] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [I3MSExtracted] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [I3MSExtracted] SET  DISABLE_BROKER 
GO
ALTER DATABASE [I3MSExtracted] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [I3MSExtracted] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [I3MSExtracted] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [I3MSExtracted] SET ALLOW_SNAPSHOT_ISOLATION ON 
GO
ALTER DATABASE [I3MSExtracted] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [I3MSExtracted] SET READ_COMMITTED_SNAPSHOT ON 
GO
ALTER DATABASE [I3MSExtracted] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [I3MSExtracted] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [I3MSExtracted] SET  MULTI_USER 
GO
ALTER DATABASE [I3MSExtracted] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [I3MSExtracted] SET DB_CHAINING OFF 
GO
ALTER DATABASE [I3MSExtracted] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [I3MSExtracted] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [I3MSExtracted] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [I3MSExtracted] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [I3MSExtracted] SET QUERY_STORE = OFF
GO
USE [I3MSExtracted]
GO
/****** Object:  User [whdoo_demo]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE USER [whdoo_demo] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO

CREATE USER [kapl_user] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [whdoo_demo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [kapl_user]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [kapl_user]
GO

/****** Object:  UserDefinedTableType [dbo].[ty_Access]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE TYPE [dbo].[ty_Access] AS TABLE(
	[ModuleName] [nvarchar](50) NULL,
	[View] [bit] NULL,
	[Edit] [bit] NULL,
	[Add ] [bit] NULL,
	[Delete] [bit] NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[Accounts_GetGroupHirerchy]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Function [dbo].[Accounts_GetGroupHirerchy](@Id INT)
RETURNS VARCHAR(2500)
AS
BEGIN
	DECLARE @Hirerchy VARCHAR(2500)
	;WITH parent AS
	(
		SELECT id, parentId  from Accounts_Groups WHERE id = @id
		UNION ALL 
		SELECT t.id, t.parentId FROM parent
		INNER JOIN Accounts_Groups t ON t.id =  parent.parentid
	)
	SELECT @Hirerchy = STUFF((
	   SELECT '][' + Convert(Varchar, id) FROM parent P1 Order By Id Asc
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	RETURN @Hirerchy + ']'
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetChallanVoucherStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetChallanVoucherStatus] 
(@ChallanNo INT = NULL,
 @TokenNo VARCHAR(50) = NULL)

RETURNS INT
AS BEGIN
    DECLARE @VoucherRefType INT = NULL
	DECLARE @VoucherRefId INT = NULL
	DECLARE @VoucherStatus INT = NULL
	IF @TokenNo IS NULL
		Select @VoucherRefId = TokenId From _TokenChallans Where ChallanNo = @ChallanNo
	ELSE 
		Select @VoucherRefId = Id From _Token Where TokenNo = @TokenNo

	IF @VoucherRefId IS NOT NULL
		SET @VoucherRefType = 3 -- Token Type
	ELSE
	BEGIN
		SET @VoucherRefType = 1 -- CHALLAN Type
		SET @VoucherRefId = @ChallanNo
	END
	SELECT @VoucherStatus = ISNULL([Status],0) FROM [Accounts_Vouchers] 
	WHERE VoucherType = 2 And (RefType = @VoucherRefType And ReferenceId = @VoucherRefId)

	RETURN @VoucherStatus
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetCreditDebitDisplay]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetCreditDebitDisplay] (@Amount DECIMAL(18,2))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @Display VARCHAR(50)
 DECLARE @TransactionId INT
 DECLARE @HideIfZero BIT = 1

    IF @Amount >= 0 
  SET @TransactionId = 2 -- Debit
 ELSE 
  SET @TransactionId = 1 -- Credit
  
 IF @Amount = 0 AND  @HideIfZero = 1
  SET @Display = ''
 ELSE
  SELECT @Display = Concat(Convert(Varchar(50), Abs(ROUND(@Amount,0))), ' ', NAME) FROM Accounts_TransactionType Where Id = @TransactionId 
 RETURN @Display
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetFinancialYearId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Accounts_GetFinancialYearId] (@Date DATE = NULL)
RETURNS INT
AS 
BEGIN
    DECLARE @FinancialYearId INT = NULL
	IF @Date IS NULL 
		SET @Date = GETDATE()

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @Date >= StartDate AND @Date <= EndDate;

	RETURN @FinancialYearId
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetGroupNatureTotalAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Accounts_GetGroupNatureTotalAmount] (@FinancialYearId INT, @GroupNatureId INT)
RETURNS DECIMAL(18,2)
AS BEGIN
    DECLARE @TotalAmount DECIMAL(18,2)

	Select @TotalAmount = 	Sum(CASE 
		WHEN G.GroupNature = 1 /*Assets*/ THEN CASE WHEN TransactionType = 1 THEN -Amount ELSE Amount END
		WHEN G.GroupNature = 2 /*Liability*/ THEN CASE WHEN TransactionType = 1 THEN Amount ELSE -Amount END
		WHEN G.GroupNature = 3 /*Income*/ THEN CASE WHEN TransactionType = 1 THEN Amount ELSE -Amount END
		WHEN G.GroupNature = 4 /*Expense*/ THEN CASE WHEN TransactionType = 1 THEN -Amount ELSE Amount END
	END)
	From Accounts_VoucherTransaction VT
	Inner Join Accounts_Vouchers V On V.Id = VT.VoucherId
	Inner Join Accounts_Ledgers L On L.Id = VT.LedgerId
	Inner Join Accounts_Groups G On G.Id = L.[Group]
	Where V.FinancialYear = @FinancialYearId
	AND G.GroupNature = @GroupNatureId
	AND V.[Status] Not IN (1,5)
	IF @TotalAmount IS NULL
		SET @TotalAmount = 0;
   
	RETURN @TotalAmount
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetLedgerBalance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetLedgerBalance] (@LedgerId INT, @FinancialYearId INT = NULL)
RETURNS DECIMAL(18,0)
AS BEGIN
    DECLARE @OpeningBalance DECIMAL(18,2)
    DECLARE @LedgerCredit DECIMAL(18,2)
    DECLARE @LedgerDebit DECIMAL(18,2)

	IF (@FinancialYearId IS NULL)
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;

	SELECT 
       @OpeningBalance = CASE WHEN OpeningTransactionType = 1 THEN (-1 * [OpeningBalance]) ELSE [OpeningBalance] END
	FROM [Accounts_LedgerBalance] 
	WHERE LedgerId = @LedgerId  AND [Year] = @FinancialYearId

	SELECT 
		@LedgerCredit = SUM(ISNULL(CASE WHEN TransactionType = 1 THEN Amount ELSE 0 END, 0)),
		@LedgerDebit = SUM(ISNULL(CASE WHEN TransactionType = 2 THEN Amount ELSE 0 END,0))
	FROM [Accounts_VoucherTransaction] 
	WHERE 
		LedgerId = @LedgerId 
		AND VoucherId In (SELECT ID FROM Accounts_Vouchers WHERE FinancialYear = @FinancialYearId And [Status] Not In (1,5))
	IF @OpeningBalance IS NULL
		SET @OpeningBalance = 0;
    IF @LedgerCredit IS NULL 
		SET @LedgerCredit = 0;
	IF @LedgerDebit IS NULL 
		SET @LedgerDebit = 0;
	RETURN (@OpeningBalance - @LedgerCredit + @LedgerDebit)
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetLedgerClosingBalance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/************************** 01-04-2017 next finanicail year script ***********************************/

CREATE FUNCTION [dbo].[FN_Accounts_GetLedgerClosingBalance] 
(@LedgerId INT, 
@FinancialYearId INT = NULL,
@DateOn DATE = NULL)
RETURNS DECIMAL(18,2)
AS BEGIN
    DECLARE @OpendingBalance DECIMAL(18,2)
    DECLARE @Transaction DECIMAL(18,2)
    DECLARE @ClosingBalance DECIMAL(18,2)
	IF (@FinancialYearId IS NULL)
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE IsNull(@DateOn,GetDate()) Between StartDate And EndDate;
	
	SELECT @OpendingBalance = [dbo].[FN_Accounts_GetLedgerOpeningBalance] (@LedgerId, 0 , @FinancialYearId)
	IF @DateOn IS NULL
		SELECT @Transaction =  [dbo].[FN_Accounts_GetLedgerTransaction] (@LedgerId, 0, @FinancialYearId, NULL,	NULL)
	ELSE
		SELECT @Transaction =  [dbo].[FN_Accounts_GetLedgerTransaction] (@LedgerId, 0, @FinancialYearId, NULL,	@DateOn)

	SET @ClosingBalance = @OpendingBalance + @Transaction

	IF @ClosingBalance IS NULL
		SET @ClosingBalance = 0;
   
	RETURN @ClosingBalance
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetLedgerOpeningBalance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetLedgerOpeningBalance] 
(
@LedgerId INT, 
@TransactionType INT, 
@FinancialYearId INT = NULL)
RETURNS DECIMAL(18,2)
AS BEGIN
    DECLARE @OpeningBalance DECIMAL(18,2)

	DECLARE @pLedgerId INT
	DECLARE @pTransactionType INT
	DECLARE @pFinancialYearId INT = NULL

	SET @pLedgerId			= @LedgerId
	SET @pTransactionType	= @TransactionType
	SET @pFinancialYearId	= @FinancialYearId

	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	IF (@pTransactionType = 0) 
	BEGIN
		SELECT 
		   @OpeningBalance = CASE WHEN OpeningTransactionType = 1 THEN -[OpeningBalance] ELSE [OpeningBalance] END 
		FROM [Accounts_LedgerBalance] 
		WHERE LedgerId = @pLedgerId  AND [Year] = @pFinancialYearId
	END
	ELSE
	BEGIN
		SELECT 
		   @OpeningBalance = [OpeningBalance]
		FROM [Accounts_LedgerBalance] 
		WHERE LedgerId = @pLedgerId  AND [Year] = @pFinancialYearId AND OpeningTransactionType = @pTransactionType
	END
	IF @OpeningBalance IS NULL
		SET @OpeningBalance = 0;
   
	RETURN @OpeningBalance
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetLedgerTransaction]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetLedgerTransaction] (
	@LedgerId INT, 
	@TransactionType INT, 
	@FinancialYearId INT = NULL,
	@FromDate Date = NULL,
	@ToDate Date = NULL)
RETURNS DECIMAL(18,2)
AS BEGIN
    DECLARE @TransactionTotal DECIMAL(18,2)
	DECLARE @pLedgerId INT 
	DECLARE @pTransactionType INT
	DECLARE @pFinancialYearId INT = NULL
	DECLARE @pFromDate Date = NULL
	DECLARE @pToDate Date = NULL

	SET @pLedgerId			= @LedgerId 
	SET @pTransactionType	= @TransactionType
	SET @pFinancialYearId	= @FinancialYearId
	SET @pFromDate			= @FromDate
	SET @pToDate			= @ToDate

	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE IsNull(@pToDate,GetDate()) Between StartDate And EndDate;
	IF (@pFromDate IS NULL OR @pToDate IS NULL)
		SELECT @pFromDate = ISNULL(@pFromDate, StartDate),@pToDate = ISNULL(@pToDate, EndDate) From Accounts_FinancialYear WHERE Id = @pFinancialYearId
	

	IF @pTransactionType = 0
	BEGIN
		SELECT 
			@TransactionTotal = SUM(CASE WHEN TransactionType = 1 THEN -ISNUll(Amount,0) ELSE ISNUll(Amount,0) END)
		FROM [Accounts_VoucherTransaction]  VT (nolock)
		Inner Join Accounts_Vouchers V  (nolock) On V.Id = VT.VoucherId
		WHERE 
			LedgerId = @pLedgerId
			 and vt.fyid=@pFinancialYearId
			AND V.FinancialYear = @pFinancialYearId 
			AND VoucherDate >= @pFromDate And VoucherDate <= @pToDate
			AND V.[Status] Not IN (1,5)
	END
	ELSE
	BEGIN
		SELECT 
			@TransactionTotal = SUM(ISNUll(Amount,0))
		FROM [Accounts_VoucherTransaction] VT  (nolock)
		Inner Join Accounts_Vouchers V (nolock)  On V.Id = VT.VoucherId
		WHERE 
			LedgerId = @pLedgerId AND TransactionType = @pTransactionType
			 and vt.fyid=@pFinancialYearId
			AND V.FinancialYear = @pFinancialYearId 
			AND VoucherDate >= @pFromDate And VoucherDate <= @pToDate
			AND V.[Status] Not IN (1,5)
	END

	IF @TransactionTotal IS NULL
		SET @TransactionTotal = 0;

	RETURN @TransactionTotal
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetOnDateLedgerOpening]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetOnDateLedgerOpening] (
	@LedgerId INT, 
	@TransactionType INT, 
	@FinancialYearId INT = NULL,
	@ToDate Date = NULL)
RETURNS DECIMAL(18,2)
AS BEGIN
    DECLARE @TransactionTotal DECIMAL(18,2)
	DECLARE @pLedgerId INT 
	DECLARE @pTransactionType INT
	DECLARE @pFinancialYearId INT = NULL
	DECLARE @pFromDate Date = NULL
	DECLARE @pToDate Date = NULL

	SET @pLedgerId			= @LedgerId 
	SET @pTransactionType	= @TransactionType
	SET @pFinancialYearId	= @FinancialYearId
	SET @pToDate			= @ToDate

	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE IsNull(@pToDate,GetDate()) Between StartDate And EndDate;
	IF (@pFromDate IS NULL OR @pToDate IS NULL)
		SELECT @pFromDate = ISNULL(@pFromDate, StartDate),@pToDate = ISNULL(@pToDate, EndDate) From Accounts_FinancialYear WHERE Id = @pFinancialYearId
	
	DECLARE @Opening DECIMAL(18,2)=0.0
	 SET @Opening = dbo.[FN_Accounts_GetLedgerOpeningBalance](@LedgerId, 0, @pFinancialYearId)

	IF @pTransactionType = 0
	BEGIN
		SELECT 
			@TransactionTotal = SUM(CASE WHEN TransactionType = 1 THEN -ISNUll(Amount,0) ELSE ISNUll(Amount,0) END)
		FROM [Accounts_VoucherTransaction]  VT
		Inner Join Accounts_Vouchers V On V.Id = VT.VoucherId
		WHERE 
			LedgerId = @pLedgerId
			 and vt.fyid=@pFinancialYearId
			AND V.FinancialYear = @pFinancialYearId 
			AND VoucherDate >= @pFromDate And VoucherDate < @pToDate
			AND V.[Status] Not IN (1,5)
	END
	ELSE
	BEGIN
		SELECT 
			@TransactionTotal = SUM(ISNUll(Amount,0))
		FROM [Accounts_VoucherTransaction] VT
		Inner Join Accounts_Vouchers V On V.Id = VT.VoucherId
		WHERE 
			LedgerId = @pLedgerId AND TransactionType = @pTransactionType
			 and vt.fyid=@pFinancialYearId
			AND V.FinancialYear = @pFinancialYearId 
			AND VoucherDate >= @pFromDate And VoucherDate < @pToDate
			AND V.[Status] Not IN (1,5)
	END

	IF @TransactionTotal IS NULL
		SET @TransactionTotal = @Opening+0;

	RETURN @TransactionTotal+@Opening
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetVoucherAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetVoucherAmount] (@VoucherId INT, @TransactionType INT)
RETURNS DECIMAL(18,0)
AS BEGIN
    DECLARE @FinancialYearId INT
	DECLARE @VoucherBalance DECIMAL(18,2)

	SELECT @FinancialYearId = FinancialYear FROM [Accounts_Vouchers] WHERE Id = @VoucherId
	SELECT @VoucherBalance = SUM([Amount]) FROM [Accounts_VoucherTransaction] 
	Where VoucherId = @VoucherId and TransactionType = @TransactionType and fyid=@FinancialYearId

	IF @VoucherBalance IS NULL 
		SET @VoucherBalance = 0;
	RETURN @VoucherBalance
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetVoucherAmountByStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Accounts_GetVoucherAmountByStatus] (@FinancialYearId INT, @VoucherStatus INT)
RETURNS DECIMAL(18,0)
AS BEGIN
    DECLARE @PendingAmount DECIMAL(18,0)

	SELECT @PendingAmount = 
			SUM([Amount]) 
	FROM [Accounts_VoucherTransaction] 
	Where TransactionType = 1 
	And VoucherId In (Select Id From Accounts_Vouchers Where FinancialYear = @FinancialYearId And [Status] = @VoucherStatus)

	IF @PendingAmount IS NULL 
		SET @PendingAmount = 0;
	RETURN @PendingAmount
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Accounts_GetVoucherCountByAmountMisMatch]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Accounts_GetVoucherCountByAmountMisMatch] (@FinancialYearId INT)
RETURNS INT
AS BEGIN
    DECLARE @Total INT

	--SELECT Count(Id)
	--FROM [Accounts_Vouchers] 
	--Where -- FinancialYear = @FinancialYearId
	---- AND 
	--[dbo].[FN_Accounts_GetVoucherAmount](Id, 1) <> [dbo].[FN_Accounts_GetVoucherAmount](Id, 2)

	IF @Total IS NULL 
		SET @Total = 0;
	RETURN @Total
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_EscapeSQLInjection]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_EscapeSQLInjection] (@data VARCHAR(8000))
RETURNS BIT
AS BEGIN
    IF CHARINDEX('SELECT', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('UPDATE', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('DELETE', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('DROP', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('TRUNCATE', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('ALTER', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('+', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('''', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('"', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('\', @data)>0
		RETURN 0
	ELSE IF CHARINDEX('--', @data)>0
		RETURN 0

	RETURN 1
END

































GO
/****** Object:  UserDefinedFunction [dbo].[FN_Fleet_GetPermitStates]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Fleet_GetPermitStates] (@PermitId INT)
RETURNS VARCHAR(2500)
AS BEGIN
    DECLARE @PermitStates VARCHAR(2500)
	SELECT @PermitStates = STUFF((
	   SELECT ', ' + StateName FROM Fleet_VehiclePermitStates P1
	   INNER JOIN [State] S ON S.Id = P1.StateId
	   WHERE P1.PermitId = @PermitId
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
    RETURN @PermitStates
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Fleet_GetTruckNos]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Fleet_GetTruckNos] (@OwnerId INT)
RETURNS VARCHAR(2500)
AS BEGIN
    DECLARE @PermitStates VARCHAR(2500)
	SELECT @PermitStates = STUFF((
	   SELECT ', ' + VehicleNo FROM Fleet_Vehicle P1
	   WHERE P1.[Owner] = @OwnerId
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
    RETURN @PermitStates
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetAllowToModifyRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[FN_GetAllowToModifyRate]
( 
	@JobId int,
	@LoadDate Date,
	@TruckSource varchar(50),
	@TruckId INT = NULL,
	 @LoadTime INT 
)
RETURNS BIT
AS
BEGIN
	DECLARE @AllowToModifyRate BIT = 0
	IF(@TruckSource='ASSOCIATION')
	BEGIN
		SELECT @AllowToModifyRate = ta.AllowToOverride FROM _Job t
		LEFT OUTER JOIN
		_JobFrieghtAssRules ta ON ta.JobId=t.Id
		WHERE t.Id = @JobId   AND @LoadDate >= ta.DateFrom and @LoadDate <= Isnull(ta.DateTo, '2555-01-01') AND @LoadTime >= isnull(ta.RateTime,0)
	END 
	ELSE
	BEGIN
		SELECT @AllowToModifyRate = tm.AllowToOverride FROM _Job t
		LEFT OUTER JOIN
		_JobFreightMktRules tm ON tm.JobId=t.Id 
		WHERE t.Id = @JobId   AND @LoadDate >= tm.DateFrom and @LoadDate <= Isnull(tm.DateTo, '2555-01-01') AND @LoadTime >= isnull(tm.RateTime,0)
	END
	RETURN @AllowToModifyRate
END




GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetClientRateForChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE FUNCTION [dbo].[FN_GetClientRateForChallan] (@JobId INT, @TruckId INT, @LoadDate DATE, @LoadTime INT)
RETURNS Decimal(18,2)
AS BEGIN
	DECLARE @ClientRate DECIMAL(18,2)=0.00
	DECLARE @Tyre INT=0

	SELECT @Tyre=TotalTyers FROM Fleet_Vehicle WHERE Id=@TruckId

	SELECT @ClientRate=ClientRate FROM _Job J
	OUTER APPLY 
		(SELECT TOP 1 * 
		FROM _WOSectorRate R 
		WHERE R.WOSectorId = J.WOSectorId AND CONVERT(DATE, @LoadDate, 102) >= CONVERT(DATE,R.DateFrom,102) AND Tyre=@Tyre AND TyreShow=1
			AND @LoadTime >= isnull(R.RateTime,0)
		ORDER BY R.DateFrom DESC, isnull(R.RateTime,0) DESC) AS R
	WHERE J.Id=@JobId

	IF IsNull(@ClientRate,0)=0
	BEGIN
		SELECT @ClientRate=ClientRate FROM _Job J
		OUTER APPLY 
			(SELECT TOP 1 * 
			FROM _WOSectorRate R 
			WHERE R.WOSectorId = J.WOSectorId AND CONVERT(DATE, @LoadDate, 102) >= CONVERT(DATE,R.DateFrom,102)
			AND IsNull(TyreShow,0)=0 AND @LoadTime >= isnull(R.RateTime,0)
			ORDER BY R.DateFrom DESC) AS R
		WHERE J.Id=@JobId
	END


    RETURN @ClientRate
END





GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetClientRateForChallanWithRateId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_GetClientRateForChallanWithRateId] (@JobId INT, @TruckId INT, @LoadDate DATE, @LoadTime INT, @LoadId INT)
RETURNS @Ret TABLE (rateid int, rate decimal(18,2), loadid int)
AS BEGIN
	DECLARE @ClientRate DECIMAL(18,2)=0.00
	DECLARE @RateId INT=0
	DECLARE @Tyre INT=0

	SELECT @Tyre=TotalTyers FROM Fleet_Vehicle WHERE Id=@TruckId

	SELECT @ClientRate=ClientRate, @RateId=R.Id FROM _Job J
	OUTER APPLY 
		(SELECT TOP 1 * 
		FROM _WOSectorRate R 
		WHERE R.WOSectorId = J.WOSectorId AND CONVERT(DATE, @LoadDate, 102) >= CONVERT(DATE,R.DateFrom,102) AND Tyre=@Tyre AND TyreShow=1
			AND @LoadTime >= isnull(R.RateTime,0)
		ORDER BY R.DateFrom DESC, isnull(R.RateTime,0) DESC) AS R
	WHERE J.Id=@JobId

	IF IsNull(@ClientRate,0)=0
	BEGIN
		SELECT @ClientRate=ClientRate, @RateId=R.Id FROM _Job J
		OUTER APPLY 
			(SELECT TOP 1 * 
			FROM _WOSectorRate R 
			WHERE R.WOSectorId = J.WOSectorId AND CONVERT(DATE, @LoadDate, 102) >= CONVERT(DATE,R.DateFrom,102)
			AND IsNull(TyreShow,0)=0 AND @LoadTime >= isnull(R.RateTime,0)
			ORDER BY R.DateFrom DESC) AS R
		WHERE J.Id=@JobId
	END

	INSERT INTO @Ret
		SELECT @RateId,@ClientRate, @LoadId

    RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetInvoicePaymentAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_GetInvoicePaymentAmount] (@SettleId INT)
RETURNS DECIMAL(18, 2)
AS
BEGIN
	DECLARE @TotalAmount DECIMAL(18,2)=0
	DECLARE @TransportAmount DECIMAL(18,2)=0
	DECLARE @ImExAmount DECIMAL(18,2)=0

	SELECT @TransportAmount=ISNULL(SUM(ReceivedAmount), 0) + ISNULL(SUM(HandlingReceived), 0)  FROM _InvoicePayment WHERE SettleId=@SettleId
	SELECT @ImExAmount=ISNULL(SUM(ReceivedAmount), 0) FROM ImEx_Payment WHERE SettleId=@SettleId
	SELECT @TotalAmount=Amount FROM _PaymentReceived WHERE Id=@SettleId

	RETURN (@TotalAmount-@TransportAmount-@ImExAmount)
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetInvoiceReceivedAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[FN_GetInvoiceReceivedAmount] (@InvoiceId INT)
RETURNS DECIMAL(18, 2)
AS
BEGIN
	DECLARE @ReceivedAmount DECIMAL(18, 2)= 0.00
    SELECT @ReceivedAmount = SUM(ReceivedAmount) + SUM(ISNULL(TDSAmount, 0)) + SUM(ISNULL(ShortageDeduction, 0)) + SUM(ISNULL(MoistureDeduction, 0))
	                        + SUM(ISNULL(OtherDeduction, 0)) + SUM(ISNULL(HandlingReceived, 0)) 
	FROM _InvoicePayment 
	WHERE InvoiceId = @InvoiceId
	GROUP BY InvoiceId
	RETURN @ReceivedAmount
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetInvoiceTotalAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_GetInvoiceTotalAmount] (@InvoiceId INT)
RETURNS DECIMAL(18, 2)
AS
BEGIN

   DECLARE @PendingAmount DECIMAL(18, 2)= 0.00
   DECLARE @MiscellaneousType BIT = 0

   BEGIN
        SELECT @PendingAmount =(SUM(I.TotalInvoiceAmount) + IsNull(Sum(H.TaxAmount),0.0)  + IsNull(Sum(D.InvoiceTaxAmount * D.AddTaxInAmount), 0.0)) 
        FROM vw_InvoiceAmount  I
        LEFT OUTER JOIN
        (SELECT InvoiceId, SUM(TaxAmount) TaxAmount FROM vw_InvoiceTaxHandlingDetails GROUP BY InvoiceId) H ON H.InvoiceId = I.Id
        LEFT OUTER JOIN 
        vw_InvoiceDetails D ON D.InvoiceId = I.Id
        where I.Id = @InvoiceId
        GROUP BY  I.Id
   END
   
  RETURN @PendingAmount
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetJobFreightRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Select DBO.FN_GetJobFreightRate(97,'2020-06-14', 'MARKET', '59965',1)


CREATE Function [dbo].[FN_GetJobFreightRate](@JobId INT, @LoadDate Date,@TruckSource varchar(50), @TruckId INT = NULL, @LoadTime INT )
RETURNS Decimal(18,2)
AS
BEGIN
	DECLARE @FreightRate Decimal(18,2) = NULL
	DECLARE @AssociationId INT = NULL
	SELECT @AssociationId=AssociationId From Fleet_VehicleAssociations WHERE VehicleId=@TruckId
	
	IF @FreightRate IS NULL AND @TruckId IS NOT NULL
	BEGIN
		DECLARE @Tyre INT=0
		SELECT @Tyre=TotalTyers FROM Fleet_Vehicle WHERE Id=@TruckId

		SELECT TOP 1 @FreightRate = [FreightRate]
		FROM [_JobTyreBaseRules] S
		Where S.JobId = @JobId And TyreId=@Tyre AND  Convert(date,DateFrom,102)<= CONVERT(date, @LoadDate, 102)
			AND @LoadTime >= isnull(S.RateTime,0)
		ORDER BY DateFrom DESC
			
	END

	IF @FreightRate IS NULL AND @TruckId IS NOT NULL
	BEGIN
		SELECT @FreightRate = [FreightRate]
		FROM [_JobFrieghtSpecialRules] S
		Left Join _JobFreightSpecialTruck T On T.JobSpecialFreightId = S.Id
		Where JobId = @JobId And Convert(date,LoadDate,102)<= CONVERT(date, @LoadDate, 102) And 
		(TruckId = @TruckId OR @AssociationId=AssociationId)
	END

	IF @FreightRate IS NULL AND @TruckId IS NOT NULL
	BEGIN
		Declare @PartyId INT
		SELECT @PartyId = [OWNER] From Fleet_Vehicle Where Id = @TruckId
		SELECT @FreightRate = [FreightRate]
		FROM [_JobFrieghtSpecialRules] S
		Left Join _JobFreightSpecialParty T On T.JobSpecialFreightId = S.Id
		Where JobId = @JobId And Convert(date,LoadDate,102)<= CONVERT(date, @LoadDate, 102) And PartyId = @PartyId
	END

	IF @FreightRate IS NULL
	BEGIN
		 IF(@TruckSource='ASSOCIATION')
		 BEGIN
			SELECT @FreightRate = R.FreightRate FROM _Job t
				OUTER APPLY 
				      (SELECT TOP 1 * 
				         FROM _JobFrieghtAssRules R 
				         WHERE t.id=R.JobId AND @LoadDate >= R.DateFrom AND @LoadTime >= R.RateTime
				         ORDER BY R.DateFrom DESC, R.RateTime DESC) AS R
				WHERE t.Id = @JobId
		 END 
		 ELSE
		 BEGIN
				SELECT @FreightRate = R.FreightRate FROM _Job t
				OUTER APPLY 
				      (SELECT TOP 1 * 
				         FROM _JobFreightMktRules R 
				         WHERE t.id=R.JobId AND @LoadDate >= R.DateFrom AND @LoadTime >= R.RateTime
				         ORDER BY R.DateFrom DESC, R.RateTime DESC) AS R
				WHERE t.Id = @JobId
		 END	
	END
	RETURN @FreightRate
END








GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetNetPaybleForChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetNetPaybleForChallan] (@ChallanNo INT)
RETURNS Decimal(18,2)
AS BEGIN
    DECLARE @NetPayble Decimal(18,2)=NULL
	SELECT @NetPayble = v.NetPayable From vw_paymentchallandetails v
			WHERE v.ChallanNo=@ChallanNo AND v.PaymentID IS NOT NULL
	
	IF @NetPayble IS NULL AND EXISTS (SELECT 1 FROM vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo AND UnloadingID IS NOT NULL)
	BEGIN 
		DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		DECLARE @LoadDate DATE
		SELECT  @NetWt=NetWt, @LoadType=LoadType, @Shortage=(CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000, @Wheeler=Wheeler, @JobId=JobId, @TruckSource=(CASE WHEN TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		DECLARE @Penalty DECIMAL(18,2)=0.00
		
		SET @Penalty = (SELECT MAX(CONVERT(DECIMAL(18,2),PenaltyRate*(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),1))
		from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND Wheels=@Wheeler AND JobId=@JobId AND Transporter=@TruckSource)

		DECLARE @JobDeduction DECIMAL(18,2)=0.00
		DECLARE @JobTollGate DECIMAL(18,2)=0.00
		
		SELECT @JobDeduction= (CASE WHEN @TruckSource = 'ASSOCIATION' THEN AssChallanDeduction ELSE MktChallanDeduction End ) FROM PaymentRules WHERE JobId=@JobId AND Wheels=@Wheeler
		
		SELECT @JobTollGate = dbo.[FN_GetTollGateForChallan](@ChallanNo)
		
		SET @JobDeduction=COALESCE(@JobDeduction,0)
		
		SELECT @NetPayble = ROUND(CONVERT(DECIMAL(18,2),(((CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)*Freight)+IsNull(UnloadDetention,0)+IsNull(Detention,0)+@JobTollGate-@JobDeduction-TotalAdvance-COALESCE(@Penalty,0)),1),0)
			
			FROM vw_unloadingchallandetails u
			LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
			LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
			WHERE u.UnloadingId IS NOT NULL AND ChallanNo=@ChallanNo
	END
    RETURN @NetPayble
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetNetPaybleForChallanLive]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetNetPaybleForChallanLive] (@ChallanNo INT)
RETURNS Decimal(18,2)
AS BEGIN
    DECLARE @NetPayble Decimal(18,2)=NULL
	SELECT @NetPayble = v.NetPayable From vw_paymentchallandetails v
			WHERE v.ChallanNo=@ChallanNo AND v.PaymentID IS NOT NULL
	
	IF EXISTS (SELECT 1 FROM vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo AND UnloadingID IS NOT NULL)
	BEGIN 
		DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		SELECT @NetWt=NetWt, @LoadType=LoadType, @Shortage=(CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000, @Wheeler=Wheeler, @JobId=JobId, @TruckSource=(CASE WHEN TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		DECLARE @Penalty DECIMAL(18,2)=0.00
		
		SET @Penalty = (SELECT MAX(CONVERT(DECIMAL(18,2),PenaltyRate*(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),1))
		from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND Wheels=@Wheeler AND JobId=@JobId AND Transporter=@TruckSource)

		DECLARE @JobDeduction DECIMAL(18,2)=0.00
		DECLARE @JobTollGate DECIMAL(18,2)=0.00
		
		SELECT @JobDeduction= (CASE WHEN @TruckSource = 'ASSOCIATION' THEN AssChallanDeduction ELSE MktChallanDeduction End ), @JobTollGate=TollGate FROM PaymentRules WHERE JobId=@JobId AND Wheels=@Wheeler
		SET @JobDeduction=COALESCE(@JobDeduction,0)
		SET @JobTollGate=COALESCE(@JobTollGate,0)
		SELECT @NetPayble = ROUND(CONVERT(DECIMAL(18,2),(((CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)*Freight)+UnloadDetention+Detention+@JobTollGate-@JobDeduction-TotalAdvance-COALESCE(@Penalty,0)),1),0)
			
			FROM vw_unloadingchallandetails u
			LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
			LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
			WHERE u.UnloadingId IS NOT NULL AND ChallanNo=@ChallanNo
	END
    RETURN @NetPayble
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetPartyRecoverAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Function [dbo].[FN_GetPartyRecoverAmount](@PartyId INT)      --, @ChallanNo INT
RETURNS Decimal(18,2)
AS
BEGIN
	DECLARE @RecoverAmount Decimal(18,2) = NULL

	--IF @ChallanNo<>0
	--BEGIN
	--	SELECT @RecoverAmount=SUM(RecoveryAdjustment)-SUM(ABS(isnull(Amount,0))) FROM _Recovery WHERE ChallanNo=@ChallanNo
	--END
	--ELSE
	IF @RecoverAmount IS NULL AND @PartyId IS NOT NULL
	BEGIN
		SELECT @RecoverAmount=SUM(RecoveryAdjustment)-SUM(ABS(isnull(Amount,0))) FROM _Recovery WHERE PartyId=@PartyId
	END
	RETURN @RecoverAmount
END




GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetPenaltyForChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetPenaltyForChallan] (@ChallanNo INT)
RETURNS Decimal(18,2)
AS BEGIN
    DECLARE @Penalty Decimal(18,2) = 0.000
	DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		SELECT @NetWt=L.NetWt, @LoadType=L.LoadType, @Shortage=(CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000, 
			@Wheeler=V.TotalTyers, @JobId=L.JobId, @TruckSource=(CASE WHEN L.TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from LoadingChallan L 
			LEFT OUTER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
			LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
			WHERE L.ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		
		SET @Penalty = (SELECT MAX(CONVERT(DECIMAL(18,2),PenaltyRate*(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),1))
		from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND Wheels=@Wheeler AND JobId=@JobId AND Transporter=@TruckSource)

    RETURN IsNull(@Penalty,0)
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetPenaltyForUnload]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  FUNCTION [dbo].[FN_GetPenaltyForUnload] (@UnloadingId INT)
RETURNS Decimal(18,2)
AS BEGIN
    DECLARE @Penalty Decimal(18,2) = 0.000
	DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		SELECT @NetWt=L.NetWt, @LoadType=L.LoadType, @Shortage=(CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000, 
			@Wheeler=V.TotalTyers, @JobId=L.JobId, @TruckSource=(CASE WHEN L.TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from UnLoadingChallan U 
			LEFT OUTER JOIN LoadingChallan L ON U.LoadingChallanId=L.Id
			LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
			WHERE U.Id=@UnloadingId
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		
		SET @Penalty = (SELECT MAX(CONVERT(DECIMAL(18,2),PenaltyRate*(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),1))
		from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND Wheels=@Wheeler AND JobId=@JobId AND Transporter=@TruckSource)

    RETURN @Penalty
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetTollGateForChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetTollGateForChallan] (@ChallanNo INT)
RETURNS Decimal(18,2)
AS BEGIN
    DECLARE @TollGate Decimal(18,2)=NULL
	SELECT @TollGate = p.TollGate From payment p inner join loadingchallan l on l.id=p.LoadingId 
			WHERE l.ChallanNo=@ChallanNo
	
	IF @TollGate IS NULL
	BEGIN 
		DECLARE @JobId INT=0
		DECLARE @LoadDate DATE
		DECLARE @TyreId INT
		DECLARE @LoadingId INT

		SELECT @LoadingId=L.Id, @LoadDate=CONVERT(DATE,LoadDate,3), @JobId=JobId, @TyreId=F.TotalTyers from LoadingChallan L INNER JOIN Fleet_Vehicle F ON F.Id=L.TruckId
			 WHERE ChallanNo=@ChallanNo
		
		
		/*IF @TollGate IS NULL
		BEGIN
			SELECT @TollGate = SUM(Amount) from (
				select G.Id, TollGate, G.TollGateId, Amount, row_number() over(partition by G.TollGateId order by DateFrom desc) as rn
				from  _MultipleTollGate G 
				INNER JOIN _TollGate T ON T.Id=G.TollGateId 
				WHERE G.IsDefault=1 AND DateFrom<=CONVERT(DATE,@LoadDate,102) AND JobId=@JobId AND TyreId=@TyreId)M WHERE rn=1
		END*/

	END
    RETURN IsNull(@TollGate,0)
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ImEx_GenerateJobNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_ImEx_GenerateJobNo] 
(@ClientCode VARCHAR(50), 
@JobCode VARCHAR(50),
@TNo INT,
@FYCode VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @JobNo VARCHAR(50)
	SELECT @JobNo = @ClientCode + '/' + @JobCode + '/' + isnull(replicate('0',(3)-len(@TNo)),'') +Convert(Varchar,@TNo) + '/' + @FYCode
    RETURN @JobNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_ImEx_GetInvoiceGST]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_ImEx_GetInvoiceGST](@JobId INT)
RETURNS INT
AS
BEGIN
    DECLARE @GST INT    -- 1 means Local GST, 0 means interstate GST 
	SELECT @GST=( CASE 
			WHEN ISNULL(BL.[State],0) = ISNULL(L.[State],0) 
			 THEN 1
			ELSE 0
	     END)
		FROM ImEx_Invoice I 
		LEFT JOIN
		ImEx_Job J ON J.Id=I.JobId
		LEFT JOIN
		Common_Branch B ON B.Id=J.BranchId
		LEFT JOIN 
		Accounts_Ledgers BL ON BL.Id=B.LedgerId
		LEFT JOIN
		Common_Client C ON C.Id=J.ClientId
		LEFT JOIN 
		Accounts_Ledgers L ON L.Id=C.LedgerId
		WHERE I.JobId=@JobId
    RETURN @GST
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateBulkLoadingAdvanceRefNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateBulkLoadingAdvanceRefNo] 
(@FyNoName VARCHAR(50), 
 @RNo INT)
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @RefNo VARCHAR(50)
    SELECT @RefNo = 'LBP/' +@FyNoName + '/' + ISNULL(REPLICATE('0',(5) - LEN(@RNo)),'') + CONVERT(Varchar,@RNo) 
    RETURN @RefNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateBulkTokenRefNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[FN__GenerateBulkTokenRefNo] 
(@FyNoName VARCHAR(50), 
 @RNo INT)
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @RefNo VARCHAR(50)
    SELECT @RefNo = 'TBP/' +@FyNoName + '/' + ISNULL(REPLICATE('0',(5) - LEN(@RNo)),'') + CONVERT(Varchar,@RNo) 
    RETURN @RefNo
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateGSTBillNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateGSTBillNo] 
(@INo_CompanyCode VARCHAR(50), 
@INo_ClientCode VARCHAR(50),
@INo_GSTNo VARCHAR(50),
@INo_ClientNo INT,
@INo_FYName VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @InvoiceNo VARCHAR(50)
	--SET @InvoiceNo = concat(@INo_CompanyCode,'/',@INo_ClientCode,'/',@INo_JobType,'/',isnull(replicate('0',(3)-len(@INo_ClientNo)),'')+CONVERT(varchar,@INo_ClientNo),'/',@INo_FYName)
    SET @InvoiceNo = ''+concat(substring(@INo_GSTNo,1,3),'/',substring(@INo_ClientCode,1,3),'/',@INo_FYName, '/',isnull(replicate('0',(3)-len(@INo_ClientNo)),'')+CONVERT(varchar,@INo_ClientNo))    
	RETURN @InvoiceNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateInvoiceNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateInvoiceNo] 
(@INo_CompanyCode VARCHAR(50), 
@INo_ClientCode VARCHAR(50),
@INo_JobType VARCHAR(50),
@INo_ClientNo INT,
@INo_FYName VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @InvoiceNo VARCHAR(50)
	SET @InvoiceNo = concat(@INo_CompanyCode,'/',@INo_ClientCode,'/',@INo_JobType,'/',@INo_FYName,'/',isnull(replicate('0',(3)-len(@INo_ClientNo)),'')+CONVERT(varchar,@INo_ClientNo))
    RETURN @InvoiceNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateOfferNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateOfferNo] 
(@BCode VARCHAR(50), 
@PCode VARCHAR(50),
@MCode VARCHAR(50),
@TNo INT,
@FY VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @RefNo VARCHAR(50)
	SELECT @RefNo = @BCode + '/' + @MCode + '/' + Convert(Varchar,@TNo) + '/' + @FY
    RETURN @RefNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateRefNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateRefNo] 
(@BCode VARCHAR(50), 
@PCode VARCHAR(50),
@MCode VARCHAR(50),
@Id INT,
@FY VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @TokenNo VARCHAR(50)
	SELECT @TokenNo = @BCode +  '/' + Convert(Varchar,@Id) 
    RETURN @TokenNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateTempGSTBillNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateTempGSTBillNo] 
(@INo_ClientCode VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @InvoiceNo VARCHAR(50)
	DECLARE @INo_GSTNo VARCHAR(50)
	DECLARE @INo_ClientNo VARCHAR(50)
	DECLARE @INo_FYName VARCHAR(50)
	SELECT @INo_FYName = ISNULL(NameForInvoice,Concat(RIGHT(YEAR(GETDATE()), 2), '-', RIGHT(YEAR(GETDATE()), 2) + 1)) FROM [Accounts_FinancialYear] Where GETDATE() >= StartDate And GETDATE() <= EndDate
	SELECT @INo_ClientNo = (ISNULL(MAX(INo_ClientNo),0))+ 1 FROM [_Invoice]
			WHERE [_Invoice].INo_ClientCode = @INo_ClientCode AND INo_FYName = @INo_FYName
	SELECT @INo_GSTNo = (ISNULL(MAX(GSTNo),0))+ 1 FROM [_Invoice]
			WHERE INo_FYName = @INo_FYName
	--SET @InvoiceNo = concat(@INo_CompanyCode,'/',@INo_ClientCode,'/',@INo_JobType,'/',isnull(replicate('0',(3)-len(@INo_ClientNo)),'')+CONVERT(varchar,@INo_ClientNo),'/',@INo_FYName)
    SET @InvoiceNo = ''+concat(substring(@INo_GSTNo,1,3),'/',substring(@INo_ClientCode,1,3),'/',@INo_FYName, '/',isnull(replicate('0',(3)-len(@INo_ClientNo)),'')+CONVERT(varchar,@INo_ClientNo))    
	RETURN @InvoiceNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GenerateTokenNo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GenerateTokenNo] 
(@BCode VARCHAR(50), 
@PCode VARCHAR(50),
@MCode VARCHAR(50),
@TNo INT,
@FY VARCHAR(50))
RETURNS VARCHAR(50)
AS BEGIN
    DECLARE @TokenNo VARCHAR(50)
	SELECT @TokenNo = @BCode + '/' + @PCode + '/' + @MCode + '/' + Convert(Varchar,@TNo) + '/' + @FY
    RETURN @TokenNo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GetAdvanceDisbrushed]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GetAdvanceDisbrushed] (@DateFrom DATE, @DateTo DATE, @BranchId INT = NULL)
RETURNS INT
AS BEGIN
    DECLARE @TotalDisbrushed INT

	SELECT @TotalDisbrushed = IsNull(SUM(IsNull(Advance,0)),0) 
	From LoadingChallan L1
	Left Join JobDetails J1 On J1.Id = L1.JobId
	Where (@BranchId IS NULL OR J1.BranchId = @BranchId) AND L1.LoadDate >= @DateFrom And LoadDate <= @DateTo

	IF @TotalDisbrushed IS NULL 
		SET @TotalDisbrushed = 0;
	RETURN @TotalDisbrushed
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GetChallanInvoiceStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN__GetChallanInvoiceStatus] 
(@ChallanNo INT = NULL)
RETURNS INT
AS BEGIN
	DECLARE @InvoiceStatus INT = 0
	DECLARE @ClaimType INT = 0

	SELECT @ClaimType=I.ClaimQtyType FROM _Invoice I
	LEFT OUTER JOIN
	_InvoiceChallan IC ON IC.InvoiceId=I.Id WHERE IC.ChallanNo=@ChallanNo

	IF EXISTS (SELECT * FROM _InvoiceChallan WHERE ChallanNo=@ChallanNo AND @ClaimType != 3)
	BEGIN
		SELECT @InvoiceStatus=COUNT(UnloadingChallan.Id)
        FROM UnloadingChallan
        WHERE EXISTS (SELECT Id FROM LoadingChallan WHERE Id = UnloadingChallan.LoadingChallanId AND ChallanNo= @ChallanNo)  
    END
	RETURN @InvoiceStatus
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__GetSTONo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN__GetSTONo] (@JobId INT, @InvoiceId INT = NULL)
RETURNS VARCHAR(MAX)
AS BEGIN
    DECLARE @STONo VARCHAR(2500) = ''
	DECLARE jobCostCenterCur CURSOR FOR 
	SELECT Distinct STONo From vw_unloadingchallandetails UL 
	JOIN _InvoiceChallan IC ON IC.ChallanNo = UL.ChallanNo
	Where UL.JobId = @JobId AND  (@InvoiceId IS NULL OR IC.InvoiceId = @InvoiceId )

	OPEN jobCostCenterCur
	DECLARE @tempSTONo VARCHAR(2500) = NULL
	FETCH NEXT FROM jobCostCenterCur INTO @tempSTONo
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		IF @tempSTONo IS NOT NULL
		BEGIN
			IF LEN(@STONo) > 0
				SET @STONo = @STONo + ', '
			SET @STONo = @STONo + @tempSTONo
		END
		FETCH NEXT FROM jobCostCenterCur INTO @tempSTONo
	END
	CLOSE jobCostCenterCur
	DEALLOCATE jobCostCenterCur



	--SELECT @STONo = STONo 
	--FROM vw_unloadingchallandetails
	--WHERE 
	--	JobId=@JobId 
	--	AND (	@InvoiceId IS NULL 
	--			OR ChallanNo IN (SELECT ChallanNo From _InvoiceChallan Where INvoiceId = @InvoiceId)
	--		)
    RETURN @STONo
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN__ValidateTokenBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[FN__ValidateTokenBulkPayment](@BulkPaymentId Int, @Mode VARCHAR(50))
Returns Varchar(Max)
AS
Begin
	DECLARE @ErrorMsg VARCHAR(5000) = NULL
	DECLARE @Type INT = 0
	
	IF @Mode <> 'LOAD' AND  @Mode <> 'TOKEN'
		SET @ErrorMsg = 'Invalid Mode passed in [FN__ValidateTokenBulkPayment] ' + IsNull(@Mode, 'NA')
	IF @ErrorMsg IS NULL
	BEGIN
		IF @Mode = 'TOKEN'
			SELECT @Type = IsNull(BankNameId,-1) From _TokenBulkPayment Where Id = @BulkPaymentId
		ELSE IF @Mode = 'LOAD'
			SELECT @Type = IsNull(BankNameId,-1) From LoadingAdvanceBulkPayment Where Id = @BulkPaymentId
		IF @Type = -1
		BEGIN
			IF @Mode = 'TOKEN'
				Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
					P.PartyName, ' - '
					,(Case when P.BankACNo is null then 'A/C No Not found. ' else '' end)
					,(Case when P.IFSCCode is null then 'IFSC Code Not found ' else '' end)
					) as Name From _TokenBulkPaymentId I
				Left Join _TokenBulkPayment B On B.Id = I.BulkPaymentId
				Left Join _Token  T On T.Id = I.TokenId
				Left Join Common_Parties P On P.Id = T.PartyId
				Where  B.Id = @BulkPaymentId And (P.BankACNo IS NULL  OR P.IFSCCode IS NULL) 
				FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
			ELSE IF @Mode = 'LOAD'
				Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
					P.PartyName, ' - '
					,(Case when P.BankACNo is null then 'A/C No Not found. ' else '' end)
					,(Case when P.IFSCCode is null then 'IFSC Code Not found ' else '' end)
					) as Name From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join Common_Parties P On P.Id = T.PartyId
				Where  B.Id = @BulkPaymentId And (P.BankACNo IS NULL  OR P.IFSCCode IS NULL) 
				FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
		END
		ELSE
		BEGIN
			IF @Mode = 'TOKEN'
				Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
					P.PartyName, ' - '
					,(Case when P.BankACNo is null then 'A/C No Not found. ' else '' end)
					,(Case when P.IFSCCode is null then 'IFSC Code Not found ' else '' end)
					) as Name From _TokenBulkPaymentId I
				Left Join _TokenBulkPayment B On B.Id = I.BulkPaymentId
				Left Join _Token  T On T.Id = I.TokenId
				Left Join Common_Parties P On P.Id = T.PartyId
				Where  B.Id = @BulkPaymentId And (P.BankACNo IS NULL OR P.IFSCCode IS NULL)
				FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '') 
			ELSE IF @Mode = 'LOAD'
				Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
					P.PartyName, ' - '
					,(Case when P.BankACNo is null then 'A/C No Not found. ' else '' end)
					,(Case when P.IFSCCode is null then 'IFSC Code Not found ' else '' end)
					) as Name From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join Common_Parties P On P.Id = T.PartyId
				Where  B.Id = @BulkPaymentId And (P.BankACNo IS NULL OR P.IFSCCode IS NULL)
				FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '') 
			IF (@ErrorMsg IS NULL)
			BEGIN
				IF @Mode = 'TOKEN'
					Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
						P.PartyName, ' - Bank '
						,Bank.Name
						) as Name From _TokenBulkPaymentId I
					Left Join _TokenBulkPayment B On B.Id = I.BulkPaymentId
					Left Join _Token  T On T.Id = I.TokenId
					Left Join Common_Parties P On P.Id = T.PartyId
					Left Join Common_BankNames Bank On Bank.Id = I.BankNameId
					Where  B.Id = @BulkPaymentId AND B.BankNameId <> IsNull(I.BankNameId,-1)
					FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
				ELSE IF @Mode = 'LOAD'
					Select   @ErrorMsg = STUFF((Select ' \n ' + Concat(
						P.PartyName, ' - Bank '
						,Bank.Name
						) as Name From LoadingAdvanceBulkPaymentId I
					Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
					Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
					Left Join Common_Parties P On P.Id = T.PartyId
					Left Join Common_BankNames Bank On Bank.Id = P.BankName
					Where  B.Id = @BulkPaymentId AND B.BankNameId <> IsNull(P.BankName,-1)
					FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
				IF @ErrorMsg IS NOT NULL
				BEGIN
					SET @ErrorMsg = 'Following banks does not match with Payment Type \n ' + @ErrorMsg
				END
			END
		END
	END
	IF @ErrorMsg IS NULL AND @Mode = 'LOAD'
	BEGIN
		DECLARE @ExecutingBranch VARCHAR(2500)
		SELECT @ExecutingBranch = STUFF((
		SELECT ', ' +  L.executingbranchname FROM LoadingAdvanceBulkPaymentId B
		Left Join LoadingAdvance LA ON LA.Id = B.LoadingAdvId
		Left Join vw_loadingchallandetails L ON L.LoadingId = LA.LoadingId
		Where BulkPaymentId = @BulkPaymentId
		Group BY L.executingbranchname
		FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
		if CHARINDEX(',',@ExecutingBranch) > 0
			SET @ErrorMsg = 'Challans from multiple branches are not allowed in bulk payment.\n Branches - \n' + @ExecutingBranch
	END
	return @ErrorMsg
End
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Treanzol_GetAssoBranchName]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[FN_Treanzol_GetAssoBranchName] (@UserId INT)
RETURNS VARCHAR(2500)
AS BEGIN
    DECLARE @AssoBranch VARCHAR(2500)
	SELECT @AssoBranch = STUFF((
	   SELECT ', ' + Name FROM UserBranchAccess P1
	   INNER JOIN Common_Branch S ON S.Id = P1.BranchId
	   WHERE P1.UserId = @UserId
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
    RETURN @AssoBranch
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_Treanzol_GetJobAdvanceSupervisors]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FN_Treanzol_GetJobAdvanceSupervisors] (@AdvanceDetailId INT)
RETURNS VARCHAR(2500)
AS BEGIN
    DECLARE @Supervisors VARCHAR(2500)
	SELECT @Supervisors = STUFF((
	   SELECT ', ' + IsNUll(Name,UserName) FROM _AdvanceDetailsSupervisor P1
	   INNER JOIN [Users] S ON S.Id = P1.SupervisorId
	   WHERE P1.AdvanceDetailId = @AdvanceDetailId
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
    RETURN @Supervisors
END
GO
/****** Object:  UserDefinedFunction [dbo].[i3MS_GetUrl]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[i3MS_GetUrl](@LesseeId INT)
RETURNS VARCHAR(5000)
AS BEGIN
	DECLARE @LesseUrl VARCHAR(5000)
	Select @LesseUrl = 	'http://ds.orissaminerals.gov.in/EXPORT2EXCEL.ASPX?TYPE=today&P_TYPE=LESSEE&P_ID='+L.Code+'&P_DATETYPE=today&P_VCH_CIRCLE_ID='+Convert(Varchar,C.Code)+'&P_ACTION_TYPE=A' 
	From i3MS_Lessee L
	Left Join i3MS_Circle C On C.Id = L.CircleId
	Where L.Id = @LesseeId
	RETURN @LesseUrl
END
GO
/****** Object:  UserDefinedFunction [dbo].[PenaltyRulesNeew]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--select * from [dbo].[ufnPenaltyInformation](2)

CREATE FUNCTION [dbo].[PenaltyRulesNeew](@ChallanNo int)
RETURNS @PenaltyData TABLE 
(
    -- Columns returned by the function
    Penalty DECIMAL(18,2), 
	PenaltyRate DECIMAL(18,3),
	PenaltyWt DECIMAL(18,2),
	Shortage DECIMAL(18,2)
)
AS 
-- Returns the first name, last name, job title, and contact type for the specified contact.
BEGIN
    DECLARE @Penalty Decimal(18,2) = 0.000
	DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @Waiver DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		SELECT	@NetWt=L.NetWt,
				@LoadType=L.LoadType, 
				@Shortage=(CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000, 
				@Wheeler=V.TotalTyers, 
				@JobId=L.JobId, 
				@TruckSource=(CASE WHEN L.TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from LoadingChallan L 
			LEFT OUTER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
			LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
			WHERE L.ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @PenaltyWt DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		DECLARE @RateCount INT = 0;

		SET @PenaltyWt = (SELECT CONVERT(DECIMAL(18,2),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),0) PenaltyWt from transportershortage WHERE  JobId=@JobId AND @Shortage BETWEEN MinWeight AND MaxWeight)
		
		SET @RateCount = (select COUNT(PenaltyRate) from transportershortage  WHERE  JobId=@JobId) --AND @Shortage BETWEEN MinWeight AND MaxWeight AND @PenaltyWt>0)

		IF @RateCount>1
		BEGIN 
				DECLARE @Rate1 Decimal(18,2) = 0;
				DECLARE @Rate2 Decimal(18,2) = 0;
				DECLARE @Rate3 Decimal(18,2) = 0;
				SET @Rate1 = (
                     SELECT MIN(PenaltyRate) FROM TransporterShortage where JobId=@JobId)
                     
				SET @Rate2 = (SELECT PenaltyRate FROM (
                     SELECT ROW_NUMBER() OVER (ORDER BY penaltyrate ASC) AS rownumber, * FROM TransporterShortage where JobId=@JobId
                     )  X WHERE rownumber = 2)

					 SET @Rate3 = (
                     SELECT MAX(PenaltyRate) FROM TransporterShortage where JobId=@JobId)

			 	SET @Penalty =
            CASE
              WHEN @PenaltyWt <= 500 THEN @PenaltyWt * @Rate1
              WHEN @PenaltyWt <= 1000 THEN 500 * 5 + (@PenaltyWt - 500) * @Rate2
              ELSE 500 * @Rate1 + 500 * @Rate2 + (@PenaltyWt - 1000) * @Rate3
            END 

		END
		ELSE 
		BEGIN 
		SET @PenaltyRate = (select MAX(PenaltyRate) from transportershortage  WHERE  JobId=@JobId  AND @PenaltyWt>0)
		SET @Penalty = IsNull(@PenaltyRate,0)*IsNull(@PenaltyWt,0)
		END

		

		IF @Penalty IS NULL OR @Penalty=0
		BEGIN
		SET @PenaltyWt = (SELECT CONVERT(DECIMAL(18,2),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),0) PenaltyWt from transportershortage WHERE  JobId=@JobId)
		
		SET @RateCount = (select COUNT(PenaltyRate) from transportershortage  WHERE  JobId=@JobId) --AND @Shortage BETWEEN MinWeight AND MaxWeight AND @PenaltyWt>0)

		IF @RateCount>1
		BEGIN 
				SET @Rate1 = (
                     SELECT MIN(PenaltyRate) FROM TransporterShortage where JobId=@JobId)
                     
				SET @Rate2 = (SELECT PenaltyRate FROM (
                     SELECT ROW_NUMBER() OVER (ORDER BY penaltyrate ASC) AS rownumber, * FROM TransporterShortage where JobId=@JobId
                     )  X WHERE rownumber = 2)

					 SET @Rate3 = (
                     SELECT MAX(PenaltyRate) FROM TransporterShortage where JobId=@JobId)

			 	SET @Penalty =
            CASE
              WHEN @PenaltyWt <= 500 THEN @PenaltyWt * @Rate1
              WHEN @PenaltyWt <= 1000 THEN 500 * 5 + (@PenaltyWt - 500) * @Rate2
              ELSE 500 * @Rate1 + 500 * @Rate2 + (@PenaltyWt - 1000) * @Rate3
            END 

		END
		ELSE 
		BEGIN 
		SET @PenaltyRate = (select MAX(PenaltyRate) from transportershortage  WHERE  JobId=@JobId  AND @PenaltyWt>0)
		SET @Penalty = IsNull(@PenaltyRate,0)*IsNull(@PenaltyWt,0)
		END
		END
    BEGIN
        INSERT @PenaltyData
        SELECT @Penalty, IsNull(@PenaltyRate,0), IsNull(@PenaltyWt,0), @Shortage
    END;
    RETURN;
END;
GO
/****** Object:  UserDefinedFunction [dbo].[ufnPenaltyInformation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select * from [dbo].[ufnPenaltyInformation](60252)

--select * from [dbo].[PenaltyRulesNeew](4)

CREATE FUNCTION [dbo].[ufnPenaltyInformation](@ChallanNo int)
RETURNS @PenaltyData TABLE 
(
    -- Columns returned by the function
    Penalty DECIMAL(18,2), 
	PenaltyRate DECIMAL(18,3),
	PenaltyWt DECIMAL(18,2),
	Shortage DECIMAL(18,2)
)
AS 
-- Returns the first name, last name, job title, and contact type for the specified contact.
BEGIN
    DECLARE @Penalty Decimal(18,2) = 0.000
	DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @Waiver DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		SELECT	@NetWt=L.NetWt,
				@LoadType=L.LoadType, 
				@Shortage=(CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000, 
				@Wheeler=V.TotalTyers, 
				@JobId=L.JobId, 
				@TruckSource=(CASE WHEN L.TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from LoadingChallan L 
			LEFT OUTER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
			LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
			WHERE L.ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @PenaltyWt DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyRate DECIMAL(18,2)=0.00
		DECLARE @RateCount INT = 0;

		SET @PenaltyWt = (SELECT TOP 1 CONVERT(DECIMAL(18,2),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),0) PenaltyWt from transportershortage WHERE  JobId=@JobId) --AND @Shortage BETWEEN MinWeight AND MaxWeight)
		
		SET @RateCount = (select COUNT(PenaltyRate) from transportershortage  WHERE  JobId=@JobId) --AND @Shortage BETWEEN MinWeight AND MaxWeight AND @PenaltyWt>0)

		IF @RateCount>1
		BEGIN 
				DECLARE @Rate1 Decimal(18,2) = 0;
				DECLARE @Rate2 Decimal(18,2) = 0;
				DECLARE @Rate3 Decimal(18,2) = 0;
				SET @Rate1 = (
                     SELECT MIN(PenaltyRate) FROM TransporterShortage where JobId=@JobId)
                     
				SET @Rate2 = (SELECT PenaltyRate FROM (
                     SELECT ROW_NUMBER() OVER (ORDER BY penaltyrate ASC) AS rownumber, * FROM TransporterShortage where JobId=@JobId
                     )  X WHERE rownumber = 2)

					 SET @Rate3 = (
                     SELECT MAX(PenaltyRate) FROM TransporterShortage where JobId=@JobId)

			 	SET @Penalty =
            CASE
              WHEN @PenaltyWt <= 500 THEN @PenaltyWt * @Rate1
              WHEN @PenaltyWt <= 1000 THEN 500 * 5 + (@PenaltyWt - 500) * @Rate2
              ELSE 500 * @Rate1 + 500 * @Rate2 + (@PenaltyWt - 1000) * @Rate3
            END 

		END
		ELSE 
		BEGIN 
		SET @PenaltyRate = (select MAX(PenaltyRate) from transportershortage  WHERE  JobId=@JobId  AND @PenaltyWt>0)
		SET @Penalty = IsNull(@PenaltyRate,0)*IsNull(@PenaltyWt,0)
		END

		

		IF @Penalty IS NULL OR @Penalty=0
		BEGIN
		SET @PenaltyWt = (SELECT TOP 1 CONVERT(DECIMAL(18,2),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (40*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		END),0) PenaltyWt from transportershortage WHERE  JobId=@JobId)
		
		SET @RateCount = (select COUNT(PenaltyRate) from transportershortage  WHERE  JobId=@JobId) --AND @Shortage BETWEEN MinWeight AND MaxWeight AND @PenaltyWt>0)

		IF @RateCount>1
		BEGIN 
				SET @Rate1 = (
                     SELECT MIN(PenaltyRate) FROM TransporterShortage where JobId=@JobId)
                     
				SET @Rate2 = (SELECT PenaltyRate FROM (
                     SELECT ROW_NUMBER() OVER (ORDER BY penaltyrate ASC) AS rownumber, * FROM TransporterShortage where JobId=@JobId
                     )  X WHERE rownumber = 2)

					 SET @Rate3 = (
                     SELECT MAX(PenaltyRate) FROM TransporterShortage where JobId=@JobId)

			 	SET @Penalty =
            CASE
              WHEN @PenaltyWt <= 500 THEN @PenaltyWt * @Rate1
              WHEN @PenaltyWt <= 1000 THEN 500 * 5 + (@PenaltyWt - 500) * @Rate2
              ELSE 500 * @Rate1 + 500 * @Rate2 + (@PenaltyWt - 1000) * @Rate3
            END 

		END
		ELSE 
		BEGIN 
		SET @PenaltyRate = (select MAX(PenaltyRate) from transportershortage  WHERE  JobId=@JobId  AND @PenaltyWt>0)
		SET @Penalty = IsNull(@PenaltyRate,0)*IsNull(@PenaltyWt,0)
		END
		END
    BEGIN
        INSERT @PenaltyData
        SELECT @Penalty, IsNull(@PenaltyRate,0), IsNull(@PenaltyWt,0), @Shortage
    END;
    RETURN;
END;
GO
/****** Object:  Table [dbo].[Accounts_Ledgers]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_Ledgers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LedgerName] [varchar](1000) NOT NULL,
	[LedgerType] [int] NOT NULL,
	[Group] [int] NOT NULL,
	[Remarks] [varchar](500) NULL,
	[IsCostCenter] [bit] NOT NULL,
	[ContactName] [varchar](50) NULL,
	[MobileNo] [varchar](50) NULL,
	[Email] [varchar](500) NULL,
	[Address] [varchar](500) NULL,
	[State] [int] NULL,
	[Country] [int] NULL,
	[PinCode] [varchar](50) NULL,
	[TaxType] [int] NULL,
	[TaxPercentage] [decimal](18, 2) NULL,
	[STApplicable] [bit] NOT NULL,
	[STCategory] [int] NULL,
	[IsReconciliation] [bit] NOT NULL,
	[PANNo] [varchar](50) NULL,
	[TDSCategory] [int] NULL,
	[AllowNegativeBalance] [bit] NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[AllowBackDateEntry] [bit] NOT NULL,
	[AllowBackDayEntry] [int] NOT NULL,
	[LGSTId] [int] NULL,
	[IGSTId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Account_Ledgers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_Ledgers] UNIQUE NONCLUSTERED 
(
	[LedgerName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_STCategoryRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_STCategoryRate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[STCategoryId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[DisplayName] [varchar](500) NOT NULL,
	[OutputLedgerId] [int] NOT NULL,
	[InputLedgerId] [int] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_STCategoryRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_STCategory]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_STCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_STCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ServiceTax]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vw_ServiceTax] As
Select 
	STRate.Id as STRateId,
	ST.Id as STId,
	ST.Name As STName, 
	STRate.DisplayName as DisplayName,
	Concat(STRate.DisplayName, ' @ ', P.TaxPercentage, '%') as TaxName, 
	P.TaxPercentage As TaxRate, 
	STRate.DateFrom,
	STRate.DateTo,
	STRate.OutputLedgerId,
	STRate.InputLedgerId,
	P.LedgerName as OutputLedger,
	P.LedgerName AS InputLedgerName
From Accounts_STCategory ST
Left Join Accounts_STCategoryRate STRate  On ST.Id = STRate.STCategoryId
Left Join Accounts_Ledgers P On P.Id = STRate.OutputLedgerId
Left Join Accounts_Ledgers R On R.Id = STRate.InputLedgerId
GO
/****** Object:  Table [dbo].[_InvoiceChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceChallan](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[ChallanNo] [int] NOT NULL,
	[BillingRate] [decimal](18, 2) NOT NULL,
	[CTransactionNo] [varchar](500) NULL,
	[CShortageDeduction] [decimal](18, 3) NULL,
	[CMoistureDeduction] [decimal](18, 2) NULL,
	[COtherDeduction] [decimal](18, 2) NULL,
	[COtherDRemark] [varchar](5000) NULL,
	[CDetention] [decimal](18, 2) NULL,
	[StaticalCharge] [decimal](18, 2) NULL,
	[HandlingRate] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[InvoiceTollGate] [decimal](18, 2) NULL,
	[Miscellaneous] [decimal](18, 2) NULL,
	[Divergen] [decimal](18, 2) NULL,
	[InvoiceClaimQty] [decimal](18, 3) NULL,
	[Distance] [int] NULL,
	[RatePerKm] [decimal](18, 2) NULL,
	[HSDHikeRate] [decimal](18, 2) NULL,
	[ClaimQtyTypeId] [int] NULL,
 CONSTRAINT [PK__InvoiceChallan] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__InvoiceChallan] UNIQUE NONCLUSTERED 
(
	[ChallanNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WorkOrder]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WorkOrder](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[OrderNo] [varchar](50) NOT NULL,
	[OrderDate] [date] NOT NULL,
	[OrderReleaseDate] [date] NULL,
	[OrderStartDate] [date] NOT NULL,
	[OrderEndDate] [date] NOT NULL,
	[PaymentTerm] [int] NOT NULL,
	[ServiceTaxPaybleByParty] [bit] NOT NULL,
	[BaseDieselPrice] [decimal](18, 2) NULL,
	[EscalationImpact] [bit] NOT NULL,
	[EscRemaningMaterial] [decimal](18, 2) NULL,
	[EscMinDiffDieselPrice] [decimal](18, 2) NULL,
	[InvoiceEscalationTerms] [int] NULL,
	[InvoiceEscalationFormat] [int] NULL,
	[ContactName] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
	[ContactEmail] [varchar](50) NULL,
	[ContactFaxNo] [varchar](50) NULL,
	[DetentionRemarks] [varchar](5000) NULL,
	[Remarks] [varchar](5000) NULL,
	[Attachments] [varchar](5000) NULL,
	[LoadType] [varchar](100) NULL,
	[MiningReturn] [bit] NULL,
	[IsInvoiceBeforeUnloading] [bit] NOT NULL,
	[ShowTPNo] [bit] NOT NULL,
	[ShowGateEntryNo] [bit] NOT NULL,
	[ShowSAPNo] [bit] NOT NULL,
	[ShowTPBookNo] [bit] NOT NULL,
	[ShowWayBillNo] [bit] NOT NULL,
	[ShowDO] [bit] NOT NULL,
	[ShowSTO] [bit] NOT NULL,
	[JobId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[WORefNo]  AS (concat('WO/',[ClientCode],'/',isnull(replicate('0',(5)-len([ONo])),'')+CONVERT([varchar],[ONo]))),
	[WOStatus] [int] NOT NULL,
	[ClientCode] [varchar](50) NULL,
	[ONo] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WorkOrder] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_TPDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TPDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOItemId] [int] NULL,
	[TPNo] [varchar](50) NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[StartDate] [date] NOT NULL,
	[EndDate] [date] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[JobId] [int] NULL,
	[Code] [varchar](10) NULL,
	[MktLimit] [decimal](18, 2) NULL,
	[MktUnit] [varchar](5) NULL,
	[MktDeductionType] [varchar](10) NULL,
	[MktPaneltyRate] [decimal](18, 2) NULL,
 CONSTRAINT [PK__TPDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_Job]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_Job](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobNo] [varchar](50) NOT NULL,
	[WOSectorId] [int] NOT NULL,
	[StartDate] [date] NOT NULL,
	[EndDate] [date] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Consignee] [int] NULL,
	[Consigner] [int] NULL,
	[TruckSource] [varchar](50) NULL,
	[ExecutingBranch] [int] NOT NULL,
	[JobStatus] [int] NOT NULL,
	[AdvanceClosingLimit] [int] NULL,
	[ShowClientRate] [bit] NOT NULL,
	[LedgerId] [int] NULL,
	[InvoiceBranchId] [int] NOT NULL,
	[CostCenterId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsLock] [bit] NOT NULL,
	[IsAutoQuantity] [bit] NOT NULL,
	[ConsigneeId] [int] NULL,
	[ConsignerId] [int] NULL,
	[RefName] [varchar](500) NULL,
	[IsMultipleLoading] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[AllowToOverrideInPayment] [bit] NULL,
	[OtherDeducationCashAdv] [decimal](18, 2) NULL,
	[ApplicableDate] [date] NULL,
	[ChallanSerialNo] [varchar](15) NULL,
 CONSTRAINT [PK__Job] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__Job] UNIQUE NONCLUSTERED 
(
	[JobNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingChallan](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanNo] [int] NOT NULL,
	[JobId] [int] NOT NULL,
	[STOId] [int] NULL,
	[DELNo] [varchar](100) NULL,
	[TP] [varchar](50) NULL,
	[CostPerMT] [decimal](18, 2) NULL,
	[LoadDate] [smalldatetime] NOT NULL,
	[Freight] [decimal](18, 2) NOT NULL,
	[Fixed] [bit] NULL,
	[Transhipment] [bit] NULL,
	[LoadType] [varchar](100) NULL,
	[GrossWt] [decimal](18, 3) NULL,
	[TareWT] [decimal](18, 3) NULL,
	[NetWT] [decimal](18, 3) NOT NULL,
	[Moisture] [decimal](18, 3) NULL,
	[MoistureUnit] [varchar](10) NULL,
	[TotalBags] [int] NULL,
	[MaterialValue] [decimal](18, 2) NULL,
	[TruckId] [int] NOT NULL,
	[HSD] [decimal](18, 3) NULL,
	[PumpId] [int] NULL,
	[HSDRate] [decimal](18, 2) NULL,
	[HSDCost] [decimal](18, 2) NULL,
	[Seals] [varchar](250) NULL,
	[AssociationCharge] [decimal](18, 2) NULL,
	[Labor] [decimal](18, 2) NULL,
	[Detention] [decimal](18, 2) NULL,
	[Collection] [decimal](18, 2) NULL,
	[Welfare] [decimal](18, 2) NULL,
	[Other] [decimal](18, 2) NULL,
	[Advance] [decimal](18, 2) NULL,
	[TotalAdvance] [decimal](18, 2) NULL,
	[Remarks] [varchar](2000) NULL,
	[LoadedBy] [int] NULL,
	[LoadedOn] [smalldatetime] NULL,
	[TotalFreight] [decimal](18, 2) NULL,
	[LoadDMT] [decimal](18, 3) NULL,
	[DriverId] [int] NULL,
	[OwnerId] [int] NOT NULL,
	[BrokerId] [int] NULL,
	[AssociationId] [int] NULL,
	[GateEntryNo] [varchar](50) NULL,
	[SAPNo] [varchar](50) NULL,
	[TPBookNo] [varchar](50) NULL,
	[WayBillNo] [varchar](50) NULL,
	[LRNumber] [varchar](50) NULL,
	[ApprovalStatus] [int] NOT NULL,
	[TruckSource] [varchar](50) NULL,
	[GuaranteeWT] [decimal](18, 3) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Distance] [decimal](18, 3) NULL,
	[ValidityDate] [datetime] NULL,
	[WayBillBy] [varchar](20) NULL,
	[ClientInvoiceNo] [varchar](30) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[I3MSDataId] [int] NULL,
	[OldFreightRate] [decimal](18, 2) NULL,
	[VoucherDate] [datetime] NULL,
	[ClientId] [int] NULL,
	[InvoiceClientRate] [decimal](18, 2) NULL,
	[SourceId] [varchar](150) NULL,
	[DestinationId] [varchar](150) NULL,
	[InvoiceClaimQty] [decimal](18, 2) NULL,
	[FreightPayable] [decimal](18, 2) NULL,
	[ChargesQty] [decimal](18, 3) NULL,
	[OtherExpenses] [decimal](18, 2) NULL,
	[TotalHSD] [decimal](18, 2) NULL,
	[UnloadingWt] [decimal](18, 3) NULL,
	[UnloadingDate] [datetime] NULL,
	[VehicleNumber] [varchar](100) NULL,
	[TPId] [int] NULL,
	[TPDId] [int] NULL,
	[GPSAmount] [decimal](18, 2) NULL,
	[OnlineRegAmount] [decimal](18, 2) NULL,
	[MemoNo] [varchar](30) NULL,
	[CommAmount] [decimal](18, 2) NULL,
	[ClientRateId] [int] NULL,
	[RateTime] [int] NULL,
	[BulkLoadId] [int] NULL,
	[IsCommissionApproved] [bit] NULL,
 CONSTRAINT [PK_LoadingChallan] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = ON, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [DF_LoadingChallan_Challan] UNIQUE NONCLUSTERED 
(
	[ChallanNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_Invoice]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_Invoice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NULL,
	[ClientId] [int] NULL,
	[InvoiceNo]  AS (case when [OldInvoiceNo] IS NOT NULL then [OldInvoiceNo] else [dbo].[FN__GenerateGSTBillNo]([INo_CompanyCode],[INo_ClientCode],[GSTNo],[INo_ClientNo],[INo_FYName]) end),
	[InvoiceDate] [smalldatetime] NOT NULL,
	[ClaimQtyType] [int] NULL,
	[ClientRate_NotUsed] [decimal](18, 2) NULL,
	[UseMoisture] [bit] NOT NULL,
	[BillStatus] [varchar](50) NULL,
	[TransactionNo] [varchar](500) NULL,
	[Abatement] [decimal](18, 2) NULL,
	[AddTaxInAmount] [bit] NOT NULL,
	[SubmisstionDate] [date] NULL,
	[Notes] [varchar](5000) NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[INo_CompanyCode] [varchar](50) NULL,
	[INo_ClientCode] [varchar](10) NULL,
	[INo_JobType] [varchar](10) NULL,
	[INo_ClientNo] [int] NULL,
	[INo_FYName] [varchar](20) NULL,
	[OldInvoiceNo] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[IsHandlingInvoice] [bit] NULL,
	[CFFYId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[GSTHideShow] [bit] NULL,
	[GSTNo] [int] NULL,
	[WOrder] [varchar](50) NULL,
	[TDS] [bit] NULL,
	[TDSPercentage] [decimal](18, 2) NULL,
	[InvoiceTaxAmount] [decimal](18, 2) NULL,
	[BranchId] [int] NULL,
	[Statement] [varchar](100) NULL,
	[ChallanDetails] [varchar](100) NULL,
	[PermitNo] [varchar](50) NULL,
	[Permit] [varchar](50) NULL,
	[ManualWO] [varchar](50) NULL,
	[ManualWODdate] [datetime] NULL,
 CONSTRAINT [PK__Invoice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOSectorRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOSectorRate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOSectorId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[ClientRate] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[JobId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[Tyre] [int] NULL,
	[TyreShow] [bit] NULL,
	[RateTime] [int] NULL,
 CONSTRAINT [PK__WOSectorRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOSectorEscalation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOSectorEscalation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectorId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[EscalationName] [varchar](250) NOT NULL,
	[Rate] [decimal](18, 2) NULL,
	[Remarks] [varchar](5000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOSectorEscalation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Groups]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Groups](
	[Id] [int] IDENTITY(100,1) NOT NULL,
	[GroupName] [varchar](20) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__Groups__3213E83FB15C333D] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Groups__6EFCD43455918AE1] UNIQUE NONCLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Groups__6EFCD434EC91FD38] UNIQUE NONCLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Users]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name]  AS ([DisplayName]) PERSISTED,
	[Contact] [varchar](50) NULL,
	[Address] [varchar](50) NULL,
	[UserName] [varchar](50) NOT NULL,
	[Password] [varchar](50) NULL,
	[GroupId] [int] NULL,
	[Email] [varchar](50) NULL,
	[ShiftDate] [smalldatetime] NULL,
	[IsMasterAdmin] [int] NULL,
	[IsActive] [int] NOT NULL,
	[Createdate] [datetime] NULL,
	[CreateBy] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[Deleted] [bit] NULL,
	[DisplayName] [nvarchar](100) NULL,
	[Source] [nvarchar](4) NULL,
	[PasswordHash] [nvarchar](86) NULL,
	[PasswordSalt] [nvarchar](10) NULL,
	[InsertDate] [datetime] NOT NULL,
	[InsertUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[LastDirectoryUpdate] [datetime] NULL,
	[UserId]  AS ([Id]) PERSISTED NOT NULL,
	[UserCategoryId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PrimaryKey_UserId_Id] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UniqueKey_UserId] UNIQUE NONCLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Users__C9F2845602D52432] UNIQUE NONCLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Branch]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Branch](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[BranchCode] [varchar](20) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[BranchGroupId] [int] NULL,
	[Code] [varchar](50) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[AdvanceSubmit] [varchar](5000) NULL,
	[AdvanceVerify] [varchar](5000) NULL,
	[AdvanceApprove] [varchar](5000) NULL,
	[AdvancePayment] [varchar](5000) NULL,
	[AdvanceCC] [varchar](5000) NULL,
	[MaxCashLimit] [decimal](18, 2) NOT NULL,
	[IsHeadOffice] [bit] NOT NULL,
	[IsTokenAttchReq] [bit] NOT NULL,
	[GSTNo] [varchar](50) NULL,
	[GSTDate] [date] NULL,
	[IndirectExps] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Branch] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Common_Branch] UNIQUE NONCLUSTERED 
(
	[BranchCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[Branch]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[Branch] As
SELECT B.[Id]
      ,B.[Name]
      ,B.[Code]
      ,L.[Address]
      ,L.[Email]
      ,L.MobileNo as [Contact]
      ,L.[State] as [StateId]
      ,0 As [Deleted]
      ,ISNULL(B.[UpdateUserId], B.InsertUserId) [CreatedBy]
      ,ISNULL(B.[UpdateDate], B.InsertDate)  As [CreateOn]
      ,B.[BranchCode]
	  ,B.LedgerId
  FROM Common_Branch B
  Left Join Accounts_Ledgers L On L.Id = B.LedgerId

GO
/****** Object:  View [dbo].[vw_userdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_userdetails]
AS
SELECT Users.Id UserId, Users.Name FullName, UserName, Password, Users.Contact, Users.Address, Users.Email, IsMasterAdmin, IsActive, Branch.Id BranchId, Branch.Name BranchName, Branch.BranchCode BranchCode, GroupName  FROM Users
	LEFT OUTER JOIN Branch ON Branch.Id=Users.BranchID
	LEFT OUTER JOIN Groups ON Groups.Id=Users.GroupId




GO
/****** Object:  Table [dbo].[UnloadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnloadingChallan](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingChallanId] [int] NOT NULL,
	[UnloadedGrossWt] [decimal](18, 3) NULL,
	[UnloadedTareWt] [decimal](18, 3) NULL,
	[UnloadedNetWt] [decimal](18, 3) NULL,
	[UnloadedDate] [smalldatetime] NULL,
	[GRNNo] [varchar](50) NULL,
	[UnloadedMoisture] [decimal](18, 3) NULL,
	[UnloadedMoistureUnit] [varchar](2) NULL,
	[Seals] [varchar](250) NULL,
	[Detention] [decimal](18, 3) NULL,
	[UnloadedBags] [int] NULL,
	[Remarks] [varchar](2000) NULL,
	[UnloadedBy] [int] NULL,
	[UnloadedOn] [smalldatetime] NULL,
	[UnloadDMT] [decimal](18, 3) NULL,
	[ClientPenalty] [decimal](18, 2) NULL,
	[RecoverAmount] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UnloadInvoiceClaimQty] [decimal](18, 2) NULL,
 CONSTRAINT [PK_UnloadingChallan] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_BankNames]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_BankNames](
	[Id] [int] NOT NULL,
	[Name] [varchar](150) NOT NULL,
	[BankCode] [varchar](150) NULL,
	[IsBulkPaymentUse] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Banks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Common_Banks] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_PartyType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_PartyType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyType] [varchar](50) NOT NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_PartyType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Common_PartyType] UNIQUE NONCLUSTERED 
(
	[PartyType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Parties]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Parties](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyName] [varchar](350) NOT NULL,
	[PartyType] [int] NOT NULL,
	[PANNumber] [varchar](50) NULL,
	[TDSType] [int] NULL,
	[AdhaarCard] [varchar](50) NULL,
	[ContactNo] [varchar](50) NOT NULL,
	[Email] [varchar](100) NULL,
	[Address] [varchar](500) NULL,
	[State] [int] NULL,
	[Country] [int] NULL,
	[Pincode] [varchar](10) NULL,
	[EmergencyContact] [varchar](50) NULL,
	[EmergencyAddress] [varchar](500) NULL,
	[Remarks] [varchar](500) NULL,
	[HireDate] [date] NULL,
	[IsCompany] [bit] NOT NULL,
	[IsTDSSubmitted] [bit] NOT NULL,
	[LicenseNo] [varchar](50) NULL,
	[LicenseExpire] [date] NULL,
	[Attachments] [varchar](max) NULL,
	[BankACNo] [varchar](50) NULL,
	[BankName] [int] NULL,
	[BankACType] [int] NULL,
	[IFSCCode] [varchar](50) NULL,
	[BankAddress] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[OldTableId] [int] NULL,
	[OldBankName] [varchar](5000) NULL,
	[PartyCode] [varchar](50) NULL,
	[TempUpdate] [bit] NULL,
	[IsBankDetailsVerify] [bit] NULL,
	[NeedToVerifyPan] [bit] NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[LedgerId] [int] NULL,
	[SecondoryContact] [varchar](50) NULL,
	[NoTDS] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[Address1] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[Address3] [varchar](100) NULL,
	[Address4] [varchar](100) NULL,
	[MICRNo] [varchar](100) NULL,
	[branch] [varchar](150) NULL,
 CONSTRAINT [PK_Common_Parties] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_Party]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_Party] AS
Select 
    p.[Id]
      ,p.[PartyName]
      ,p.[PartyType]
      ,p.[PANNumber]
      ,p.[TDSType]
      ,p.[AdhaarCard]
      ,p.[ContactNo]
      ,p.[Email]
      ,p.[Address]
      ,p.[State]
      ,p.[Country]
      ,p.[Pincode]
      ,p.[EmergencyContact]
      ,p.[EmergencyAddress]
      ,p.[Remarks]
      ,p.[HireDate]
      ,p.[IsCompany]
      ,p.[IsTDSSubmitted]
      ,p.[LicenseNo]
      ,p.[LicenseExpire]
      ,p.[Attachments]
      ,p.[BankACNo]
      ,p.[BankName]
      ,p.[BankACType]
      ,p.[IFSCCode]
      ,p.[BankAddress]
      ,p.[InsertUserId]
      ,p.[InsertDate]
      ,p.[UpdateUserId]
      ,p.[UpdateDate]
      ,p.[OldTableId]
      ,p.[OldBankName]
      ,p.[PartyCode]
      ,p.[TempUpdate]
      ,p.[IsBankDetailsVerify],
 Upper(CONCAT(ISNULL(PT.PartyType,''), ':', IsNull(P.ContactNo,''), ':', IsNull(P.PartyName,''), ':' + IsNull(P.PANNumber,'') + ':', CONVERT(VARCHAR(10),P.Id))) as LookupName
From Common_Parties P
Left Join Common_PartyType PT On PT.Id = P.PartyType
GO
/****** Object:  View [dbo].[Broker]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 CREATE View [dbo].[Broker] As 
Select 
	   P.[Id]
      ,PartyName as [Name]
      ,Concat(PartyName, ':', PANNumber,':',ContactNo) As [Code]
      ,[Address]
      ,[Email]
      ,ContactNo As [Contact]
      ,PANNumber as [Pan]
      ,[State] as [StateId]
      ,0 [Deleted]
      ,InsertUserId [CreatedBy]
      ,InsertDate [CreateOn]
      ,B.Name As [BankName]
      ,BankACNo [BankAccount]
      ,IFSCCode [BankIFSC]
	  ,LookupName
FROM vw_Party P
Left Join Common_BankNames B On B.Id = P.BankName
Where PartyType = 4

GO
/****** Object:  View [dbo].[Owner]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[Owner] As 
SELECT P.[Id]
      ,PartyName as [Name]
      ,Concat(PartyName, ':', ContactNo) As [Code]
      ,[Address]
      ,[Email]
      ,ContactNo As [Contact]
      ,PANNumber as [Pan]
      ,[State] as [StateId]
      ,0 [Deleted]
      ,InsertUserId [CreatedBy]
      ,InsertDate [CreateOn]
      ,B.Name As [BankName]
      ,BankACNo [BankAccount]
      ,IFSCCode [BankIFSC]
	  ,LookupName
FROM vw_Party P
Left Join Common_BankNames B On B.Id = P.BankName
Where PartyType = 1 -- Owner

GO
/****** Object:  View [dbo].[Driver]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[Driver] As 
SELECT P.[Id]
      ,PartyName as [Name]
      ,Concat(PartyName, ':', ContactNo) As [Code]
      ,[Address]
      ,[Email]
      ,ContactNo As [Contact]
      ,PANNumber as [Pan]
      ,[State] as [StateId]
      ,0 [Deleted]
      ,InsertUserId [CreatedBy]
      ,InsertDate [CreateOn]
      ,'DL' [driverid]
      ,P.LicenseNo [driveriddetail]
	  ,LookupName
FROM vw_Party P
Left Join Common_BankNames B On B.Id = P.BankName
Where PartyType = 2 --Driver

GO
/****** Object:  Table [dbo].[Pump]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Pump](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DieselRate] [decimal](18, 2) NULL,
	[PetrolRate] [decimal](18, 2) NULL,
	[PumpNameId] [int] NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Createdby] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Pump_Id] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Vehicle]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Vehicle](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleNo] [varchar](50) NOT NULL,
	[ModelYear] [int] NULL,
	[TotalTyers] [int] NULL,
	[MaxLoadLimit] [decimal](18, 2) NULL,
	[Model] [int] NULL,
	[VehicleType] [int] NULL,
	[FuelType] [int] NULL,
	[RegistrationDate] [datetime] NULL,
	[ChassisNo] [varchar](50) NULL,
	[EngineNo] [varchar](50) NULL,
	[Owner] [int] NOT NULL,
	[Attachments] [varchar](500) NULL,
	[Remarks] [varchar](1000) NULL,
	[OldTableId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsBlocked] [bit] NOT NULL,
	[i3MSOwner] [varchar](50) NULL,
	[i3MSOwnerAddress] [varchar](1000) NULL,
	[HappayCard] [varchar](50) NULL,
	[IsVerify] [bit] NOT NULL,
	[IsApprove] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[AssoDecExpiry] [date] NULL,
	[GPSAmount] [decimal](18, 2) NULL,
	[OnlineRegAmount] [decimal](18, 2) NULL,
 CONSTRAINT [PK_Fleet_Vehicles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_Vehicle] UNIQUE NONCLUSTERED 
(
	[VehicleNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Consig]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Consig](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CType] [varchar](50) NOT NULL,
	[CName] [varchar](500) NOT NULL,
	[GSTNo] [varchar](50) NULL,
	[CAddress] [varchar](2000) NULL,
	[PinCode] [varchar](50) NULL,
	[StateId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Consig] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[i3MS_Circle]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_Circle](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](150) NOT NULL,
	[Code] [int] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_i3MS_Circle] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_i3MS_Circle] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_i3MS_Circle_1] UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__JobApprovals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Materials]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Materials](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MaterialName] [varchar](50) NULL,
	[Code] [varchar](3) NULL,
	[CreatedOn] [date] NULL,
	[CreatedBy] [int] NULL,
	[Deleted] [bit] NULL,
	[IsEwayBill] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Materials] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Material__9C87053C2077DB96] UNIQUE NONCLUSTERED 
(
	[MaterialName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Material__9C87053C4B23457B] UNIQUE NONCLUSTERED 
(
	[MaterialName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_ApprovalStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_ApprovalStatus](
	[Id] [int] NOT NULL,
	[StatusType] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Default_ApprovalStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Default_ApprovalStatus] UNIQUE NONCLUSTERED 
(
	[StatusType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnloadingPoints]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnloadingPoints](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Unloading] [varchar](50) NULL,
	[UnloadingCode] [varchar](10) NULL,
	[CreatedOn] [date] NULL,
	[CreatedBy] [varchar](50) NULL,
	[Deleted] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_UnloadingPoints] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Unloadin__476F636F1A85F648] UNIQUE NONCLUSTERED 
(
	[Unloading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Unloadin__476F636F6DDEEE35] UNIQUE NONCLUSTERED 
(
	[Unloading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Unloadin__476F636F9E5ABA66] UNIQUE NONCLUSTERED 
(
	[Unloading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Unloadin__476F636FE649045D] UNIQUE NONCLUSTERED 
(
	[Unloading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingPoints]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingPoints](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Loading] [varchar](50) NULL,
	[LoadingCode] [varchar](50) NULL,
	[CreateOn] [date] NULL,
	[CreateBy] [int] NULL,
	[Deleted] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingPoints] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__LoadingP__DCEE1B7CA19C0903] UNIQUE NONCLUSTERED 
(
	[Loading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__LoadingP__DCEE1B7CB8BAF32E] UNIQUE NONCLUSTERED 
(
	[Loading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__LoadingP__DCEE1B7CCB2DE51F] UNIQUE NONCLUSTERED 
(
	[Loading] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_JobStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_JobStatus](
	[Id] [int] NOT NULL,
	[StatusName] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_JobStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WorkOrderItems]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WorkOrderItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OrderId] [int] NOT NULL,
	[LoadingPoint] [int] NOT NULL,
	[UnLoadingPoint] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Material] [int] NOT NULL,
	[SrvLnNo] [varchar](50) NULL,
	[Description] [varchar](50) NULL,
	[CreateAutoJob] [bit] NOT NULL,
	[LoadType] [varchar](50) NULL,
	[Tolerance] [decimal](18, 2) NULL,
	[ToleranceUnit] [varchar](50) NULL,
	[ClaimQtyType] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RefNo]  AS ('SEC-'+(isnull(replicate('0',(2)-len([WNo])),'')+CONVERT([varchar],[WNo]))),
	[IsHandlingInvoice] [bit] NULL,
	[HandlingInvoiceRate] [decimal](18, 2) NULL,
	[WNo] [int] NULL,
	[IsOverLoadAllowed] [bit] NOT NULL,
	[TransitDays] [int] NULL,
	[TransitDistance] [int] NULL,
	[PenaltyPerDay] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[Circle] [int] NULL,
	[TyreShow] [bit] NULL,
	[Tyre] [int] NULL,
	[AllowToModify] [bit] NULL,
 CONSTRAINT [PK__WorkOrderItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_FreightSectorRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_FreightSectorRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingPoint] [int] NOT NULL,
	[UnloadingPoint] [int] NOT NULL,
	[MaxAssociationRate] [decimal](18, 2) NULL,
	[MaxMarketRate] [decimal](18, 2) NULL,
	[MaxAdvanceLimit] [decimal](18, 2) NOT NULL,
	[MinChallanLost] [decimal](18, 2) NOT NULL,
	[TransitTime] [int] NOT NULL,
	[TransporterPaymentTerm] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__FreightSectorRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__FreightSectorRules] UNIQUE NONCLUSTERED 
(
	[LoadingPoint] ASC,
	[UnloadingPoint] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[jobdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE View [dbo].[jobdetails] As 
SELECT J.[Id]
      ,J.[JobNo]
      ,J.[StartDate]
      ,J.[EndDate]
      ,W.OrderNo as [WO]
      ,S.Material as  [MaterialId]
	   ,S.Circle as  [CircleId]
      ,J.Quantity as [Quantity]
      ,S.Tolerance as [Tolerance]
      ,S.ToleranceUnit as ToleranceUnit
      ,W.ClientId as [ClientId] 
      ,J.ConsigneeId as [ConsigneeId]
      ,J.ConsignerId as [ConsignerId]
      ,/*(Select Top 1 ClientRate From _WOSectorRate SR 
		Where (SR.JobId = J.Id) OR ((SR.JobId IS NULL OR SR.JobId <> J.Id) AND SR.WOSectorId = J.WOSectorId AND J.[StartDate] >= SR.DateFrom And J.StartDate <=  IsNUll(SR.DateTo,'2555-01-01'))
		)*/ R.ClientRate as [ClientRate]
      ,S.LoadingPoint as [LoadingPointId]
      ,S.UnLoadingPoint as [UnloadingPointId]
      ,J.InsertUserId as [CreatedBy]
      ,J.InsertDate as [CreatedOn]
      ,(Case When J.JobStatus = 1 THEN 1 ELSE 0 END) as [Active]
      ,J.ExecutingBranch as [BranchId]
      ,J.LedgerId as [LedgerId]
      ,J.CostCenterId [CostCenterId]
      ,J.TruckSource as [Rules]
      ,J.ShowClientRate as [ShowClientRate]
      ,J.AdvanceClosingLimit as [NextAdvanceDay]
	  ,J.WOSectorId 
	  ,J.JobStatus as RunningStatus
	  ,S.ClaimQtyType
	  ,J.InvoiceBranchId as InvoiceBranchId
	  ,IsNull(Fr.TransitTime, 0.0) as TransitTime
	  ,J.IsAutoQuantity
	  ,W.Id WOId
	  ,IsNULL(S.LoadType,'BOTH') LoadType
	  ,IsMultipleLoading
	  ,S.SrvLnNo, W.OrderDate
	  ,ISNULL(J.OtherDeducationCashAdv,0)OtherDeducationCashAdv
	  ,J.[ApplicableDate]
  FROM _Job J
  Left Join _WorkOrderItems S On S.Id = J.WOSectorId 
  Left Join _WorkOrder W On W.Id = S.OrderId
  Left Join _FreightSectorRules FR On FR.LoadingPoint = S.LoadingPoint AND FR.UnloadingPoint = S.UnLoadingPoint 
  OUTER APPLY 
	(SELECT TOP 1 * 
		FROM _WOSectorRate R 
		WHERE R.WOSectorId = S.Id AND CONVERT(DATE, J.StartDate, 102) >= CONVERT(DATE,R.DateFrom,102)
		ORDER BY R.DateFrom DESC) AS R
GO
/****** Object:  Table [dbo].[Common_Client]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Client](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[GroupId] [int] NOT NULL,
	[ClientCode] [varchar](10) NULL,
	[LedgerId] [int] NOT NULL,
	[PANNo] [varchar](50) NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[BranchName] [varchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[MaxInvoiceAge] [int] NOT NULL,
	[GSTNo] [varchar](50) NULL,
	[GSTDate] [date] NULL,
	[CINNO] [varchar](50) NULL,
	[IECNo] [varchar](50) NULL,
	[Attachments] [varchar](5000) NULL,
	[OName] [varchar](50) NULL,
	[ODept] [varchar](50) NULL,
	[ODesignation] [varchar](50) NULL,
	[OMobileNo] [varchar](50) NULL,
	[OEmail] [varchar](50) NULL,
	[OAddress] [varchar](2000) NULL,
	[InvoiceFormat] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[KYC] [bit] NULL,
	[CompanyName] [varchar](100) NULL,
	[CAddressWithPinCode] [varchar](200) NULL,
	[AlternateName] [varchar](100) NULL,
	[MobileNo1] [varchar](50) NULL,
	[MobileNo2] [varchar](50) NULL,
	[PhoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[GSTReturnFile] [varchar](50) NULL,
	[GSTLastMonthFile] [varchar](50) NULL,
	[CINDateIncorporation] [date] NULL,
	[TypeOfOrganization] [varchar](50) NULL,
	[SSINumber] [varchar](50) NULL,
	[QualitySystemDetails] [varchar](100) NULL,
	[QualityCertificationDetails] [varchar](100) NULL,
	[QSEndDate] [date] NULL,
	[Commodity] [varchar](50) NULL,
	[SACCode] [varchar](50) NULL,
	[RatingAgencyName] [varchar](50) NULL,
	[RatingAgencyRatting] [varchar](50) NULL,
	[ROCSearchReport] [varchar](50) NULL,
	[Authorized] [varchar](50) NULL,
	[PaidCapital] [varchar](50) NULL,
	[LoanAmount] [decimal](18, 2) NULL,
	[LastABSDate] [date] NULL,
	[SPLastOneYear] [varchar](50) NULL,
	[NCLTReport] [varchar](50) NULL,
	[PaymentTerms] [varchar](50) NULL,
	[CPAForPayment] [varchar](50) NULL,
	[ExceptedProfitabilityRatio] [varchar](50) NULL,
	[EPOutstandingVolume] [varchar](50) NULL,
	[ABVolumePerMonth] [varchar](50) NULL,
	[EMDBGSubmitted] [varchar](50) NULL,
	[AlternateOname] [varchar](50) NULL,
	[OAccounts] [varchar](50) NULL,
	[OPhotoNo] [varchar](50) NULL,
	[OFax] [varchar](50) NULL,
	[BizOnlineOffline] [varchar](50) NULL,
	[CPRequestedByClients] [varchar](50) NULL,
	[ContractPeriod] [varchar](50) NULL,
	[BusinessByMarketingGuy] [varchar](50) NULL,
 CONSTRAINT [PK_Common_ClientBranch] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_ClientGroup]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_ClientGroup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[PANNo] [varchar](50) NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Client] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[Client]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[Client] As
SELECT C.[Id]
	  ,G.Name AS GroupName
	  ,Upper(Concat(C.Name, ' (', C.ClientCode, ') : ', C.BranchName)) AS Name
	  ,C.Name as ClientOriginalName
	  ,C.ClientCode
	  ,C.BranchName  as ClientBranchName
      ,Concat(C.Name, ' : ', L.MobileNo)[Code]
      ,L.[Address]
      ,L.[Email]
      ,L.MobileNo As [Contact]
      ,C.[PANNo] as Pan
      ,L.[State] As  [StateId]
      ,0 as [Deleted]
       ,ISNULL(C.[UpdateUserId], C.InsertUserId) [CreatedBy]
      ,ISNULL(C.[UpdateDate], C.InsertDate)  As [CreateOn]
	  ,L.ContactName As ClientContactName
	  ,L.Country as ClientCountry
	  ,L.PinCode as ClientPinCode
  FROM [Common_Client] C
  Left Join Common_ClientGroup G On G.Id = C.GroupId
  Left Join Accounts_Ledgers L On L.Id = C.LedgerId

GO
/****** Object:  View [dbo].[vw_jobdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select * from [vw_jobdetails]

CREATE VIEW [dbo].[vw_jobdetails]
AS
Select XX.*, Upper(AP.StatusType) as JobStatusName  FROM (
select j.Id AS JobId, j.Active, j.Rules, j.OrderDate ,
JobNo, WO, j.StartDate as Job_StartDate, j.EndDate as Job_EndDate,
CONVERT(VARCHAR(10), j.StartDate, 103) JobStartDate, CONVERT(VARCHAR(10), j.EndDate, 103) JobEndDate, J.Quantity JobQuantity, ClientRate
, J.Tolerance, Loading LoadingPoint, Unloading UnloadingPoint, Loading+' TO '+Unloading AS Sector, MaterialName, 
c.Name ClientName, c.ClientCode as ClientCode, C.GroupName as ClientGroup,
j.ClientId, j.ConsigneeId, j.ConsignerId, e.CName ConsigneeName,g.CName ConsignerName, r.Name JobCreatedBy
, CONVERT(VARCHAR(10), j.CreatedOn, 103) JobCreatedOn, j.CreatedOn as Job_CreatedOn, j.BranchId ExecutingBranchId, 
b.Name ExecutingBranchName, b.LedgerId ExecutingBranchLedgerId, j.LedgerId, j.CostCenterId
,IsNull((Select [Status] From _JobApprovals Where Id = (Select Max(Id) From _JobApprovals Where JobId = j.Id)),1) as JobStatus
,C.ClientOriginalName As JobClientName, j.WOSectorId, J.ClaimQtyType
,j.RunningStatus
,js.StatusName as RunningStatusName
,j.InvoiceBranchId
,ib.Name as InvoiceBranchName
,TransitTime
,J.IsAutoQuantity, WOId, J.LoadType, IsMultipleLoading, j.SrvLnNo,j.OtherDeducationCashAdv
,J.[ApplicableDate],ic.Name CircleName
,j.ShowClientRate
,TP.TPNo as PermitNo
,TP.Id AS STOId
from jobdetails j
LEFT OUTER JOIN LoadingPoints l ON l.id = j.loadingpointid
LEFT OUTER JOIN UnLoadingPoints u ON u.id = j.unloadingpointid
LEFT OUTER JOIN Materials m ON m.id = j.MaterialId
LEFT OUTER JOIN Client c ON c.id = j.ClientId
LEFT OUTER JOIN Common_Consig e ON e.id = j.ConsigneeId
LEFT OUTER JOIN Common_Consig g ON g.id = j.ConsignerId
LEFT OUTER JOIN Users r ON r.id = j.CreatedBy
LEFT OUTER JOIN Common_JobStatus js ON js.id = j.RunningStatus
LEFT OUTER JOIN Branch b ON b.Id=j.BranchId
LEFT OUTER JOIN Branch ib ON ib.Id=j.InvoiceBranchId
LEFT OUTER JOIN i3MS_Circle ic ON ic.id = j.CircleId
--LEFT OUTER JOIN _WorkOrder WO ON Wo.ClientId = C.Id
--LEFT OUTER JOIN _WorkOrderItems WOI ON wo.Id = WOI.OrderId
LEFT OUTER JOIN _TpDetails TP on TP.JobId = J.Id
) XX
LEFT JOIN Accounts_ApprovalStatus AP On AP.Id = XX.JobStatus




GO
/****** Object:  Table [dbo].[PumpName]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PumpName](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PumpName] [varchar](50) NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[LedgerId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_PumpName] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE906556EF7] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE908ABD677] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE90B5E3CB8] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9139E982C] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE92A7DCB7F] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE94E9A1F5E] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE95FBEA7CA] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE98B12B46B] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9A089D9CB] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9A5827134] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9D1695677] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9D34AFC71] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__PumpName__F5B16BE9E3F23C60] UNIQUE NONCLUSTERED 
(
	[PumpName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_STODetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_STODetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOItemId] [int] NULL,
	[STONo] [varchar](50) NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[StartDate] [date] NOT NULL,
	[EndDate] [date] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[OldWONo] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__STODetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[STODetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[STODetails] AS 
SELECT S.[Id]
      ,ISNULL(W.OrderNo, [OldWONo]) as WONo
      ,[STONo]
      ,S.[Quantity]
      ,[StartDate]
      ,[EndDate]
	  ,0 as Deleted
      ,ISNULL(S.[UpdateUserId],S.[InsertUserId]) AS [CreatedBy]
      ,ISNULL(S.[UpdateDate],S.[InsertDate]) CreatedOn
  FROM [_STODetails] S
  Left Join _WorkOrderItems WI On WI.Id = S.WOItemId
  Left Join _WorkOrder W On W.Id = WI.OrderId
GO
/****** Object:  Table [dbo].[Fleet_Association]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Association](
	[Id] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[RegistrationNo] [varchar](50) NULL,
	[Address] [varchar](1000) NULL,
	[OldTableId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Associations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_Associations] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[Association]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[Association] As 
Select 
  Id, Name as [Association]
  ,NULL as [CreatedBy]
  ,NULL as [CreatedOn]
  From Fleet_Association

GO
/****** Object:  View [dbo].[vw_loadingchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_loadingchallandetails]
AS
SELECT  LoadDMT, l.Id LoadingId, l.Transhipment, l.TotalAdvance, l.TotalFreight, MaterialValue, CostPerMT, Freight, l.OldFreightRate
		, Advance, HSD,IsNull(HSDCost,0)HSDCost, HSDRate, ChallanNo, l.TotalBags, l.GuaranteeWT, NetWT, Moisture, MoistureUnit
		, CONVERT(VARCHAR(10),LoadDate, 103) LoadDate, l.LoadType, AssociationCharge, 
		Labor, Welfare, Other, l.Detention, Collection, DELNo, l.Seals, l.TP, Fixed, GrossWt, TareWt, l.Remarks
		, CONVERT(VARCHAR(10),l.LoadedOn, 103) LoadedOn, LoadedBy, BranchName LoadBranchName, FullName LoaderName
		, STONo, s.Id STOId
		, t.Id TruckId, t.VehicleNo TruckNumber, t.totaltyers Wheeler, B.Name as BrokerName, D.Name as DriverName,O.Name as OwnerName, O.Pan as OwnerPAN
		, A.Association as AssociationName, l.TruckSource as TruckSource, O.Contact as OwnerContact, D.Contact as DriverContact, B.Contact as BrokerContact
		, Sector, j.JobId, l.TruckSource as Rules, JobNo, WO, MaterialName, ClientName, 
		l.InvoiceClientRate ClientRate, 
		j.JobStartDate, j.JobEndDate
		, j.loadingpoint, j.unloadingpoint, j.executingbranchname, j.JobQuantity,j.ConsigneeName,j.ConsignerName
		,j.ClientId as JobClientId, J.ExecutingBranchId as JobExecutingBranchId
		, PumpName, pump.id PumpId
		,l.GateEntryNo,l.SAPNo,l.TPBookNo,l.WayBillNo,l.LRNumber as LRNumber
		,l.OwnerId as LOwnerId, l.BrokerId as LBrokerId, l.DriverId as LDriverId, l.AssociationId as LAssociationId
		,ApprovalStatus As LoadingApprovalStatus
		,J.InvoiceBranchId
		,J.InvoiceBranchName
		,J.TransitTime
		,J.WOSectorId
		,j.WOId
		,j.OtherDeducationCashAdv
		,J.[ApplicableDate]
		,l.ClientInvoiceNo
		,l.chargesQty
		,l.InvoiceClientRate, l.SourceId, l.DestinationId
		FROM loadingchallan l
LEFT OUTER JOIN vw_jobDetails j ON j.STOId=l.STOId						
LEFT OUTER JOIN STODetails s ON s.Id=l.STOId
LEFT OUTER JOIN Fleet_Vehicle t ON t.Id=l.TruckId
LEFT OUTER JOIN Driver D ON D.Id=l.DriverId
LEFT OUTER JOIN [Owner] O ON O.Id=l.OwnerId
LEFT OUTER JOIN [Broker] B ON B.Id=l.BrokerId
LEFT OUTER JOIN [Association] A ON A.Id=l.AssociationId
LEFT OUTER JOIN pump ON pump.id=l.pumpid
LEFT OUTER JOIN pumpname ON pumpname.id=pump.pumpnameid
LEFT OUTER JOIN vw_userdetails ON LoadedBy=UserId
--WHErE CONVERT(DATE, LoadDate,103)>= CONVERT(DATE,'01/04/2017',103)












GO
/****** Object:  View [dbo].[vw_unloadingchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_unloadingchallandetails]
AS
SELECT l.*, UnloadDMT, u.Id UnloadingId, LoadingChallanId, UnloadedGrossWt,UnloadedTareWt,UnloadedNetWt, UnloadInvoiceClaimQty,
CONVERT(VARCHAR(10),u.UnloadedDate, 103) UnloadedDate,GRNNo
      ,UnloadedMoisture,UnloadedMoistureUnit,u.Seals UnloadSeals,u.Detention UnloadDetention
      ,UnloadedBags,u.Remarks UnloadRemarks,UnloadedBy, CONVERT(VARCHAR(10),u.UnloadedOn, 103) UnloadedOn
	  ,BranchName UnloadBranchName, FullName UnloaderName
	  ,CASE WHEN MoistureUnit='%' THEN NetWt ELSE NetWt+COALESCE(Moisture,0) END ClaimLoad
	  ,CASE WHEN UnloadedMoistureUnit='%' THEN UnloadedNetWt ELSE UnloadedNetWt+COALESCE(UnloadedMoisture,0) END ClaimUnload
	  ,CONVERT(DECIMAL(18,2),Freight*(CASE WHEN IsNull(GuaranteeWT,0) > 0 THEN GuaranteeWT WHEN (UnloadedNetWt IS NULL OR NetWt<ISNULL(UnloadedNetWt,0)) THEN NetWt ELSE UnloadedNetWt END),1) EffectiveAmount
	  ,ClientPenalty
	  ,Convert(INT, (Case When l.TransitTime > 0.0 THEN (DateDiff(DAY, CONVERT(DATETIME,LoadDate, 103), IsNull(UnloadedDate, CONVERT(DATETIME,LoadDate, 103))) - l.TransitTime) Else 0.0 End ))as DelayUnLoading
	  ,U.RecoverAmount AS RecoverAmount
  FROM vw_loadingchallandetails l
  LEFT OUTER  JOIN UnloadingChallan u ON u.LoadingChallanId=LoadingId
  LEFT OUTER  JOIN vw_userdetails ON UnloadedBy=UserId
  -- Where l.LoadingApprovalStatus = 4














GO
/****** Object:  View [dbo].[vw_InvoiceChallanDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vw_InvoiceChallanDetails] as 
	Select *
		,Convert(Decimal(18,2), (XX.ClaimWt * XX.BillingRate)) as ChallanAmount
		,Convert(Decimal(18,2), ((XX.ClaimWt * XX.BillingRate) - COtherDeduction + ChallanDetention + StaticalCharge)) as Amount
		,Convert(Decimal(18,2), (XX.ClaimWt * XX.HandlingRate)) as HandlingAmount
		,Convert(Decimal(18,2), (XX.ClaimWt * XX.EscalationRate)) as EscalationAmount
		,Convert(Decimal(18,2), (XX.ClaimWt * XX.EscalationRate) + (XX.ClaimWt * XX.HandlingRate) - COtherDeduction + ChallanDetention + StaticalCharge + (XX.ClaimWt * XX.BillingRate)) as TotalInvoiceAmount
	 From (
		Select IC.InvoiceId, I.InvoiceNo, IC.ChallanNo, UL.JobId, IsNull(IC.COtherDeduction,0) COtherDeduction,
		UL.JobNo, UL.WO, STONo, UL.DELNo, GRNNo, UL.ClientName, TruckNumber, UL.InvoiceClientRate, UL.SourceId, UL.DestinationId, 
		CONVERT(SMALLDATETIME,UL.LoadDate, 103) As LoadDate, 
		CONVERT(SMALLDATETIME,UnloadedDate, 103) As UnloadedDate, UL.NetWt, UL.LoadDMT,
		CASE WHEN UnloadInvoiceClaimQty >0.0 THEN UnloadInvoiceClaimQty ELSE UnloadedNetWt END AS UnloadedNetWt,
	    UnloadDMT, IC.BillingRate BillingRate, UL.TotalFreight,
		UL.Moisture as LoadMoisture, UnloadedMoisture,
		UL.LoadType, UL.TotalBags As LoadedBags,  UL.UnloadedBags,
		UL.GrossWt, Ul.UnloadedGrossWt, UL.TareWt, UL.UnloadedTareWt, 
		Concat(ISNULL(UL.Moisture, '0.000'), UL.MoistureUnit) as LoadMoistureUnit,
		Concat(ISNULL(UL.UnloadedMoisture, '0.000'), UL.UnloadedMoistureUnit) as UnloadMoistureUnit,
		(UL.LoadDMT - UnloadDMT) as DMTWMTShortage,
		CONVERT(DECIMAL(18,3),CASE WHEN ((UL.LoadDMT - UnloadDMT) < (UL.LoadDMT*0.0006)) THEN 0 ELSE ((UL.LoadDMT - UnloadDMT) - (UL.LoadDMT*0.0006)) END) as DMTShortage,
		UL.MaterialValue,UL.MaterialName,
		Convert(Decimal(18,2),(UL.LoadDMT - UnloadDMT) * UL.MaterialValue) as Debit,
		IC.InvoiceClaimQty As ClaimWt
		,IsNull(IC.CDetention,0) as ChallanDetention
		,IsNull(IC.StaticalCharge,0) as StaticalCharge
		,IsNull(IC.HandlingRate,0.0) as HandlingRate
		,IsNull(IC.InvoiceTollGate, 0) as InvoiceTollGate, IsNull(IC.Miscellaneous, 0) as Miscellaneous, IsNull(IC.Divergen, 0) as Divergen
		,IsNull((Select Max(Rate) From _WOSectorEscalation Where SectorId = UL.WOSectorId And CONVERT(SMALLDATETIME,UL.LoadDate, 103) >= DateFrom AND CONVERT(SMALLDATETIME,UL.LoadDate, 103) <= IsNull(DateTo, '2555-01-01')),0.0) as EscalationRate
		,IsNull((Select Max(EscalationName) From _WOSectorEscalation Where SectorId = UL.WOSectorId And CONVERT(SMALLDATETIME,UL.LoadDate, 103) >= DateFrom AND CONVERT(SMALLDATETIME,UL.LoadDate, 103) <= IsNull(DateTo, '2555-01-01')),0.0) as EscalationType, ISNULL(UL.Wheeler,0) as Tyre, ISNULL(SR.TyreShow,0) as TyreShow,I.Permit
		,IC.ClaimQtyTypeId as InvoiceClaimQtyType
		,UL.JobExecutingBranchId
		,UL.JobClientId
		,UL.executingbranchname
		,UL.TP as TPInvNo, UL.SAPNo, UL.WayBillNo
		,UL.ClientInvoiceNo, UL.InvoiceBranchId
		,UL.Sector,J.ChallanSerialNo
		,TP.TPNo 
		,W.OrderDate
 From _InvoiceChallan IC
 Inner Join vw_unloadingchallandetails UL on UL.ChallanNo = IC.ChallanNo
 Inner Join _Invoice I On I.Id = IC.InvoiceId
 INNER join (SELECT WOSectorId, TyreShow, Tyre FROM _WOSectorRate WHERE Id IN (SELECT MAX(Id) FROM _WOSectorRate GROUP BY WOSectorId)) SR on UL.WOSectorId = SR.WOSectorId
 inner Join _Job J ON J.Id = UL.JobId
 Left Outer Join LoadingChallan L on L.ChallanNo = UL.ChallanNo
 Left Outer Join _TPdetails TP on TP.Id = L.STOId
 Left Outer JOin _WorkOrder W ON W.Id = UL.WOId
 ) XX




GO
/****** Object:  View [dbo].[vw_InvoiceAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vw_InvoiceAmount] as 
	Select I.Id
	,Convert(Decimal(18,3), SUM(IC.ClaimWt) )as ClaimWt
	,Convert(Decimal(18,2), SUM(IC.Amount + IC.EscalationAmount)) as InvoiceAmount
	,Convert(Decimal(18,2), SUM(IC.HandlingAmount)) as HandlingAmount
	,Convert(Decimal(18,2), SUM(IC.EscalationAmount)) as EscalationAmount
	,Convert(Decimal(18,2), SUM(IC.TotalInvoiceAmount)) as TotalInvoiceAmount
	,I.InvoiceDate InvoiceDate1
	From _Invoice I
	Inner Join vw_InvoiceChallanDetails IC on IC.InvoiceId = I.Id
	Group By I.Id,I.InvoiceDate



GO
/****** Object:  Table [dbo].[Accounts_STCategoryAbatement]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_STCategoryAbatement](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[STCategoryId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[Abatement] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_STCategoryAbatement] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InvoiceTaxHandling]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceTaxHandling](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[TaxId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoiceTaxHandling] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_InvoiceTaxHandlingDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_InvoiceTaxHandlingDetails] as 
 Select 
 T.Id as InvoiceTaxId,
 T.InvoiceId,
 T.TaxId,
 ST.OutputLedgerId as LedgerId,
 ST.TaxName as TaxName,
 ST.TaxRate as TaxPercentage,
 Convert(Decimal(18,0),((IA.HandlingAmount * (100 - (Select Abatement From  Accounts_STCategoryAbatement  AB Where AB.STCategoryId = ST.STId And IA.InvoiceDate1 >= AB.DateFrom AND IA.InvoiceDate1 < ISNULL(AB.DateTo, '2555-01-01'))) / 100) *  ST.TaxRate) / 100) as TaxAmount
 FROM _InvoiceTaxHandling T
 LEFT JOIN vw_ServiceTax ST ON ST.STRateId = T.TaxId
 --LEFT JOIN _Invoice I ON I.Id = T.InvoiceId
 LEFT JOIN vw_InvoiceAmount IA ON IA.Id = T.InvoiceId


GO
/****** Object:  View [dbo].[vw_ReportJobDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_ReportJobDetails]
AS
	SELECT   J.Id AS [JobId], J.JobNo AS [JobNo], J.WOSectorId AS [WOSectorId], J.Quantity AS [JobQuantity], J.Consignee AS [ConsigneeId]
	       , J.Consigner AS [ConsignerId], J.TruckSource AS [TruckSource], J.ExecutingBranch AS [JobBranchId]
		   , J.InvoiceBranchId AS [InvoiceBranchId],J.ChallanSerialNo 
	       , WOI.Id AS [WorkOrderItemsId], WOI.OrderId AS [OrderId], WOI.LoadingPoint AS [LoadingPointId]
		   , WOI.UnLoadingPoint AS [UnLoadingPointId], WO.ClientId AS [ClientId], B.Name AS [BranchName], IB.Name AS [InvoiceBranchName]
		   , C.Name AS [ClientName], L.Loading AS [LoadingPoint], U.Unloading AS [UnloadingPoint], L.Loading + '-' + U.Unloading AS [Sector]
		   , M.MaterialName
		   , J.RefName
	FROM _Job J 
	LEFT OUTER JOIN
	_WorkOrderItems WOI ON WOI.Id=J.WOSectorId
	LEFT OUTER JOIN
	_WorkOrder WO ON WO.Id=WOI.OrderId
	LEFT OUTER JOIN
	Common_Branch B ON B.Id=j.ExecutingBranch
	LEFT OUTER JOIN
	Common_Branch IB ON IB.Id=j.InvoiceBranchId
	LEFT OUTER JOIN
	Common_Client C On C.Id=WO.ClientId
	LEFT OUTER JOIN
	LoadingPoints L ON L.Id=WOI.LoadingPoint
	LEFT OUTER JOIN
	UnloadingPoints U ON U.Id=WOI.UnLoadingPoint
	LEFT OUTER JOIN
	Materials M ON M.Id=WOI.Material





GO
/****** Object:  Table [dbo].[Payment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Payment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingId] [int] NOT NULL,
	[UnloadingId] [int] NULL,
	[ChallanDeduction] [decimal](18, 2) NULL,
	[TollGate] [decimal](18, 2) NULL,
	[EffectiveWt] [decimal](18, 3) NULL,
	[ShortageWt] [decimal](18, 3) NULL,
	[Penalty] [decimal](18, 2) NULL,
	[ChallanLost] [decimal](18, 2) NULL,
	[Adjustment] [decimal](18, 2) NULL,
	[NetPayable] [decimal](18, 2) NULL,
	[PaidDate] [smalldatetime] NULL,
	[PaidTo] [varchar](200) NULL,
	[PaidToId] [int] NULL,
	[PaymentMode] [int] NULL,
	[ChequeNo] [varchar](50) NULL,
	[PaidAmount] [decimal](18, 2) NULL,
	[Remarks] [varchar](2000) NULL,
	[PaidBy] [int] NULL,
	[PaidOn] [smalldatetime] NULL,
	[IsSubmitted] [int] NULL,
	[IsApproved] [int] NULL,
	[IsRejected] [int] NULL,
	[PaidToLedger] [int] NULL,
	[TdsId] [int] NULL,
	[TdsDeclaration] [bit] NULL,
	[TdsAmount] [decimal](18, 2) NULL,
	[TdsRate] [decimal](18, 2) NULL,
	[PVoucherId] [int] NULL,
	[ShortagePenaltyWt] [decimal](18, 3) NULL,
	[PenaltyRate] [decimal](18, 2) NULL,
	[EscalationRate] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[OtherDeduction] [decimal](18, 2) NULL,
 CONSTRAINT [PK_Payment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ReportLoadingChallanReport]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_ReportLoadingChallanReport]
AS
	SELECT  L.Id, L.ChallanNo AS ChallanNo, L.LoadDate AS LoadDate, L.freight AS FreightRate, L.NetWT AS NetWT
	            , L.TotalFreight AS TotalFreight, L.TotalAdvance AS TotalAdvance, L.Advance AS Advance, L.HSDCost AS HSDCost
	            , L.TruckSource AS TruckSource, L.GuaranteeWT AS GuaranteeWT, TP.TPNo TP
				, L.JobId AS JobId, J.JobNo AS JobNo, J.BranchName AS BranchName, J.InvoiceBranchName, J.JobBranchId AS JobBranchId
				, J.InvoiceBranchId AS InvoiceBranchId, L.ChargesQty,L.InsertUserId,L.UpdateUserId
				, J.ClientName AS ClientName, J.ClientId AS ClientId  
				, J.LoadingPoint AS LoadingPointName, j.LoadingPointId AS LoadingPointId
				, J.UnloadingPoint AS UnloadingPointName, J.UnLoadingPointId AS UnLoadingPointId
				, J.LoadingPoint + '-' + J.UnloadingPoint AS Sector,j.ChallanSerialNo 
				,IsNull(j.CHallanSerialNo,'')+CAST(IsNull(L.ChallanNo,0) AS VARCHAR)  ChallanNoKey--+'/'+IsNuLL(TP.TPNo,'')+'/'+IsNull(L.TP,'') ChallanNoKey
				, V.VehicleNo AS TruckNumber, V.TotalTyers AS Wheeler, L.TruckId AS TruckId
				, P.PartyName AS OwnerName, P.PANNumber AS OwnerPan, L.OwnerId AS LOwnerId
				, P1.PartyName AS BrokerName, P1.PANNumber AS BrokerPan, L.BrokerId AS LBrokerId 
				, FA.Name AS AssociationName, L.AssociationId AS LAssociationId 
				, UC.UnloadedDate AS UnloadedDate, ISNULL(UC.UnloadedNetWt,0) AS UnloadedNetWt
				, UC.Id AS UnloadingId
				, L.InvoiceClientRate ClientRate
                , S.STONo AS STONo
				, CASE 
						WHEN WOI.ClaimQtyType = 1 /*H*/ THEN  (SELECT MAX(C) FROM (VALUES (L.NetWT), (ISNULL(UC.UnloadedNetWt,L.NetWT))) AS v (C))
						WHEN WOI.ClaimQtyType = 2 /*L*/ THEN  (SELECT MIN(C) FROM (VALUES (L.NetWT), (ISNULL(UC.UnloadedNetWt,L.NetWT))) AS v (C))
						WHEN WOI.ClaimQtyType = 3 /*NL*/ THEN  NetWt
						WHEN WOI.ClaimQtyType = 4 /*NU*/ THEN  UnloadedNetWt
						WHEN WOI.ClaimQtyType = 5 /*GW*/ THEN IsNull(L.ChargesQty,0)
						WHEN WOI.ClaimQtyType = 6 /*GL*/ THEN (SELECT MAX(C) FROM (VALUES (L.NetWT), (IsNull(UC.UnloadedNetWt,L.ChargesQty)), (L.ChargesQty-(L.NetWt-IsNull(UC.UnloadedNetWt,L.NetWt)))) AS v (C))
						ELSE NULL
					END As ClaimLoad
				, L.LoadDMT AS LoadDMT, UC.UnloadDMT AS UnloadDMT
				, PC.PVoucherId, PC.PaidOn
				,L.GrossWt AS GrossWt, L.TareWT AS TareWT, L.WayBillNo, L.Distance, L.ValidityDate, P.ContactNo OwnerContact
				--, CASE WHEN L.WayBillBy=0 THEN 'CONSIGNEE' ELSE CASE WHEN L.WayBillBy=1 THEN 'CONSIGNOR' ELSE 'TRANSPORTER' END END WayBillBy
				,L.InvoiceClientRate, L.SourceId, L.DestinationId, L.STOId PermitId
				, J.MaterialName, L.TPBookNo,  WOI.ClaimQtyType, WOI.HandlingInvoiceRate, WOI.IsHandlingInvoice
	FROM loadingchallan L
	LEFT OUTER JOIN 
	STODetails S ON S.Id=L.STOId
	LEFT OUTER JOIN 
	UnloadingChallan UC ON UC.LoadingChallanId = L.Id
	LEFT OUTER JOIN
	Payment PC ON PC.LoadingId = L.Id
	LEFT OUTER JOIN
	Fleet_Association FA ON FA.Id = L.AssociationId
	LEFT OUTER JOIN
	Fleet_Vehicle V ON V.Id = L.TruckId
	LEFT OUTER JOIN
	Common_Parties P ON P.Id = L.OwnerId 
	LEFT OUTER JOIN
	Common_Parties P1 ON P1.Id = L.BrokerId
	LEFT OUTER JOIN
	vw_ReportJobDetails J ON J.JobId = L.JobId
	 Left Outer Join 
	 _TPDetails TP ON TP.Id=L.STOId
	INNER JOIN 
	_WorkOrderItems WOI ON WOI.Id=J.WOSectorId	
	 WHERE CONVERT(smalldatetime, L.LoadDate, 103)>= '2019-04-01' 


GO
/****** Object:  View [dbo].[Discounter]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[Discounter] As 
SELECT 
	   P.[Id] [DiscounterId]
      ,PartyName [DiscounterName]
      ,[Address] as [DiscounterAddress]
      ,ContactNo As [DiscounterContact]
      ,PANNumber As [DiscounterPAN]
      ,P.IsTDSSubmitted [DiscounterTDS]
      ,0 [DiscounterSecurity]
      ,0 [DiscounterPhoto]
      ,InsertUserId As [DiscounterCreatedBy]
      ,InsertDate As [DiscounterCreatedOn]
      ,B.Name As [BankName]
      ,BankACNo [BankAccount]
      ,IFSCCode [BankIFSC]
	  ,LookupName
FROM vw_Party P
Left Join Common_BankNames B On B.Id = P.BankName
Where PartyType = 3 -- Discounter


GO
/****** Object:  View [dbo].[vw_ReportPaymentChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_ReportPaymentChallan]
AS
	SELECT L.Id, L.ChallanNo AS ChallanNo, Convert(varchar(10),L.LoadDate,103) AS LoadDate , ISNULL(L.NetWT, 0) AS NetWT, ISNULL(L.Freight, 0) AS FreightRate
	      ,ISNULL(L.Advance,0) AS Advance
	      ,ISNULL(L.HSDCost, 0) AS HSDCost, ISNULL(L.TotalAdvance, 0) AS TotalAdvance, ISNULL(L.TotalFreight, 0) AS TotalFreight
		  ,ISNULL(Convert(varchar(10), U.UnloadedDate, 103),'NA') AS UnloadedDate, ISNULL(U.UnloadedNetWt, 0) AS UnloadedNetWt
		  ,ISNULL(P.EffectiveWt, 0) AS EffectiveWt ,ISNULL(P.ChallanDeduction, 0) AS ChallanDeduction, ISNULL(P.TollGate, 0) AS TollGate
		  ,ISNULL(P.ChallanLost,0) AS ChallanLost, ISNULL(P.ShortageWt,0) AS ShortageWt, ISNULL(P.PenaltyRate,0) AS PenaltyRate
		  ,ISNULL(P.ShortagePenaltyWt,0) AS PenaltyShoratge, ISNULL(P.Penalty, 0) AS Penalty, ISNULL(P.EscalationRate,0) AS EscalationRate
		  ,ISNULL(P.Adjustment,0) AS EscalationAmount, ISNULL(P.TdsAmount,0) AS TdsAmount, ISNULL(P.NetPayable,0) AS NetPayable
		  ,ISNULL(P.PaidAmount,0) AS PaidAmount
		  from LoadingChallan L
	LEFT OUTER JOIN
	UnloadingChallan U ON U.LoadingChallanId = L.Id
	LEFT OUTER JOIN
	Payment P ON P.LoadingId = L.Id


GO
/****** Object:  Table [dbo].[ImEx_CreditNoteDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_CreditNoteDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CreditNoteId] [int] NOT NULL,
	[ParticularId] [int] NOT NULL,
	[Quantity] [int] NOT NULL,
	[Rate] [decimal](18, 2) NULL,
	[JobId] [int] NULL,
	[IsIGSTApplicable] [bit] NOT NULL,
	[TotalAmount] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_CreditNoteDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ImEx_CreditNotes]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_ImEx_CreditNotes]
AS
  SELECT JobId , SUM(TotalAmount) AS TotalAmount FROM ImEx_CreditNoteDetails 
  GROUP BY JobId 
GO
/****** Object:  Table [dbo].[_OilFillingData]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_OilFillingData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FillingId] [int] NOT NULL,
	[FillingDate] [date] NULL,
	[MemoNo] [int] NULL,
	[ChallanNo] [int] NULL,
	[TruckNo] [varchar](50) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[Rate] [decimal](18, 2) NULL,
	[Amount] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Status] [int] NOT NULL,
	[StatusDate] [date] NULL,
	[StatusBy] [int] NULL,
	[StatusRemarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[MemoDate] [date] NULL,
	[BillNo] [varchar](20) NULL,
 CONSTRAINT [PK__OilFillingData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleDrivers]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleDrivers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[DriverId] [int] NOT NULL,
	[FromDate] [date] NOT NULL,
	[ToDate] [date] NULL,
	[Remarks] [varchar](50) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleDrivers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleAssociations]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleAssociations](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[AssociationId] [int] NOT NULL,
	[FromDate] [date] NULL,
	[ToDate] [date] NULL,
	[Fees] [decimal](18, 0) NULL,
	[Remarks] [varchar](500) NULL,
	[PaidOn] [date] NULL,
	[MemberShipNo] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleAssociations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ReportTruckDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_ReportTruckDetails]
AS
SELECT   F.Id AS [TruckId], F.VehicleNo AS [VehicleNo], F.TotalTyers AS [TotalTyers]
       , F.ChassisNo AS [ChassisNo], F.EngineNo AS [EngineNo]  
	   , C.Id AS [OwnerId], C.PartyName AS [OwnerName], C.PANNumber AS [OwnerPan], C.ContactNo AS [OwnerContactNo]
	   , A.Id AS [AssociationId], A.Name AS [AssociationName]
	   , D.Id AS [DriverId], D.PartyName AS [DriverName], D.PANNumber AS [DriverPan], D.ContactNo AS [DriverContactNo]

	   FROM Fleet_Vehicle F 
	   LEFT OUTER JOIN
	   Common_Parties C ON C.Id=F.[Owner]
	   OUTER APPLY
		  (SELECT TOP 1 DriverId FROM Fleet_VehicleDrivers AS VD WHERE VD.VehicleId=F.Id AND VD.ToDate IS NULL) TAB 
	   OUTER APPLY
		  (SELECT TOP 1 AssociationId FROM Fleet_VehicleAssociations AS VA WHERE VA.VehicleId=F.Id AND VA.ToDate IS NULL) TAB1 
	   LEFT OUTER JOIN
	   Fleet_Association A ON A.Id=TAB1.AssociationId
	   LEFT OUTER JOIN
	   Common_Parties D ON D.Id=TAB.DriverId



GO
/****** Object:  Table [dbo].[LoadingAdvance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingAdvance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingId] [int] NOT NULL,
	[AdvanceType] [int] NOT NULL,
	[PaymentMode] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[TDSId] [int] NULL,
	[TDSRate] [decimal](18, 2) NOT NULL,
	[TDSDeduction] [decimal](18, 2) NOT NULL,
	[NetPayable] [decimal](18, 3) NOT NULL,
	[PartyId] [int] NULL,
	[PumpId] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[VoucherId] [int] NULL,
	[LedgerId] [int] NULL,
	[PaidOn] [datetime] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[Narration] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[PayFromLedgerId] [int] NULL,
	[MemoNo] [varchar](50) NULL,
	[Quantity] [decimal](18, 3) NULL,
 CONSTRAINT [PK_LoadingAdvance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ReportOilChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_ReportOilChallans]
AS
	SELECT L.Id AS Id, J.JobNo AS JobNo, J.Sector, J.LoadingPointId AS LoadingPointId, J.UnLoadingPointId AS UnLoadingPointId
	       , L.ChallanNo AS ChallanNo, L.NetWT AS NetWT
	       , CONVERT(VARCHAR(10),LoadDate, 103) AS LoadDate, L.JobId AS JobId, T.VehicleNo 
	       , LA.PumpId AS PumpId, LA.AdvanceType, LA.Amount AS Amount, P.PumpName AS PumpName,J.ClientId, LA.MemoNo,P.LedgerId,FD.MemoDate
	FROM LoadingChallan L
	LEFT OUTER JOIN
	LoadingAdvance LA ON LA.LoadingId=L.Id
	LEFT OUTER JOIN
	PumpName P ON P.Id=LA.PumpId 
	LEFT OUTER JOIN
	vw_ReportJobDetails J ON J.JobId=L.JobId
	LEFT OUTER JOIN
	vw_ReportTruckDetails T ON T.TruckId=L.TruckId
	LEFT OUTER JOIN
	_OilFillingData FD ON L.ChallanNo = FD.ChallanNo
	WHERE LA.AdvanceType IN(2) --LoadingAdvanceType Diesel




GO
/****** Object:  Table [dbo].[_Token]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_Token](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TokenNo]  AS (case when [Old_TokenNo] IS NOT NULL then [Old_TokenNo] else [DBO].[FN__GenerateTokenNo]([BCode],[PCode],[MCode],[TNo],[FY]) end),
	[PartyId] [int] NOT NULL,
	[ReceivedOn] [date] NOT NULL,
	[PaidOn] [date] NULL,
	[LedgerId] [int] NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[TDSDeclaration] [bit] NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[OldTokenId] [int] NULL,
	[TokenBranchId] [int] NOT NULL,
	[Remarks] [varchar](2000) NULL,
	[Old_TokenNo] [varchar](50) NULL,
	[BCode] [varchar](50) NULL,
	[MCode] [varchar](50) NULL,
	[PCode] [varchar](50) NULL,
	[TNo] [int] NULL,
	[FY] [varchar](50) NULL,
	[IsLock] [bit] NULL,
	[DiscounterId] [int] NULL,
	[Attachments] [varchar](2000) NULL,
	[OtherDeduction] [decimal](18, 2) NULL,
	[OtherDeductionRemarks] [varchar](50) NULL,
	[ForceDeductTDS] [bit] NOT NULL,
	[RecoveryId] [int] NULL,
	[Amount] [decimal](18, 3) NOT NULL,
	[TokenStatus] [int] NULL,
	[TTid] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[TDSManual] [bit] NULL,
	[branch] [varchar](150) NULL,
 CONSTRAINT [PK__Token] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_TokenChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TokenChallans](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TokenId] [int] NOT NULL,
	[ChallanNo] [int] NOT NULL,
	[Remarks] [varchar](2000) NULL,
	[IsShortageChallan] [bit] NOT NULL,
	[Attachments] [varchar](3000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[TOId] [int] NULL,
	[UWt] [decimal](18, 2) NULL,
	[UDate] [date] NULL,
	[TNumber] [int] NULL,
	[TOPan] [varchar](50) NULL,
	[DocNo] [int] NULL,
	[IsDoc] [bit] NULL,
	[CommAmount] [decimal](18, 2) NULL,
	[OfficeAmount] [decimal](18, 2) NULL,
	[BrokerId] [int] NULL,
	[branch] [varchar](150) NULL,
 CONSTRAINT [PK__TokenChallans] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__TokenChallans] UNIQUE NONCLUSTERED 
(
	[ChallanNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_Vouchers]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_Vouchers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VoucherDate] [date] NOT NULL,
	[FinancialYear] [int] NOT NULL,
	[VoucherType] [int] NOT NULL,
	[RefType] [int] NULL,
	[ReferenceNo] [varchar](50) NULL,
	[ReferenceId] [int] NULL,
	[ReferenceDate] [date] NULL,
	[RejectRemarks] [varchar](5000) NULL,
	[Description] [varchar](5000) NULL,
	[Status] [int] NOT NULL,
	[StatusBy] [int] NULL,
	[StatusOn] [date] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[VoucherName] [varchar](50) NULL,
	[BranchId] [int] NOT NULL,
	[IsAutoGenerated] [bit] NOT NULL,
	[VTypeNo] [int] NULL,
	[VoucherNo]  AS (isnull(replicate('0',(8)-len([VTypeNo])),'')+CONVERT([varchar],[VTypeNo])) PERSISTED,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](100) NULL,
	[ChkNEFTDate] [date] NULL,
	[Attachments] [varchar](5000) NULL,
	[StatusRemarks] [varchar](1500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Account_Vouchers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_paymentchallwithpendingwithnotunloading]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_paymentchallwithpendingwithnotunloading]
AS
SELECT u.ChallanNo as Id, u.*, p.Id PaymentId,p.TdsDeclaration TdsDeclaration, p.LoadingId PLoadingId, 
p.UnloadingId PUnloadingId,ChallanDeduction,TollGate,EffectiveWt,ShortageWt, ShortagePenaltyWt,PenaltyRate,
      Penalty,ChallanLost,Adjustment,Convert(Decimal(18,2),ROUND(P.NetPayable,0)) As NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
      ,P.PaymentMode,ChequeNo,Convert(Decimal(18,2),Round(PaidAmount,0)) as PaidAmount,
	  p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
      ,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName, PaidToLedger, l.LedgerName PaidToLedgerName
	  ,ROUND(COALESCE(ChallanLost,0)+Penalty,0) TotalDeduction
	  ,0 as LoadingVoucherId, '0' as LoadingVoucherNo
	  ,p.PVoucherId as PaymentVoucherId 
	  ,PV.VoucherNo as PaymentVoucherNo
	  ,P.PaidToId, P.TDSId, Convert(Decimal(18,2),ROUND(P.TDSAmount,0)) As TDSAmount, P.TdsRate, p.PaidOn as PaidOnDate
	  ,T.TokenNo as TokenNo, T.VoucherId as TokenVoucher,IsNull(P.EscalationRate, 0.0) as EscalationRate ,T.Id TokenId
	  , 0 RecordBranchId, 0 RecordFYId
	  , P.OtherDeduction
  FROM vw_unloadingchallandetails u
  LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
 -- LEFT OUTER JOIN Accounts_Vouchers LV ON LV.RefType = 1  / CHALLAN / And LV.ReferenceId = ChallanNo And LV.VoucherType = 4  / Journal Voucher /
  LEFT OUTER JOIN Accounts_Vouchers PV ON PV.Id = p.PVoucherId -- ON PV.RefType = 1  / CHALLAN / And PV.ReferenceId = ChallanNo And PV.VoucherType = 2  / Payment Voucher /
  LEFT OUTER JOIN Accounts_Ledgers l ON p.PaidToLedger=l.Id
  LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
  LEFT OUTER JOIN _TokenChallans TC ON TC.ChallanNo = u.ChallanNo
  LEFT OUTER JOIN _Token T ON T.Id = TC.TokenId



























GO
/****** Object:  View [dbo].[vw_paymentchallwithpending]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_paymentchallwithpending]
AS
SELECT * FROM vw_paymentchallwithpendingwithnotunloading
WHERE UnloadingId IS NOT NULL
















GO
/****** Object:  View [dbo].[vw_paymentchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_paymentchallandetails]
AS
SELECT * FROM vw_paymentchallwithpending 
WHERE PaymentId IS NOT NULL














GO
/****** Object:  Table [dbo].[ImEx_DebitNote]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_DebitNote](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DebitNoteNo] [varchar](50) NOT NULL,
	[DebitNoteDate] [datetime] NOT NULL,
	[JobId] [int] NOT NULL,
	[FYId] [int] NULL,
	[Narration] [varchar](2000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_DebitNote] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_DebitNoteDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_DebitNoteDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DebitNoteId] [int] NOT NULL,
	[ParticularId] [int] NOT NULL,
	[Descriptions] [varchar](2000) NULL,
	[IsTaxApplicable] [bit] NOT NULL,
	[Quantity] [int] NULL,
	[Rate] [decimal](18, 2) NULL,
	[TaxableAmount] [decimal](18, 2) NULL,
	[NonTaxAmount] [decimal](18, 2) NULL,
	[AssessableValue] [decimal](18, 2) NULL,
	[VoucherId] [int] NULL,
	[IsTaxPayableByParty] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_DebitNoteDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ImEx_DebitNotes]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_ImEx_DebitNotes]
AS
	SELECT D.JobId,  SUM((DN.Quantity * DN.Rate) + DN.NonTaxAmount) AS TotalAmount  FROM ImEx_DebitNote D
	LEFT OUTER JOIN
	ImEx_DebitNoteDetails DN ON DN.DebitNoteId = D.Id
	GROUP BY D.JobId
GO
/****** Object:  View [dbo].[_ClientRateView]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[_ClientRateView]
AS
SELECT WoSectorId, ClientRate=STUFF((SELECT ', ' + CONVERT(VARCHAR(10),ClientRate)
           FROM _WOSectorRate b 
           WHERE b.WOSectorId = a.WOSectorId 
          FOR XML PATH('')), 1, 2, '') From _WOSectorRate a GROUP BY WOSectorId
GO
/****** Object:  Table [dbo].[Accounts_Bills]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_Bills](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BillOwner] [int] NOT NULL,
	[BillNo] [varchar](50) NOT NULL,
	[BillDate] [date] NOT NULL,
	[PartyName] [varchar](100) NOT NULL,
	[ContactNumber] [varchar](50) NULL,
	[Category] [int] NULL,
	[ServiceTaxAmount] [decimal](18, 2) NOT NULL,
	[VATAmount] [decimal](18, 2) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [date] NULL,
	[Remarks] [varchar](500) NULL,
	[BillType] [varchar](200) NOT NULL,
	[PartyId] [int] NULL,
	[IsAutoGenerated] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_Bills] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_Bills] UNIQUE NONCLUSTERED 
(
	[BillNo] ASC,
	[BillType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_VoucherTransactionBills]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_VoucherTransactionBills](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TransactionId] [int] NOT NULL,
	[BillId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_VoucherTransactionBills] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_VoucherTransactionBills] UNIQUE NONCLUSTERED 
(
	[BillId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_Accounts_Bills]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_Accounts_Bills] AS 
SELECT [Accounts_Bills].*
	  ,ISNULL(Amount,0) + ISNULL(VatAmount,0) + ISNULL(ServiceTaxAmount,0) as TotalAmount
	  ,BillNo + ' - ' + PartyName + ' (' + Convert(Varchar(50), (ISNULL(Amount,0) + ISNULL(VatAmount,0) + ISNULL(ServiceTaxAmount,0))) + ')' as LookupName
	  ,(SELECT Count(1) FROM [Accounts_VoucherTransactionBills] Where BillId = [Accounts_Bills].Id) as IsUsed
  FROM [dbo].[Accounts_Bills]
  Where PartyName IS NOT NULL
GO
/****** Object:  Table [dbo].[Asset]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Asset](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AssetStart] [int] NULL,
	[AssetEnd] [int] NULL,
	[AssetType] [varchar](50) NULL,
	[AssetCase] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[Deleted] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_assetdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--select * from vw_assetdetails
CREATE VIEW [dbo].[vw_assetdetails]
AS
	SELECT AssetStart, AssetEnd, br.id BranchId, br.Name BranchName, a.CreatedOn, CONVERT(VARCHAR(10), a.CreatedOn, 103) CreatedOnDisplay, a.CreatedBy CreatedById, u.FullName CreatedByName, AssetCase, AssetType FROM Asset a
	LEFT OUTER JOIN Branch br ON br.Id=a.BranchId
	LEFT OUTER JOIN vw_userdetails u ON u.userid=a.createdby


GO
/****** Object:  View [dbo].[vw_ReportTransitVechile]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_ReportTransitVechile]
AS
SELECT L.ChallanNo AS [ChallanNo], L.JobId AS [JobId], L.TruckId AS [TruckId], T.VehicleNo AS [TruckNo], T.OwnerName AS [OwnerName]
      ,T.OwnerContactNo AS [OwnerNo], L.TruckSource AS TruckSource, L.OwnerId AS OwnerId, L.NetWT AS [NetWT]
	  ,CONVERT(VARCHAR(10), L.LoadDate,103) AS [LoadDate], U.Id AS UnloadingId
	  ,J.JobNo AS [JobNo], J.Sector AS Sector, J.LoadingPointId AS  LoadingPointId
	  ,J.UnLoadingPointId AS UnLoadingPointId, j.JobBranchId AS [BranchId] 
	  ,B.Name AS [BranchName], J.ClientId AS [ClientId] ,C.Name AS [ClientName], ISNULL(L.WayBillNo, 'NA' ) AS WayBillNo
	  ,ISNULL(L.Distance, 0) AS Distance, CONVERT(VARCHAR(10), L.ValidityDate, 103)  AS ValidityDate, ISNULL(L.WayBillBy, 0) AS WayBillBy

	  FROM Loadingchallan L
      LEFT OUTER JOIN
      UnloadingChallan U ON U.LoadingChallanId=L.Id 
	  LEFT OUTER JOIN
      vw_ReportJobDetails J ON J.JobId=L.JobId
	  LEFT OUTER JOIN
      Common_Branch B ON B.Id=j.JobBranchId
	  LEFT OUTER JOIN
	  Common_Client C ON C.Id=J.ClientId
	  LEFT OUTER JOIN
	  vw_ReportTruckDetails T ON T.TruckId=L.TruckId
	  WHERE  U.Id Is NUll AND CONVERT(smalldatetime, L.LoadDate, 103)>= '2016-01-01' 



GO
/****** Object:  Table [dbo].[_ClaimQtyType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ClaimQtyType](
	[Id] [int] NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[ShortDisplayName] [varchar](50) NULL,
	[IsActive] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__ClaimQtyType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[Bill]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[Bill] as 
Select I.Id, InvoiceNo as Invoice, InvoiceDate, BillStatus, XX.ChallanNo as Challan,
IsNull(UpdateDate,InsertDate) as BillDate, Isnull(UpdateUserId, InsertUserId) as billedby,
Abatement as Ab, 0.00 as st, 0.00 as es, 0.00 as hs, 4036 as BranchId, C.ShortDisplayName as billedat,
A.Amount, I.ReceivedAmount as Received, I.TransactionNo as Trans, 
I.SubmisstionDate as SubDate, I.RealizationDate as RealDate,
I.ReceivedAmount as Receivable, I.Deduction as Deduction,
NULL as Other, Null as Remarks, Null as BillDat, I.UseMoisture, I.JobId, I.MoistureDeduction
FROM 
_Invoice I
Left Join vw_InvoiceAmount A On A.Id = I.Id
Left Join _ClaimQtyType C On C.Id = I.ClaimQtyType
Left Join (
SELECT InvoiceId, ChallanNo = 
    STUFF((SELECT ', ' + Convert(Varchar,ChallanNo)
           FROM _InvoiceChallan b 
           WHERE b.InvoiceId = a.InvoiceId 
          FOR XML PATH('')), 1, 2, '')
FROM _InvoiceChallan a
GROUP BY InvoiceId) XX On XX.InvoiceId = A.Id
GO
/****** Object:  Table [dbo].[_TokenBulkPaymentId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TokenBulkPaymentId](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkPaymentId] [int] NOT NULL,
	[TokenId] [int] NOT NULL,
	[BankACNo] [varchar](50) NOT NULL,
	[BankNameId] [int] NOT NULL,
	[IFSCCode] [varchar](50) NOT NULL,
	[PartyName] [varchar](500) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[MICRNo] [varchar](100) NULL,
	[PaymentMode] [int] NULL,
	[BankAddress] [varchar](100) NULL,
	[IsDownload] [bit] NULL,
	[Type] [varchar](5) NULL,
 CONSTRAINT [PK__TokenBulkPaymentId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__TokenBulkPaymentId] UNIQUE NONCLUSTERED 
(
	[TokenId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_TokenBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_TokenBulkPayment] AS
SELECT BulkPaymentId, SUM(T.Amount) AS TotalAmount
FROM _TokenBulkPaymentId B
INNER JOIN token T ON T.Id = B.TokenId
GROUP BY BulkPaymentId

GO
/****** Object:  Table [dbo].[LoadingAdvanceBulkPaymentId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingAdvanceBulkPaymentId](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkPaymentId] [int] NOT NULL,
	[LoadingAdvId] [int] NOT NULL,
	[BankACNo] [varchar](50) NULL,
	[BankNameId] [int] NULL,
	[IFSCCode] [varchar](50) NULL,
	[PartyName] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingAdvanceBulkPaymentId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_LoadingAdvanceBulkPaymentId] UNIQUE NONCLUSTERED 
(
	[LoadingAdvId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_LoadingBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vw_LoadingBulkPayment] As
Select BulkPaymentId, Sum(L.NetPayable) as TotalAmount 
from LoadingAdvanceBulkPaymentId B
Inner Join LoadingAdvance L On L.Id = B.LoadingAdvId
Group By BulkPaymentId

GO
/****** Object:  Table [dbo].[ImEx_JobExpenseId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_JobExpenseId](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobExpenseId] [int] NOT NULL,
	[ParticularId] [int] NOT NULL,
	[Rate] [decimal](18, 2) NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[IsTaxApplicable] [bit] NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_JobExpenseId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_JobExpense]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_JobExpense](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](50) NOT NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[Narration] [varchar](5000) NULL,
	[VendorId] [int] NULL,
	[JobId] [int] NOT NULL,
	[Attachments] [varchar](max) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[VoucherId] [int] NULL,
	[IsGSTApplicable] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_JobExpense] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ImEx_JobExpense]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE VIEW [dbo].[vw_ImEx_JobExpense]
	 AS
		SELECT JE.JobId, SUM(Amount) AS JobExpense from  ImEx_JobExpense JE 
		LEFT OUTER JOIN
		ImEx_JobExpenseId JEI ON JEI.JobExpenseId = JE.Id GROUP BY JE.JobId 
GO
/****** Object:  View [dbo].[vw_WOSectorExeQty]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View  [dbo].[vw_WOSectorExeQty] As
Select J.WOSectorId, Sum(L.NetWt) as ExecutedQty, Sum(L.NetWT * L.InvoiceClientRate) as ExecutedValue
from LoadingChallan L
Left Join _Job J On J.Id = L.JobId
Group BY  J.WOSectorId

GO
/****** Object:  Table [dbo].[ImEx_ExpensePaymentList]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ExpensePaymentList](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExpensePaymentId] [int] NOT NULL,
	[ExpenseParticularId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[JobId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ExpensePaymentList] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ExpensePayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ExpensePayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentDate] [date] NOT NULL,
	[PaymentMode] [int] NOT NULL,
	[ReceivedLedgerId] [int] NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[FYId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ExpensePayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ImEx_JobExpenseCashOrCheque]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE VIEW [dbo].[vw_ImEx_JobExpenseCashOrCheque]
	 AS
		SELECT EPL.JobId, SUM(EPL.Amount) AS Amount  FROM  ImEx_ExpensePayment EP 
		LEFT OUTER JOIN
		ImEx_ExpensePaymentList EPL ON EPL.ExpensePaymentId = EP.Id GROUP BY EPL.JobId 
GO
/****** Object:  Table [dbo].[i3MS_Settings]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_Settings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[i3MSName] [varchar](150) NOT NULL,
	[LastSync] [datetime] NULL,
	[Status] [varchar](50) NULL,
	[Remarks] [varchar](5000) NULL,
	[IsWorking] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_i3MS_Setings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[i3MS_Data]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_Data](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[TranspoterName] [varchar](500) NULL,
	[VehiceNo] [varchar](50) NULL,
	[TpNo] [varchar](50) NOT NULL,
	[CheckStatus] [varchar](50) NULL,
	[ReceiveStatus] [varchar](50) NULL,
	[Destination] [varchar](1000) NULL,
	[LesseeCode] [varchar](50) NULL,
	[ApplicantName] [varchar](500) NULL,
	[LicenseeName] [varchar](500) NULL,
	[MineralName] [varchar](100) NULL,
	[MineralWtinMT] [varchar](50) NULL,
	[CheckDate] [varchar](50) NULL,
	[ReceiveDate] [varchar](50) NULL,
	[DeparatureDate] [varchar](50) NULL,
	[HrsToCheckgate] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__i3MS_Dat__3214EC078BEB6C98] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_i3MS_Data] UNIQUE NONCLUSTERED 
(
	[TpNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_i3MSAllData]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vw_i3MSAllData] as
SELECT [i3MS_Data].Id, [TranspoterName]
      ,[VehiceNo]
      ,[TpNo]
      ,[CheckStatus]
      ,[ReceiveStatus]
      ,[Destination]
      ,[LesseeCode]
      ,[ApplicantName]
      ,[LicenseeName]
      ,[MineralName]
      ,[MineralWtinMT]
      ,(CASE WHEN [CheckDate] IS NULL OR LEN([CheckDate]) = 0 THEN NULL ELSE Convert(datetime, REPLACE(REPLACE([CheckDate], 'PM',':00:000PM'),'AM',':00:000AM'), 109) END) as [CheckDate]
      ,(CASE WHEN [ReceiveDate] IS NULL OR LEN([ReceiveDate]) = 0 THEN NULL ELSE Convert(datetime, REPLACE(REPLACE([ReceiveDate], 'PM',':00:000PM'),'AM',':00:000AM'), 109) END) as [ReceiveDate]
      ,(CASE WHEN [DeparatureDate] IS NULL OR LEN([DeparatureDate]) = 0 THEN NULL ELSE Convert(datetime, REPLACE(REPLACE([DeparatureDate], 'PM',':00:000PM'),'AM',':00:000AM'), 109) END) as [DeparatureDate]
      ,[HrsToCheckgate]
  FROM [i3MS_Data]

GO
/****** Object:  View [dbo].[vw_i3MSData]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_i3MSData] as
SELECT iD.*
  FROM [vw_i3MSAllData] iD
  INNER JOIN i3MS_Settings ON i3MS_Settings.i3MSName = iD.[TranspoterName]

GO
/****** Object:  Table [dbo].[Common_Company]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Company](
	[Id] [int] NOT NULL,
	[CompanyName] [varchar](150) NOT NULL,
	[RegistrationDate] [date] NULL,
	[RegistrationNo] [varchar](50) NOT NULL,
	[ServiceTaxNo] [varchar](50) NOT NULL,
	[PANNo] [varchar](50) NOT NULL,
	[TANNo] [varchar](50) NOT NULL,
	[TINNo] [varchar](50) NOT NULL,
	[CINNo] [varchar](50) NULL,
	[ISORemark] [varchar](150) NULL,
	[AddressHtml] [varchar](5000) NULL,
	[Address] [varchar](100) NOT NULL,
	[StateId] [int] NOT NULL,
	[Country] [int] NOT NULL,
	[Pincode] [varchar](10) NOT NULL,
	[Email] [varchar](500) NOT NULL,
	[TelephoneNo] [varchar](500) NOT NULL,
	[MobileNo] [varchar](500) NULL,
	[FaxNo] [varchar](50) NULL,
	[Logo] [varchar](max) NULL,
	[LogoUrl] [varchar](500) NULL,
	[Bank] [int] NULL,
	[ACName] [varchar](100) NULL,
	[ACNo] [varchar](50) NULL,
	[BranchAddress] [varchar](500) NULL,
	[DraftPaybleAt] [varchar](50) NULL,
	[ImageCode] [varchar](50) NOT NULL,
	[Attachments] [varchar](50) NULL,
	[GSTNo] [varchar](50) NULL,
	[GSTDate] [date] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[LicenceStartDate] [datetime] NULL,
	[LicenceEndDate] [datetime] NULL,
	[IfscCode] [varchar](20) NULL,
 CONSTRAINT [PK_Common_Company] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Common_Company] UNIQUE NONCLUSTERED 
(
	[CompanyName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[Company]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[Company] as 
SELECT [Id]
      ,[CompanyName]
	  ,'EXIM1' as Director1
	  ,'EXIM2' as Director2
      ,[RegistrationDate]
      ,[RegistrationNo]
      ,[ServiceTaxNo] as ServiceTax
	  , NULL AS VAT
      ,[PANNo] as PAN
      ,[TANNo]
      ,[TINNo] as TIN
      ,[ISORemark]
      ,[AddressHtml]
      ,[Address] as Address1
      ,'' as Address2
      ,[StateId]
      ,[Country]
      ,[Pincode]
      ,[Email]
      ,[TelephoneNo] as Phone
      ,[MobileNo] as Mobile
      ,[FaxNo] as Fax
      ,[Logo]
      ,[LogoUrl]
      ,[Bank]
      ,[ACName]
      ,[ACNo]
      ,[BranchAddress]
      ,[DraftPaybleAt]
	  , NULL AS YearSetup
  FROM [Common_Company]

GO
/****** Object:  View [dbo].[vw_ReportClaimWT]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vw_ReportClaimWT]
AS
SELECT L.Id,
	  CASE WHEN MoistureUnit='%' THEN NetWt ELSE NetWt+COALESCE(Moisture,0) END ClaimLoad,
	  CASE WHEN UnloadedMoistureUnit='%' THEN UnloadedNetWt ELSE UnloadedNetWt+COALESCE(UnloadedMoisture,0) END ClaimUnload
 FROM LoadingChallan L
 LEFT OUTER JOIN
 UnloadingChallan U ON U.LoadingChallanId = L.Id

GO
/****** Object:  View [dbo].[vw_OilDataConsolidation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vw_OilDataConsolidation] As
Select FillingId, FillingDate, Count(Id) as Trucks,  Sum(Amount) as TotalAmount
, Sum(Case When [Status] = 2 Then 1 Else 0 End)  Reconciled
, Sum(Case When [Status] = 3 Then 1 Else 0 End)  Dispute
, Sum(Case When [Status] not in (2,3) Then 1 Else 0 End)  Other
, MAX(RecordBranchId) RecordBranchId, MAX(RecordFYId) RecordFYId
From _OilFillingData
Where FillingDate Is NOt Null
Group By FillingId, FillingDate 

GO
/****** Object:  Table [dbo].[_InstantLoadingDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InstantLoadingDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InstantId] [int] NOT NULL,
	[LoadingId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[Attachments] [varchar](2000) NULL,
	[Remarks] [varchar](200) NULL,
 CONSTRAINT [PK__InstantLoadingDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_BulkLoadingDetailView]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vw_BulkLoadingDetailView] As
Select 
	InstantId
	,Count(I.Id) as TotalCount 
	,Sum(Case When IsNull(L.ChallanNo,0)  = 0 THEN 0 ELSE 1 END) as LoadedCount 
	,Sum(Case When  IsNull(L.ChallanNo,0)  = 0 THEN 1 ELSE 0 END) as PendingCount 
	,Sum(IsNull(L.NetWt, 0.0)) as TotalNetWt 
	,Sum(IsNull(L.HSDCost, 0.0)) as Diesel 
	,Sum(IsNull(L.Advance, 0.0)) as Cash 
	,Sum(IsNull(L.TotalAdvance, 0.0)) as TotalAdvance 
From _InstantLoadingDetails I
Left Join LoadingChallan L On L.Id = I.LoadingId
Group By InstantId



GO
/****** Object:  Table [dbo].[ChallanBook]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChallanBook](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanStart] [int] NULL,
	[ChallanEnd] [int] NULL,
	[ChallanType] [varchar](50) NULL,
	[ChallanCase] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[Deleted] [bit] NULL,
	[SupervisorId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RegisteredChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RegisteredChallans](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanNo] [int] NOT NULL,
	[Status] [varchar](1) NOT NULL,
	[BranchId] [int] NOT NULL,
	[InsertedOn] [date] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [IX_RegisteredChallans] UNIQUE NONCLUSTERED 
(
	[ChallanNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_challanbookdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_challanbookdetails]
AS
	SELECT ChallanStart, ChallanEnd, br.id BranchId, br.Name BranchName, 
	b.CreatedOn, b.CreatedBy, b.ChallanType, r.ChallanNo IssuedChallan, l.ChallanNo UsedChallan, 
	ChallanCase,us.Id UserId ,us.UserName UserName 
	FROM RegisteredChallans r
	LEFT OUTER JOIN LoadingChallan l ON r.ChallanNo=l.ChallanNo
	LEFT OUTER JOIN ChallanBook b ON r.ChallanNo>=ChallanStart AND r.ChallanNo<=ChallanEnd
	LEFT OUTER JOIN Branch br ON br.Id=r.BranchId
	LEFT OUTER JOIN Users us ON us.Id=b.SupervisorId
	Where b.id  in (Select Max(Id) From ChallanBook Where ChallanBook.ChallanStart = b.ChallanStart)

GO
/****** Object:  Table [dbo].[Accounts_LedgerType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_LedgerType](
	[Id] [int] NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[LedgerGroup] [int] NULL,
	[AssociatedGroupId] [int] NULL,
	[StopLedgerCreation] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Account_LedgerType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Account_LedgerType] UNIQUE NONCLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_LedgerBanks]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View  [dbo].[vw_LedgerBanks] as 
Select L.[Id]
      ,L.[LedgerName]
      ,L.[LedgerType]
      ,L.[Group]
      ,L.[Remarks]
      ,L.[IsCostCenter]
      ,L.[ContactName]
      ,L.[MobileNo]
      ,L.[Email]
      ,L.[Address]
      ,L.[State]
      ,L.[Country]
      ,L.[PinCode]
      ,L.[TaxType]
      ,L.[TaxPercentage]
      ,L.[STApplicable]
      ,L.[STCategory]
      ,L.[IsReconciliation]
      ,L.[PANNo]
      ,L.[TDSCategory]
      ,L.[AllowNegativeBalance]
      ,L.[InsertUserId]
      ,L.[InsertDate]
      ,L.[UpdateUserId]
      ,L.[UpdateDate]
      ,L.[AllowBackDateEntry], (Case When [Group] In (18) then 1 else 2 end) TransactionMode
	  ,1 as IsInvoiceUsed
	  ,L.RecordBranchId,L.RecordFYId
from Accounts_Ledgers L
Inner Join Accounts_LedgerType LT ON LT.Id = L.LedgerType
Where (LT.LedgerGroup = 2 OR [Group] in (17,18,24))



GO
/****** Object:  Table [dbo].[_InvoiceTax]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceTax](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[TaxId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoiceTax] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_InvoiceTaxDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_InvoiceTaxDetails] as 
 Select 
 T.Id as InvoiceTaxId,
 T.InvoiceId,
 T.TaxId,
 ST.OutputLedgerId as LedgerId,
 ST.TaxName as TaxName,
 ST.TaxRate as TaxPercentage,
 Convert(Decimal(18,0),((IA.InvoiceAmount * (100 - I.Abatement) / 100) *  ST.TaxRate) / 100) as TaxAmount
 FROM _InvoiceTax T
 LEFT JOIN vw_ServiceTax ST ON ST.STRateId = T.TaxId
 LEFT JOIN _Invoice I ON I.Id = T.InvoiceId
 LEFT JOIN vw_InvoiceAmount IA ON IA.Id = T.InvoiceId

GO
/****** Object:  View [dbo].[vw_InvoiceTotalTaxHandlingDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_InvoiceTotalTaxHandlingDetails] as 
 Select 
 T.InvoiceId,
 --SUM(Convert(Decimal(18,0),((IA.HandlingAmount * (100 - (Select Abatement From  Accounts_STCategoryAbatement  AB Where AB.STCategoryId = ST.STId And IA.InvoiceDate >= AB.DateFrom AND IA.InvoiceDate < ISNULL(AB.DateTo, '2555-01-01'))) / 100) *  ST.TaxRate) / 100)) as TaxAmount
 SUM(TaxAmount) TaxAmount
 FROM vw_InvoiceTaxHandlingDetails T
 group by T.InvoiceId
GO
/****** Object:  Table [dbo].[_InstantUnloadingDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InstantUnloadingDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UnloadInstantId] [int] NOT NULL,
	[ChallanNo] [varchar](50) NULL,
	[GrossWt] [decimal](18, 2) NULL,
	[TareWt] [decimal](18, 2) NULL,
	[UnloadWt] [decimal](18, 2) NULL,
	[GRN] [varchar](50) NULL,
	[UnloadedBag] [int] NULL,
 CONSTRAINT [PK__InstantUnloadingDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_BulkUnloadingDetailView]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vw_BulkUnloadingDetailView] As
Select 
	UnloadInstantId
	,Sum(Case When LEN(IsNull(ChallanNo,''))  = 0 THEN 0 ELSE 1 END) as UnloadedCount 
	,Sum(Case When  LEN(IsNull(ChallanNo,''))  = 0 THEN 1 ELSE 0 END) as PendingCount 
	,Sum(IsNull(UnloadWt, 0.0)) as TotalUnloadWt 
From _InstantUnloadingDetails
Group By UnloadInstantId


GO
/****** Object:  View [dbo].[Truck]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[Truck] As 
SELECT V.Id
      ,V.VehicleNo as TruckNumber
      ,V.TotalTyers as [Type]
      ,V.ChassisNo as ChasisNo
      ,V.EngineNo as EngineNo
      ,(Select Top 1 DriverId From Fleet_VehicleDrivers D Where D.VehicleId = V.Id And ToDate Is Null) as DriverId
      ,V.Owner as OwnerId
      ,(Select BrokerId From LoadingChallan Where Id = (Select Max(Id) From LoadingChallan Where TruckId = V.id)) as BrokerId
      ,(Select Top 1 AssociationId From Fleet_VehicleAssociations A Where A.VehicleId = V.Id And ToDate Is Null) as AssociationId
      ,V.InsertUserId as CreatedBy
      ,0 as Deleted
      ,V.InsertDate as CreatedOn
  FROM Fleet_Vehicle V


GO
/****** Object:  View [dbo].[vw_truckdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_truckdetails]
AS
SELECT t.Id AS TruckId, 
TruckNumber, Type AS Wheeler, ChasisNo, EngineNo,  r.Name TruckCreatedBy, CONVERT(VARCHAR(10), t.CreatedOn, 103) TruckCreatedOn
, b.Name AS BrokerName, b.Contact AS BrokerContact, b.Pan AS BrokerPAN
, d.Name AS DriverName, d.Contact AS DriverContact, d.Pan AS DriverPAN
, o.Name AS OwnerName, o.Contact AS OwnerContact, o.Pan AS OwnerPAN
, a.Association AS AssociationName
, CASE WHEN (a.Association IS NULL OR a.Association='') THEN 'MARKET' ELSE a.Association END TruckSource
from truck t
LEFT OUTER JOIN Broker b ON b.id = t.brokerid
LEFT OUTER JOIN Driver d ON d.id = t.driverid
LEFT OUTER JOIN Owner o ON o.id = t.ownerid
LEFT OUTER JOIN Association a ON a.id = t.associationid
LEFT OUTER JOIN Users r ON r.id = t.CreatedBy



GO
/****** Object:  Table [dbo].[ChallanStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChallanStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanStart] [int] NULL,
	[ChallanEnd] [int] NULL,
	[ChallanType] [varchar](10) NULL,
	[RegisteredChallansId] [int] NULL,
	[Remarks] [varchar](1000) NULL,
	[ChallanCase] [varchar](10) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[Deleted] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_challanstatusdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_challanstatusdetails]
AS
	SELECT ChallanStart, ChallanEnd, br.id BranchId, br.Name BranchName, b.CreatedOn, b.CreatedBy, u.FullName, b.ChallanType, ChallanCase, r.ChallanNo, b.Remarks FROM RegisteredChallans r
	LEFT OUTER JOIN LoadingChallan l ON r.ChallanNo=l.ChallanNo
	LEFT OUTER JOIN ChallanStatus b ON r.ChallanNo>=ChallanStart AND r.ChallanNo<=ChallanEnd
	LEFT OUTER JOIN Branch br ON br.Id=r.BranchId
	LEFT OUTER JOIN vw_userdetails u ON u.UserId=b.CreatedBy
	WHERE ChallanCase IS NOT NULL


GO
/****** Object:  Table [dbo].[ImEx_Currency]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Currency](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Currency] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Currency] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Particulars]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Particulars](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticularsName] [varchar](500) NOT NULL,
	[GroupId] [int] NOT NULL,
	[IsTaxApplicable] [bit] NULL,
	[IsServiceTaxApplicable] [bit] NOT NULL,
	[STCategoryId] [int] NULL,
	[SACCodeId] [int] NULL,
	[Description] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[LedgerId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Particulars] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Invoice]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Invoice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[ParticularId] [int] NOT NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [date] NULL,
	[Quantity] [int] NULL,
	[Rate] [decimal](18, 2) NULL,
	[NonTaxAmount] [decimal](18, 2) NULL,
	[CurrencyId] [int] NOT NULL,
	[AssessableValue] [decimal](18, 2) NULL,
	[ShipmentTermsId] [int] NOT NULL,
	[GrossWt] [decimal](18, 2) NULL,
	[QuantityUnitId] [int] NULL,
	[Package] [int] NULL,
	[jobtype] [int] NULL,
	[Description] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[GST]  AS ([dbo].[FN_ImEx_GetInvoiceGST]([JobId])),
	[VoucherId] [int] NULL,
	[InvoiceId] [int] NULL,
	[DebitNote] [bit] NULL,
	[IsTaxApplicable] [bit] NULL,
	[TaxableAmount] [decimal](18, 2) NULL,
	[IsTaxPayableByParty] [bit] NULL,
	[SaleTax] [decimal](18, 2) NOT NULL,
	[BuyingCost] [decimal](18, 2) NOT NULL,
	[BuyingTax] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Invoice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_InvoiceCharges]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_InvoiceCharges](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[ChargesId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_InvoiceCharges] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ShippingTerms]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ShippingTerms](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ShippingTermName] [nchar](10) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ShippingTerms] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Job]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Job](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobNo]  AS ([DBO].[FN_ImEx_GenerateJobNo]([ClientCode],[JobCode],[TNo],[FYCode])),
	[JobDate] [datetime] NULL,
	[JobStatusId] [int] NULL,
	[JobTypeId] [int] NOT NULL,
	[BranchId] [int] NULL,
	[LinerId] [int] NULL,
	[ClientId] [int] NULL,
	[DCountryId] [int] NULL,
	[ClearingAgentId] [int] NULL,
	[HandlingAgentId] [int] NULL,
	[CdPaidById] [int] NULL,
	[ConsigneeId] [int] NULL,
	[ContainerTypeId] [int] NULL,
	[ShipperId] [int] NULL,
	[NotifyPartyId] [int] NULL,
	[POLId] [int] NULL,
	[OriginId] [int] NULL,
	[PODId] [int] NULL,
	[FDestinationId] [int] NULL,
	[PortToFDestination] [int] NULL,
	[HAWBNo] [varchar](50) NULL,
	[HAWBDate] [datetime] NULL,
	[MAWBNo] [varchar](50) NULL,
	[MAWBDate] [datetime] NULL,
	[HBLNo] [varchar](50) NULL,
	[HBLDate] [date] NULL,
	[MBLNo] [varchar](50) NULL,
	[MBLDate] [date] NULL,
	[SBNo] [varchar](50) NULL,
	[SBDate] [date] NULL,
	[NoofPacket] [int] NULL,
	[PacketQuantity] [decimal](18, 2) NULL,
	[UnitId] [int] NULL,
	[PONo] [varchar](50) NULL,
	[PODate] [datetime] NULL,
	[IGMNO] [varchar](50) NULL,
	[IGMDate] [datetime] NULL,
	[BENo] [varchar](50) NULL,
	[BEDate] [datetime] NULL,
	[ShipmentTerms] [int] NULL,
	[NoofPKG] [int] NULL,
	[GW] [varchar](50) NULL,
	[CurrencyId] [int] NULL,
	[AssessableValue] [decimal](18, 2) NULL,
	[DutyAmount] [decimal](18, 2) NULL,
	[IECNo] [varchar](50) NULL,
	[AirlineId] [int] NULL,
	[VesselId] [int] NULL,
	[ChallanNo] [varchar](50) NULL,
	[SealNo] [varchar](50) NULL,
	[ContainerNo] [varchar](50) NULL,
	[ContainerType] [varchar](50) NULL,
	[ContainerSize] [int] NULL,
	[NoofContainer] [int] NULL,
	[ADCode] [varchar](50) NULL,
	[Attachments] [varchar](max) NULL,
	[Description] [varchar](5000) NULL,
	[ClientCode] [varchar](50) NULL,
	[JobCode] [varchar](50) NULL,
	[TNo] [int] NULL,
	[FYCode] [varchar](50) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[TempId] [int] NULL,
	[FYId] [int] NULL,
	[WOId] [int] NULL,
	[CostCenterId] [int] NULL,
	[LedgerId] [int] NULL,
	[RefName] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Job] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[ImEx_PendingChargesForInvoice]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ImEx_PendingChargesForInvoice]  
AS

	SELECT I.Id AS ID, J.Id AS JobId, J.JobNo, J.ClientId, C.Name, I.CurrencyId, F.Currency, P.Id ParticularsId, P.ParticularsName
		, Quantity*Rate Amount, NonTaxAmount, P.IsTaxApplicable , I.AssessableValue, I.ShipmentTermsId, S.ShippingTermName
		, I.GrossWt, I.Package, J.BranchId, I.RecordBranchId, I.RecordFYId
	From dbo.ImEx_Invoice I
	LEFT OUTER JOIN dbo.ImEx_Job J ON J.Id=I.JobId
	LEFT OUTER JOIN dbo.Common_Client C ON C.Id=J.ClientId
	LEFT OUTER JOIN dbo.ImEx_Particulars P ON P.Id=I.ParticularId 
	LEFT OUTER JOIN dbo.ImEx_Currency F ON F.Id=I.CurrencyId
	LEFT OUTER JOIN dbo.ImEx_ShippingTerms S ON S.Id=I.ShipmentTermsId
	WHERE NOT EXISTS (SELECT ChargesId FROM dbo.ImEx_InvoiceCharges IC WHERE IC.ChargesId=I.Id)






GO
/****** Object:  View [dbo].[vw_challandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_challandetails]
AS
SELECT  l.Transhipment, l.TotalAdvance, l.TotalFreight, MaterialValue, CostPerMT, Freight, Advance, HSD, HSDCost, HSDRate, ChallanNo, l.TotalBags, NetWT, Moisture, MoistureUnit, CONVERT(VARCHAR(10),LoadDate, 103) LoadDate, LoadType, AssociationCharge, 
		Labor, Welfare, Other, l.Detention, Collection, DELNo, l.Seals, l.TP, Fixed, GrossWt, TareWt, l.Remarks
		, GRNNo, UnloadedMoisture, UnloadedMoistureUnit, CONVERT(VARCHAR(10),UnloadedDate, 103) UnloadedDate, UnloadedNetWt, u.Detention UnloadDetention
		, ChallanDeduction, TollGate, ShortageWt, Penalty, ChallanLost, Adjustment, NetPayable, CONVERT(VARCHAR(10),PaidDate, 103) PaidDate
		, PaidTo, PaymentMode, ChequeNo, PaidAmount, EffectiveWt
		, STONo, s.Id STOId
		, t.TruckId, TruckNumber, Wheeler, BrokerName, DriverName, OwnerName, OwnerPAN, AssociationName, l.TruckSource, OwnerContact, DriverContact, BrokerContact
		, Sector, j.JobId, JobNo, WO, MaterialName, ClientName, ClientRate, j.JobStartDate, j.JobEndDate
		, PumpName
		FROM loadingchallan l
LEFT OUTER JOIN vw_jobDetails j ON j.JobId=l.JobId				
LEFT OUTER JOIN unloadingchallan u ON u.LoadingChallanId=l.Id		
LEFT OUTER JOIN Payment p ON p.UnLoadingId=u.Id		
LEFT OUTER JOIN STODetails s ON s.Id=l.STOId
LEFT OUTER JOIN vw_truckdetails t ON t.TruckId=l.TruckId
LEFT OUTER JOIN pumpname ON pumpname.id=l.pumpid



GO
/****** Object:  View [dbo].[vw_ReportInvoicePendingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_ReportInvoicePendingChallan]
AS

SELECT L.JobNo AS [JobNo], L.ClientName AS [ClientName], L.BranchName AS [ExecutingBranchName],
       L.InvoiceBranchName AS [InvoiceBranchName], L.ChallanNo AS [ChallanNo],TP.[TP],
       L.TruckNumber AS [TruckNumber],
       L.LoadDate AS [LoadDate], L.UnloadedDate AS [UnloadedDate], L.NetWT AS [NetWT] ,L.UnloadedNetWt AS [UnloadedNetWt],
    -- L.ClientRate AS [ClientRate],
	CASE WHEN L.InvoiceClientRate IS NULL THEN L.ClientRate ELSE L.InvoiceClientRate END [ClientRate],
	 L.JobId AS [JobId], L.ClaimLoad,
    L.StoNo AS [StoNo], L.UnloadingId AS UnloadingId,

    L.LoadDMT AS LoadDmt, L.UnloadDMT AS UnloadDMT, L.TotalFreight AS TotalFreight,
    L.PVoucherId AS PVoucherId, L.PaidOn AS PaidOnDate, 
    L.GrossWt, L.TareWT, IC.RecordBranchId, IC.RecordFYId
	,dbo.[FN__GenerateTempGSTBillNo](C.ClientCode) TempInvoiceNo 
	,CASE WHEN ISNULL(L.DestinationId,'NULL')='NULL'  THEN L.Sector ELSE L.LoadingPointName + '-' +  L.DestinationId END [Sector]
	, L.MaterialName, IsNull(L.[TP],'') AS TPBookNo,  ClaimQtyType, HandlingInvoiceRate, IsHandlingInvoice, L.PermitId ,TP.TruckSource        -- ,TP.Id as TPId
FROM vw_ReportLoadingChallanReport L
LEFT OUTER JOIN Common_Client C ON C.Id=L.ClientId
LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNo=L.ChallanNo 
LEFT OUTER JOIN LoadingChallan TP ON TP.ChallanNo = L.ChallanNo
WHERE IC.ChallanNo IS NULL











GO
/****** Object:  Table [dbo].[ImEx_Payment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Payment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NULL,
	[JobId] [int] NULL,
	[PaymentModeId] [int] NOT NULL,
	[ReceivedOn] [smalldatetime] NOT NULL,
	[ReceivedAmount] [decimal](18, 2) NOT NULL,
	[ShoratageAmount] [decimal](18, 2) NOT NULL,
	[TSDAmount] [decimal](18, 2) NOT NULL,
	[MoistureAmount] [decimal](18, 2) NOT NULL,
	[OtherDeduction] [decimal](18, 2) NOT NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[ReceivedLedgerId] [int] NULL,
	[Remarks] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[SettleId] [int] NULL,
 CONSTRAINT [PK_ImEx_Payment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ImExInvoicePaymentDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_ImExInvoicePaymentDetails]
AS
SELECT InvoiceId, MAX(ReceivedOn) AS RealizationOn, SUM(ReceivedAmount) AS ReceivedAmount, SUM(ShoratageAmount) AS ShortageDeduction,
       SUM(TSDAmount) AS TDSAmount, SUM(MoistureAmount) AS MoistureDeduction, SUM(OtherDeduction) AS OtherDeduction
	  --,MAX(ChkNEFTRefNo) AS ChkNEFTRefNo
FROM ImEx_Payment
GROUP BY
InvoiceId

GO
/****** Object:  Table [dbo].[GST_SACCode]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GST_SACCode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SACCode] [varchar](50) NOT NULL,
	[Description] [varchar](5000) NULL,
	[DisplayName] [varchar](500) NULL,
	[CGST] [decimal](18, 2) NULL,
	[SGST] [decimal](18, 2) NULL,
	[IGST] [decimal](18, 2) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[LedgerId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_GST_SACCode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ManageInvoice]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ManageInvoice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[JobId] [int] NULL,
	[ClientId] [int] NULL,
	[BranchId] [int] NULL,
	[VoucherId] [int] NULL,
	[VoucherStatus] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Narration] [varchar](2000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ManageInvoice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ImEx_InvoiceAmount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ImEx_InvoiceAmount]
AS

SELECT I.Id AS InvoiceId 
       ,ROUND( SUM( II.TaxableAmount + II.NonTaxAmount + (CASE WHEN II.IsTaxPayableByParty = 1 THEN 0 ELSE
	     2 * ROUND((II.TaxableAmount * S.SGST)/100, 0) END )),0)  AS TotalInvoiceAmount

FROM ImEx_ManageInvoice I
LEFT OUTER JOIN
ImEx_InvoiceCharges IC ON IC.InvoiceId=I.Id
LEFT OUTER JOIN
ImEx_Invoice II ON II.Id=IC.ChargesId
LEFT OUTER JOIN
ImEx_Particulars P ON P.Id=II.ParticularId 
LEFT OUTER JOIN
GST_SACCode S ON S.Id=P.SACCodeId 
GROUP BY I.Id


GO
/****** Object:  Table [dbo].[_TokenApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TokenApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TokenId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__TokenApproval] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_Recovery]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_Recovery](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyId] [int] NOT NULL,
	[RecoveryMode] [int] NULL,
	[RecoveryTypeId] [int] NULL,
	[PaymentType] [int] NULL,
	[PaymentMode] [int] NULL,
	[TransactionDate] [date] NULL,
	[LedgerId] [int] NULL,
	[Remarks] [varchar](5000) NULL,
	[Attachments] [varchar](500) NULL,
	[Amount] [decimal](18, 2) NULL,
	[RecoveryAdjustment] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[TotalRecoverableAmount] [decimal](18, 2) NULL,
	[ChallanNo] [int] NULL,
 CONSTRAINT [PK__Recovery] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_TokenDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[vw_TokenDetails] As 
Select Id, TokenNo, PartyId, Amount TokenAmount, (TokenAmount - Deduction - RecoveryAmount) as TokenAmount_C,  (SELECT [Status] FROM _TokenApprovals Where Id = (Select MAx(Id) From _TokenApprovals Where TokenId = XX.Id)) as TokenStatus
From (
Select T.Id, T.TokenNo, T.PartyId, T.Amount,  IsNull(T.OtherDeduction,0.0) As Deduction, IsNull(ABS(R.Amount),0.0) As RecoveryAmount, (Sum(IsNull(P.PaidAmount, 0.0))) as TokenAmount
From 
_Token T
Left Join _TokenChallans C On C.TokenId = T.Id
Left Join vw_paymentchallandetails P On P.ChallanNo = C.ChallanNo
Left Join _Recovery R On R.Id=T.RecoveryId
Group By T.Id, T.TokenNo, T.Amount, T.PartyId, T.OtherDeduction, R.Amount) XX







GO
/****** Object:  Table [dbo].[_JobShortageRule]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobShortageRule](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[Tyre] [int] NOT NULL,
	[LoadType] [varchar](50) NOT NULL,
	[ClientLimit] [decimal](18, 3) NULL,
	[ClientUnit] [varchar](10) NULL,
	[ClientDeductionType] [varchar](50) NULL,
	[ClientPaneltyRate] [decimal](18, 2) NULL,
	[AssLimit] [decimal](18, 3) NULL,
	[AssUnit] [varchar](10) NULL,
	[AssDeductionType] [varchar](50) NULL,
	[AssPaneltyRate] [decimal](18, 2) NULL,
	[MktLimit] [decimal](18, 3) NULL,
	[MktUnit] [varchar](10) NULL,
	[MktDeductionType] [varchar](50) NULL,
	[MktPaneltyRate] [decimal](18, 2) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[MinWeight] [int] NULL,
	[MaxWeight] [int] NULL,
	[TyreShow] [bit] NULL,
 CONSTRAINT [PK__JobShortageRule] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobPaymentRule]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobPaymentRule](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[Tyre] [int] NOT NULL,
	[TollGate] [decimal](18, 2) NOT NULL,
	[MktChallanDeduction] [decimal](18, 2) NOT NULL,
	[AssChallanDeduction] [decimal](18, 2) NOT NULL,
	[MaxAdvanceLimit] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[MaxAdvanceAssLimit] [decimal](18, 2) NULL,
	[MinWeight] [int] NULL,
	[MaxWeight] [int] NULL,
	[TyreShow] [bit] NULL,
 CONSTRAINT [PK__JobPaymentRule] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_challansfortoken]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vw_challansfortoken]
AS
SELECT distinct L.Id, L.JobId, L.Id LoadingChallanId, U.Id Unloadingid, L.ChallanNo, CONVERT(date, L.LoadDate, 103) LoadDate, L.NetWt, U.UnloadedNetWt, L.GuaranteeWT
,L.TruckSource, V.Id TruckId, V.VehicleNo TruckNumber, O.Id LOwnerId, O.PartyName OwnerName, V.TotalTyers Wheeler
,O.PANNumber, case when L.NetWt< U.UnloadedNetWt then 0 else (L.NetWt - U.UnloadedNetWt) end * 1000 ShortageWt, dbo.FN_GetPenaltyForChallan(ChallanNo) ChallanPenalty, dbo.FN_GetNetPaybleForChallan(ChallanNo) ChallanNetPayable
,L.Freight, L.TotalAdvance, L.HSDCost, U.Detention UnloadingCharge
, CASE WHEN JP.JobId IS NULL THEN 'Not Defined' ELSE 'OK' END PaymentRule
, CASE WHEN JS.JobId IS NULL THEN 'Not Defined' ELSE 'OK' END ShortageRule
, IsNull(CASE WHEN L.TruckSource='MARKET' THEN JP.MktChallanDeduction ELSE JP.AssChallanDeduction END ,0) ChallanDeduction
, CASE WHEN IsNull(GuaranteeWT,0) > 0 THEN GuaranteeWT ELSE (CASE WHEN L.NetWt<U.UnloadedNetWt THEN NetWt ELSE U.UnloadedNetWt END) END PayableQty
,CASE WHEN IsNull(GuaranteeWT,0) > 0 THEN GuaranteeWT ELSE (CASE WHEN L.NetWt<U.UnloadedNetWt THEN NetWt ELSE U.UnloadedNetWt END) END * L.Freight as TotalFreight
, L.Advance, J.Sector, CASE WHEN IsNull(L.LRNumber,'')='' THEN CAST(L.ChallanNo AS VARCHAR) ELSE L.LRNumber END LRNumber, V.IsBlocked
,  L.Detention AS LDetention,J.JobNo
FROM (SELECT * FROM LoadingChallan  where CONVERT(DATE, LoadDate, 102)>=CONVERT(DATE,'2018-04-01',102)) L
INNER JOIN vw_ReportJobDetails J ON J.JobId=L.JobId
INNER JOIN UnloadingChallan U ON U.LoadingchallanId=L.Id
LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
LEFT OUTER JOIN Common_Parties O ON O.Id=L.OwnerId
LEFT OUTER JOIN _JobPaymentRule JP ON JP.JobId=J.JobId AND (JP.Tyre=V.TotalTyers OR JP.Tyre=0)
LEFT OUTER JOIN _JobShortageRule JS ON JS.JobId=J.JobId AND (JS.Tyre=V.TotalTyers OR  JS.Tyre=0) AND JS.LoadType=L.LoadType

WHERE 
    NOT EXISTS (SELECT 1 FROM Payment P WHERE P.LoadingId=L.Id)
	AND 
	NOT EXISTS (SELECT 1 FROM _TokenChallans WHERE _TokenChallans.ChallanNo = L.ChallanNo )





GO
/****** Object:  Table [dbo].[_InvoicePayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoicePayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[RealizationOn] [date] NOT NULL,
	[ReceivedAmount] [decimal](18, 2) NOT NULL,
	[ReceivedLedgerId] [int] NULL,
	[ShortageDeduction] [decimal](18, 2) NOT NULL,
	[MoistureDeduction] [decimal](18, 2) NOT NULL,
	[TDSAmount] [decimal](18, 2) NOT NULL,
	[OtherDeduction] [decimal](18, 2) NOT NULL,
	[DeductionRemarks] [varchar](5000) NULL,
	[Remarks] [varchar](5000) NULL,
	[PaymentMode] [int] NOT NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[PNo] [int] NULL,
	[HandlingReceived] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[SettleId] [int] NULL,
 CONSTRAINT [PK__InvoicePayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__InvoicePayment] UNIQUE NONCLUSTERED 
(
	[InvoiceId] ASC,
	[PNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_InvoicePaymentDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vw_InvoicePaymentDetails] As
Select 
	InvoiceId
	,Max(RealizationOn) as RealizationOn
	,Sum(IsNull(ReceivedAmount,0.0) + IsNull(HandlingReceived,0.0)) as ReceivedAmount
	,Sum(ShortageDeduction) as ShortageDeduction
	,Sum(MoistureDeduction) as MoistureDeduction
	,Sum(TDSAmount) as TDSAmount
	,Sum(OtherDeduction) as OtherDeduction
from _InvoicePayment
Group By InvoiceId

GO
/****** Object:  View [dbo].[vw_bill]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_bill]
AS
SELECT ClientName, JobId, Invoice,InvoiceDate, trans, amount,  received, subdate, realdate, receivable, deduction, other, remarks, billedat, usemoisture, billstatus, Split.a.value('.', 'VARCHAR(100)') AS InvoicedChallanNo  
		FROM  (SELECT ClientName, bill.JobId, Invoice, InvoiceDate, trans, amount,  received, subdate, realdate, receivable, deduction, other, remarks, billedat, usemoisture, billstatus, 
		CAST ('<M>' + REPLACE([Challan], ',', '</M><M>') + '</M>' AS XML) AS String  
    FROM  bill LEFT OUTER JOIN vw_jobdetails ON vw_jobdetails.jobid=bill.jobid
	) AS A CROSS APPLY String.nodes ('/M') AS Split(a);
GO
/****** Object:  Table [dbo].[_PaymentReceived]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_PaymentReceived](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[BankCharges] [decimal](18, 2) NOT NULL,
	[PaymentDate] [datetime] NOT NULL,
	[PaymentModeId] [int] NOT NULL,
	[Reference] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[ReceivedLedgerId] [int] NULL,
	[ShortageDeduction] [decimal](18, 3) NULL,
	[MoistureDeduction] [decimal](18, 3) NULL,
	[TdsAmount] [decimal](18, 3) NULL,
	[Narration] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[OnAccount] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_PaymentSettledAmout]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--alter table _InvoicePayment add SettleId int

--alter table ImEx_Payment add SettleId int


--ALTER TABLE _Invoice ADD InvoiceTaxAmount decimal(18,2)


CREATE VIEW [dbo].[vw_PaymentSettledAmout]
AS
Select P.Id, P.Amount, (P.Amount-IsNull(IP.ReceivedAmount,0)-IsNull(IP.HandlingReceived,0)-IsNull(IX.ReceivedAmount,0)) Balance 
, CASE WHEN IP.SettleId IS NULL THEN IX.SettleId ELSE IP.SettleId END SettleId
from _PaymentReceived P
Left OUTER JOIN (SELECT SettleId, SUM(ReceivedAmount) ReceivedAmount, SUM(HandlingReceived) HandlingReceived FROM _InvoicePayment  WHERE SettleId IS NOT NULL GROUP BY SettleId) IP ON P.Id=IP.SettleId
Left OUTER JOIN (SELECT SettleId, SUM(ReceivedAmount) ReceivedAmount FROM ImEx_Payment WHERE SettleId IS NOT NULL GROUP BY SettleId) IX ON P.Id=IX.SettleId






GO
/****** Object:  View [dbo].[Token]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



 CREATE VIEW [dbo].[Token] as 
SELECT T.Id as[TokenId]
      ,T.VoucherId 
      ,TokenNo as [TokenReference]
      ,TC.ChallanNo as [Challan] 
      ,T.PartyId as [PaidTo]
      ,PT.PartyType as [PaidType]
      ,T.ReceivedOn as [ReceivedOn]
      ,IsNull(T.UpdateUserId, T.InsertUserId) as [CreatedBy]
      ,IsNull(T.UpdateDate, T.InsertDate) [CreatedOn]
      ,T.ChkNeftRefNo as [ChequeNo]
      ,T.TDSDeclaration [TdsDeclaration]
      ,T.TokenBranchId as [TokenBranchId]
  FROM _Token T
  Left Join _TokenChallans TC On TC.TokenId = T.Id
  Left Join Common_Parties P On P.Id = T.PartyId
  Left Join Common_PartyType PT On PT.Id = P.PartyType




GO
/****** Object:  Table [dbo].[_ShoratgeWaiver]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ShoratgeWaiver](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestOn] [date] NOT NULL,
	[PaymentId] [int] NOT NULL,
	[ShortagePenaltyWt] [decimal](18, 3) NOT NULL,
	[PenaltyRate] [decimal](18, 2) NOT NULL,
	[PenaltyAmount] [decimal](18, 2) NOT NULL,
	[RequestWaiverWt] [decimal](18, 3) NOT NULL,
	[RequestWaivertAmount] [decimal](18, 2) NOT NULL,
	[RequestWaiverRemarks] [varchar](1500) NULL,
	[ApproveWaiverWt] [decimal](18, 3) NULL,
	[ApproveWaivertAmount] [decimal](18, 2) NULL,
	[ApproveRemark] [varchar](1500) NULL,
	[ActionBy] [int] NULL,
	[ActionOn] [datetime] NULL,
	[Status] [int] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__ShoratgeWaiver] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_TokenDeviation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_TokenDeviation] As
Select T.TokenId, T.ChallanNo,S.PenaltyAmount, S.ApproveWaivertAmount, P.DelayUnLoading,
(DBO.FN_GetJobFreightRate(P.JobId, Convert(DateTime, P.LoadDate, 103), P.TruckSource, P.TruckId)) as CFRate
from _TokenChallans T 
Left Join vw_paymentchallandetails P On P.ChallanNo  = T.ChallanNo
Left Join _ShoratgeWaiver S  On S.PaymentId = P.PaymentId

GO
/****** Object:  Table [dbo].[DB_PANInfo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DB_PANInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PANNo] [varchar](50) NOT NULL,
	[NameInPAN]  AS (concat([FirstName],' '+[MiddleName],' '+[LastName])),
	[Title] [varchar](50) NULL,
	[FirstName] [varchar](250) NULL,
	[MiddleName] [varchar](250) NULL,
	[LastName] [varchar](280) NULL,
	[PANStatus] [varchar](250) NULL,
	[InsertedOn] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_DB_PANInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_PartyPanStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vw_PartyPanStatus]
 AS
 Select T0.Id as PartyId
 ,(CASE WHEN PANNumber IS NULL OR LEN(PANNumber) = 0 THEN 1 WHEN PANNumber LIKE '[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN  (Case WHEN jPANInfo.NameInPan IS NULL THEN 3 When IsNull(jPANInfo.PANStatus, 'E') <> 'E' Then 6 When RTrim(LTrim(T0.PartyName)) = RTrim(LTrim(jPANInfo.NameInPan)) THEN 4 ELSE 5 End) ELSE 1 END) as PanStatus 
 ,(CASE WHEN PANNumber IS NULL OR LEN(PANNumber) = 0 THEN 'Not Available' WHEN PANNumber LIKE '[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN  (Case WHEN jPANInfo.NameInPan IS NULL THEN 'Pending' When IsNull(jPANInfo.PANStatus, 'E') <> 'E' Then 'NDSL Not Verified' When RTrim(LTrim(T0.PartyName)) = RTrim(LTrim(jPANInfo.NameInPan)) THEN 'Verified' ELSE 'Discrepancy' End) ELSE 'Not Available' END) as PanStatusName
 from 
 Common_Parties T0
 Left Join DB_PANInfo jPANInfo On jPANInfo.PANNo = T0.PANNumber

GO
/****** Object:  View [dbo].[PaymentRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- RECHECK 
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW [dbo].[PaymentRules] AS 
SELECT [Id]
	  ,[JobId]
      ,Tyre as [Wheels]
      ,AssChallanDeduction as AssChallanDeduction
      ,MktChallanDeduction as MktChallanDeduction
      ,[TollGate]
      ,InsertUserId as [CreatedBy] 
	  ,MinWeight
	  ,MaxWeight
  FROM [dbo]._JobPaymentRule


GO
/****** Object:  View [dbo].[TransporterShortage]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[TransporterShortage] As 
SELECT  [Id]
      ,[JobId]
      ,'ASSOCIATION' as [Transporter]
      ,Tyre as [Wheels]
      ,AssLimit as [Limit]
      ,AssUnit AS [LimitUnit]
      ,AssDeductionType as [Deduction]
      ,AssPaneltyRate as [PenaltyRate]
      ,LoadType [LoadType]
      ,InsertUserId  [CreatedBy]
      ,InsertDate [CreatedOn]
	  ,MinWeight
	  ,MaxWeight
  FROM _JobShortageRule
  Where AssLimit IS Not NUll
Union
SELECT  [Id]
      ,[JobId]
      ,'MARKET' as [Transporter]
      ,Tyre as [Wheels]
      ,MktLimit as [Limit]
      ,MktUnit AS [LimitUnit]
      ,MktDeductionType as [Deduction]
      ,MktPaneltyRate as [PenaltyRate]
      ,LoadType [LoadType]
      ,InsertUserId  [CreatedBy]
      ,InsertDate [CreatedOn]
	  ,MinWeight
	  ,MaxWeight
  FROM _JobShortageRule
  Where MktLimit IS Not NUll


GO
/****** Object:  View [dbo].[vw_loadingchallandetails1]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_loadingchallandetails1]
AS
SELECT  LoadDMT, l.Id LoadingId, l.Transhipment, l.TotalAdvance, l.TotalFreight, MaterialValue, CostPerMT, Freight
		, Advance, HSD, HSDCost, HSDRate, ChallanNo, l.TotalBags, l.GuaranteeWT, NetWT, Moisture, MoistureUnit
		, CONVERT(VARCHAR(10),LoadDate, 103) LoadDate, l.LoadType, AssociationCharge, 
		Labor, Welfare, Other, l.Detention, Collection, DELNo, l.Seals, l.TP, Fixed, GrossWt, TareWt, l.Remarks
		, CONVERT(VARCHAR(10),l.LoadedOn, 103) LoadedOn, LoadedBy, BranchName LoadBranchName, FullName LoaderName
		, STONo, s.Id STOId
		, t.Id TruckId, t.VehicleNo TruckNumber, t.totaltyers Wheeler, B.Name as BrokerName, D.Name as DriverName,O.Name as OwnerName, O.Pan as OwnerPAN
		, A.Association as AssociationName, l.TruckSource as TruckSource, O.Contact as OwnerContact, D.Contact as DriverContact, B.Contact as BrokerContact
		, Sector, j.JobId, l.TruckSource as Rules, JobNo, WO, MaterialName, ClientName, 
		l.InvoiceClientRate ClientRate, 
		j.JobStartDate, j.JobEndDate
		, j.loadingpoint, j.unloadingpoint, j.executingbranchname, j.JobQuantity,j.ConsigneeName,j.ConsignerName
		,j.ClientId as JobClientId, J.ExecutingBranchId as JobExecutingBranchId
		, PumpName, pump.id PumpId
		,l.GateEntryNo,l.SAPNo,l.TPBookNo,l.WayBillNo,l.LRNumber as LRNumber
		,l.OwnerId as LOwnerId, l.BrokerId as LBrokerId, l.DriverId as LDriverId, l.AssociationId as LAssociationId
		,ApprovalStatus As LoadingApprovalStatus
		,J.InvoiceBranchId
		,J.InvoiceBranchName
		,J.TransitTime
		,J.WOSectorId
		, j.WOId
		FROM loadingchallan l
LEFT OUTER JOIN vw_jobDetails j ON j.JobId=l.JobId						
LEFT OUTER JOIN STODetails s ON s.Id=l.STOId
LEFT OUTER JOIN Fleet_Vehicle t ON t.Id=l.TruckId
LEFT OUTER JOIN Driver D ON D.Id=l.DriverId
LEFT OUTER JOIN [Owner] O ON O.Id=l.OwnerId
LEFT OUTER JOIN [Broker] B ON B.Id=l.BrokerId
LEFT OUTER JOIN [Association] A ON A.Id=l.AssociationId
LEFT OUTER JOIN pump ON pump.id=l.pumpid
LEFT OUTER JOIN pumpname ON pumpname.id=pump.pumpnameid
LEFT OUTER JOIN vw_userdetails ON LoadedBy=UserId
--WHErE CONVERT(DATE, LoadDate,103)>= CONVERT(DATE,'01/04/2017',103)



GO
/****** Object:  View [dbo].[ClientShortage]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[ClientShortage] As 
SELECT  [Id]
      ,[JobId]
      ,Tyre as [Wheels]
      ,ClientLimit as [Limit]
      ,ClientUnit AS [LimitUnit]
      ,ClientDeductionType as [Deduction]
      ,ClientPaneltyRate as [PenaltyRate]
      ,LoadType [LoadType]
      ,InsertUserId  [CreatedBy]
      ,InsertDate [CreatedOn]
  FROM _JobShortageRule
  Where ClientLimit IS Not NUll

GO
/****** Object:  View [dbo].[vw_InvoiceChallanPending]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_InvoiceChallanPending] AS
SELECT [LoadDMT]
      ,[LoadingId]
      ,[Transhipment]
      ,[TotalAdvance]
      ,[TotalFreight]
      ,[MaterialValue]
      ,[CostPerMT]
      ,[Freight]
      ,[Advance]
      ,[HSD]
      ,[HSDCost]
      ,[HSDRate]
      ,[ChallanNo]
      ,[TotalBags]
      ,[NetWT]
      ,[Moisture]
      ,[MoistureUnit]
      ,Convert(Date, [LoadDate], 103) as LoadDate
      ,[LoadType]
      ,[AssociationCharge]
      ,[Labor]
      ,[Welfare]
      ,[Other]
      ,[Detention]
      ,[Collection]
      ,[DELNo]
      ,[Seals]
      ,[TP]
      ,[Fixed]
      ,[GrossWt]
      ,[TareWt]
      ,U.[Remarks]
      ,[LoadedOn]
      ,[LoadedBy]
      ,[LoadBranchName]
      ,[LoaderName]
      ,[STONo]
      ,[STOId]
      ,[TruckId]
      ,[TruckNumber]
      ,[Wheeler]
      ,[BrokerName]
      ,[DriverName]
      ,[OwnerName]
      ,[OwnerPAN]
      ,[AssociationName]
      ,[TruckSource]
      ,[OwnerContact]
      ,[DriverContact]
      ,[BrokerContact]
      ,[Sector]
      ,[JobId]
      ,[JobNo]
      ,[WO]
      ,[MaterialName]
      ,C.ClientOriginalName as [ClientName]
      ,[ClientRate]
      ,[JobStartDate]
      ,[JobEndDate]
      ,[loadingpoint]
      ,[unloadingpoint]
      ,[executingbranchname]
      ,[PumpName]
      ,[PumpId]
      ,[UnloadDMT]
      ,[UnloadingId]
      ,[LoadingChallanId]
      ,[UnloadedGrossWt]
      ,[UnloadedTareWt]
      ,[UnloadedNetWt]
      ,Convert(Date, UnloadedDate, 103) as UnloadedDate
      ,[GRNNo]
      ,[UnloadedMoisture]
      ,[UnloadedMoistureUnit]
      ,[UnloadSeals]
      ,[UnloadDetention]
      ,[UnloadedBags]
      ,[UnloadRemarks]
      ,[UnloadedBy]
      ,[UnloadedOn]
      ,[UnloadBranchName]
      ,[UnloaderName]
      ,[ClaimLoad]
      ,[ClaimUnload]
      ,[EffectiveAmount]
      ,[ClientPenalty]
      ,U.JobClientId
      ,U.JobExecutingBranchId
      ,U.PaymentVoucherNo
      ,U.PaidOnDate
      ,U.[InvoiceBranchName]
      ,U.[InvoiceBranchId]
  FROM vw_paymentchallwithpendingwithnotunloading U
LEFT HASH JOIN Client C ON C.Id = U.JobClientId
WHERE ChallanNo NOT IN (SELECT ChallanNo FROM InvoiceChallan)
AND Convert(Date, [LoadDate], 103) >= '2016-04-01'



GO
/****** Object:  Table [dbo].[_WOApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOApprovals1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_WODetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vw_WODetails] As
Select 
	   W.[Id]
      ,W.[ClientId]
      ,W.[OrderNo]
      ,W.[OrderDate]
      ,W.[OrderReleaseDate]
      ,W.[OrderStartDate]
      ,W.[OrderEndDate]
      ,W.[PaymentTerm]
      ,W.[ServiceTaxPaybleByParty]
      ,W.[BaseDieselPrice]
      ,W.[EscalationImpact]
      ,W.[EscRemaningMaterial]
      ,W.[EscMinDiffDieselPrice]
      ,W.[InvoiceEscalationTerms]
      ,W.[InvoiceEscalationFormat]
      ,W.[ContactName]
      ,W.[ContactNo]
      ,W.[ContactEmail]
      ,W.[ContactFaxNo]
      ,W.[DetentionRemarks]
      ,W.[Remarks]
      ,W.[Attachments]
      ,W.[LoadType]
      ,W.[MiningReturn]
      ,W.[IsInvoiceBeforeUnloading]
      ,W.[ShowTPNo]
      ,W.[ShowGateEntryNo]
      ,W.[ShowSAPNo]
      ,W.[ShowTPBookNo]
      ,W.[ShowWayBillNo]
      ,W.[ShowDO]
      ,W.[ShowSTO]
      ,W.[JobId]
      ,W.[InsertUserId]
      ,W.[InsertDate]
      ,W.[UpdateUserId]
      ,W.[UpdateDate]
      ,W.[WORefNo]
	,C.Name as ClientName
	,IsNull((Select [Status] From _WOApprovals Where Id = (Select Max(Id) From _WOApprovals Where WOId = W.Id)),1) as [WOStatus]
from _WorkOrder W
Left Join Common_Client C On C.Id = W.ClientId

GO
/****** Object:  Table [dbo].[_OilFilling]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_OilFilling](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PumpId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NOT NULL,
	[BillNo] [varchar](50) NOT NULL,
	[BillAmount] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__OilFilling] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__OilFilling] UNIQUE NONCLUSTERED 
(
	[PumpId] ASC,
	[DateFrom] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_OilPendingChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vw_OilPendingChallans] As
Select O.Id as PumpBillId, P.PumpNameId, L.PumpName,  Convert(Date,L.LoadDate,103) as LoadDate, L.ChallanNo, L.TruckNumber
, L.HSDCost, O.BillNo, O.RecordBranchId RecordBranchId, O.RecordFYId from vw_loadingchallandetails L
Left Join Pump P On P.Id = L.PumpId
Left Join _OilFilling O On O.PumpId = P.PumpNameId
Left Join _OilFillingData OD On OD.ChallanNo = L.ChallanNo
Where P.PumpNameId Is Not Null And IsNull(L.HSDCost,0) > 0  
And Convert(Date, L.LoadDate, 103) >= O.DateFrom
And Convert(Date, L.LoadDate, 103) <= O.DateTo
And OD.[Status] Is NUll

GO
/****** Object:  Table [dbo].[Log_LoadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Log_LoadingChallan](
	[Id] [int] NOT NULL,
	[ChallanNo] [bigint] NOT NULL,
	[JobId] [int] NOT NULL,
	[STOId] [int] NULL,
	[DELNo] [varchar](100) NULL,
	[TP] [varchar](50) NULL,
	[CostPerMT] [decimal](18, 2) NULL,
	[LoadDate] [smalldatetime] NOT NULL,
	[Freight] [decimal](18, 2) NOT NULL,
	[Fixed] [bit] NULL,
	[Transhipment] [int] NULL,
	[LoadType] [varchar](100) NULL,
	[GrossWt] [decimal](18, 3) NULL,
	[TareWT] [decimal](18, 3) NULL,
	[NetWT] [decimal](18, 3) NOT NULL,
	[Moisture] [decimal](18, 3) NULL,
	[MoistureUnit] [varchar](10) NULL,
	[TotalBags] [int] NULL,
	[MaterialValue] [decimal](18, 2) NULL,
	[TruckId] [int] NOT NULL,
	[HSD] [decimal](18, 3) NULL,
	[PumpId] [int] NULL,
	[HSDRate] [decimal](18, 2) NULL,
	[HSDCost] [decimal](18, 2) NULL,
	[Seals] [varchar](250) NULL,
	[AssociationCharge] [decimal](18, 2) NULL,
	[Labor] [decimal](18, 2) NULL,
	[Detention] [decimal](18, 2) NULL,
	[Collection] [decimal](18, 2) NULL,
	[Welfare] [decimal](18, 2) NULL,
	[Other] [decimal](18, 2) NULL,
	[Advance] [decimal](18, 2) NULL,
	[TotalAdvance] [decimal](18, 2) NULL,
	[Remarks] [varchar](2000) NULL,
	[LoadedBy] [int] NULL,
	[LoadedOn] [smalldatetime] NULL,
	[TotalFreight] [decimal](18, 2) NULL,
	[LoadDMT] [decimal](18, 3) NULL,
	[DriverId] [int] NULL,
	[OwnerId] [int] NULL,
	[BrokerId] [int] NULL,
	[AssociationId] [int] NULL,
	[GateEntryNo] [varchar](50) NULL,
	[SAPNo] [varchar](50) NULL,
	[TPBookNo] [varchar](50) NULL,
	[WayBillNo] [varchar](50) NULL,
	[LRNumber] [varchar](50) NULL,
	[ApprovalStatus] [int] NULL,
	[TruckSource] [varchar](50) NULL,
	[GuaranteeWT] [decimal](18, 3) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Distance] [decimal](18, 3) NULL,
	[ValidityDate] [datetime] NULL,
	[WayBillBy] [varchar](20) NULL,
	[ClientInvoiceNo] [varchar](20) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[I3MSDataId] [int] NULL,
	[OldFreightRate] [decimal](18, 2) NULL,
	[VoucherDate] [datetime] NULL,
	[LedgerId] [int] NULL,
	[InvoiceClientRate] [decimal](18, 2) NULL,
	[SourceId] [varchar](150) NULL,
	[DestinationId] [varchar](150) NULL,
	[InvoiceClaimQty] [decimal](18, 2) NULL,
	[FreightPayable] [decimal](18, 2) NULL,
	[ChargesQty] [decimal](18, 3) NULL,
	[OtherExpenses] [decimal](18, 2) NULL,
	[TotalHSD] [decimal](18, 2) NULL,
	[UnloadingWt] [decimal](18, 3) NULL,
	[UnloadingDate] [datetime] NULL,
	[VehicleNumber] [varchar](100) NULL,
	[TPId] [int] NULL,
	[TPDId] [int] NULL,
	[GPSAmount] [decimal](18, 2) NULL,
	[OnlineRegAmount] [decimal](18, 2) NULL,
	[MemoNo] [varchar](30) NULL,
	[CommAmount] [decimal](18, 2) NULL,
	[ClientRateId] [int] NULL,
	[RateTime] [int] NULL,
	[BulkLoadId] [int] NULL,
	[IsCommissionApproved] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_log_loadingchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
       
CREATE VIEW [dbo].[vw_log_loadingchallandetails]
AS
	SELECT LoadedOn EntryLoadedOn, LoadDMT, l.Id LoadingId, l.Transhipment, l.TotalAdvance, l.TotalFreight, MaterialValue, CostPerMT, Freight, Advance, HSD, HSDCost, HSDRate, ChallanNo, l.TotalBags, NetWT, l.GuaranteeWT, Moisture, MoistureUnit, CONVERT(VARCHAR(10),LoadDate, 103) LoadDate, l.LoadType, AssociationCharge, 
		Labor, Welfare, Other, l.Detention, Collection, DELNo, l.Seals, l.TP, Fixed, GrossWt, TareWt, l.Remarks, CONVERT(VARCHAR(10),l.LoadedOn, 103) LoadedOn, LoadedBy, BranchName LoadBranchName, FullName LoaderName
		, STONo, s.Id STOId
		, t.TruckId, TruckNumber, Wheeler, BrokerName, DriverName, OwnerName, OwnerPAN, AssociationName, l.TruckSource, OwnerContact, DriverContact, BrokerContact
		, Sector, j.JobId, JobNo, WO, MaterialName, ClientName, ClientRate, j.JobStartDate, j.JobEndDate, j.loadingpoint, j.unloadingpoint, j.executingbranchname
		, PumpName, pump.id PumpId
		FROM log_loadingchallan l
LEFT OUTER JOIN vw_jobDetails j ON j.JobId=l.JobId				
LEFT OUTER JOIN STODetails s ON s.Id=l.STOId
LEFT OUTER JOIN vw_truckdetails t ON t.TruckId=l.TruckId
LEFT OUTER JOIN pump ON pump.id=l.pumpid
LEFT OUTER JOIN pumpname ON pumpname.id=pump.pumpnameid
LEFT OUTER JOIN vw_userdetails ON LoadedBy=UserId


GO
/****** Object:  Table [dbo].[Log_UnloadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Log_UnloadingChallan](
	[Id] [int] NOT NULL,
	[LoadingChallanId] [int] NULL,
	[UnloadedGrossWt] [decimal](18, 3) NULL,
	[UnloadedTareWt] [decimal](18, 3) NULL,
	[UnloadedNetWt] [decimal](18, 3) NULL,
	[UnloadedDate] [smalldatetime] NULL,
	[GRNNo] [varchar](50) NULL,
	[UnloadedMoisture] [decimal](18, 3) NULL,
	[UnloadedMoistureUnit] [varchar](2) NULL,
	[Seals] [varchar](100) NULL,
	[Detention] [decimal](18, 3) NULL,
	[UnloadedBags] [int] NULL,
	[Remarks] [varchar](100) NULL,
	[UnloadedBy] [int] NULL,
	[UnloadedOn] [smalldatetime] NULL,
	[UnloadDMT] [decimal](18, 3) NULL,
	[ClientPenalty] [decimal](18, 2) NULL,
	[RecoverAmount] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UnloadInvoiceClaimQty] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_log_unloadingchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE VIEW [dbo].[vw_log_unloadingchallandetails]
AS
	SELECT  UnloadedOn EntryUnLoadedOn, l.*, UnloadDMT, u.Id UnloadingId, LoadingChallanId, UnloadedGrossWt,UnloadedTareWt,UnloadedNetWt, CONVERT(VARCHAR(10),u.UnloadedDate, 103) UnloadedDate,GRNNo
      ,UnloadedMoisture,UnloadedMoistureUnit,u.Seals UnloadSeals,u.Detention UnloadDetention
      ,UnloadedBags,u.Remarks UnloadRemarks,UnloadedBy, CONVERT(VARCHAR(10),u.UnloadedOn, 103) UnloadedOn
	  ,BranchName UnloadBranchName, FullName UnloaderName
	  ,CASE WHEN MoistureUnit='%' THEN NetWt ELSE NetWt+COALESCE(Moisture,0) END ClaimLoad
	  ,CASE WHEN UnloadedMoistureUnit='%' THEN UnloadedNetWt ELSE UnloadedNetWt+COALESCE(UnloadedMoisture,0) END ClaimUnload
	  ,CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END),1) EffectiveAmount
	  ,ClientPenalty
  FROM vw_log_loadingchallandetails l
  LEFT OUTER JOIN log_UnloadingChallan u ON u.LoadingChallanId=LoadingId
  LEFT OUTER JOIN vw_userdetails ON UnloadedBy=UserId






GO
/****** Object:  Table [dbo].[Log_Payment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Log_Payment](
	[Id] [int] NOT NULL,
	[LoadingId] [int] NULL,
	[UnloadingId] [int] NULL,
	[ChallanDeduction] [decimal](18, 2) NULL,
	[TollGate] [decimal](18, 2) NULL,
	[EffectiveWt] [decimal](18, 3) NULL,
	[ShortageWt] [decimal](18, 3) NULL,
	[Penalty] [decimal](18, 2) NULL,
	[ChallanLost] [decimal](18, 2) NULL,
	[Adjustment] [decimal](18, 2) NULL,
	[NetPayable] [decimal](18, 2) NULL,
	[PaidDate] [smalldatetime] NULL,
	[PaidTo] [varchar](200) NULL,
	[PaidToId] [int] NULL,
	[PaymentMode] [varchar](10) NULL,
	[ChequeNo] [varchar](50) NULL,
	[PaidAmount] [decimal](18, 2) NULL,
	[Remarks] [varchar](2000) NULL,
	[PaidBy] [int] NULL,
	[PaidOn] [smalldatetime] NULL,
	[IsSubmitted] [int] NULL,
	[IsApproved] [int] NULL,
	[IsRejected] [int] NULL,
	[PaidToLedger] [int] NULL,
	[TdsId] [int] NULL,
	[TdsDeclaration] [varchar](10) NULL,
	[TdsAmount] [decimal](18, 2) NULL,
	[TdsRate] [decimal](18, 2) NULL,
	[PVoucherId] [int] NULL,
	[ShortagePenaltyWt] [decimal](18, 3) NULL,
	[PenaltyRate] [decimal](18, 2) NULL,
	[EscalationRate] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[OtherDeduction] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_log_paymentchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- select top  1 * from vw_log_paymentchallandetails where loadedby is not null
--select * from users

CREATE VIEW [dbo].[vw_log_paymentchallandetails]
AS
SELECT p.PaidOn EntryPaidOn, u.*, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId,ChallanDeduction,TollGate,EffectiveWt,ShortageWt
      ,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
      ,PaymentMode,ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
      ,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName
	  ,ROUND(COALESCE(ChallanLost,0)+Penalty,0) TotalDeduction
  FROM vw_log_unloadingchallandetails u
  LEFT OUTER JOIN log_Payment p ON p.LoadingId=u.LoadingId
  LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
  --WHERE u.UnloadingId IS NOT NULL AND p.Id IS NOT NULL







GO
/****** Object:  View [dbo].[vw_tokenchallandetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_tokenchallandetails]
AS
SELECT u.ChallanNo id, u.ChallanNo ChallanNo, u.TP, u.LOwnerId, u.TruckNumber, u.Sector, u.MaterialName, u.TotalAdvance, u.EffectiveAmount, u.Freight
, p.ChallanDeduction, p.TollGate, p.ShortageWt, p.Penalty, p.ChallanLost, p.Adjustment, p.TdsAmount, u.LoadType
, u.JobNo, u.LoadDate, u.UnloadedDate, u.NetWT, u.UnloadedNetWt, u.TruckSource, p.Id PaymentId, u.LoadingId, p.OtherDeduction
,Convert(Decimal(18,2),Round(PaidAmount,0)) as PaidAmount
,IsNull(P.EscalationRate, 0.0) as EscalationRate, u.Advance Cash, isnull(u.HSDCost,0) as HSD
,U.UnloadDetention AS UnloadDetention, u.OwnerName, u.OwnerPAN, L.OldFreightRate, u.DestinationId, u.loadingpoint, u.unloadingpoint, 0 DelayUnLoading
, p.EffectiveWt  , u.GuaranteeWT,L.LRNumber , ISNULL(L.GPSAmount, 0.0) AS GPSAmount ,ISNull(L.OnlineRegAmount,0.0) as OnlineRegAmount,
ISNULL(L.OtherExpenses,0.0) AS OfficeAmount ,ISNULL(L.CommAmount,0.0) AS CommAmount , ISNULL(L.BrokerId,0) AS BrokerId 
,(ISNULL(L.TotalAdvance ,0.0) + ISNULL(L.OtherExpenses,0.0) + ISNULL(L.GPSAmount, 0.0) + ISNull(L.OnlineRegAmount,0.0) + ISNULL(L.CommAmount,0.0)) AS TotalDeductions,
A.Amount AS AdvBulk ,B.Amount AS SecondHSD ,L.ApprovalStatus ,C.Amount AS THirdHSD, (ISNULL(u.TotalAdvance,0) -(ISNULL(A.Amount,0) + ISNULL(u.Advance,0) )) TotalHSD
  FROM vw_unloadingchallandetails u
  LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
  LEFT OUTER JOIN LoadingChallan L ON L.Id=u.LoadingId
  LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount from LoadingAdvance  Where AdvanceType = 1 and PaymentMode = 3) AS A ON L.Id =A.LoadingId
  LEFT OUTER JOIN (Select top 1 LoadingId, ISNULL(Amount,0) Amount ,A.PumpId from LoadingAdvance A
  LEFT OUTER JOIN LoadingChallan L On L.Id = A.LoadingId Where AdvanceType = 2 and L.PumpId<>A.PumpId) AS B ON L.Id =B.LoadingId

  LEFT OUTER JOIN (Select top 1 LoadingId, ISNULL(Amount,0) Amount ,AA.PumpId from LoadingAdvance AA
  LEFT OUTER JOIN LoadingChallan L On L.Id = AA.LoadingId Where AdvanceType = 2 and  L.PumpId<>AA.PumpId) AS C ON L.Id =C.LoadingId
  WHERE u.UnloadingId IS NOT NULL -- and u.challanno=39151
GO
/****** Object:  Table [dbo].[_AdvanceDetailsSupervisor]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_AdvanceDetailsSupervisor](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AdvanceDetailId] [int] NOT NULL,
	[SupervisorId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__AdvanceDetailsSupervisor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_AdvanceDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_AdvanceDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AdvanceId] [int] NOT NULL,
	[JobId] [int] NOT NULL,
	[TruckSource] [varchar](50) NOT NULL,
	[Trucks] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Rate] [decimal](18, 2) NOT NULL,
	[PerTruckAdvance] [decimal](18, 2) NOT NULL,
	[OtherAmount] [decimal](18, 2) NULL,
	[OtherRemarks] [varchar](500) NULL,
	[Remarks] [varchar](5000) NULL,
	[ApprovedAmount] [decimal](18, 2) NULL,
	[ApprovalRemarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Cash] [decimal](18, 2) NOT NULL,
	[FundTransfer] [decimal](18, 2) NOT NULL,
	[Diesel] [decimal](18, 2) NOT NULL,
	[AdvanceTypeId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__AdvanceDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_Advance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_Advance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NOT NULL,
	[RequisitionDate] [date] NOT NULL,
	[LoadDate] [date] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[VoucherId] [int] NULL,
	[RequisitionNo]  AS (concat('',[BranchCode],'/',replace(CONVERT([varchar],[LoadDate],(103)),'/',''),'/',isnull(replicate('0',(2)-len([RNo])),'')+CONVERT([varchar],[RNo]))),
	[RNo] [int] NULL,
	[BranchCode] [varchar](10) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__Advance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_advancesummary]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--select * from vw_advancesummary
CREATE VIEW [dbo].[vw_advancesummary]
AS

	SELECT Sector, Advance.Id AdvanceId, JobQuantity, ClientName, JobNo, WO,
		CONVERT(VARCHAR(10),Advance.RequisitionDate,103) RequisitionDate, MaterialName, LoadingPoint, 
		UnloadingPoint,Convert(varchar(10),Advance.LoadDate,103) LoadDate, FullName SupervisorName, ExecutingBranchName,
	Sum(CASE WHEN advancedetails.TruckSource = 'MARKET' THEN ISNULL(advancedetails.Trucks,0) ELSE 0 END) AS BrokerTruck
		,Sum(CASE WHEN advancedetails.TruckSource = 'OWN' THEN ISNULL(advancedetails.Trucks,0) ELSE 0 END) AS OwnTruck
		,Sum(CASE WHEN advancedetails.TruckSource = 'ASSOCIATION' THEN ISNULL(advancedetails.Trucks,0) ELSE 0 END) AS AssociationTruck
		,SUM(CONVERT(DECIMAL(18,2),Quantity* (advancedetails.Trucks),1)) TotalWeight
		,SUM(CONVERT(DECIMAL(18,2),Quantity* Rate*(advancedetails.Trucks),1)) TotalFreight
			,SUM(CONVERT(DECIMAL(18,2),(ISNULL(advancedetails.PerTruckAdvance,0) * ISNULL(advancedetails.Trucks,0)),1)) TotalAdvance
			,SUM(CONVERT(DECIMAL(18,2),OtherAmount,1)) TotalOther
	FROM _Advance As Advance
	LEFT OUTER JOIN _AdvanceDetails As advancedetails ON Advance.Id=Advancedetails.AdvanceId
	LEFT OUTER JOIN vw_JobDetails j ON j.JobId=advancedetails.JobId
	Left Outer Join _AdvanceDetailsSupervisor S On S.AdvanceDetailId = advancedetails.Id
	LEFT OUTER JOIN vw_UserDetails u ON u.UserId=S.SupervisorId
	GROUP BY Advancedetails.AdvanceId, Sector, Advance.Id, JobQuantity, ClientName, JobNo, WO,	Advance.RequisitionDate, 
			MaterialName, LoadingPoint, UnloadingPoint, Advance.LoadDate, FullName, ExecutingBranchName


GO
/****** Object:  View [dbo].[vw_LoadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vw_LoadingChallan]
AS
					SELECT LoadingChallan.Id Id,LoadingChallan.TruckId TruckId,LoadingChallan.ChallanNo,CONVERT(VARCHAR(10),JobDetails.StartDate,103) StartDate,CONVERT(VARCHAR(10),JobDetails.EndDate,103) EndDate,JobDetails.JobNo,LoadingChallan.JobId,STONo,LoadingChallan.STOId STOId,LoadingChallan.DelNo DelNo,LoadingChallan.TP,LoadingChallan.CostPerMT Value,CONVERT(VARCHAR(10),LoadingChallan.LoadDate,103) LoadDate,LoadingChallan.Freight,LoadingChallan.Fixed, LoadingChallan.LoadType,LoadingChallan.GrossWT,LoadingChallan.TareWT,LoadingChallan.NetWT, LoadingChallan.GuaranteeWT, LoadingChallan.Moisture
					  ,LoadingChallan.MoistureUnit,LoadingChallan.TotalBags,LoadingChallan.MaterialValue TotalValue,Truck.TruckNumber TruckNumber,LoadingChallan.HSD,LoadingChallan.PumpID,PumpName.PumpName PumpName,LoadingChallan.HSDRate,LoadingChallan.HSDCost,LoadingChallan.Seals,LoadingChallan.AssociationCharge,LoadingChallan.Labor,LoadingChallan.Detention,LoadingChallan.Collection,LoadingChallan.Welfare
					  ,LoadingChallan.Other,LoadingChallan.Advance,LoadingChallan.TotalAdvance Total, TotalAdvance, LoadingChallan.Remarks,LoadingChallan.LoadedBy,LoadingChallan.LoadedOn,UnloadingChallan.UnloadedNetWt  FROM LoadingChallan
					  LEFT OUTER JOIN PumpName ON PumpName.id=LoadingChallan.PumpID
					  LEFT OUTER JOIN JobDetails ON JobDetails.id=LoadingChallan.JobId
					  LEFT OUTER JOIN Truck ON Truck.id=LoadingChallan.TruckId
					  LEFT OUTER JOIN STODetails ON STODetails.id=LoadingChallan.STOId
					  LEFT OUTER JOIN UnloadingChallan ON UnloadingChallan.LoadingChallanId=LoadingChallan.Id
            

GO
/****** Object:  Table [dbo].[Accounts_VoucherTransaction]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_VoucherTransaction](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VoucherId] [int] NOT NULL,
	[LedgerId] [int] NOT NULL,
	[CostCenter] [int] NULL,
	[Narration] [varchar](5000) NULL,
	[TransactionType] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[ChkNeftRefNo] [varchar](500) NULL,
	[PaymentMode] [int] NULL,
	[ReconciliationDate] [date] NULL,
	[ReconciliationRemarks] [varchar](5000) NULL,
	[TDSPaymentNature] [int] NULL,
	[TDSRate] [decimal](18, 2) NULL,
	[STCategory] [int] NULL,
	[STRate] [decimal](18, 2) NULL,
	[fyid] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_VoucherTransaction] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_VoucherTransactions]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_VoucherTransactions] AS
SELECT VT.[Id]
      ,VT.[VoucherId]
      ,VT.[LedgerId]
      ,VT.[CostCenter]
      ,VT.[Narration]
      ,VT.[TransactionType]
      ,VT.[Amount]
      ,VT.[ChkNeftRefNo]
      ,VT.[PaymentMode]
      ,VT.[ReconciliationDate]
      ,VT.[ReconciliationRemarks]
      ,VT.[TDSPaymentNature]
      ,VT.[TDSRate]
      ,VT.[STCategory]
      ,VT.[STRate]
	  ,V.VoucherDate, V.VoucherNo, V.VoucherType, V.[Status] as VoucherStatus
  FROM [dbo].[Accounts_VoucherTransaction] VT
 LEFT JOIN Accounts_Vouchers V ON V.Id = VT.VoucherId

GO
/****** Object:  View [dbo].[vw_accountjobdetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_accountjobdetails]
AS
Select XX.*, Upper(AP.StatusType) as JobStatusName FROM (
select j.Id AS JobId, j.Active, 
JobNo, WO, CONVERT(VARCHAR(10), StartDate, 103) JobStartDate, CONVERT(VARCHAR(10), EndDate, 103) JobEndDate, Quantity JobQuantity, ClientRate
, Tolerance, Loading LoadingPoint, Unloading UnloadingPoint, Loading+' - '+Unloading AS Sector, 
MaterialName, c.Name ClientName, j.ClientId, j.ConsigneeId, j.ConsignerId, j.ClaimQtyType,
e.Name ConsigneeName,g.Name ConsignerName, r.Name JobCreatedBy
, CONVERT(VARCHAR(10), j.CreatedOn, 103) JobCreatedOn, j.BranchId ExecutingBranchId, b.Name ExecutingBranchName
,j.Rules
,j.ShowClientRate,j.NextAdvanceDay
,IsNull((Select [Status] From _JobApprovals Where Id = (Select Max(Id) From _JobApprovals Where JobId = j.Id)),1) as JobStatus
from jobdetails j
LEFT OUTER JOIN LoadingPoints l ON l.id = j.loadingpointid
LEFT OUTER JOIN UnLoadingPoints u ON u.id = j.unloadingpointid
LEFT OUTER JOIN Materials m ON m.id = j.MaterialId
LEFT OUTER JOIN Client c ON c.id = j.ClientId
LEFT OUTER JOIN Client e ON e.id = j.ConsigneeId
LEFT OUTER JOIN Client g ON g.id = j.ConsignerId
LEFT OUTER JOIN Users r ON r.id = j.CreatedBy
LEFT OUTER JOIN Branch b ON b.Id=j.BranchId
) XX
LEFT JOIN Accounts_ApprovalStatus AP On AP.Id = XX.JobStatus

GO
/****** Object:  View [dbo].[vw_RecoveryReport]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_RecoveryReport]
AS
	select R.PartyId,P.PartyName,SUM(R.RecoveryAdjustment) AS RecoverableAmount, SUM(R.Amount) AS RecoveredAmount 
    ,(SUM(R.TotalRecoverableAmount)) AS BalanceRecovery,(R.TransactionDate) AS Date ,R.Remarks 
	from _Recovery R 
    Left outer join Common_Parties P on R.PartyId=P.Id 
	GROUP BY R.PartyId,P.PartyName,R.Remarks,R.TransactionDate
	
GO
/****** Object:  View [dbo].[vw_InvoiceDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View  [dbo].[vw_InvoiceDetails] AS
Select 
	I.Id as InvoiceId, InvoiceNo, I.InvoiceDate, Convert(Varchar(50), I.InvoiceDate, 103) as InvoiceDateStr, C.[Type] as ClaimType, 
	I.UseMoisture, I.BillStatus, I.TransactionNo, I.Abatement,
	I.AddTaxInAmount, I.SubmisstionDate, IP.RealizationOn as RealizationDate,
	(CASE WHEN IP.RealizationOn IS NULL OR (A.TotalInvoiceAmount-(coalesce(IP.ReceivedAmount,0)+coalesce(IP.TDSAmount,0)+coalesce(IP.ShortageDeduction,0)+coalesce(IP.MoistureDeduction,0)+coalesce(IP.OtherDeduction,0))>5) THEN DATEDIFF(day, SubmisstionDate, GetDate()) ELSE NULL END) as Age,
	A.ClaimWt, A.InvoiceAmount as InvoiceAmount, A.HandlingAmount, A.TotalInvoiceAmount, IP.ReceivedAmount as ReceivedAmount,
	(coalesce(IP.ReceivedAmount,0)+coalesce(IP.TDSAmount,0)+coalesce(IP.ShortageDeduction,0)+coalesce(IP.MoistureDeduction,0)+coalesce(IP.OtherDeduction,0)) TotalAmountReceived, 
	IP.ShortageDeduction as Deduction, IP.MoistureDeduction as MoistureDeduction, IP.TDSAmount as TDS, 
	IP.OtherDeduction as OtherDeduction, Null as OtherDeductionRemarks, 
	I.JobId, J.JobNo, J.Job_StartDate, J.Job_EndDate, J.ClientId, J.ClientName, J.ClientCode, J.ClientRate,
	J.LoadingPoint, J.UnloadingPoint, J.Sector, j.MaterialName,
	J.ExecutingBranchId, J.ExecutingBranchName, J.InvoiceBranchId, J.InvoiceBranchName
	,(Select Count(IC.Id) From _InvoiceChallan IC Where IC.InvoiceId = I.Id ) as TotalChallans
	,IsNull(TaxAmount,0.0) TaxAmount,InvoiceTaxAmount
FROM _Invoice I
Left Join vw_InvoicePaymentDetails IP On IP.InvoiceId = I.Id
Left JOIN vw_jobdetails J on J.JobId = I.JobId
Left JOIN _ClaimQtyType C on C.Id = I.ClaimQtyType
Left Join vw_InvoiceAmount A on A.Id = I.Id
Left Join vw_InvoiceTotalTaxHandlingDetails T on T.InvoiceId = I.Id







GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetPenaltyForChallanDyanamic]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetPenaltyForChallanDyanamic] (@JobId INT, @NetWt DECIMAL(18,2), @TotalShortage DECIMAL(18,2), @TotalTyre INT, @LoadType VARCHAR(500), @TruckSource VARCHAR(500))
RETURNS TABLE
AS 
RETURN 
(
		
		SELECT MAX(CONVERT(DECIMAL(18,2), PenaltyRate * (CASE WHEN @TotalShortage < (CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @TotalShortage - (CASE WHEN LimitUnit='%' THEN (@NetWt * COALESCE(Limit,0) * 10) ELSE Limit END) ELSE @TotalShortage END
		END),1)) AS ShortageAmt, -- JobId,
		
		MAX(CONVERT(DECIMAL(18,3),(CASE WHEN @TotalShortage < (CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @TotalShortage - (CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @TotalShortage END
		END),1)) AS PenaltyShortageWt,

		CASE WHEN MAX(CONVERT(DECIMAL(18,3),(CASE WHEN @TotalShortage < (CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		CASE WHEN Deduction='EXTRA' THEN @TotalShortage - (CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @TotalShortage END
		END),1)) = MAX(CONVERT(DECIMAL(18,3),(CASE WHEN Deduction='FULL' THEN @TotalShortage END ),1)) THEN 'FULL' ELSE 'EXTRA' END
		DeductionType

		FROM [TransporterShortage] WHERE UPPER(LoadType) = UPPER(@LoadType) AND [Wheels] = @TotalTyre AND JobId=@JobId AND Transporter = @TruckSource
        GROUP BY JobId
)
GO
/****** Object:  Table [dbo].[Access]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Access](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ModuleId] [int] NULL,
	[GroupId] [int] NULL,
	[View] [bit] NULL,
	[Edit] [bit] NULL,
	[Add] [bit] NULL,
	[Delete] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_AutoVoucherAction]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_AutoVoucherAction](
	[ActionType] [varchar](50) NOT NULL,
	[DisplayName] [varchar](50) NOT NULL,
	[DefaultStatus] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_AutoVoucherAction] PRIMARY KEY CLUSTERED 
(
	[ActionType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_Banks]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_Banks](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[AssociatedBranch] [int] NULL,
	[BankId] [int] NOT NULL,
	[ACName] [varchar](50) NULL,
	[ACNumber] [varchar](50) NOT NULL,
	[BranchName] [varchar](50) NULL,
	[BranchAddress] [varchar](500) NULL,
	[IFSCCode] [varchar](50) NULL,
	[MICRCode] [varchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[BankCCLimit] [decimal](18, 2) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_Banks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_Banks] UNIQUE NONCLUSTERED 
(
	[ACNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_BillsCategory]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_BillsCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_BillsCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_BillsCategory] UNIQUE NONCLUSTERED 
(
	[CategoryName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_BillsItems]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_BillsItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BillId] [int] NOT NULL,
	[ItemName] [varchar](50) NOT NULL,
	[Description] [varchar](500) NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[PricePerUnit] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_BillsItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_BillsItems] UNIQUE NONCLUSTERED 
(
	[BillId] ASC,
	[ItemName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_BillsOwner]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_BillsOwner](
	[Id] [int] NOT NULL,
	[OwnerName] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_BillsOwner] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_ClosingConfirmation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_ClosingConfirmation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[ActionDate] [smalldatetime] NOT NULL,
	[ActionType] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_ClosingConfirmation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_CostCenters]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_CostCenters](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[CostCenterType] [int] NOT NULL,
	[JobId] [int] NULL,
	[BranchId] [int] NULL,
	[ParentId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_CostCenters] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_CostCenters] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_CostCentersTypes]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_CostCentersTypes](
	[Id] [int] NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_CostCentersTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_CostCentersTypes] UNIQUE NONCLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_DailyBranchClosingBalance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_DailyBranchClosingBalance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [date] NOT NULL,
	[BranchId] [int] NOT NULL,
	[ActualClosing] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_DailyBranchClosingBalance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_FinancialYear]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_FinancialYear](
	[Id] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[NameForInvoice] [varchar](5) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_FinancialYear] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_Groups]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_Groups](
	[Id] [int] IDENTITY(50,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[GroupNature] [int] NOT NULL,
	[ParentId] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[SystemCreated] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_Groups] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_GroupsNature]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_GroupsNature](
	[Id] [int] NOT NULL,
	[NatureOfGroup] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_GroupsNature] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_GroupsNature] UNIQUE NONCLUSTERED 
(
	[NatureOfGroup] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_LedgerBalance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_LedgerBalance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[Year] [int] NOT NULL,
	[OpeningBalance] [decimal](18, 2) NOT NULL,
	[OpeningTransactionType] [int] NOT NULL,
	[ClosingBalance] [decimal](18, 2) NULL,
	[ClosingTransactionType] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_LedgerBalance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_LedgerBalance] UNIQUE NONCLUSTERED 
(
	[LedgerId] ASC,
	[Year] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_MonthNames]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_MonthNames](
	[Id] [int] NOT NULL,
	[MonthName] [varchar](50) NOT NULL,
	[ShortMonthName] [varchar](50) NOT NULL,
	[FinancialYearOrder] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_MonthNames] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_OnAccPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_OnAccPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VoucherId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[ClientId] [int] NOT NULL,
	[BranchId] [int] NOT NULL,
	[Remarks] [varchar](1500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_OnAccPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_PaymentMode]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_PaymentMode](
	[Id] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_PaymentMode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_STCategoryMapping]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_STCategoryMapping](
	[Id] [int] NOT NULL,
	[ModuleName] [varchar](500) NOT NULL,
	[DisplayName] [varchar](500) NOT NULL,
	[STCategory] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_STCategoryMapping] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_STCategoryMapping] UNIQUE NONCLUSTERED 
(
	[ModuleName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TaxMaster]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TaxMaster](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DisplayName] [varchar](500) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_TaxMaster] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TaxMasterContent]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TaxMasterContent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TaxMasterId] [int] NOT NULL,
	[TDSTypeId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[RateWithPAN] [decimal](18, 2) NOT NULL,
	[RateWithOutPAN] [decimal](18, 2) NOT NULL,
	[MinPaymentForTDS] [decimal](18, 2) NOT NULL,
	[AggregatePaymentForTDS] [decimal](18, 2) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[NatureOfPayment] [int] NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_TaxMasterContent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TaxType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TaxType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TaxTypeName] [varchar](50) NOT NULL,
	[IsPayable] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_InvoiceTaxType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TDSNatureOfPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TDSNatureOfPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Section] [varchar](10) NOT NULL,
	[Code] [varchar](3) NOT NULL,
	[PaymentNature] [varchar](1000) NOT NULL,
	[DisplayName] [varchar](100) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_TDSNatureOfPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TDSSettings]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TDSSettings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TDSTypeId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[RateWithPAN] [decimal](18, 2) NOT NULL,
	[RateWithOutPAN] [decimal](18, 2) NOT NULL,
	[MinPaymentForTDS] [decimal](18, 2) NOT NULL,
	[AggregatePaymentForTDS] [decimal](18, 2) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[NatureOfPayment] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_TDSSettings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_TDSSettings] UNIQUE NONCLUSTERED 
(
	[TDSTypeId] ASC,
	[DateTo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Accounts_TDSSettings_1] UNIQUE NONCLUSTERED 
(
	[TDSTypeId] ASC,
	[DateFrom] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TDSType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TDSType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TDSTypeName] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Accounts_TDSType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_TransactionType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_TransactionType](
	[Id] [int] NOT NULL,
	[Name] [varchar](10) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Accounts_TransactionType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Accounts_TransactionType] UNIQUE NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_VouchersLog]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_VouchersLog](
	[LogId] [bigint] IDENTITY(1,1) NOT NULL,
	[OperationType] [smallint] NOT NULL,
	[ChangingUserId] [int] NULL,
	[ValidFrom] [datetime] NOT NULL,
	[ValidUntil] [datetime] NOT NULL,
	[Id] [int] NOT NULL,
	[VoucherDate] [date] NOT NULL,
	[FinancialYear] [int] NOT NULL,
	[VoucherType] [int] NOT NULL,
	[ReferenceNo] [varchar](50) NULL,
	[ReferenceDate] [date] NULL,
	[Description] [varchar](500) NULL,
	[Status] [int] NULL,
	[StatusBy] [int] NULL,
	[StatusOn] [date] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Account_VouchersLog] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_VouchersRefType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_VouchersRefType](
	[Id] [int] NOT NULL,
	[Type] [varchar](50) NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__Accounts__3214EC07AA064E0C] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Accounts_VoucherType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts_VoucherType](
	[Id] [int] NOT NULL,
	[VType] [varchar](50) NOT NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Account_VoucherType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImEx_Account_VoucherType] UNIQUE NONCLUSTERED 
(
	[VType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AssociationDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssociationDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [varchar](50) NULL,
	[Source] [varchar](50) NULL,
	[Destination] [varchar](50) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[RatePKM] [decimal](18, 2) NULL,
	[RatePMT] [decimal](18, 2) NULL,
	[FixedRate] [decimal](18, 2) NULL,
	[VehicleType] [varchar](50) NULL,
	[AssociationId] [int] NULL,
	[Deleted] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditLog]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditLog](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[UserName] [varchar](50) NOT NULL,
	[Action] [varchar](50) NOT NULL,
	[ChangedOn] [datetime] NOT NULL,
	[TableName] [varchar](50) NOT NULL,
	[RowId] [int] NOT NULL,
	[Module] [varchar](500) NULL,
	[Page] [varchar](500) NULL,
	[Changes] [varchar](max) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_AuditLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BranchGSTSetup]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BranchGSTSetup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NOT NULL,
	[TaxType] [int] NOT NULL,
	[TaxRate] [decimal](18, 2) NOT NULL,
	[LedgerId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CementUpload]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CementUpload](
	[ChallanNo] [int] NULL,
	[DestinationId] [varchar](150) NULL,
	[InvoiceClientRate] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[City]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[City](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CityName] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_City] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_AduitLog]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_AduitLog](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[UserName] [varchar](50) NOT NULL,
	[Action] [varchar](50) NOT NULL,
	[ChangedOn] [datetime] NOT NULL,
	[TableName] [varchar](50) NOT NULL,
	[RowId] [int] NOT NULL,
	[Module] [varchar](500) NULL,
	[Page] [varchar](500) NULL,
	[Changes] [varchar](max) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_ChequeMaster]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_ChequeMaster](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NOT NULL,
	[BankId] [int] NULL,
	[LotNo] [varchar](50) NULL,
	[MicrNo] [varchar](50) NULL,
	[ChequeDate] [datetime] NULL,
	[ChequeNoFrom] [varchar](50) NULL,
	[ChequeNoTo] [varchar](50) NULL,
 CONSTRAINT [PK_Common_ChequeMaster] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_CompanyDirectors]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_CompanyDirectors](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CompanyId] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[DINNo] [varchar](50) NOT NULL,
	[MobileNo] [varchar](50) NOT NULL,
	[Email] [varchar](500) NULL,
	[Address] [varchar](500) NULL,
	[StateId] [int] NULL,
	[Country] [int] NULL,
	[PinCode] [varchar](10) NULL,
	[Image] [varchar](max) NULL,
	[Signature] [varchar](max) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_CompanyDirectors] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Country]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Country](
	[Id] [int] NOT NULL,
	[Name] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__Common_C__3214EC0755B2AA77] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__Common_C__737584F653912419] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_EmailSent]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_EmailSent](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FromEmail] [varchar](500) NULL,
	[ToEmail] [varchar](5000) NOT NULL,
	[CC] [varchar](500) NULL,
	[BCC] [varchar](500) NULL,
	[Subject] [varchar](500) NOT NULL,
	[Content] [nvarchar](max) NOT NULL,
	[IsHtml] [bit] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[Error] [varchar](5000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_EmailSent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_EmailTemplate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_EmailTemplate](
	[Id] [int] NOT NULL,
	[TemplateName] [varchar](100) NOT NULL,
	[TemplateHtml] [varchar](max) NOT NULL,
	[LastSentOn] [datetime] NOT NULL,
	[ErrorMsg] [varchar](5000) NULL,
	[ToEmailList] [varchar](5000) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_PartyAccount]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_PartyAccount](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyId] [int] NOT NULL,
	[BankACNo] [varchar](50) NULL,
	[BankId] [int] NOT NULL,
	[BankACType] [int] NOT NULL,
	[IFSCCode] [varchar](50) NULL,
	[BankAddress] [varchar](500) NULL,
	[PrimaryAC] [bit] NOT NULL,
	[JointACPartyId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[MICRNo] [varchar](100) NULL,
	[Attachments] [varchar](400) NULL,
	[branch] [varchar](50) NULL,
 CONSTRAINT [PK_Common_PartyAccount] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_PartyTDSDeclaration]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_PartyTDSDeclaration](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyId] [int] NOT NULL,
	[FinancialYear] [int] NOT NULL,
	[TDSDeclaration] [bit] NOT NULL,
	[Remarks] [varchar](500) NULL,
	[Attachment] [varchar](1500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_PartyTDSDeclaration] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_PreClient]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_PreClient](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CompanyName] [varchar](100) NOT NULL,
	[CAddressWithPinCode] [varchar](200) NULL,
	[Name] [varchar](100) NOT NULL,
	[AlternateName] [varchar](100) NULL,
	[MobileNo1] [varchar](50) NULL,
	[MobileNo2] [varchar](50) NULL,
	[PhoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[GroupId] [int] NOT NULL,
	[ClientCode] [varchar](10) NULL,
	[LedgerId] [int] NULL,
	[PANNo] [varchar](50) NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[BranchName] [varchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[MaxInvoiceAge] [int] NULL,
	[GSTNo] [varchar](50) NULL,
	[GSTReturnFile] [varchar](50) NULL,
	[GSTLastMonthFile] [varchar](50) NULL,
	[GSTDate] [date] NULL,
	[CINNO] [varchar](50) NULL,
	[CINDateIncorporation] [date] NULL,
	[IECNo] [varchar](50) NULL,
	[TypeOfOrganization] [varchar](50) NULL,
	[SSINumber] [varchar](50) NULL,
	[QualitySystemDetails] [varchar](100) NULL,
	[QualityCertificationDetails] [varchar](100) NULL,
	[QSEndDate] [date] NULL,
	[Commodity] [varchar](50) NULL,
	[SACCode] [varchar](50) NULL,
	[RatingAgencyName] [varchar](50) NULL,
	[RatingAgencyRatting] [varchar](50) NULL,
	[ROCSearchReport] [varchar](50) NULL,
	[Authorized] [varchar](50) NULL,
	[PaidCapital] [varchar](50) NULL,
	[LoanAmount] [int] NULL,
	[LastABSDate] [date] NULL,
	[SPLastOneYear] [varchar](50) NULL,
	[NCLTReport] [varchar](50) NULL,
	[PaymentTerms] [varchar](50) NULL,
	[CPAForPayment] [varchar](50) NULL,
	[ExceptedProfitabilityRatio] [varchar](50) NULL,
	[EPOutstandingVolume] [varchar](50) NULL,
	[ABVolumePerMonth] [varchar](50) NULL,
	[EMDBGSubmitted] [int] NULL,
	[Attachments] [varchar](5000) NULL,
	[OName] [varchar](50) NULL,
	[AlternateOname] [varchar](50) NULL,
	[OAccounts] [varchar](50) NULL,
	[ODept] [varchar](50) NULL,
	[ODesignation] [varchar](50) NULL,
	[OMobileNo] [varchar](50) NULL,
	[OPhotoNo] [varchar](50) NULL,
	[OEmail] [varchar](50) NULL,
	[OFax] [varchar](50) NULL,
	[OAddress] [varchar](2000) NULL,
	[BizOnlineOffline] [varchar](50) NULL,
	[CPRequestedByClients] [varchar](50) NULL,
	[ContractPeriod] [varchar](50) NULL,
	[BusinessByMarketingGuy] [varchar](50) NULL,
	[InvoiceFormat] [bit] NULL,
	[StateId] [int] NULL,
	[SubmittedBy] [int] NULL,
	[SubmittedOn] [smalldatetime] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedOn] [smalldatetime] NULL,
	[ApprovedBy] [int] NULL,
	[ApprovedOn] [smalldatetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordStatus] [int] NULL,
	[RejectedBy] [int] NULL,
	[RejectedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Client_Pre] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_PreVendor]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_PreVendor](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VendorName] [varchar](500) NOT NULL,
	[VendorCode] [varchar](50) NOT NULL,
	[GSTNo] [varchar](50) NULL,
	[PANNo] [varchar](50) NULL,
	[Address] [varchar](1000) NULL,
	[TDSType] [int] NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[LedgerId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[CompanyName] [varchar](100) NULL,
	[CAddressWithPinCode] [varchar](200) NULL,
	[AlternateVName] [varchar](100) NULL,
	[MobileNo1] [varchar](50) NULL,
	[MobileNo2] [varchar](50) NULL,
	[PhoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StateCodeNo] [int] NULL,
	[BankName] [varchar](50) NULL,
	[BranchName] [varchar](50) NULL,
	[BankAddress] [varchar](50) NULL,
	[BankAccountNo] [varchar](50) NULL,
	[TypeOfAccount] [varchar](50) NULL,
	[IFSCCode] [varchar](50) NULL,
	[RTGSNo] [varchar](50) NULL,
	[SSINumber] [varchar](50) NULL,
	[QualitySystemDetails] [varchar](100) NULL,
	[QualityCertificationDetails] [varchar](100) NULL,
	[QSEndDate] [date] NULL,
	[Commodity] [varchar](50) NULL,
	[HSNCode] [varchar](50) NULL,
	[SubmittedBy] [int] NULL,
	[SubmittedOn] [smalldatetime] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedOn] [smalldatetime] NULL,
	[ApprovedBy] [int] NULL,
	[ApprovedOn] [smalldatetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordStatus] [int] NULL,
	[RejectedBy] [int] NULL,
	[RejectedOn] [smalldatetime] NULL,
 CONSTRAINT [PK_Common_PreVendor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_ReconciliationStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_ReconciliationStatus](
	[Id] [int] NOT NULL,
	[StatusName] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_ReconciliationStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Settings]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Settings](
	[Id] [int] NOT NULL,
	[FieldName] [varchar](100) NOT NULL,
	[FieldValue] [varchar](5000) NOT NULL,
	[Description] [varchar](5000) NOT NULL,
	[LastUsed] [datetime] NULL,
	[AllowToModify] [bit] NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Common_Settings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Common_Vendor]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Common_Vendor](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VendorName] [varchar](500) NOT NULL,
	[VendorCode] [varchar](50) NOT NULL,
	[GSTNo] [varchar](50) NULL,
	[PANNo] [varchar](50) NULL,
	[Address] [varchar](1000) NULL,
	[TDSType] [int] NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[LedgerId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[CompanyName] [varchar](100) NULL,
	[CAddressWithPinCode] [varchar](200) NULL,
	[AlternateVName] [varchar](100) NULL,
	[MobileNo1] [varchar](50) NULL,
	[MobileNo2] [varchar](50) NULL,
	[PhoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StateCodeNo] [int] NULL,
	[BankName] [varchar](50) NULL,
	[BranchName] [varchar](50) NULL,
	[BankAddress] [varchar](50) NULL,
	[BankAccountNo] [varchar](50) NULL,
	[TypeOfAccount] [varchar](50) NULL,
	[IFSCCode] [varchar](50) NULL,
	[RTGSNo] [varchar](50) NULL,
	[SSINumber] [varchar](50) NULL,
	[QualitySystemDetails] [varchar](100) NULL,
	[QualityCertificationDetails] [varchar](100) NULL,
	[QSEndDate] [date] NULL,
	[Commodity] [varchar](50) NULL,
	[HSNCode] [varchar](50) NULL,
 CONSTRAINT [PK_Common_Vendor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DashbordChat]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashbordChat](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Message] [varchar](250) NULL,
	[UserId] [int] NULL,
	[InsertDate] [datetime] NULL,
 CONSTRAINT [PK_DashbordChat] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Document]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Document](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[Image] [varchar](max) NULL,
	[Url] [varchar](200) NULL,
	[VersionComment] [varchar](2000) NULL,
 CONSTRAINT [PK_Gallery] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EntityValues]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityValues](
	[EntityID] [int] NULL,
	[Value1] [char](1) NULL,
	[Value2] [char](1) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExcelUpload]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExcelUpload](
	[SNO] [varchar](50) NULL,
	[ChallanNo] [varchar](50) NULL,
	[TruckNo] [varchar](50) NULL,
	[TPNo] [varchar](50) NULL,
	[LRNo] [varchar](50) NULL,
	[GrossWt] [varchar](50) NULL,
	[TareWt] [varchar](50) NULL,
	[LoadDate] [varchar](50) NULL,
	[LoadWt] [varchar](50) NULL,
	[InstantId] [int] NULL,
	[Cash] [varchar](50) NULL,
	[HsdCost] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_AssociationFuelRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_AssociationFuelRate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AssociationId] [int] NOT NULL,
	[DateFrom] [datetime] NOT NULL,
	[DateTo] [datetime] NULL,
	[DieselRate] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_AssociationRateLP]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_AssociationRateLP](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AssociationId] [int] NOT NULL,
	[NoOfTyre] [int] NULL,
	[DateFrom] [date] NULL,
	[DateTo] [date] NULL,
	[LoadingPoint] [int] NULL,
	[UnLoadingPoint] [int] NULL,
	[FixedRate] [decimal](18, 2) NULL,
	[RatePerKm] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_AssociationRateLP] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_AssociationRateMT]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_AssociationRateMT](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AssociationId] [int] NOT NULL,
	[NoOfTyre] [int] NOT NULL,
	[RatePerMT] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_AssociationRateMT] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_ExpireType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_ExpireType](
	[Id] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_ExpireType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_FuelType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_FuelType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_FuelType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_FuelType] UNIQUE NONCLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Inventory]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Inventory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartsType] [int] NOT NULL,
	[SellerId] [int] NULL,
	[PartsNo] [varchar](50) NOT NULL,
	[PurchaseDate] [date] NOT NULL,
	[ContactName] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
	[Amount] [decimal](18, 0) NULL,
	[TotalAmount] [decimal](18, 0) NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [date] NULL,
	[Description] [varchar](50) NULL,
	[Attachment] [varchar](max) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Inventory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_InventoryStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_InventoryStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InventryId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Date] [date] NOT NULL,
	[IssuedTo] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_InventoryStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Manufacture]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Manufacture](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Manufacture] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_Manufacture] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_ManufactureModel]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_ManufactureModel](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Manufacture] [int] NOT NULL,
	[ModelName] [varchar](50) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_ManufactureModel] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_ManufactureModel] UNIQUE NONCLUSTERED 
(
	[Manufacture] ASC,
	[ModelName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_ModelYear]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_ModelYear](
	[Id] [int] NOT NULL,
	[Year] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_ModelYear] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_ModelYear] UNIQUE NONCLUSTERED 
(
	[Year] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Parts]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Parts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Parts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_Parts] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_PartSeller]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_PartSeller](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Address] [varchar](200) NULL,
	[ContactNo] [varchar](15) NULL,
	[Email] [varchar](70) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_PartSeller] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Purchase]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Purchase](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NULL,
	[PartyId] [int] NOT NULL,
	[ContactName] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
	[PurchaseDate] [date] NOT NULL,
	[TotalAmount] [decimal](18, 0) NOT NULL,
	[BookingAmount] [decimal](18, 0) NOT NULL,
	[PaymentDueDate] [date] NOT NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[Bank] [int] NULL,
	[ActualyPaidOn] [date] NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [date] NULL,
	[BrokerId] [int] NULL,
	[BrokerCommission] [decimal](18, 0) NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](max) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Purchase] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Sale]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Sale](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[PartyId] [int] NOT NULL,
	[ContactName] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
	[SellingDate] [date] NOT NULL,
	[SellingAmount] [decimal](18, 2) NOT NULL,
	[AdvancePayment] [decimal](18, 2) NOT NULL,
	[BalancePaymentDate] [date] NOT NULL,
	[BalanceActuallyPaidOn] [date] NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [varchar](50) NULL,
	[Broker] [int] NULL,
	[BrokerCommission] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](max) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Sale] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_Sale] UNIQUE NONCLUSTERED 
(
	[VehicleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_ServiceCategory]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_ServiceCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_ServiceType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_ServiceType] UNIQUE NONCLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Status]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Status](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](50) NULL,
	[Remark] [varchar](1000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_Status] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_TripsBooking]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_TripsBooking](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BookingNo] [varchar](50) NULL,
	[BookingDate] [date] NOT NULL,
	[VehicleId] [int] NOT NULL,
	[BookingType] [int] NULL,
	[CustomerId] [int] NOT NULL,
	[StationFrom] [int] NOT NULL,
	[StationTo] [int] NOT NULL,
	[OverLoadLimit] [decimal](18, 0) NOT NULL,
	[Distance] [varchar](50) NULL,
	[QTY] [decimal](18, 2) NULL,
	[Unit] [decimal](18, 2) NULL,
	[Weight] [decimal](18, 3) NOT NULL,
	[RateUnit] [decimal](18, 2) NULL,
	[Freight] [decimal](18, 2) NOT NULL,
	[DeliveryDate] [date] NULL,
	[Advance] [decimal](18, 2) NULL,
	[PaymentMode] [int] NOT NULL,
	[ChequeNo] [varchar](50) NULL,
	[Remarks] [varchar](200) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_TripsBooking] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_TyreNos]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_TyreNos](
	[Id] [int] NOT NULL,
	[TyreNos] [int] NOT NULL,
	[GuaranteeWt] [decimal](18, 2) NULL,
	[MinTareWt] [decimal](18, 2) NULL,
	[MaxTareWt] [decimal](18, 2) NULL,
	[MaxLoadLimit] [decimal](18, 0) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_TyreNos] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_TyreNos] UNIQUE NONCLUSTERED 
(
	[TyreNos] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_Vehicle_Deleted]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_Vehicle_Deleted](
	[Id] [int] NOT NULL,
	[VehicleNo] [varchar](50) NULL,
	[ModelYear] [int] NULL,
	[TotalTyers] [int] NULL,
	[MaxLoadLimit] [decimal](18, 2) NULL,
	[Model] [int] NULL,
	[VehicleType] [int] NULL,
	[FuelType] [int] NULL,
	[RegistrationDate] [datetime] NULL,
	[ChassisNo] [varchar](50) NULL,
	[EngineNo] [varchar](50) NULL,
	[Owner] [int] NULL,
	[Attachments] [varchar](500) NULL,
	[Remarks] [varchar](2000) NULL,
	[OldTableId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsBlocked] [bit] NULL,
	[i3MSOwner] [varchar](50) NULL,
	[i3MSOwnerAddress] [varchar](1000) NULL,
	[HappayCard] [varchar](50) NULL,
	[IsVerify] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleFuel]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleFuel](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[FillUpDate] [date] NOT NULL,
	[Quanity] [decimal](18, 2) NOT NULL,
	[TotalCost] [decimal](18, 2) NOT NULL,
	[StartMeterReading] [int] NULL,
	[EndMeterReading] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleFule] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleInsurance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleInsurance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[Company] [varchar](50) NULL,
	[InsuranceNo] [varchar](50) NULL,
	[InsuranceValue] [decimal](18, 0) NULL,
	[Premium] [decimal](18, 0) NOT NULL,
	[PremiumDate] [date] NOT NULL,
	[NextPremiumDate] [date] NOT NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleInsurance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleParts]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleParts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[PartName] [int] NOT NULL,
	[Date] [date] NOT NULL,
	[PartNumber] [varchar](50) NULL,
	[TotalPrice] [decimal](18, 0) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[PaidOn] [date] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleParts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehiclePermit]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehiclePermit](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[ReferenceNo] [nvarchar](50) NOT NULL,
	[PermitDate] [date] NOT NULL,
	[ExpireOn] [date] NOT NULL,
	[Amount] [decimal](18, 2) NULL,
	[PaidOn] [date] NOT NULL,
	[Remarks] [varchar](50) NULL,
	[Attachments] [varchar](1500) NULL,
	[IsNationalPermit] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehiclePermit] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehiclePermitStates]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehiclePermitStates](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PermitId] [int] NOT NULL,
	[StateId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehiclePermitStates] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehiclePollution]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehiclePollution](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[PollutionDate] [date] NOT NULL,
	[Amount] [decimal](18, 2) NULL,
	[ExpiringOn] [date] NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](500) NULL,
	[PaidOn] [date] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehiclePolution] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleRoadTax]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleRoadTax](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[ReferenceNo] [varchar](50) NULL,
	[PaidOn] [date] NOT NULL,
	[ExpireDate] [date] NOT NULL,
	[Amount] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleRoadTax] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleServices]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleServices](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[ServiceDate] [date] NOT NULL,
	[NextServiceDate] [date] NULL,
	[ServiceCategory] [int] NOT NULL,
	[Cost] [decimal](18, 0) NOT NULL,
	[MeterReading] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[Attachments] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleServices] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleTypes]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleTypes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_VehicleTypes] UNIQUE NONCLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Fleet_VehicleTyres]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fleet_VehicleTyres](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VehicleId] [int] NOT NULL,
	[TyreNo] [varchar](50) NOT NULL,
	[Company] [varchar](50) NULL,
	[TyreSize] [varchar](50) NULL,
	[Position] [varchar](50) NULL,
	[Cost] [decimal](18, 2) NOT NULL,
	[PaidOn] [date] NOT NULL,
	[Remarks] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Fleet_VehicleTyres] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Fleet_VehicleTyres] UNIQUE NONCLUSTERED 
(
	[VehicleId] ASC,
	[TyreNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Helper_TempLedgerReport]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Helper_TempLedgerReport](
	[VoucherId] [int] NOT NULL,
	[TimeStampId] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HRMS_Profile]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HRMS_Profile](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId]  AS ('ELPL/'+CONVERT([varchar],[Id])) PERSISTED,
	[Title] [varchar](50) NULL,
	[FullName] [varchar](100) NOT NULL,
	[DateOfBirth] [date] NOT NULL,
	[Gender] [varchar](10) NOT NULL,
	[FatherName] [varchar](100) NULL,
	[MotherName] [varchar](100) NULL,
	[Mobile] [varchar](15) NOT NULL,
	[AlternatePhone] [varchar](50) NULL,
	[BloodGroup] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ProfileImage] [varchar](max) NULL,
	[PresentAddressLine1] [varchar](100) NOT NULL,
	[PresentAddressLine2] [varchar](100) NULL,
	[PresentCity] [varchar](50) NOT NULL,
	[PresentState] [int] NULL,
	[PresentCountry] [int] NOT NULL,
	[PresentPin] [int] NOT NULL,
	[PermanentAddressLine1] [varchar](100) NOT NULL,
	[PermanentAddressLine2] [varchar](100) NULL,
	[PermanentCity] [varchar](50) NOT NULL,
	[PermanentState] [int] NULL,
	[PermanentCountry] [int] NOT NULL,
	[PermanentPin] [int] NOT NULL,
	[LandLine] [varchar](15) NULL,
	[Married] [bit] NULL,
	[DateOfMarriage] [date] NULL,
	[DateOfJoining] [date] NULL,
	[DateOfLeaving] [date] NULL,
	[Remarks] [varchar](2500) NULL,
	[ReferencePersonName] [varchar](100) NULL,
	[ReferenceAddress] [varchar](220) NULL,
	[ReferenceMail] [varchar](100) NULL,
	[ReferenceContactNo] [varchar](15) NULL,
	[EmergencyContactName] [varchar](50) NULL,
	[EmergencyRelation] [varchar](50) NULL,
	[EmergencyContact] [varchar](15) NULL,
	[EmergencyAddress] [varchar](200) NULL,
	[BranchId] [int] NULL,
	[BankId] [int] NULL,
	[AccountNo] [varchar](50) NULL,
	[IfscCode] [varchar](50) NULL,
	[MicrCode] [varchar](50) NULL,
	[AcType] [varchar](50) NULL,
	[BankBranchName] [varchar](50) NULL,
	[Active] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_HRMS_Profile] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[i3MS_DataLive]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_DataLive](
	[TranspoterName] [varchar](500) NULL,
	[VehiceNo] [varchar](50) NULL,
	[TpNo] [varchar](50) NULL,
	[CheckStatus] [varchar](50) NULL,
	[ReceiveStatus] [varchar](50) NULL,
	[Destination] [varchar](1000) NULL,
	[LesseeCode] [varchar](50) NULL,
	[ApplicantName] [varchar](500) NULL,
	[LicenseeName] [varchar](500) NULL,
	[MineralName] [varchar](100) NULL,
	[MineralWtinMT] [varchar](50) NULL,
	[CheckDate] [varchar](50) NULL,
	[ReceiveDate] [varchar](50) NULL,
	[DeparatureDate] [varchar](50) NULL,
	[HrsToCheckgate] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[i3MS_Lessee]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_Lessee](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CircleId] [int] NOT NULL,
	[Name] [varchar](150) NOT NULL,
	[Code] [varchar](12) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_i3MS_Lessee] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_i3MS_Lessee] UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_i3MS_Lessee_1] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[i3MS_Mapping]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[i3MS_Mapping](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LesseeId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_i3MS_Mapping] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Airline]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Airline](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AirlineName] [varchar](100) NULL,
	[AirlineCode] [varchar](50) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Airline] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_CDPaidBy]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_CDPaidBy](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_CDPaidBy] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ClearingAgent]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ClearingAgent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NULL,
	[ContactNo] [varchar](50) NULL,
	[Address] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ClearingAgent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Consignee]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Consignee](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ConsigneeName] [varchar](500) NULL,
	[GSTNo] [varchar](50) NULL,
	[MobileNo] [varchar](50) NULL,
	[Email] [varchar](500) NULL,
	[Address] [varchar](500) NULL,
	[State] [int] NULL,
	[Country] [int] NULL,
	[PinCode] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Consignee] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ContainerType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ContainerType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContainerType] [varchar](100) NOT NULL,
	[Length] [decimal](18, 2) NULL,
	[Width] [decimal](18, 2) NULL,
	[Height] [decimal](18, 2) NULL,
	[DoorWidth] [decimal](18, 2) NULL,
	[DoorHeight] [decimal](18, 2) NULL,
	[TareWeight] [decimal](18, 2) NULL,
	[GrossWeight] [decimal](18, 2) NULL,
	[Remark] [varchar](max) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ContainerType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_CreditNote]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_CreditNote](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CreditNoteNo] [varchar](50) NOT NULL,
	[CreditNoteDate] [datetime] NOT NULL,
	[InvoiceRefNo] [varchar](50) NULL,
	[BENo] [varchar](50) NULL,
	[VendorId] [int] NOT NULL,
	[IsIGSTApplicable] [bit] NOT NULL,
	[Narration] [varchar](2000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_CreditNote] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_DCountry]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_DCountry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CountryName] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_DCountry] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_DestinationPort]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_DestinationPort](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DestinationPortName] [varchar](500) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_DestinationPort] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ExpenseParticular]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ExpenseParticular](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticularsName] [varchar](500) NOT NULL,
	[LedgerId] [int] NULL,
	[IsTaxApplicable] [bit] NULL,
	[SACCodeId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ExpenseParticular] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ExpenseReceive]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ExpenseReceive](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExpensePaymentId] [int] NOT NULL,
	[ReceivedDate] [datetime] NOT NULL,
	[ReceivedAmount] [decimal](18, 2) NOT NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[FYId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ExpenseReceive] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_ExpenseReceiveList]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_ExpenseReceiveList](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExpenseReceiveId] [int] NOT NULL,
	[ExpenseParticularId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[JobId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_ExpenseReceiveList] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_FinalDestination]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_FinalDestination](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FinalDestinationName] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_FinalDestination] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Group]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Group](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[GroupName] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Group] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_HandlingAgent]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_HandlingAgent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[ContactNo] [varchar](50) NULL,
	[Address] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_HandlingAgent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_InvoiceBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_InvoiceBulkPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkRefNo]  AS ('BPR'+(isnull(replicate('0',(7)-len([Id])),'')+CONVERT([varchar],[Id]))),
	[ClientId] [int] NOT NULL,
	[ReceivedLedgerId] [int] NOT NULL,
	[ReceivedDate] [date] NOT NULL,
	[ReceivedAmount] [decimal](18, 2) NOT NULL,
	[ShortageDeduction] [decimal](18, 2) NOT NULL,
	[MoistureDeduction] [decimal](18, 2) NOT NULL,
	[TDS] [decimal](18, 2) NOT NULL,
	[OtherDeduction] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[PaymentMode] [int] NULL,
	[ChkNEFTDate] [date] NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[FinancialYear] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_InvoiceBulkPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_InvoiceBulkPaymentId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_InvoiceBulkPaymentId](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentId] [int] NOT NULL,
	[InvoicePaymentId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_InvoiceBulkPaymentId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_InvoiceRefPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_InvoiceRefPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RetainerInvoiceId] [int] NOT NULL,
	[InvoiceId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_InvoiceRefPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_JobExpenseTax]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_JobExpenseTax](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobExpenseId] [int] NOT NULL,
	[TaxId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_JobExpenseTax] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_JobStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_JobStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StatusName] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_JobStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_JobType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_JobType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NULL,
	[JobTypeCode] [nchar](10) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_JobType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Liner]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Liner](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LinerName] [varchar](50) NULL,
	[Contact] [varchar](50) NULL,
	[Address] [varchar](5000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Liner] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_LoadingPort]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_LoadingPort](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingPortName] [varchar](500) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_LoadingPort] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_NotifyParty]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_NotifyParty](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartyName] [varchar](500) NOT NULL,
	[ContactNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[Address] [varchar](1000) NULL,
	[CountryId] [int] NOT NULL,
	[StateId] [int] NULL,
	[GSTNo] [varchar](50) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_NotifyParty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_OnAccountRetainer]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_OnAccountRetainer](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkPaymentId] [int] NOT NULL,
	[RetainerId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_OnAccountRetainer] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Origin]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Origin](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OriginName] [varchar](500) NOT NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Origin] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuantityUnit]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuantityUnit](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuantityCode] [varchar](50) NOT NULL,
	[QuantityDescription] [varchar](500) NOT NULL,
	[QuantityType] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_QuantityUnit] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Quotation]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Quotation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuotationTypeId] [int] NOT NULL,
	[ClientId] [int] NOT NULL,
	[ReferenceNo] [varchar](500) NULL,
	[QuotationDate] [date] NOT NULL,
	[ValidDate] [date] NULL,
	[Container] [varchar](500) NULL,
	[Note] [varchar](500) NULL,
	[ContactPersonId] [int] NULL,
	[Header] [varchar](max) NULL,
	[Footer] [varchar](max) NULL,
	[POLId] [int] NULL,
	[PODId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Quotation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuotationApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuotationApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuotationId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuotationDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuotationDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuotationID] [int] NOT NULL,
	[ParticularId] [int] NULL,
	[QuantityUnitId] [int] NULL,
	[CurrencyId] [int] NULL,
	[UnitPrice] [decimal](18, 2) NULL,
	[FieldValue] [varchar](max) NULL,
	[FieldName] [varchar](max) NULL,
	[OrderNo] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_QuotationDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuotationMaster]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuotationMaster](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuotationTypeId] [int] NOT NULL,
	[FieldName] [varchar](5000) NULL,
	[FieldValue] [varchar](500) NULL,
	[OrderNo] [int] NULL,
	[QuotationParticularsId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_QuotationMaster] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuotationParticulars]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuotationParticulars](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Header] [varchar](500) NULL,
	[HeaderValues] [varchar](5000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_QuotationParticulars] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_QuotationType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_QuotationType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[QuotationType] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_QuotationType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_RetainerInvoice]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_RetainerInvoice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceNo] [varchar](50) NOT NULL,
	[RetainerDate] [datetime] NOT NULL,
	[ClientId] [int] NOT NULL,
	[LedgerId] [int] NOT NULL,
	[PaymentModeId] [int] NOT NULL,
	[Narration] [varchar](5000) NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[TNo] [int] NULL,
	[CCode] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_RetainerInvoice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Shipper]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Shipper](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ShipperName] [varchar](500) NULL,
	[ContactNo] [varchar](15) NULL,
	[Email] [varchar](50) NULL,
	[Address] [varchar](1000) NULL,
	[CountryId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Shipper] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_Vessel]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_Vessel](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VesselName] [varchar](100) NULL,
	[VesselNo] [varchar](50) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ImEx_Vessel] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImEx_WO]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImEx_WO](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WONo] [varchar](50) NOT NULL,
	[Date] [smalldatetime] NOT NULL,
	[Attachments] [varchar](5000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[BranchId] [int] NULL,
	[ClientId] [int] NULL,
	[JobTypeId] [int] NULL,
	[PaymentTerms] [int] NULL,
	[TypeofShipmentId] [int] NULL,
	[BusinessGenerateBy] [int] NULL,
	[WOStartDate] [date] NULL,
	[WOEndDate] [date] NULL,
	[ReimbursLimit] [decimal](18, 2) NULL,
 CONSTRAINT [PK_ImEx_WO] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Languages]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Languages](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LanguageId] [nvarchar](10) NOT NULL,
	[LanguageName] [nvarchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Languages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingAdvanceBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingAdvanceBulkPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RefNo]  AS ([dbo].[FN__GenerateBulkLoadingAdvanceRefNo]([FYNameNo],[RNo])),
	[BankNameId] [int] NULL,
	[BankLedger] [int] NOT NULL,
	[PaymentDate] [date] NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[ChkDate] [date] NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[FYNameNo] [varchar](50) NOT NULL,
	[FYId] [int] NULL,
	[RNo] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingAdvanceBulkPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingAdvanceType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingAdvanceType](
	[Id] [int] NOT NULL,
	[TypeName] [varchar](50) NOT NULL,
	[IsSystemGenerated] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingAdvanceType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingApprovals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadingBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadingBulkPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RefNo]  AS (('TBP/16-17/'+isnull(replicate('0',(5)-len([Id])),''))+CONVERT([varchar],[Id])) PERSISTED,
	[BankNameId] [int] NULL,
	[CreateDate] [date] NOT NULL,
	[BankLedger] [int] NOT NULL,
	[PaymentDate] [date] NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[ChkDate] [date] NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[FYNameNo] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_LoadingBulkPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[loadinglostdata]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[loadinglostdata](
	[SL_NO] [nvarchar](50) NOT NULL,
	[PAYMENT_DATE] [nvarchar](50) NULL,
	[A_C] [nvarchar](50) NOT NULL,
	[DESTINATION] [nvarchar](50) NOT NULL,
	[TRUCK_NO] [nvarchar](50) NOT NULL,
	[L_DATE] [datetime2](7) NOT NULL,
	[CHALLAN_NO] [int] NOT NULL,
	[PERMIT] [nvarchar](50) NOT NULL,
	[PASS] [nvarchar](50) NOT NULL,
	[PERMIT_PASS] [nvarchar](50) NOT NULL,
	[L_QTY] [float] NOT NULL,
	[RECV_QTY] [float] NOT NULL,
	[RATE] [int] NOT NULL,
	[GROSS_AMOUNT] [int] NOT NULL,
	[TDS] [nvarchar](50) NOT NULL,
	[TDS1] [nvarchar](50) NOT NULL,
	[OTHER] [nvarchar](1) NULL,
	[CASH] [nvarchar](50) NOT NULL,
	[CASH_TDS] [nvarchar](50) NOT NULL,
	[CASH_TDS_AMT] [nvarchar](50) NULL,
	[OFFICE_CH] [int] NOT NULL,
	[NET_AMOUNT] [int] NOT NULL,
	[NAME_OF_OWNER_VENDOR] [nvarchar](50) NULL,
	[PAN_NO] [nvarchar](50) NULL,
	[PHONE_NO] [nvarchar](50) NULL,
	[PAYMENT_MODE] [nvarchar](1) NULL,
	[column27] [nvarchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[lockedchallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[lockedchallan](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[challan] [varchar](50) NULL,
	[status] [varchar](1) NULL,
	[unlockedby] [varchar](50) NULL,
	[unlockedon] [smalldatetime] NULL,
	[remarks] [varchar](1000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Modules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Modules](
	[Id] [int] IDENTITY(1000,1) NOT NULL,
	[Module] [varchar](50) NULL,
	[FileName] [varchar](100) NULL,
	[Level] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__Modules__3214EC07CA680FEF] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Notes]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Notes](
	[NoteID] [bigint] IDENTITY(1,1) NOT NULL,
	[EntityType] [nvarchar](100) NOT NULL,
	[EntityID] [bigint] NOT NULL,
	[Text] [nvarchar](max) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Notes] PRIMARY KEY CLUSTERED 
(
	[NoteID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OfferDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OfferDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[offerId] [int] NULL,
	[Destination] [varchar](100) NULL,
	[TransportaionRate] [decimal](18, 2) NULL,
	[CreateDate] [datetime] NULL,
	[FileName] [varchar](2000) NULL,
	[DocNumber] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Offers]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Offers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TpNo] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[TpNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OfficeAdvance]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OfficeAdvance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoadingId] [int] NULL,
	[ChallanNo] [int] NULL,
	[AdvanceDate] [datetime] NULL,
	[PaymentModeId] [int] NULL,
	[Remarks] [varchar](200) NULL,
	[Amount] [decimal](18, 2) NULL,
	[LoadingTruckId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PasExcelUpload]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PasExcelUpload](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Number] [varchar](200) NULL,
	[CreateDate] [datetime] NULL,
	[FileName] [varchar](2000) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PassLoadingDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PassLoadingDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TpNo] [varchar](200) NULL,
	[LoadDate] [datetime] NULL,
	[NetQty] [decimal](18, 3) NULL,
	[VehicleNo] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PayrollStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PayrollStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StatusName] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_PayrollStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RateAtTime]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RateAtTime](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RateTime] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RegisteredSeals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RegisteredSeals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SealNo] [int] NOT NULL,
	[Status] [varchar](1) NOT NULL,
	[BranchId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RolePermissions]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RolePermissions](
	[RolePermissionId] [bigint] IDENTITY(1,1) NOT NULL,
	[RoleId] [int] NOT NULL,
	[PermissionKey] [nvarchar](100) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_RolePermissions] PRIMARY KEY CLUSTERED 
(
	[RolePermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Roles]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Roles](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[RoleName] [nvarchar](100) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SealBook]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SealBook](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SealStart] [int] NULL,
	[SealEnd] [int] NULL,
	[SealType] [varchar](10) NULL,
	[SealCase] [varchar](10) NULL,
	[BranchId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[Deleted] [bit] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[State]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[State](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StateName] [varchar](50) NULL,
	[StateCode] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_State] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SystemLedger]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SystemLedger](
	[Id] [int] NOT NULL,
	[Description] [varchar](50) NULL,
	[LedgerId] [int] NULL,
	[CostCenterId] [int] NULL,
	[DisplayName] [varchar](200) NULL,
	[CostCenterOption] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsAllowManualVoucher] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_SystemLedger] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_SystemLedger] UNIQUE NONCLUSTERED 
(
	[Description] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TDS1]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TDS1](
	[Id] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Temp]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Temp](
	[JobId] [int] NOT NULL,
	[MktLimit] [decimal](18, 3) NULL,
	[MktUnit] [varchar](10) NULL,
	[MktDeductionType] [varchar](50) NULL,
	[MktPaneltyRate] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tempGroups]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tempGroups](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[GroupNature] [int] NOT NULL,
	[ParentId] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[SystemCreated] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Temp_WorkOrderItems]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Temp_WorkOrderItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OrderId] [int] NOT NULL,
	[LoadingPoint] [int] NOT NULL,
	[UnLoadingPoint] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Rate] [decimal](18, 2) NOT NULL,
	[Material] [int] NOT NULL,
	[SrvLnNo] [varchar](50) NULL,
	[Description] [varchar](50) NULL,
	[Overwritable] [bit] NOT NULL,
	[CreateAutoJob] [bit] NOT NULL,
	[TempClientRate] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TLoadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TLoadingChallan](
	[LoadingId] [int] NOT NULL,
	[ChallanNo] [bigint] NOT NULL,
	[JobId] [int] NOT NULL,
	[STOId] [int] NULL,
	[DELNo] [varchar](50) NULL,
	[TP] [varchar](50) NULL,
	[CostPerMT] [decimal](18, 2) NULL,
	[LoadDate] [smalldatetime] NOT NULL,
	[Freight] [decimal](18, 2) NOT NULL,
	[Fixed] [bit] NULL,
	[TranshipmentId] [int] NULL,
	[LoadType] [varchar](10) NULL,
	[GrossWt] [decimal](18, 3) NULL,
	[TareWT] [decimal](18, 3) NULL,
	[NetWT] [decimal](18, 3) NOT NULL,
	[Moisture] [decimal](18, 3) NULL,
	[MoistureUnit] [varchar](2) NULL,
	[TotalBags] [int] NULL,
	[MaterialValue] [decimal](18, 2) NULL,
	[TruckId] [int] NOT NULL,
	[HSD] [decimal](18, 3) NULL,
	[PumpId] [int] NULL,
	[HSDRate] [decimal](18, 2) NULL,
	[HSDCost] [decimal](18, 2) NULL,
	[Seals] [varchar](50) NULL,
	[AssociationCharge] [decimal](18, 2) NULL,
	[Labor] [decimal](18, 2) NULL,
	[Detention] [decimal](18, 2) NULL,
	[Collection] [decimal](18, 2) NULL,
	[Welfare] [decimal](18, 2) NULL,
	[Other] [decimal](18, 2) NULL,
	[Advance] [decimal](18, 2) NULL,
	[TotalAdvance] [decimal](18, 2) NULL,
	[Remarks] [varchar](255) NULL,
	[LoadedBy] [int] NULL,
	[LoadedOn] [smalldatetime] NULL,
	[TotalFreight] [decimal](18, 2) NULL,
	[LoadDMT] [decimal](18, 3) NULL,
	[DriverId] [int] NULL,
	[OwnerId] [int] NULL,
	[BrokerId] [int] NULL,
	[AssociationId] [int] NULL,
	[GateEntryNo] [varchar](50) NULL,
	[SAPNo] [varchar](50) NULL,
	[TPBookNo] [varchar](50) NULL,
	[WayBillNo] [varchar](50) NULL,
	[LRNumber] [varchar](50) NULL,
	[ApprovalStatus] [int] NULL,
	[TruckSource] [varchar](50) NULL,
	[GuaranteeWT] [decimal](18, 3) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Distance] [decimal](18, 3) NULL,
	[ValidityDate] [datetime] NULL,
	[WayBillBy] [varchar](20) NULL,
	[ClientInvoiceNo] [varchar](20) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[I3MSDataId] [int] NULL,
	[OldFreightRate] [decimal](18, 2) NULL,
	[VoucherDate] [datetime] NULL,
	[LedgerId] [int] NULL,
	[InvoiceClientRate] [decimal](18, 2) NULL,
	[SourceId] [varchar](150) NULL,
	[DestinationId] [varchar](150) NULL,
	[InvoiceClaimQty] [decimal](18, 2) NULL,
	[FreightPayable] [decimal](18, 2) NULL,
	[ChargesQty] [decimal](18, 3) NULL,
	[OtherExpenses] [decimal](18, 2) NULL,
	[TotalHSD] [decimal](18, 2) NULL,
	[UnloadingWt] [decimal](18, 3) NULL,
	[UnloadingDate] [datetime] NULL,
	[VehicleNumber] [varchar](100) NULL,
	[TPId] [int] NULL,
	[TPDId] [int] NULL,
	[GPSAmount] [decimal](18, 2) NULL,
	[OnlineRegAmount] [decimal](18, 2) NULL,
	[MemoNo] [varchar](30) NULL,
	[CommAmount] [decimal](18, 2) NULL,
	[ClientRateId] [int] NULL,
	[RateTime] [int] NULL,
	[IsCommissionApproved] [bit] NULL,
	[BulkLoadId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tmp_Common_Client]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tmp_Common_Client](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CompanyName] [varchar](100) NOT NULL,
	[CAddressWithPinCode] [varchar](200) NULL,
	[Name] [varchar](100) NOT NULL,
	[AlternateName] [varchar](100) NULL,
	[MobileNo1] [varchar](50) NULL,
	[MobileNo2] [varchar](50) NULL,
	[PhoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[GroupId] [int] NOT NULL,
	[ClientCode] [varchar](10) NULL,
	[LedgerId] [int] NULL,
	[PANNo] [varchar](50) NULL,
	[VATNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[ServiceTaxNo] [varchar](50) NULL,
	[BranchName] [varchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[MaxInvoiceAge] [int] NULL,
	[GSTNo] [varchar](50) NULL,
	[GSTReturnFile] [varchar](50) NULL,
	[GSTLastMonthFile] [varchar](50) NULL,
	[GSTDate] [date] NULL,
	[CINNO] [varchar](50) NULL,
	[CINDateIncorporation] [date] NULL,
	[IECNo] [varchar](50) NULL,
	[TypeOfOrganization] [varchar](50) NULL,
	[SSINumber] [varchar](50) NULL,
	[QualitySystemDetails] [varchar](100) NULL,
	[QualityCertificationDetails] [varchar](100) NULL,
	[QSEndDate] [date] NULL,
	[Commodity] [varchar](50) NULL,
	[SACCode] [varchar](50) NULL,
	[RatingAgencyName] [varchar](50) NULL,
	[RatingAgencyRatting] [varchar](50) NULL,
	[ROCSearchReport] [varchar](50) NULL,
	[Authorized] [varchar](50) NULL,
	[PaidCapital] [varchar](50) NULL,
	[LoanAmount] [int] NULL,
	[LastABSDate] [date] NULL,
	[SPLastOneYear] [varchar](50) NULL,
	[NCLTReport] [varchar](50) NULL,
	[PaymentTerms] [varchar](50) NULL,
	[CPAForPayment] [varchar](50) NULL,
	[ExceptedProfitabilityRatio] [varchar](50) NULL,
	[EPOutstandingVolume] [varchar](50) NULL,
	[ABVolumePerMonth] [varchar](50) NULL,
	[EMDBGSubmitted] [int] NULL,
	[Attachments] [varchar](5000) NULL,
	[OName] [varchar](50) NULL,
	[AlternateOname] [varchar](50) NULL,
	[OAccounts] [varchar](50) NULL,
	[ODept] [varchar](50) NULL,
	[ODesignation] [varchar](50) NULL,
	[OMobileNo] [varchar](50) NULL,
	[OPhotoNo] [varchar](50) NULL,
	[OEmail] [varchar](50) NULL,
	[OFax] [varchar](50) NULL,
	[OAddress] [varchar](2000) NULL,
	[BizOnlineOffline] [varchar](50) NULL,
	[CPRequestedByClients] [varchar](50) NULL,
	[ContractPeriod] [varchar](50) NULL,
	[BusinessByMarketingGuy] [varchar](50) NULL,
	[InvoiceFormat] [bit] NULL,
	[StateId] [int] NULL,
	[SubmittedBy] [int] NULL,
	[SubmittedOn] [smalldatetime] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedOn] [smalldatetime] NULL,
	[ApprovedBy] [int] NULL,
	[ApprovedOn] [smalldatetime] NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [smalldatetime] NULL,
	[RecordStatus] [int] NULL,
	[RejectedBy] [int] NULL,
	[RejectedOn] [smalldatetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tmp__WorkOrderItems]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tmp__WorkOrderItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OrderId] [int] NOT NULL,
	[LoadingPoint] [int] NOT NULL,
	[UnLoadingPoint] [int] NOT NULL,
	[Material] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[Rate] [decimal](18, 2) NOT NULL,
	[Description] [varchar](500) NULL,
	[SrvLnNo] [varchar](50) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_AdvanceApprovals]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_AdvanceApprovals](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AdvanceId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[ActionBy] [int] NOT NULL,
	[ActionDate] [datetime] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__AdvanceApprovals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_AdvanceVoucher]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_AdvanceVoucher](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AdvanceId] [int] NOT NULL,
	[PaymentDate] [date] NOT NULL,
	[PaymentLedgerId] [int] NOT NULL,
	[BranchLedgerId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[PaymentMode] [int] NOT NULL,
	[ChkRefNo] [varchar](50) NULL,
	[Narration] [varchar](5000) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__AdvanceVoucher] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_ApprovalSetting]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ApprovalSetting](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkOrderApproval] [bit] NULL,
	[JobApproval] [bit] NULL,
	[LoadingChallanApproval] [bit] NULL,
	[TokenApproval] [bit] NULL,
	[VoucherApproval] [bit] NULL,
	[InvoiceRemainder] [bit] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[WorkOrderVerify] [bit] NULL,
	[JobVerify] [bit] NULL,
 CONSTRAINT [PK__ApprovalSetting] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_CHADetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_CHADetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AdvanceId] [int] NOT NULL,
	[PaymentTypeId] [int] NOT NULL,
	[ImExJobId] [int] NULL,
	[Container] [int] NULL,
	[ContainerTypeId] [int] NULL,
	[Quantity] [decimal](18, 3) NULL,
	[QuantityUnitId] [int] NULL,
	[Rate] [decimal](18, 3) NULL,
	[PerContainer] [decimal](18, 3) NULL,
	[Cash] [decimal](18, 3) NULL,
	[FundTransfer] [decimal](18, 3) NULL,
	[ApprovedAmount] [decimal](18, 2) NULL,
	[Remarks] [varchar](5000) NULL,
	[UserId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_CHADetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_ChallanReceivedDetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ChallanReceivedDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReceivingId] [int] NOT NULL,
	[ChallanNo] [int] NOT NULL,
	[Remarks] [varchar](2000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__ChallanReceivedDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_ChallanRecevied]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ChallanRecevied](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReceivedFromId] [int] NULL,
	[ReceivedFromName] [varchar](500) NULL,
	[MobileNo] [varchar](50) NULL,
	[Remarks] [varchar](2000) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__ChallanRecevied] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_ClientNature]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ClientNature](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[NatureWorkId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__ClientNature] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_ClientRateUpdate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_ClientRateUpdate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Attachments] [varchar](50) NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[JobId] [int] NULL,
 CONSTRAINT [PK__ClientRateUpdate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_DevelopementSuport]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_DevelopementSuport](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [date] NULL,
	[Priority] [int] NULL,
	[Title] [varchar](50) NULL,
	[Description] [varchar](1500) NULL,
	[Attachment] [varchar](max) NULL,
	[Type] [int] NULL,
	[Cost] [decimal](18, 2) NULL,
	[CreatedBy] [int] NULL,
	[ApprovedBy] [int] NULL,
	[Status] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[Paid] [bit] NULL,
 CONSTRAINT [PK__DevelopementSuport] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_DODetails]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_DODetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOItemId] [int] NULL,
	[DONo] [varchar](50) NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[StartDate] [date] NOT NULL,
	[EndDate] [date] NOT NULL,
	[Remarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__DODetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_FreightSectorTyre]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_FreightSectorTyre](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectorId] [int] NOT NULL,
	[Tyres] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__FreightSectorTyre] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_FrieghtTyreRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_FrieghtTyreRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectorTyreId] [int] NOT NULL,
	[MaxTollGate] [decimal](18, 2) NULL,
	[MinChallanDeduction] [decimal](18, 2) NULL,
	[MinMktCollection] [decimal](18, 2) NULL,
	[MinAssCollection] [decimal](18, 2) NULL,
	[MaxWelfare] [decimal](18, 2) NULL,
	[MaxLabour] [decimal](18, 2) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__FrieghtTyreRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InstantLoading]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InstantLoading](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[LoadDate] [smalldatetime] NOT NULL,
	[LoadType] [varchar](50) NOT NULL,
	[TotalNetWt] [decimal](18, 2) NOT NULL,
	[PaymentLedger] [int] NOT NULL,
	[Remarks] [varchar](50) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[I3MSData] [bit] NULL,
	[PermitNo] [varchar](50) NULL,
	[LoadDateTo] [datetime] NULL,
	[Attachments] [varchar](500) NULL,
	[ExcelUpload] [bit] NULL,
	[FiledName] [varchar](200) NULL,
	[WOId] [int] NULL,
 CONSTRAINT [PK__InstantLoading] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InstantUnloading]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InstantUnloading](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Attachments] [varchar](500) NOT NULL,
	[FiledName] [varchar](50) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[ErrorDetails] [varchar](3800) NULL,
 CONSTRAINT [PK__InstantUnloading] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InvoiceBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceBulkPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkRefNo]  AS ('BPR'+(isnull(replicate('0',(7)-len([Id])),'')+CONVERT([varchar],[Id]))),
	[ClientId] [int] NOT NULL,
	[ReceivedDate] [date] NOT NULL,
	[ReceivedAmount] [decimal](18, 2) NOT NULL,
	[HandlingReceived] [decimal](18, 2) NOT NULL,
	[ReceivedLedgerId] [int] NOT NULL,
	[ShortageDeduction] [decimal](18, 2) NOT NULL,
	[MoistureDeduction] [decimal](18, 2) NOT NULL,
	[TDS] [decimal](18, 2) NOT NULL,
	[OtherDeduction] [decimal](18, 2) NOT NULL,
	[OtherDeductionRemarks] [varchar](5000) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[Remarks] [varchar](5000) NULL,
	[PaymentMode] [int] NULL,
	[ChkNEFTDate] [date] NULL,
	[ChkNEFTRefNo] [varchar](50) NULL,
	[VoucherId] [int] NULL,
	[FinancialYear] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoiceBulkPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InvoiceBulkPaymentId]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceBulkPaymentId](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentId] [int] NOT NULL,
	[InvoicePaymentId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoiceBulkPaymentId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InvoiceBulkPaymentOnAcc]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoiceBulkPaymentOnAcc](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BulkPaymentId] [int] NOT NULL,
	[OnAccId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoiceBulkPaymentOnAcc] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_InvoicePaymentOnAcc]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_InvoicePaymentOnAcc](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RefNo]  AS ('IAP'+(isnull(replicate('0',(7)-len([Id])),'')+CONVERT([varchar],[Id]))),
	[ClientId] [int] NOT NULL,
	[BranchId] [int] NOT NULL,
	[LedgerId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NULL,
	[PaymentDate] [date] NULL,
	[PaymentMode] [int] NOT NULL,
	[NeftChkRefNo] [varchar](50) NULL,
	[Remarks] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__InvoicePaymentOnAcc] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobAdvanceLedger]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobAdvanceLedger](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NULL,
	[LedgerId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__JobAdvanceLedger] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFreightMktRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFreightMktRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[FreightRate] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[AllowToOverride] [bit] NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[FreightTolerance] [decimal](18, 2) NULL,
	[FreightRateUpdate] [bit] NULL,
	[AllowToOverrideInPayment] [bit] NULL,
	[RateTime] [int] NULL,
 CONSTRAINT [PK__JobFreightMktRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFreightRules_ToBeDelete]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFreightRules_ToBeDelete](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[AssociationRate] [decimal](18, 0) NOT NULL,
	[MarketRate] [decimal](18, 0) NOT NULL,
	[FuelRate] [decimal](18, 0) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__JobFreightRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFreightSpecialParty]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFreightSpecialParty](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobSpecialFreightId] [int] NOT NULL,
	[PartyId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__JobFreightSpecialParty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFreightSpecialTruck]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFreightSpecialTruck](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobSpecialFreightId] [int] NOT NULL,
	[TruckId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__JobFreightSpecialTruck] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFrieghtAssRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFrieghtAssRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[FreightRate] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[AllowToOverride] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[AutoPayAdvance] [bit] NULL,
	[AutoPayment] [bit] NULL,
	[FreightRateUpdate] [bit] NULL,
	[RateTime] [int] NULL,
 CONSTRAINT [PK__JobAssoRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobFrieghtSpecialRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobFrieghtSpecialRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[LoadDate] [date] NOT NULL,
	[FreightRate] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](5000) NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[AssociationId] [int] NULL,
	[FreightRateUpdate] [bit] NULL,
 CONSTRAINT [PK__JobFrieghtSpecialRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobLoadingFeilds]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobLoadingFeilds](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TruckNo] [int] NULL,
	[ChallanNo] [int] NULL,
	[InvoiceTPNo] [int] NULL,
	[LRNo] [int] NULL,
	[NetWet] [int] NULL,
	[Cash] [int] NULL,
	[Diesel] [int] NULL,
	[Pump] [int] NULL,
	[Welfare] [int] NULL,
	[TruckSource] [int] NULL,
	[Association] [int] NULL,
	[UnloadWt] [int] NULL,
	[UnloadDate] [int] NULL,
	[UnloadRemarks] [int] NULL,
	[JobId] [int] NULL,
	[JobNo] [int] NULL,
	[STONo] [int] NULL,
	[Owner] [int] NULL,
	[Driver] [int] NULL,
	[Broker] [int] NULL,
	[MaterialValue] [int] NULL,
	[TP] [int] NULL,
	[GateEntryNo] [int] NULL,
	[SAPNo] [int] NULL,
	[TPBookNo] [int] NULL,
	[WayBillNo] [int] NULL,
	[LoadDate] [int] NULL,
	[FreightRate] [int] NULL,
	[LoadType] [int] NULL,
	[BAGWtKg] [int] NULL,
	[GrossWt] [int] NULL,
	[TareWt] [int] NULL,
	[Moisture] [int] NULL,
	[TotalBags] [int] NULL,
	[LoadDMT] [int] NULL,
	[DELNo] [int] NULL,
	[HSDRate] [int] NULL,
	[Seals] [int] NULL,
	[MaterialValueMT] [int] NULL,
	[AssociationCharges] [int] NULL,
	[Labor] [int] NULL,
	[Detention] [int] NULL,
	[Collection] [int] NULL,
	[Other] [int] NULL,
	[CashAdvance1] [int] NULL,
	[HSDAdvance] [int] NULL,
	[TotalAdvance] [int] NULL,
	[Remarks] [int] NULL,
	[HSD] [int] NULL,
	[TotalFreight] [int] NULL,
	[GuaranteeWt] [int] NULL,
	[Transhipment] [int] NULL,
	[DestinationId] [int] NULL,
	[LedgerId] [int] NULL,
	[InvoiceClaimQty] [int] NULL,
 CONSTRAINT [PK__JobLoadingFeilds] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_JobTyreBaseRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_JobTyreBaseRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[TyreId] [int] NULL,
	[FreightRate] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL,
	[AllowToOverride] [bit] NOT NULL,
	[InsertUserId] [int] NOT NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
	[AutoPayAdvance] [bit] NULL,
	[AutoPayment] [bit] NULL,
	[FreightRateUpdate] [bit] NULL,
	[RateTime] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_MaxEscalationRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_MaxEscalationRate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[DateFrom] [date] NULL,
	[DateTo] [date] NULL,
	[MktMaxEscalationRate] [decimal](18, 2) NOT NULL,
	[AssMaxEscalationRate] [decimal](18, 2) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__MaxEscalationRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_NatureWork]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_NatureWork](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NatureWorkName] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__NatureWork] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_PaymentPenalty]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_PaymentPenalty](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentPenaltyId] [int] NOT NULL,
	[PenaltyTypeId] [int] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__PaymentPenalty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_PaymentType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_PaymentType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__PaymentType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_PenaltyType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_PenaltyType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__PenaltyType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_RecoveryMode]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_RecoveryMode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__RecoveryMode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_RecoveryType]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_RecoveryType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__RecoveryType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_STOJob]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_STOJob](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[STOId] [int] NOT NULL,
	[JobId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__STOJob] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_TokenBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TokenBulkPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RefNo]  AS ([dbo].[FN__GenerateBulkTokenRefNo]([FyNoName],[RNo])),
	[BankNameId] [int] NULL,
	[CreateDate] [date] NOT NULL,
	[BankLedger] [int] NOT NULL,
	[PaymentDate] [date] NULL,
	[PaymentMode] [int] NULL,
	[ChkNeftRefNo] [varchar](50) NULL,
	[ChkDate] [date] NULL,
	[Narration] [varchar](5000) NULL,
	[VoucherId] [int] NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[FyNoName] [varchar](50) NOT NULL,
	[PaymentStatus]  AS (case when [PaymentDate] IS NULL then (1) else (0) end) PERSISTED NOT NULL,
	[RNo] [int] NULL,
	[FYId] [int] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__TokenBulkPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_TPJob]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_TPJob](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TPId] [int] NOT NULL,
	[JobId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__TPJob] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOSectorGWt]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOSectorGWt](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOSectorId] [int] NOT NULL,
	[TyreNo] [int] NOT NULL,
	[Wt] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOSectorGWt] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX__WOSectorGWt] UNIQUE NONCLUSTERED 
(
	[WOSectorId] ASC,
	[TyreNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOSectorMaterialRate]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOSectorMaterialRate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WOSectorId] [int] NOT NULL,
	[DateFrom] [date] NOT NULL,
	[DateTo] [date] NULL,
	[MaterialValue] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](500) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOSectorMaterialRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOShortageRules]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOShortageRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SectorId] [int] NOT NULL,
	[Tyre] [int] NOT NULL,
	[LoadType] [varchar](50) NOT NULL,
	[ClientLimit] [decimal](18, 3) NULL,
	[ClientUnit] [varchar](10) NULL,
	[ClientDeductionType] [varchar](50) NULL,
	[ClientPaneltyRate] [decimal](18, 2) NULL,
	[AssLimit] [decimal](18, 3) NULL,
	[AssUnit] [varchar](10) NULL,
	[AssDeductionType] [varchar](50) NULL,
	[AssPaneltyRate] [decimal](18, 2) NULL,
	[MktLimit] [decimal](18, 3) NULL,
	[MktUnit] [varchar](10) NULL,
	[MktDeductionType] [varchar](50) NULL,
	[MktPaneltyRate] [decimal](18, 2) NULL,
	[InsertUserId] [int] NULL,
	[InsertDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOShortageRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_WOStatus]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_WOStatus](
	[Id] [int] NOT NULL,
	[StatusName] [varchar](50) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK__WOStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ApprovalSettings]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApprovalSettings](
	[Id] [int] NOT NULL,
	[ModuleName] [varchar](50) NOT NULL,
	[IsSubmit] [bit] NOT NULL,
	[IsVerify] [bit] NOT NULL,
	[IsApprove] [bit] NOT NULL,
	[Remarks] [varchar](500) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_ApprovalSettings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Licence]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Licence](
	[Id] [int] NOT NULL,
	[LicenceName] [varchar](50) NOT NULL,
	[LicenceKey] [varchar](2000) NOT NULL,
	[LicenceTerm] [varchar](2000) NOT NULL,
	[LicenceStatus] [varchar](2000) NOT NULL,
	[ValidTill] [date] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MenuSettings]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MenuSettings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MenuUrl] [varchar](150) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserBranchAccess]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserBranchAccess](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[BranchId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_UserBranchAccess] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserCategory]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [varchar](100) NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_UserCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserPermissions]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserPermissions](
	[UserPermissionId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[PermissionKey] [nvarchar](100) NOT NULL,
	[Grant] [bit] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_UserPermissions] PRIMARY KEY CLUSTERED 
(
	[UserPermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserRoles]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserRoles](
	[UserRoleId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL,
 CONSTRAINT [PK_UserRoles] PRIMARY KEY CLUSTERED 
(
	[UserRoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VersionInfo]    Script Date: 2/15/2025 9:02:58 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VersionInfo](
	[Version] [bigint] NOT NULL,
	[AppliedOn] [datetime] NULL,
	[Description] [nvarchar](1024) NULL,
	[RecordBranchId] [int] NULL,
	[RecordFYId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [UC_Version]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE CLUSTERED INDEX [UC_Version] ON [dbo].[VersionInfo]
(
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Accounts_Vouchers]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_Accounts_Vouchers] ON [dbo].[Accounts_Vouchers]
(
	[VoucherType] ASC,
	[RefType] ASC,
	[ReferenceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Accounts_Vouchers_1]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_Accounts_Vouchers_1] ON [dbo].[Accounts_Vouchers]
(
	[Id] ASC,
	[VoucherDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ACTRX]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_ACTRX] ON [dbo].[Accounts_VoucherTransaction]
(
	[LedgerId] ASC,
	[fyid] ASC
)
INCLUDE([VoucherId],[TransactionType],[Amount]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_VoucherTransaction_VoucherId]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_VoucherTransaction_VoucherId] ON [dbo].[Accounts_VoucherTransaction]
(
	[VoucherId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Common_PartyTDSDeclaration]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_Common_PartyTDSDeclaration] ON [dbo].[Common_PartyTDSDeclaration]
(
	[FinancialYear] ASC,
	[PartyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_WorkOut_EntityID]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_WorkOut_EntityID] ON [dbo].[EntityValues]
(
	[EntityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [INC_LoadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [INC_LoadingChallan] ON [dbo].[LoadingChallan]
(
	[ChallanNo] ASC
)
INCLUDE([Id],[NetWT],[Moisture],[MoistureUnit],[GuaranteeWT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [INC_LoadingChallan_1]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [INC_LoadingChallan_1] ON [dbo].[LoadingChallan]
(
	[LoadDate] ASC
)
INCLUDE([Id],[ChallanNo],[JobId],[STOId],[NetWT],[Moisture],[MoistureUnit],[TruckId],[TotalFreight],[LoadDMT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LoadingChallan_JobId]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_LoadingChallan_JobId] ON [dbo].[LoadingChallan]
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = ON, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [INC_Payment_1]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [INC_Payment_1] ON [dbo].[Payment]
(
	[LoadingId] ASC
)
INCLUDE([PaidOn]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_DCh_314_313_Pump]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_314_313_Pump] ON [dbo].[Pump]
(
	[PumpNameId] ASC
)
INCLUDE([Id],[DieselRate],[CreatedOn]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_DCh_69_68_Pump]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_69_68_Pump] ON [dbo].[Pump]
(
	[Id] ASC
)
INCLUDE([PumpNameId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_DCh_9_8_Pump]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_9_8_Pump] ON [dbo].[Pump]
(
	[PumpNameId] ASC,
	[StartDate] ASC,
	[EndDate] ASC
)
INCLUDE([Id],[DieselRate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_DCh_190_189_RegisteredChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_190_189_RegisteredChallans] ON [dbo].[RegisteredChallans]
(
	[ChallanNo] ASC,
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_DCh_2152_2151_RegisteredChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_2152_2151_RegisteredChallans] ON [dbo].[RegisteredChallans]
(
	[BranchId] ASC,
	[ChallanNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_DCh_40_39_RegisteredChallans]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [idx_DCh_40_39_RegisteredChallans] ON [dbo].[RegisteredChallans]
(
	[Status] ASC,
	[BranchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [UQ_RolePermissions_RoleId_PermissionKey]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UQ_RolePermissions_RoleId_PermissionKey] ON [dbo].[RolePermissions]
(
	[RoleId] ASC,
	[PermissionKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [NC_Invoice_INC]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [NC_Invoice_INC] ON [dbo].[_Invoice]
(
	[Id] ASC,
	[InvoiceDate] ASC
)
INCLUDE([JobId],[ClaimQtyType],[VoucherId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [INC_InvoiceChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [INC_InvoiceChallan] ON [dbo].[_InvoiceChallan]
(
	[InvoiceId] ASC
)
INCLUDE([ChallanNo],[BillingRate],[COtherDeduction],[CDetention],[StaticalCharge],[HandlingRate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX__ShoratgeWaiver]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX__ShoratgeWaiver] ON [dbo].[_ShoratgeWaiver]
(
	[PaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TokenBulkPaymentId_TokenBulkPayment]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_TokenBulkPaymentId_TokenBulkPayment] ON [dbo].[_TokenBulkPaymentId]
(
	[BulkPaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TokenBulkPaymentId_TokenId]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_TokenBulkPaymentId_TokenId] ON [dbo].[_TokenBulkPaymentId]
(
	[TokenId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [UQ__WorkOrder_OrderNo]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UQ__WorkOrder_OrderNo] ON [dbo].[_WorkOrder]
(
	[OrderNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_DCh_65_64_UnloadingChallan]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_DCh_65_64_UnloadingChallan] ON [dbo].[UnloadingChallan]
(
	[LoadingChallanId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [UQ_UserPermissions_UserId_PermissionKey]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UQ_UserPermissions_UserId_PermissionKey] ON [dbo].[UserPermissions]
(
	[UserId] ASC,
	[PermissionKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_UserRoles_RoleId_UserId]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE NONCLUSTERED INDEX [IX_UserRoles_RoleId_UserId] ON [dbo].[UserRoles]
(
	[RoleId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [UQ_UserRoles_UserId_RoleId]    Script Date: 2/15/2025 9:02:58 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UQ_UserRoles_UserId_RoleId] ON [dbo].[UserRoles]
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Accounts_AutoVoucherAction] ADD  CONSTRAINT [DF_Accounts_AutoVoucherAction_IsAutoApproved]  DEFAULT ((2)) FOR [DefaultStatus]
GO
ALTER TABLE [dbo].[Accounts_Banks] ADD  CONSTRAINT [DF_Accounts_Banks_BankCCLimit]  DEFAULT ((0.00)) FOR [BankCCLimit]
GO
ALTER TABLE [dbo].[Accounts_Banks] ADD  CONSTRAINT [DF_Accounts_Banks_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_Bills] ADD  CONSTRAINT [DF_Accounts_Bills_BillOwner]  DEFAULT ((1)) FOR [BillOwner]
GO
ALTER TABLE [dbo].[Accounts_Bills] ADD  CONSTRAINT [DF_Accounts_Bills_ServiceTaxAmount]  DEFAULT ((0)) FOR [ServiceTaxAmount]
GO
ALTER TABLE [dbo].[Accounts_Bills] ADD  CONSTRAINT [DF_Accounts_Bills_VATAmount]  DEFAULT ((0)) FOR [VATAmount]
GO
ALTER TABLE [dbo].[Accounts_Bills] ADD  CONSTRAINT [DF__Accounts___BillT__490FC9A0]  DEFAULT ('MANUAL') FOR [BillType]
GO
ALTER TABLE [dbo].[Accounts_Bills] ADD  CONSTRAINT [DF_Accounts_Bills_IsSystemGenerated]  DEFAULT ((0)) FOR [IsAutoGenerated]
GO
ALTER TABLE [dbo].[Accounts_CostCenters] ADD  CONSTRAINT [DF_ImEx_Accounts_CostCenters_CostCenterType]  DEFAULT ((1)) FOR [CostCenterType]
GO
ALTER TABLE [dbo].[Accounts_CostCenters] ADD  CONSTRAINT [DF_Accounts_CostCenters_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_DailyBranchClosingBalance] ADD  CONSTRAINT [DF_Accounts_DailyBranchClosingBalance_ActualClosing]  DEFAULT ((0.00)) FOR [ActualClosing]
GO
ALTER TABLE [dbo].[Accounts_Groups] ADD  CONSTRAINT [DF_Accounts_Groups_SystemCreated]  DEFAULT ((0)) FOR [SystemCreated]
GO
ALTER TABLE [dbo].[Accounts_Groups] ADD  CONSTRAINT [DF_Accounts_Groups_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance] ADD  CONSTRAINT [DF_ImEx_Accounts_LedgerBalance_OpeningBalance]  DEFAULT ((0)) FOR [OpeningBalance]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_ImEx_Accounts_Ledgers_LedgerType]  DEFAULT ((1)) FOR [LedgerType]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_ImEx_Accounts_Ledgers_IsCostCenter]  DEFAULT ((0)) FOR [IsCostCenter]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_TaxPercentage]  DEFAULT ((0.0)) FOR [TaxPercentage]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_STApplicable]  DEFAULT ((0)) FOR [STApplicable]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_IsReconciliation]  DEFAULT ((0)) FOR [IsReconciliation]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_AllowNegativeBalance]  DEFAULT ((1)) FOR [AllowNegativeBalance]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_AllowBackDateEntry]  DEFAULT ((1)) FOR [AllowBackDateEntry]
GO
ALTER TABLE [dbo].[Accounts_Ledgers] ADD  CONSTRAINT [DF_Accounts_Ledgers_AllowBackDayEntry]  DEFAULT ((1)) FOR [AllowBackDayEntry]
GO
ALTER TABLE [dbo].[Accounts_LedgerType] ADD  CONSTRAINT [DF_Accounts_LedgerType_StopLedgerCreation]  DEFAULT ((1)) FOR [StopLedgerCreation]
GO
ALTER TABLE [dbo].[Accounts_PaymentMode] ADD  CONSTRAINT [DF_Accounts_PaymentMode_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_STCategoryAbatement] ADD  CONSTRAINT [DF_Accounts_STCategoryAbatement_Abatement]  DEFAULT ((0.0)) FOR [Abatement]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] ADD  CONSTRAINT [DF_Accounts_STCategoryRate_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] ADD  CONSTRAINT [DF_Accounts_TaxMasterContent_MinPaymentForTDS]  DEFAULT ((0)) FOR [MinPaymentForTDS]
GO
ALTER TABLE [dbo].[Accounts_TDSNatureOfPayment] ADD  CONSTRAINT [DF_Accounts_TDSNatureOfPayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] ADD  CONSTRAINT [DF_Accounts_TDSSettings_MinPaymentForTDS]  DEFAULT ((0)) FOR [MinPaymentForTDS]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] ADD  CONSTRAINT [DF_Accounts_TDSSettings_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_Vouchers] ADD  CONSTRAINT [DF_ImEx_Accounts_Vouchers_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE [dbo].[Accounts_Vouchers] ADD  CONSTRAINT [DF_ImEx_Default_IECType_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_Vouchers] ADD  CONSTRAINT [DF__Accounts___IsAut__4A03EDD9]  DEFAULT ((1)) FOR [IsAutoGenerated]
GO
ALTER TABLE [dbo].[Accounts_VouchersLog] ADD  CONSTRAINT [DF_ImEx_Accounts_VouchersLog_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE [dbo].[Accounts_VouchersRefType] ADD  CONSTRAINT [DF_Accounts_VouchersRefType_IsSystemGenerated]  DEFAULT ((1)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[Accounts_VoucherType] ADD  CONSTRAINT [DF_Accounts_VoucherType_IsSystemGenerated]  DEFAULT ((1)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[AuditLog] ADD  CONSTRAINT [DF_AuditLog_ChangedOn]  DEFAULT (getdate()) FOR [ChangedOn]
GO
ALTER TABLE [dbo].[Common_BankNames] ADD  CONSTRAINT [DF_Common_BankNames_IsPaymentBank]  DEFAULT ((0)) FOR [IsBulkPaymentUse]
GO
ALTER TABLE [dbo].[Common_Branch] ADD  CONSTRAINT [DF_Common_Branch_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Common_Branch] ADD  CONSTRAINT [DF_Common_Branch_MaxCashLimit]  DEFAULT ((100000)) FOR [MaxCashLimit]
GO
ALTER TABLE [dbo].[Common_Branch] ADD  CONSTRAINT [DF_Common_Branch_IsHeadOffice]  DEFAULT ((0)) FOR [IsHeadOffice]
GO
ALTER TABLE [dbo].[Common_Branch] ADD  CONSTRAINT [DF_Common_Branch_IsTokenAttchReq]  DEFAULT ((0)) FOR [IsTokenAttchReq]
GO
ALTER TABLE [dbo].[Common_Client] ADD  CONSTRAINT [DF_Common_ClientBranch_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Common_Client] ADD  CONSTRAINT [DF_Common_Client_IsActive_1]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[Common_Client] ADD  CONSTRAINT [DF_Common_Client_MaxInvoiceAgeTerms]  DEFAULT ((60)) FOR [MaxInvoiceAge]
GO
ALTER TABLE [dbo].[Common_Client] ADD  CONSTRAINT [DF_Common_Client_InvoiceFormat]  DEFAULT ((0)) FOR [InvoiceFormat]
GO
ALTER TABLE [dbo].[Common_Client] ADD  CONSTRAINT [DF_Common_Client_KYC]  DEFAULT ((0)) FOR [KYC]
GO
ALTER TABLE [dbo].[Common_ClientGroup] ADD  CONSTRAINT [DF_Common_Client_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[Common_ClientGroup] ADD  CONSTRAINT [DF_Common_Client_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Common_Company] ADD  CONSTRAINT [DF_Common_Company_LoginImg]  DEFAULT ('demo') FOR [ImageCode]
GO
ALTER TABLE [dbo].[Common_EmailSent] ADD  CONSTRAINT [DF_Common_EmailSent_IsHtml]  DEFAULT ((1)) FOR [IsHtml]
GO
ALTER TABLE [dbo].[Common_EmailSent] ADD  CONSTRAINT [DF_Common_EmailSent_TimeStamp]  DEFAULT (getdate()) FOR [TimeStamp]
GO
ALTER TABLE [dbo].[Common_EmailTemplate] ADD  CONSTRAINT [DF_Common_EmailTemplate_LastSentOn]  DEFAULT (getdate()) FOR [LastSentOn]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF__Tmp_Commo__IsCom__5F891AA4]  DEFAULT ((0)) FOR [IsCompany]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF__Tmp_Commo__IsTDS__607D3EDD]  DEFAULT ((0)) FOR [IsTDSSubmitted]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF_Common_Parties_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF_Common_Parties_TempUpdate]  DEFAULT ((0)) FOR [TempUpdate]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF_Common_Parties_IsSystemGenerated]  DEFAULT ((0)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[Common_Parties] ADD  CONSTRAINT [DF_Common_Parties_NoTDS]  DEFAULT ((0)) FOR [NoTDS]
GO
ALTER TABLE [dbo].[Common_PartyAccount] ADD  CONSTRAINT [DF_Common_PartyAccount_PrimaryAC]  DEFAULT ((0)) FOR [PrimaryAC]
GO
ALTER TABLE [dbo].[Common_PartyTDSDeclaration] ADD  CONSTRAINT [DF_Common_PartyTDSDeclaration_TDSDeclaration]  DEFAULT ((0)) FOR [TDSDeclaration]
GO
ALTER TABLE [dbo].[Common_PartyType] ADD  CONSTRAINT [DF_Common_PartyType_IsSystemGenerated]  DEFAULT ((0)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[Common_PartyType] ADD  CONSTRAINT [DF_Common_PartyType_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Common_PreClient] ADD  CONSTRAINT [DF__Common_Cl__MaxIn__1C0B465B]  DEFAULT ((60)) FOR [MaxInvoiceAge]
GO
ALTER TABLE [dbo].[Common_PreClient] ADD  CONSTRAINT [DF__Common_Cl__Invoi__1CFF6A94]  DEFAULT ((0)) FOR [InvoiceFormat]
GO
ALTER TABLE [dbo].[Common_PreClient] ADD  CONSTRAINT [DF_Common_PreClient_RecordStatus]  DEFAULT ((1)) FOR [RecordStatus]
GO
ALTER TABLE [dbo].[Common_Settings] ADD  CONSTRAINT [DF_Common_Settings_AllowToModify]  DEFAULT ((0)) FOR [AllowToModify]
GO
ALTER TABLE [dbo].[DB_PANInfo] ADD  CONSTRAINT [DF_DB_PANInfo_InsertedOn]  DEFAULT (getdate()) FOR [InsertedOn]
GO
ALTER TABLE [dbo].[Fleet_Association] ADD  CONSTRAINT [DF_Fleet_Association_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Association] ADD  CONSTRAINT [DF_Fleet_Association_IsSystemGenerated]  DEFAULT ((0)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] ADD  CONSTRAINT [DF_Fleet_AssociationFuelRate_DieselRate]  DEFAULT ((0.0)) FOR [DieselRate]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] ADD  CONSTRAINT [DF_Fleet_AssociationFuelRate_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] ADD  CONSTRAINT [DF_Fleet_AssociationFuelRate_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] ADD  CONSTRAINT [DF_Fleet_AssociationRateLP_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT] ADD  CONSTRAINT [DF_Fleet_AssociationRateMT_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Manufacture] ADD  CONSTRAINT [DF_Fleet_Manufacture_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel] ADD  CONSTRAINT [DF_Fleet_ManufactureModel_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Parts] ADD  CONSTRAINT [DF_Fleet_Parts_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Purchase] ADD  CONSTRAINT [DF_Fleet_Purchase_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Sale] ADD  CONSTRAINT [DF_Fleet_Sale_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_ServiceCategory] ADD  CONSTRAINT [DF_Fleet_ServiceCategory_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_TyreNos] ADD  CONSTRAINT [DF_Fleet_TyreNos_MaxLoadLimit]  DEFAULT ((30.00)) FOR [MaxLoadLimit]
GO
ALTER TABLE [dbo].[Fleet_Vehicle] ADD  CONSTRAINT [DF_Fleet_Vehicle_Owner]  DEFAULT ((1)) FOR [Owner]
GO
ALTER TABLE [dbo].[Fleet_Vehicle] ADD  CONSTRAINT [DF_Fleet_Vehicle_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_Vehicle] ADD  CONSTRAINT [DF_Fleet_Vehicle_IsBlocked]  DEFAULT ((0)) FOR [IsBlocked]
GO
ALTER TABLE [dbo].[Fleet_Vehicle] ADD  CONSTRAINT [DF_Fleet_Vehicle_IsVerify]  DEFAULT ((0)) FOR [IsVerify]
GO
ALTER TABLE [dbo].[Fleet_Vehicle] ADD  CONSTRAINT [DF_Fleet_Vehicle_IsVerify1]  DEFAULT ((0)) FOR [IsApprove]
GO
ALTER TABLE [dbo].[Fleet_VehicleAssociations] ADD  CONSTRAINT [DF_Fleet_VehicleAssociations_PaidOn]  DEFAULT (getdate()) FOR [PaidOn]
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers] ADD  CONSTRAINT [DF_Fleet_VehicleDrivers_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] ADD  CONSTRAINT [DF_Fleet_VehicleFule_StartMeterReading]  DEFAULT ((0)) FOR [StartMeterReading]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] ADD  CONSTRAINT [DF_Fleet_VehicleFule_EndMeterReading]  DEFAULT ((0)) FOR [EndMeterReading]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] ADD  CONSTRAINT [DF_Fleet_VehicleFuel_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance] ADD  CONSTRAINT [DF_Fleet_VehicleInsurance_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleParts] ADD  CONSTRAINT [DF_Fleet_VehicleParts_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] ADD  CONSTRAINT [DF_Fleet_VehiclePermit_PaidOn]  DEFAULT (getdate()) FOR [PaidOn]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] ADD  CONSTRAINT [DF_Fleet_VehiclePermit_IsNationalPermit]  DEFAULT ((0)) FOR [IsNationalPermit]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] ADD  CONSTRAINT [DF_Fleet_VehiclePermit_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution] ADD  CONSTRAINT [DF_Fleet_VehiclePollution_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax] ADD  CONSTRAINT [DF_Fleet_VehicleRoadTax_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleServices] ADD  CONSTRAINT [DF_Fleet_VehicleServices_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Fleet_VehicleTyres] ADD  CONSTRAINT [DF_Fleet_VehicleTyres_Cost]  DEFAULT ((0)) FOR [Cost]
GO
ALTER TABLE [dbo].[Fleet_VehicleTyres] ADD  CONSTRAINT [DF_Fleet_VehicleTyres_PaidOn]  DEFAULT (getdate()) FOR [PaidOn]
GO
ALTER TABLE [dbo].[GST_SACCode] ADD  CONSTRAINT [DF_GST_SACCode_CGST]  DEFAULT ((0)) FOR [CGST]
GO
ALTER TABLE [dbo].[GST_SACCode] ADD  CONSTRAINT [DF_GST_SACCode_SGST]  DEFAULT ((0)) FOR [SGST]
GO
ALTER TABLE [dbo].[GST_SACCode] ADD  CONSTRAINT [DF_GST_SACCode_IGST]  DEFAULT ((0)) FOR [IGST]
GO
ALTER TABLE [dbo].[HRMS_Profile] ADD  CONSTRAINT [DF_HRMS_Profile_Active]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[i3MS_Circle] ADD  CONSTRAINT [DF_i3MS_Circle_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[i3MS_Lessee] ADD  CONSTRAINT [DF_i3MS_Lessee_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[i3MS_Settings] ADD  CONSTRAINT [DF_i3MS_Settings_IsWorking]  DEFAULT ((0)) FOR [IsWorking]
GO
ALTER TABLE [dbo].[i3MS_Settings] ADD  CONSTRAINT [DF_i3MS_Settings_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_Airline] ADD  CONSTRAINT [DF_ImEx_Airline_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_CreditNote] ADD  CONSTRAINT [DF_ImEx_CreditNote_IsIGSTApplicable]  DEFAULT ((0)) FOR [IsIGSTApplicable]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] ADD  CONSTRAINT [DF_ImEx_CreditNoteDetails_Quantity]  DEFAULT ((0)) FOR [Quantity]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] ADD  CONSTRAINT [DF_ImEx_CreditNoteDetails_Rate]  DEFAULT ((0.0)) FOR [Rate]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] ADD  CONSTRAINT [DF_ImEx_CreditNoteDetails_IsIGSTApplicable]  DEFAULT ((0)) FOR [IsIGSTApplicable]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] ADD  CONSTRAINT [DF_ImEx_CreditNoteDetails_TotalAmount]  DEFAULT ((0.0)) FOR [TotalAmount]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_IsTaxApplicable]  DEFAULT ((0)) FOR [IsTaxApplicable]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_Quantity]  DEFAULT ((0)) FOR [Quantity]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_Rate]  DEFAULT ((0.0)) FOR [Rate]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_TaxableAmount]  DEFAULT ((0.0)) FOR [TaxableAmount]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_NonTaxAmount]  DEFAULT ((0.0)) FOR [NonTaxAmount]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_AssessableValue]  DEFAULT ((0.0)) FOR [AssessableValue]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] ADD  CONSTRAINT [DF_ImEx_DebitNoteDetails_IsTaxPayableByParty]  DEFAULT ((0)) FOR [IsTaxPayableByParty]
GO
ALTER TABLE [dbo].[ImEx_DestinationPort] ADD  CONSTRAINT [DF_ImEx_DestinationPort_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] ADD  CONSTRAINT [DF_ImEx_ExpensePaymentList_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive] ADD  CONSTRAINT [DF_ImEx_ExpenseReceive_ReceivedAmount]  DEFAULT ((0.0)) FOR [ReceivedAmount]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList] ADD  CONSTRAINT [DF_ImEx_ExpenseReceiveList_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_FinalDestination] ADD  CONSTRAINT [DF_ImEx_FinalDestination_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_Quantity]  DEFAULT ((0)) FOR [Quantity]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_NonTaxAmount]  DEFAULT ((0.00)) FOR [NonTaxAmount]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_CurrencyId]  DEFAULT ((0.00)) FOR [CurrencyId]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_DebitNote]  DEFAULT ((0)) FOR [DebitNote]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_IsTaxApplicable]  DEFAULT ((0)) FOR [IsTaxApplicable]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_TaxableAmount]  DEFAULT ((0.0)) FOR [TaxableAmount]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_IsTaxPayableByParty]  DEFAULT ((0)) FOR [IsTaxPayableByParty]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_TotalTax]  DEFAULT ((0.00)) FOR [SaleTax]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_BuyingRate]  DEFAULT ((0.00)) FOR [BuyingCost]
GO
ALTER TABLE [dbo].[ImEx_Invoice] ADD  CONSTRAINT [DF_ImEx_Invoice_BuyingTax]  DEFAULT ((0.00)) FOR [BuyingTax]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceBulkPayment_ReceivedAmount]  DEFAULT ((0.0)) FOR [ReceivedAmount]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceBulkPayment_ShortageDeduction]  DEFAULT ((0)) FOR [ShortageDeduction]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceBulkPayment_MoistureDeduction]  DEFAULT ((0)) FOR [MoistureDeduction]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceBulkPayment_TDS]  DEFAULT ((0)) FOR [TDS]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceBulkPayment_OtherDeduction]  DEFAULT ((0)) FOR [OtherDeduction]
GO
ALTER TABLE [dbo].[ImEx_InvoiceRefPayment] ADD  CONSTRAINT [DF_ImEx_InvoiceRefPayment_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_Job] ADD  CONSTRAINT [DF_ImEx_Job_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_JobExpense] ADD  CONSTRAINT [DF_ImEx_JobExpense_IsGSTApplicable]  DEFAULT ((0)) FOR [IsGSTApplicable]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] ADD  CONSTRAINT [DF_ImEx_JobExpenseId_Rate]  DEFAULT ((0.0)) FOR [Rate]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] ADD  CONSTRAINT [DF_ImEx_JobExpenseId_Quantity]  DEFAULT ((0.0)) FOR [Quantity]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] ADD  CONSTRAINT [DF_ImEx_JobExpenseId_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] ADD  CONSTRAINT [DF_ImEx_JobExpenseId_IsTaxApplicable]  DEFAULT ((0)) FOR [IsTaxApplicable]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax] ADD  CONSTRAINT [DF_ImEx_JobExpenseTax_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_JobType] ADD  CONSTRAINT [DF_ImEx_JobType_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_LoadingPort] ADD  CONSTRAINT [DF_ImEx_LoadingPort_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] ADD  CONSTRAINT [DF_ImEx_NotifyParty_GSTNo]  DEFAULT ('NA') FOR [GSTNo]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] ADD  CONSTRAINT [DF_ImEx_NotifyParty_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_Origin] ADD  CONSTRAINT [DF_ImEx_Origin_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_Particulars] ADD  CONSTRAINT [DF_ImEx_Particulars_IsTaxApplicable]  DEFAULT ((0)) FOR [IsTaxApplicable]
GO
ALTER TABLE [dbo].[ImEx_Particulars] ADD  CONSTRAINT [DF_ImEx_Particulars_IsServiceTaxApplicable]  DEFAULT ((0)) FOR [IsServiceTaxApplicable]
GO
ALTER TABLE [dbo].[ImEx_Payment] ADD  CONSTRAINT [DF_ImEx_Payment_ReceivedAmount]  DEFAULT ((0.0)) FOR [ReceivedAmount]
GO
ALTER TABLE [dbo].[ImEx_Payment] ADD  CONSTRAINT [DF_ImEx_Payment_ShoratageAmount]  DEFAULT ((0.0)) FOR [ShoratageAmount]
GO
ALTER TABLE [dbo].[ImEx_Payment] ADD  CONSTRAINT [DF_ImEx_Payment_TSDAmount]  DEFAULT ((0.0)) FOR [TSDAmount]
GO
ALTER TABLE [dbo].[ImEx_Payment] ADD  CONSTRAINT [DF_ImEx_Payment_MoistureAmount]  DEFAULT ((0.0)) FOR [MoistureAmount]
GO
ALTER TABLE [dbo].[ImEx_Payment] ADD  CONSTRAINT [DF_ImEx_Payment_OtherDeduction]  DEFAULT ((0.0)) FOR [OtherDeduction]
GO
ALTER TABLE [dbo].[ImEx_Quotation] ADD  CONSTRAINT [DF_ImEx_Quotation_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_QuotationApprovals] ADD  CONSTRAINT [DF_ImEx_QuotationApprovals_ActionDate]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] ADD  CONSTRAINT [DF_ImEx_QuotationDetails_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster] ADD  CONSTRAINT [DF_ImEx_QuotationMaster_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_QuotationType] ADD  CONSTRAINT [DF_ImEx_QuotationType_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] ADD  CONSTRAINT [DF_ImEx_RetainerInvoice_Amount]  DEFAULT ((0.0)) FOR [Amount]
GO
ALTER TABLE [dbo].[ImEx_Shipper] ADD  CONSTRAINT [DF_ImEx_Shipper_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_ShippingTerms] ADD  CONSTRAINT [DF_ImEx_ShippingTerms_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ImEx_Vessel] ADD  CONSTRAINT [DF_ImEx_Vessel_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingAdvance] ADD  CONSTRAINT [DF_LoadingAdvance_TDSRate]  DEFAULT ((0.00)) FOR [TDSRate]
GO
ALTER TABLE [dbo].[LoadingAdvance] ADD  CONSTRAINT [DF_LoadingAdvance_TDSDeduction]  DEFAULT ((0.0)) FOR [TDSDeduction]
GO
ALTER TABLE [dbo].[LoadingAdvance] ADD  CONSTRAINT [DF_LoadingAdvance_NetPayable]  DEFAULT ((0.0)) FOR [NetPayable]
GO
ALTER TABLE [dbo].[LoadingAdvance] ADD  CONSTRAINT [DF_LoadingAdvance_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[LoadingAdvance] ADD  CONSTRAINT [DF_LoadingAdvance_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] ADD  CONSTRAINT [DF_LoadingAdvanceBulkPayment_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] ADD  CONSTRAINT [DF_LoadingAdvanceBulkPayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] ADD  CONSTRAINT [DF_LoadingAdvanceBulkPayment_FYNameNo]  DEFAULT ('17-18') FOR [FYNameNo]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] ADD  CONSTRAINT [DF_LoadingAdvanceBulkPaymentId_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] ADD  CONSTRAINT [DF_LoadingAdvanceBulkPaymentId_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingAdvanceType] ADD  CONSTRAINT [DF_LoadingAdvanceType_IsSystemGenerated]  DEFAULT ((0)) FOR [IsSystemGenerated]
GO
ALTER TABLE [dbo].[LoadingApprovals] ADD  CONSTRAINT [DF_LoadingApprovals_ActionOn]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[LoadingBulkPayment] ADD  CONSTRAINT [DF_LoadingBulkPayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingBulkPayment] ADD  CONSTRAINT [DF_LoadingBulkPayment_FYNameNo]  DEFAULT ((17)-(18)) FOR [FYNameNo]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Fixed]  DEFAULT ((0)) FOR [Fixed]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Transhipment]  DEFAULT ((0)) FOR [Transhipment]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_MaterialValue]  DEFAULT ((0)) FOR [MaterialValue]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_AssociationCharge]  DEFAULT ((0.00)) FOR [AssociationCharge]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Labor]  DEFAULT ((0.00)) FOR [Labor]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Detention]  DEFAULT ((0.00)) FOR [Detention]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Collection]  DEFAULT ((0.00)) FOR [Collection]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Welfare]  DEFAULT ((0.00)) FOR [Welfare]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Other]  DEFAULT ((0.00)) FOR [Other]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_Advance]  DEFAULT ((0.00)) FOR [Advance]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_TotalFreight]  DEFAULT ((0.00)) FOR [TotalFreight]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_LoadDMT]  DEFAULT ((0.000)) FOR [LoadDMT]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_BrokerId]  DEFAULT ((1)) FOR [BrokerId]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_ApprovalStatus]  DEFAULT ((1)) FOR [ApprovalStatus]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[LoadingChallan] ADD  CONSTRAINT [DF_LoadingChallan_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[LoadingPoints] ADD  CONSTRAINT [DF__LoadingPo__Creat__276EDEB3]  DEFAULT (getdate()) FOR [CreateOn]
GO
ALTER TABLE [dbo].[Log_LoadingChallan] ADD  CONSTRAINT [DF_Log_LoadingChallan_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[Log_LoadingChallan] ADD  CONSTRAINT [DF_Log_LoadingChallan_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Log_Payment] ADD  CONSTRAINT [DF_Log_Payment_EscalationRate]  DEFAULT ((0.00)) FOR [EscalationRate]
GO
ALTER TABLE [dbo].[Log_UnloadingChallan] ADD  CONSTRAINT [DF_Log_UnloadingChallan_Seals]  DEFAULT ((0.00)) FOR [Seals]
GO
ALTER TABLE [dbo].[Materials] ADD  CONSTRAINT [DF_Materials_IsEwayBill]  DEFAULT ((0)) FOR [IsEwayBill]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_ChallanDeduction]  DEFAULT ((0.00)) FOR [ChallanDeduction]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_TollGate]  DEFAULT ((0.00)) FOR [TollGate]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_EffectiveWt]  DEFAULT ((0.000)) FOR [EffectiveWt]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_ShortageWt]  DEFAULT ((0.000)) FOR [ShortageWt]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_Penalty]  DEFAULT ((0.00)) FOR [Penalty]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_ChallanLost]  DEFAULT ((0.00)) FOR [ChallanLost]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_Adjustment]  DEFAULT ((0.00)) FOR [Adjustment]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_NetPayable]  DEFAULT ((0.00)) FOR [NetPayable]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_PaidAmount]  DEFAULT ((0.00)) FOR [PaidAmount]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_PaidBy]  DEFAULT ((0)) FOR [PaidBy]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_IsSubmitted]  DEFAULT ((0)) FOR [IsSubmitted]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_IsApproved]  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_IsRejected]  DEFAULT ((0)) FOR [IsRejected]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_PenaltyRate]  DEFAULT ((0.0)) FOR [PenaltyRate]
GO
ALTER TABLE [dbo].[Payment] ADD  CONSTRAINT [DF_Payment_EscalationRate]  DEFAULT ((0.00)) FOR [EscalationRate]
GO
ALTER TABLE [dbo].[PumpName] ADD  CONSTRAINT [DF_PumpName_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[RegisteredChallans] ADD  CONSTRAINT [DF_RegisteredChallans_InsertedOn]  DEFAULT (getdate()) FOR [InsertedOn]
GO
ALTER TABLE [dbo].[SystemLedger] ADD  CONSTRAINT [DF__SystemLed__CostC__63E3BB6D]  DEFAULT ((0)) FOR [CostCenterOption]
GO
ALTER TABLE [dbo].[SystemLedger] ADD  CONSTRAINT [DF_SystemLedger_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[SystemLedger] ADD  CONSTRAINT [DF_SystemLedger_AllowManualVoucher]  DEFAULT ((0)) FOR [IsAllowManualVoucher]
GO
ALTER TABLE [dbo].[TLoadingChallan] ADD  CONSTRAINT [DF_TLoadingChallan_LoadDMT]  DEFAULT ((0.000)) FOR [LoadDMT]
GO
ALTER TABLE [dbo].[TLoadingChallan] ADD  CONSTRAINT [DF_TLoadingChallan_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[TLoadingChallan] ADD  CONSTRAINT [DF_TLoadingChallan_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Tmp_Common_Client] ADD  CONSTRAINT [DF_Common_Client_RecordStatus]  DEFAULT ((1)) FOR [RecordStatus]
GO
ALTER TABLE [dbo].[_Advance] ADD  CONSTRAINT [DF__Advance_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_AdvanceApprovals] ADD  CONSTRAINT [DF__AdvanceApprovals_ActionOn]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[_AdvanceDetails] ADD  CONSTRAINT [DF__AdvanceDetails_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_AdvanceDetails] ADD  CONSTRAINT [DF__AdvanceDetails_Cash]  DEFAULT ((0.00)) FOR [Cash]
GO
ALTER TABLE [dbo].[_AdvanceDetails] ADD  CONSTRAINT [DF__AdvanceDetails_FundTransfer]  DEFAULT ((0.00)) FOR [FundTransfer]
GO
ALTER TABLE [dbo].[_AdvanceDetails] ADD  CONSTRAINT [DF__AdvanceDetails_Diesel]  DEFAULT ((0.00)) FOR [Diesel]
GO
ALTER TABLE [dbo].[_AdvanceVoucher] ADD  CONSTRAINT [DF__AdvanceVoucher_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_CHADetails] ADD  CONSTRAINT [DF_CHADetails_Container]  DEFAULT ((0)) FOR [Container]
GO
ALTER TABLE [dbo].[_ClaimQtyType] ADD  CONSTRAINT [DF__ClaimQtyType_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[_DevelopementSuport] ADD  DEFAULT ((0)) FOR [Paid]
GO
ALTER TABLE [dbo].[_DODetails] ADD  CONSTRAINT [DF__DODetails_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_InstantLoading] ADD  CONSTRAINT [DF__InstantLoading_LoadType]  DEFAULT ('MARKET') FOR [LoadType]
GO
ALTER TABLE [dbo].[_InstantLoading] ADD  CONSTRAINT [DF__InstantLoading_TotalNetWt]  DEFAULT ((0.0)) FOR [TotalNetWt]
GO
ALTER TABLE [dbo].[_InstantLoading] ADD  CONSTRAINT [DF__InstantLoading_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[_InstantLoading] ADD  CONSTRAINT [DF__InstantLoading_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_InstantUnloading] ADD  CONSTRAINT [DF__InstantUnloading_FiledName]  DEFAULT ('N/A') FOR [FiledName]
GO
ALTER TABLE [dbo].[_InstantUnloading] ADD  CONSTRAINT [DF__InstantUnloading_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[_InstantUnloading] ADD  CONSTRAINT [DF__InstantUnloading_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_Invoice] ADD  CONSTRAINT [DF__Invoice_AddTaxInAmount_1]  DEFAULT ((0)) FOR [AddTaxInAmount]
GO
ALTER TABLE [dbo].[_Invoice] ADD  CONSTRAINT [DF__Invoice_IsHandlingInvoice]  DEFAULT ((0)) FOR [IsHandlingInvoice]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_HandlingReceived]  DEFAULT ((0.00)) FOR [HandlingReceived]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_ShortageDeduction]  DEFAULT ((0)) FOR [ShortageDeduction]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_MoistureDeduction]  DEFAULT ((0)) FOR [MoistureDeduction]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_TDS]  DEFAULT ((0)) FOR [TDS]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_OtherDeduction]  DEFAULT ((0)) FOR [OtherDeduction]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] ADD  CONSTRAINT [DF__InvoiceBulkPayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_InvoiceChallan] ADD  CONSTRAINT [DF__InvoiceChallan_BillingRate]  DEFAULT ((0.0)) FOR [BillingRate]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_ShortageDeduction]  DEFAULT ((0.0)) FOR [ShortageDeduction]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_MoistureDeduction]  DEFAULT ((0.0)) FOR [MoistureDeduction]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_TDSAmount]  DEFAULT ((0.0)) FOR [TDSAmount]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_OtherDeduction]  DEFAULT ((0.0)) FOR [OtherDeduction]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_InvoicePayment] ADD  CONSTRAINT [DF__InvoicePayment_HandlingReceived]  DEFAULT ((0.0)) FOR [HandlingReceived]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] ADD  CONSTRAINT [DF__InvoicePaymentOnAcc_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_Job] ADD  CONSTRAINT [DF__Job_ShowClientRate]  DEFAULT ((0)) FOR [ShowClientRate]
GO
ALTER TABLE [dbo].[_Job] ADD  CONSTRAINT [DF__Job_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_Job] ADD  CONSTRAINT [DF__Job_IsLock]  DEFAULT ((0)) FOR [IsLock]
GO
ALTER TABLE [dbo].[_Job] ADD  CONSTRAINT [DF__Job_IsAutoQuantity]  DEFAULT ((0)) FOR [IsAutoQuantity]
GO
ALTER TABLE [dbo].[_Job] ADD  CONSTRAINT [DF___J__IsMul__0CFE0CF5]  DEFAULT ((0)) FOR [IsMultipleLoading]
GO
ALTER TABLE [dbo].[_JobApprovals] ADD  CONSTRAINT [DF__JobApprovals_ActionOn]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[_JobFreightMktRules] ADD  CONSTRAINT [DF__JobFreightMktRules_AllowToOverride]  DEFAULT ((0)) FOR [AllowToOverride]
GO
ALTER TABLE [dbo].[_JobFreightMktRules] ADD  CONSTRAINT [DF__JobFreightMktRules_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[_JobFreightMktRules] ADD  CONSTRAINT [DF__JobFreightMktRules_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_JobFreightMktRules] ADD  CONSTRAINT [DF__JobFreightMktRules_FreightTolerance]  DEFAULT ((0)) FOR [FreightTolerance]
GO
ALTER TABLE [dbo].[_JobFreightMktRules] ADD  CONSTRAINT [DF__JobFreightMktRules_FreightRateUpdate]  DEFAULT ((0)) FOR [FreightRateUpdate]
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete] ADD  CONSTRAINT [DF__JobFreightRules_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_AllowToOverride]  DEFAULT ((0)) FOR [AllowToOverride]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_InsertUserId]  DEFAULT ((3105)) FOR [InsertUserId]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_AutoPayAdvance]  DEFAULT ((0)) FOR [AutoPayAdvance]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_AutoPayment]  DEFAULT ((0)) FOR [AutoPayment]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] ADD  CONSTRAINT [DF__JobFrieghtAssRules_FreightRateUpdate]  DEFAULT ((0)) FOR [FreightRateUpdate]
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules] ADD  CONSTRAINT [DF__JobFrieghtSpecialRules_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules] ADD  CONSTRAINT [DF__JobFrieghtSpecialRules_FreightRateUpdate]  DEFAULT ((0)) FOR [FreightRateUpdate]
GO
ALTER TABLE [dbo].[_JobPaymentRule] ADD  CONSTRAINT [DF__JobPaymentRule_TollGate]  DEFAULT ((0.0)) FOR [TollGate]
GO
ALTER TABLE [dbo].[_JobPaymentRule] ADD  CONSTRAINT [DF__JobPaymentRule_MktChallanDeduction]  DEFAULT ((0.0)) FOR [MktChallanDeduction]
GO
ALTER TABLE [dbo].[_JobPaymentRule] ADD  CONSTRAINT [DF__JobPaymentRule_AssChallanDeduction]  DEFAULT ((0.0)) FOR [AssChallanDeduction]
GO
ALTER TABLE [dbo].[_JobPaymentRule] ADD  CONSTRAINT [DF__JobPaymentRule_MaxAdvanceLimit]  DEFAULT ((100)) FOR [MaxAdvanceLimit]
GO
ALTER TABLE [dbo].[_JobPaymentRule] ADD  CONSTRAINT [DF__JobPaymentRule_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_JobShortageRule] ADD  CONSTRAINT [DF__JobShortageRule_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_MaxEscalationRate] ADD  CONSTRAINT [DF__MaxEscalationRate_MktMaxEscalationRate]  DEFAULT ((0)) FOR [MktMaxEscalationRate]
GO
ALTER TABLE [dbo].[_MaxEscalationRate] ADD  CONSTRAINT [DF__MaxEscalationRate_AssMaxEscalationRate]  DEFAULT ((0)) FOR [AssMaxEscalationRate]
GO
ALTER TABLE [dbo].[_OilFilling] ADD  CONSTRAINT [DF__OilFilling_DateTo]  DEFAULT (getdate()) FOR [DateTo]
GO
ALTER TABLE [dbo].[_OilFilling] ADD  CONSTRAINT [DF__OilFilling_BillNo]  DEFAULT ('') FOR [BillNo]
GO
ALTER TABLE [dbo].[_OilFilling] ADD  CONSTRAINT [DF__OilFilling_BillAmount]  DEFAULT ((0.0)) FOR [BillAmount]
GO
ALTER TABLE [dbo].[_OilFilling] ADD  CONSTRAINT [DF__OilFilling_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_OilFillingData] ADD  CONSTRAINT [DF__OilFillingData_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_OilFillingData] ADD  CONSTRAINT [DF__OilFillingData_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE [dbo].[_PaymentPenalty] ADD  CONSTRAINT [DF__PaymentPenalty_Amount]  DEFAULT ((0.00)) FOR [Amount]
GO
ALTER TABLE [dbo].[_PaymentReceived] ADD  CONSTRAINT [DF__PaymentReceived_Amount]  DEFAULT ((0.00)) FOR [Amount]
GO
ALTER TABLE [dbo].[_PaymentReceived] ADD  CONSTRAINT [DF__PaymentReceived_BankCharges]  DEFAULT ((0.00)) FOR [BankCharges]
GO
ALTER TABLE [dbo].[_PaymentReceived] ADD  DEFAULT ((0.000)) FOR [ShortageDeduction]
GO
ALTER TABLE [dbo].[_PaymentReceived] ADD  DEFAULT ((0.000)) FOR [MoistureDeduction]
GO
ALTER TABLE [dbo].[_PaymentReceived] ADD  DEFAULT ((0.000)) FOR [TdsAmount]
GO
ALTER TABLE [dbo].[_Recovery] ADD  CONSTRAINT [DF__Recovery_Amount]  DEFAULT ((0.00)) FOR [Amount]
GO
ALTER TABLE [dbo].[_Recovery] ADD  CONSTRAINT [DF__Recovery_RecoveryAdjustment]  DEFAULT ((0.00)) FOR [RecoveryAdjustment]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] ADD  CONSTRAINT [DF__ShoratgeWaiver_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] ADD  CONSTRAINT [DF__ShoratgeWaiver_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_STODetails] ADD  CONSTRAINT [DF__STODetails_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_Token] ADD  CONSTRAINT [DF__Token_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_Token] ADD  CONSTRAINT [DF__Token_OtherDeduction]  DEFAULT ((0.0)) FOR [OtherDeduction]
GO
ALTER TABLE [dbo].[_Token] ADD  CONSTRAINT [DF__Token_ForceDeductTDS]  DEFAULT ((0)) FOR [ForceDeductTDS]
GO
ALTER TABLE [dbo].[_Token] ADD  CONSTRAINT [DF__Token_Amount]  DEFAULT ((0)) FOR [Amount]
GO
ALTER TABLE [dbo].[_TokenApprovals] ADD  CONSTRAINT [DF__TokenApproval_ActionDate]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[_TokenBulkPayment] ADD  CONSTRAINT [DF__TokenBulkPayment_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_TokenBulkPayment] ADD  CONSTRAINT [DF__TokenBulkPayment_FyNoName]  DEFAULT ('18-19') FOR [FyNoName]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] ADD  CONSTRAINT [DF__TokenBulkPaymentIdInsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_TokenChallans] ADD  CONSTRAINT [DF__TokenChallans_IsShortageChallan]  DEFAULT ((0)) FOR [IsShortageChallan]
GO
ALTER TABLE [dbo].[_TokenChallans] ADD  CONSTRAINT [DF__TokenChallans_DocNo]  DEFAULT ((0)) FOR [DocNo]
GO
ALTER TABLE [dbo].[_TokenChallans] ADD  CONSTRAINT [DF__TokenChallans_IsDoc]  DEFAULT ((0)) FOR [IsDoc]
GO
ALTER TABLE [dbo].[_TPDetails] ADD  CONSTRAINT [DF__TPDetails_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_WOApprovals] ADD  CONSTRAINT [DF__WOApprovals_ActionDate]  DEFAULT (getdate()) FOR [ActionDate]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ServiceTaxPaybleByParty]  DEFAULT ((0)) FOR [ServiceTaxPaybleByParty]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_EscalationImpact]  DEFAULT ((0)) FOR [EscalationImpact]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_IsInvoiceBeforeUnloading]  DEFAULT ((0)) FOR [IsInvoiceBeforeUnloading]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowTPNo]  DEFAULT ((0)) FOR [ShowTPNo]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowGateEntryNo]  DEFAULT ((0)) FOR [ShowGateEntryNo]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowSAPNo]  DEFAULT ((0)) FOR [ShowSAPNo]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowTPBookNo]  DEFAULT ((0)) FOR [ShowTPBookNo]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowWayBillNo]  DEFAULT ((0)) FOR [ShowWayBillNo]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowDO]  DEFAULT ((0)) FOR [ShowDO]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_ShowSTO]  DEFAULT ((0)) FOR [ShowSTO]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_WorkOrder] ADD  CONSTRAINT [DF__WorkOrder_WOStatus]  DEFAULT ((1)) FOR [WOStatus]
GO
ALTER TABLE [dbo].[_WorkOrderItems] ADD  CONSTRAINT [DF__WorkOrderItems_CreateAutoJob]  DEFAULT ((0)) FOR [CreateAutoJob]
GO
ALTER TABLE [dbo].[_WorkOrderItems] ADD  CONSTRAINT [DF__WorkOrderItems_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_WorkOrderItems] ADD  CONSTRAINT [DF__WorkOrderItems_IsHandlingInvoice]  DEFAULT ((0)) FOR [IsHandlingInvoice]
GO
ALTER TABLE [dbo].[_WorkOrderItems] ADD  CONSTRAINT [DF__WorkOrderItems_HandlingInvoiceRate]  DEFAULT ((0.0)) FOR [HandlingInvoiceRate]
GO
ALTER TABLE [dbo].[_WorkOrderItems] ADD  CONSTRAINT [DF__WorkOrderItems_IsOverLoadAllowed]  DEFAULT ((0)) FOR [IsOverLoadAllowed]
GO
ALTER TABLE [dbo].[_WOSectorEscalation] ADD  CONSTRAINT [DF__WOSectorEscalation_EscalationName]  DEFAULT ('Diesel Escalation') FOR [EscalationName]
GO
ALTER TABLE [dbo].[_WOSectorEscalation] ADD  CONSTRAINT [DF__WOSectorEscalation_Rate]  DEFAULT ((0.00)) FOR [Rate]
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate] ADD  CONSTRAINT [DF__WOSectorMaterialRate_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_WOSectorRate] ADD  CONSTRAINT [DF__WOSectorRate_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[_WOShortageRules] ADD  CONSTRAINT [DF__WOShortageRules_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[ApprovalSettings] ADD  CONSTRAINT [DF_ApprovalSettings_IsSubmit]  DEFAULT ((1)) FOR [IsSubmit]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadedGrossWt]  DEFAULT ((0)) FOR [UnloadedGrossWt]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadedTareWt]  DEFAULT ((0)) FOR [UnloadedTareWt]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadedNetWt]  DEFAULT ((0)) FOR [UnloadedNetWt]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadedMoisture]  DEFAULT ((0)) FOR [UnloadedMoisture]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_Detention]  DEFAULT ((0)) FOR [Detention]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadDMT]  DEFAULT ((0.000)) FOR [UnloadDMT]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_ClientPenalty]  DEFAULT ((0.00)) FOR [ClientPenalty]
GO
ALTER TABLE [dbo].[UnloadingChallan] ADD  CONSTRAINT [DF_UnloadingChallan_UnloadInvoiceClaimQty]  DEFAULT ((0.0)) FOR [UnloadInvoiceClaimQty]
GO
ALTER TABLE [dbo].[UnloadingPoints] ADD  CONSTRAINT [DF__Unloading__Creat__29221CFB]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[UserPermissions] ADD  CONSTRAINT [DF_UserPermissions_Grant]  DEFAULT ((1)) FOR [Grant]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[Accounts_AutoVoucherAction]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_AutoVoucherAction_Accounts_ApprovalStatus] FOREIGN KEY([DefaultStatus])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[Accounts_AutoVoucherAction] CHECK CONSTRAINT [FK_Accounts_AutoVoucherAction_Accounts_ApprovalStatus]
GO
ALTER TABLE [dbo].[Accounts_Banks]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Banks_Common_BankNames] FOREIGN KEY([BankId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Banks] CHECK CONSTRAINT [FK_Accounts_Banks_Common_BankNames]
GO
ALTER TABLE [dbo].[Accounts_Banks]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Banks_Common_Branch] FOREIGN KEY([AssociatedBranch])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Banks] CHECK CONSTRAINT [FK_Accounts_Banks_Common_Branch]
GO
ALTER TABLE [dbo].[Accounts_Banks]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Banks_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Banks] CHECK CONSTRAINT [FK_Accounts_Banks_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_Banks]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Banks_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Banks] CHECK CONSTRAINT [FK_Accounts_Banks_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_Banks]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_Banks_ImEx_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Banks] CHECK CONSTRAINT [FK_ImEx_Accounts_Banks_ImEx_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Accounts_Bills]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Bills_Accounts_BillsCategory] FOREIGN KEY([Category])
REFERENCES [dbo].[Accounts_BillsCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Bills] CHECK CONSTRAINT [FK_Accounts_Bills_Accounts_BillsCategory]
GO
ALTER TABLE [dbo].[Accounts_Bills]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Bills_Accounts_BillsOwner] FOREIGN KEY([BillOwner])
REFERENCES [dbo].[Accounts_BillsOwner] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Accounts_Bills] CHECK CONSTRAINT [FK_Accounts_Bills_Accounts_BillsOwner]
GO
ALTER TABLE [dbo].[Accounts_Bills]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Bills_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Bills] CHECK CONSTRAINT [FK_Accounts_Bills_Common_Parties]
GO
ALTER TABLE [dbo].[Accounts_BillsItems]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_BillsItems_Accounts_Bills] FOREIGN KEY([BillId])
REFERENCES [dbo].[Accounts_Bills] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Accounts_BillsItems] CHECK CONSTRAINT [FK_Accounts_BillsItems_Accounts_Bills]
GO
ALTER TABLE [dbo].[Accounts_ClosingConfirmation]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_ClosingConfirmation_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[Accounts_ClosingConfirmation] CHECK CONSTRAINT [FK_Accounts_ClosingConfirmation_Common_Branch]
GO
ALTER TABLE [dbo].[Accounts_ClosingConfirmation]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_ClosingConfirmation_Users] FOREIGN KEY([UserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_ClosingConfirmation] CHECK CONSTRAINT [FK_Accounts_ClosingConfirmation_Users]
GO
ALTER TABLE [dbo].[Accounts_CostCenters]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_CostCenters_Accounts_CostCenters1] FOREIGN KEY([ParentId])
REFERENCES [dbo].[Accounts_CostCenters] ([Id])
GO
ALTER TABLE [dbo].[Accounts_CostCenters] CHECK CONSTRAINT [FK_Accounts_CostCenters_Accounts_CostCenters1]
GO
ALTER TABLE [dbo].[Accounts_CostCenters]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_CostCenters_Accounts_CostCentersTypes] FOREIGN KEY([CostCenterType])
REFERENCES [dbo].[Accounts_CostCentersTypes] ([Id])
GO
ALTER TABLE [dbo].[Accounts_CostCenters] CHECK CONSTRAINT [FK_Accounts_CostCenters_Accounts_CostCentersTypes]
GO
ALTER TABLE [dbo].[Accounts_CostCenters]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_CostCenters_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_CostCenters] CHECK CONSTRAINT [FK_Accounts_CostCenters_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_CostCenters]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_CostCenters_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_CostCenters] CHECK CONSTRAINT [FK_Accounts_CostCenters_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_DailyBranchClosingBalance]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_DailyBranchClosingBalance_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[Accounts_DailyBranchClosingBalance] CHECK CONSTRAINT [FK_Accounts_DailyBranchClosingBalance_Common_Branch]
GO
ALTER TABLE [dbo].[Accounts_Groups]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Groups_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Groups] CHECK CONSTRAINT [FK_Accounts_Groups_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_Groups]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Groups_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Groups] CHECK CONSTRAINT [FK_Accounts_Groups_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_CTransaction] FOREIGN KEY([ClosingTransactionType])
REFERENCES [dbo].[Accounts_TransactionType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance] CHECK CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_CTransaction]
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_FinancialYear] FOREIGN KEY([Year])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance] CHECK CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance] CHECK CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_TransactionType] FOREIGN KEY([OpeningTransactionType])
REFERENCES [dbo].[Accounts_TransactionType] ([Id])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Accounts_LedgerBalance] CHECK CONSTRAINT [FK_ImEx_Accounts_LedgerBalance_ImEx_Accounts_TransactionType]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory] FOREIGN KEY([STCategory])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory1] FOREIGN KEY([LGSTId])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory1]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory2] FOREIGN KEY([IGSTId])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Accounts_STCategory2]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Accounts_TaxType] FOREIGN KEY([TaxType])
REFERENCES [dbo].[Accounts_TaxType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Accounts_TaxType]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Accounts_TDSType] FOREIGN KEY([TDSCategory])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_Common_Country] FOREIGN KEY([Country])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_Common_Country]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_State] FOREIGN KEY([State])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_State]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Ledgers_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_Accounts_Ledgers_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_Ledgers]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Account_Ledgers_ImEx_Account_LedgerType] FOREIGN KEY([LedgerType])
REFERENCES [dbo].[Accounts_LedgerType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Ledgers] CHECK CONSTRAINT [FK_ImEx_Account_Ledgers_ImEx_Account_LedgerType]
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_OnAccPayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment] CHECK CONSTRAINT [FK_Accounts_OnAccPayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_OnAccPayment_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment] CHECK CONSTRAINT [FK_Accounts_OnAccPayment_Common_Branch]
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_OnAccPayment_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[Accounts_OnAccPayment] CHECK CONSTRAINT [FK_Accounts_OnAccPayment_Common_Client]
GO
ALTER TABLE [dbo].[Accounts_PaymentMode]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_PaymentMode_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_PaymentMode] CHECK CONSTRAINT [FK_Accounts_PaymentMode_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_PaymentMode]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_PaymentMode_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_PaymentMode] CHECK CONSTRAINT [FK_Accounts_PaymentMode_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_STCategoryAbatement]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryAbatement_Accounts_STCategory] FOREIGN KEY([STCategoryId])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryAbatement] CHECK CONSTRAINT [FK_Accounts_STCategoryAbatement_Accounts_STCategory]
GO
ALTER TABLE [dbo].[Accounts_STCategoryMapping]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryMapping_Accounts_STCategory] FOREIGN KEY([STCategory])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryMapping] CHECK CONSTRAINT [FK_Accounts_STCategoryMapping_Accounts_STCategory]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_Ledgers] FOREIGN KEY([OutputLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] CHECK CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_Ledgers1] FOREIGN KEY([InputLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] CHECK CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_Ledgers1]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_STCategory] FOREIGN KEY([STCategoryId])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] CHECK CONSTRAINT [FK_Accounts_STCategoryRate_Accounts_STCategory]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryRate_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] CHECK CONSTRAINT [FK_Accounts_STCategoryRate_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_STCategoryRate_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_STCategoryRate] CHECK CONSTRAINT [FK_Accounts_STCategoryRate_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_TaxMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMaster_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMaster] CHECK CONSTRAINT [FK_Accounts_TaxMaster_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_TaxMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMaster_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMaster] CHECK CONSTRAINT [FK_Accounts_TaxMaster_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TaxMaster] FOREIGN KEY([TaxMasterId])
REFERENCES [dbo].[Accounts_TaxMaster] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] CHECK CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TaxMaster]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TDSNatureOfPayment] FOREIGN KEY([NatureOfPayment])
REFERENCES [dbo].[Accounts_TDSNatureOfPayment] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] CHECK CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TDSNatureOfPayment]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TDSType] FOREIGN KEY([TDSTypeId])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] CHECK CONSTRAINT [FK_Accounts_TaxMasterContent_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMasterContent_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] CHECK CONSTRAINT [FK_Accounts_TaxMasterContent_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TaxMasterContent_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TaxMasterContent] CHECK CONSTRAINT [FK_Accounts_TaxMasterContent_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_TDSNatureOfPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSNatureOfPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSNatureOfPayment] CHECK CONSTRAINT [FK_Accounts_TDSNatureOfPayment_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_TDSNatureOfPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSNatureOfPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSNatureOfPayment] CHECK CONSTRAINT [FK_Accounts_TDSNatureOfPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSSettings_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] CHECK CONSTRAINT [FK_Accounts_TDSSettings_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSSettings_Accounts_TDSNatureOfPayment] FOREIGN KEY([NatureOfPayment])
REFERENCES [dbo].[Accounts_TDSNatureOfPayment] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] CHECK CONSTRAINT [FK_Accounts_TDSSettings_Accounts_TDSNatureOfPayment]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSSettings_Accounts_TDSType] FOREIGN KEY([TDSTypeId])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] CHECK CONSTRAINT [FK_Accounts_TDSSettings_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSSettings_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] CHECK CONSTRAINT [FK_Accounts_TDSSettings_InsertUserId]
GO
ALTER TABLE [dbo].[Accounts_TDSSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_TDSSettings_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Accounts_TDSSettings] CHECK CONSTRAINT [FK_Accounts_TDSSettings_UpdateUserId]
GO
ALTER TABLE [dbo].[Accounts_Vouchers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Vouchers_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Vouchers] CHECK CONSTRAINT [FK_Accounts_Vouchers_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[Accounts_Vouchers]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_Vouchers_Accounts_VouchersRefType] FOREIGN KEY([RefType])
REFERENCES [dbo].[Accounts_VouchersRefType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Vouchers] CHECK CONSTRAINT [FK_Accounts_Vouchers_Accounts_VouchersRefType]
GO
ALTER TABLE [dbo].[Accounts_Vouchers]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_Vouchers_ImEx_Accounts_FinancialYear] FOREIGN KEY([FinancialYear])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Vouchers] CHECK CONSTRAINT [FK_ImEx_Accounts_Vouchers_ImEx_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[Accounts_Vouchers]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Accounts_Vouchers_ImEx_Accounts_VoucherType] FOREIGN KEY([VoucherType])
REFERENCES [dbo].[Accounts_VoucherType] ([Id])
GO
ALTER TABLE [dbo].[Accounts_Vouchers] CHECK CONSTRAINT [FK_ImEx_Accounts_Vouchers_ImEx_Accounts_VoucherType]
GO
ALTER TABLE [dbo].[Accounts_VoucherTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_VoucherTransaction_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_VoucherTransaction] CHECK CONSTRAINT [FK_Accounts_VoucherTransaction_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Accounts_VoucherTransaction]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_VoucherTransaction_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[Accounts_VoucherTransaction] CHECK CONSTRAINT [FK_Accounts_VoucherTransaction_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[Accounts_VoucherTransactionBills]  WITH NOCHECK ADD  CONSTRAINT [FK_Accounts_VoucherTransactionBills_Accounts_Bills] FOREIGN KEY([BillId])
REFERENCES [dbo].[Accounts_Bills] ([Id])
GO
ALTER TABLE [dbo].[Accounts_VoucherTransactionBills] CHECK CONSTRAINT [FK_Accounts_VoucherTransactionBills_Accounts_Bills]
GO
ALTER TABLE [dbo].[BranchGSTSetup]  WITH NOCHECK ADD  CONSTRAINT [FK_BranchGSTSetup_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[BranchGSTSetup] CHECK CONSTRAINT [FK_BranchGSTSetup_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[BranchGSTSetup]  WITH NOCHECK ADD  CONSTRAINT [FK_BranchGSTSetup_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[BranchGSTSetup] CHECK CONSTRAINT [FK_BranchGSTSetup_Common_Branch]
GO
ALTER TABLE [dbo].[Common_Branch]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Branch_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Common_Branch] CHECK CONSTRAINT [FK_Common_Branch_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Common_Branch]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Branch_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Branch] CHECK CONSTRAINT [FK_Common_Branch_InsertUserId]
GO
ALTER TABLE [dbo].[Common_Branch]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Branch_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Branch] CHECK CONSTRAINT [FK_Common_Branch_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_ChequeMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_ChequeMaster_Accounts_BankNames] FOREIGN KEY([BankId])
REFERENCES [dbo].[Accounts_Banks] ([Id])
GO
ALTER TABLE [dbo].[Common_ChequeMaster] CHECK CONSTRAINT [FK_Common_ChequeMaster_Accounts_BankNames]
GO
ALTER TABLE [dbo].[Common_ChequeMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_ChequeMaster_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[Common_ChequeMaster] CHECK CONSTRAINT [FK_Common_ChequeMaster_Common_Branch]
GO
ALTER TABLE [dbo].[Common_Client]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Client_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_Client_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Common_Client]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Client_Common_ClientGroup] FOREIGN KEY([GroupId])
REFERENCES [dbo].[Common_ClientGroup] ([Id])
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_Client_Common_ClientGroup]
GO
ALTER TABLE [dbo].[Common_Client]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_ClientBranch_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_ClientBranch_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Common_Client]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_ClientBranch_Common_Client] FOREIGN KEY([GroupId])
REFERENCES [dbo].[Common_ClientGroup] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_ClientBranch_Common_Client]
GO
ALTER TABLE [dbo].[Common_Client]  WITH CHECK ADD  CONSTRAINT [FK_Common_ClientBranch_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_ClientBranch_InsertUserId]
GO
ALTER TABLE [dbo].[Common_Client]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_ClientBranch_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Client] CHECK CONSTRAINT [FK_Common_ClientBranch_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_ClientGroup]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Client_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_ClientGroup] CHECK CONSTRAINT [FK_Common_Client_InsertUserId]
GO
ALTER TABLE [dbo].[Common_ClientGroup]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Client_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_ClientGroup] CHECK CONSTRAINT [FK_Common_Client_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_Company]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Company_Common_BankNames] FOREIGN KEY([Bank])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[Common_Company] CHECK CONSTRAINT [FK_Common_Company_Common_BankNames]
GO
ALTER TABLE [dbo].[Common_Company]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Company_Common_Country] FOREIGN KEY([Country])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[Common_Company] CHECK CONSTRAINT [FK_Common_Company_Common_Country]
GO
ALTER TABLE [dbo].[Common_Company]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Company_State] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Common_Company] CHECK CONSTRAINT [FK_Common_Company_State]
GO
ALTER TABLE [dbo].[Common_CompanyDirectors]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_CompanyDirectors_Common_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Common_Company] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Common_CompanyDirectors] CHECK CONSTRAINT [FK_Common_CompanyDirectors_Common_Company]
GO
ALTER TABLE [dbo].[Common_CompanyDirectors]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_CompanyDirectors_Common_Country] FOREIGN KEY([Country])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[Common_CompanyDirectors] CHECK CONSTRAINT [FK_Common_CompanyDirectors_Common_Country]
GO
ALTER TABLE [dbo].[Common_CompanyDirectors]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_CompanyDirectors_State] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Common_CompanyDirectors] CHECK CONSTRAINT [FK_Common_CompanyDirectors_State]
GO
ALTER TABLE [dbo].[Common_Consig]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Consig_State] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Common_Consig] CHECK CONSTRAINT [FK_Common_Consig_State]
GO
ALTER TABLE [dbo].[Common_Parties]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Parties_Accounts_TDSType] FOREIGN KEY([TDSType])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Common_Parties] CHECK CONSTRAINT [FK_Common_Parties_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Common_PartyAccount]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyAccount_Common_BankNames] FOREIGN KEY([BankId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyAccount] CHECK CONSTRAINT [FK_Common_PartyAccount_Common_BankNames]
GO
ALTER TABLE [dbo].[Common_PartyAccount]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyAccount_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyAccount] CHECK CONSTRAINT [FK_Common_PartyAccount_Common_Parties]
GO
ALTER TABLE [dbo].[Common_PartyAccount]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyAccount_Common_Parties1] FOREIGN KEY([JointACPartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyAccount] CHECK CONSTRAINT [FK_Common_PartyAccount_Common_Parties1]
GO
ALTER TABLE [dbo].[Common_PartyAccount]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyAccount_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyAccount] CHECK CONSTRAINT [FK_Common_PartyAccount_InsertUserId]
GO
ALTER TABLE [dbo].[Common_PartyAccount]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyAccount_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyAccount] CHECK CONSTRAINT [FK_Common_PartyAccount_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_PartyTDSDeclaration]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyTDSDeclaration_Accounts_FinancialYear] FOREIGN KEY([FinancialYear])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyTDSDeclaration] CHECK CONSTRAINT [FK_Common_PartyTDSDeclaration_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[Common_PartyTDSDeclaration]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyTDSDeclaration_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Common_PartyTDSDeclaration] CHECK CONSTRAINT [FK_Common_PartyTDSDeclaration_Common_Parties]
GO
ALTER TABLE [dbo].[Common_PartyType]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyType_Users] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyType] CHECK CONSTRAINT [FK_Common_PartyType_Users]
GO
ALTER TABLE [dbo].[Common_PartyType]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PartyType_Users1] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PartyType] CHECK CONSTRAINT [FK_Common_PartyType_Users1]
GO
ALTER TABLE [dbo].[Common_PreClient]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreClient_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Common_PreClient] CHECK CONSTRAINT [FK_Common_PreClient_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Common_PreClient]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreClient_Common_ClientGroup] FOREIGN KEY([GroupId])
REFERENCES [dbo].[Common_ClientGroup] ([Id])
GO
ALTER TABLE [dbo].[Common_PreClient] CHECK CONSTRAINT [FK_Common_PreClient_Common_ClientGroup]
GO
ALTER TABLE [dbo].[Common_PreClient]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreClient_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PreClient] CHECK CONSTRAINT [FK_Common_PreClient_InsertUserId]
GO
ALTER TABLE [dbo].[Common_PreClient]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreClient_State] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Common_PreClient] CHECK CONSTRAINT [FK_Common_PreClient_State]
GO
ALTER TABLE [dbo].[Common_PreClient]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreClient_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_PreClient] CHECK CONSTRAINT [FK_Common_PreClient_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_PreVendor]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreVendor_Accounts_TDSType] FOREIGN KEY([TDSType])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Common_PreVendor] CHECK CONSTRAINT [FK_Common_PreVendor_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Common_PreVendor]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_PreVendor_State] FOREIGN KEY([StateCodeNo])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Common_PreVendor] CHECK CONSTRAINT [FK_Common_PreVendor_State]
GO
ALTER TABLE [dbo].[Common_Settings]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Settings_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Settings] CHECK CONSTRAINT [FK_Common_Settings_InsertUserId]
GO
ALTER TABLE [dbo].[Common_Settings]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Settings_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Common_Settings] CHECK CONSTRAINT [FK_Common_Settings_UpdateUserId]
GO
ALTER TABLE [dbo].[Common_Vendor]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Vendor_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[Common_Vendor] CHECK CONSTRAINT [FK_Common_Vendor_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[Common_Vendor]  WITH NOCHECK ADD  CONSTRAINT [FK_Common_Vendor_Accounts_TDSType] FOREIGN KEY([TDSType])
REFERENCES [dbo].[Accounts_TDSType] ([Id])
GO
ALTER TABLE [dbo].[Common_Vendor] CHECK CONSTRAINT [FK_Common_Vendor_Accounts_TDSType]
GO
ALTER TABLE [dbo].[Fleet_Association]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Association_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Association] CHECK CONSTRAINT [FK_Fleet_Association_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Association]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Association_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Association] CHECK CONSTRAINT [FK_Fleet_Association_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationFuelRate_Fleet_Association] FOREIGN KEY([AssociationId])
REFERENCES [dbo].[Fleet_Association] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] CHECK CONSTRAINT [FK_Fleet_AssociationFuelRate_Fleet_Association]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationFuelRate_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] CHECK CONSTRAINT [FK_Fleet_AssociationFuelRate_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationFuelRate_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationFuelRate] CHECK CONSTRAINT [FK_Fleet_AssociationFuelRate_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateLP_Fleet_Association] FOREIGN KEY([AssociationId])
REFERENCES [dbo].[Fleet_Association] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] CHECK CONSTRAINT [FK_Fleet_AssociationRateLP_Fleet_Association]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateLP_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] CHECK CONSTRAINT [FK_Fleet_AssociationRateLP_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateLP_LoadingPoints] FOREIGN KEY([LoadingPoint])
REFERENCES [dbo].[LoadingPoints] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] CHECK CONSTRAINT [FK_Fleet_AssociationRateLP_LoadingPoints]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateLP_UnloadingPoints] FOREIGN KEY([UnLoadingPoint])
REFERENCES [dbo].[UnloadingPoints] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] CHECK CONSTRAINT [FK_Fleet_AssociationRateLP_UnloadingPoints]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateLP_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateLP] CHECK CONSTRAINT [FK_Fleet_AssociationRateLP_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateMT_Fleet_Association] FOREIGN KEY([AssociationId])
REFERENCES [dbo].[Fleet_Association] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT] CHECK CONSTRAINT [FK_Fleet_AssociationRateMT_Fleet_Association]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateMT_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT] CHECK CONSTRAINT [FK_Fleet_AssociationRateMT_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_AssociationRateMT_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_AssociationRateMT] CHECK CONSTRAINT [FK_Fleet_AssociationRateMT_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_Inventory]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Inventory_Fleet_Parts] FOREIGN KEY([PartsType])
REFERENCES [dbo].[Fleet_Parts] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Inventory] CHECK CONSTRAINT [FK_Fleet_Inventory_Fleet_Parts]
GO
ALTER TABLE [dbo].[Fleet_Inventory]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Inventory_Fleet_PartSeller] FOREIGN KEY([SellerId])
REFERENCES [dbo].[Fleet_PartSeller] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Inventory] CHECK CONSTRAINT [FK_Fleet_Inventory_Fleet_PartSeller]
GO
ALTER TABLE [dbo].[Fleet_InventoryStatus]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_InventoryStatus_Fleet_Inventory1] FOREIGN KEY([InventryId])
REFERENCES [dbo].[Fleet_Inventory] ([Id])
GO
ALTER TABLE [dbo].[Fleet_InventoryStatus] CHECK CONSTRAINT [FK_Fleet_InventoryStatus_Fleet_Inventory1]
GO
ALTER TABLE [dbo].[Fleet_InventoryStatus]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_InventoryStatus_Fleet_Status1] FOREIGN KEY([Status])
REFERENCES [dbo].[Fleet_Status] ([Id])
GO
ALTER TABLE [dbo].[Fleet_InventoryStatus] CHECK CONSTRAINT [FK_Fleet_InventoryStatus_Fleet_Status1]
GO
ALTER TABLE [dbo].[Fleet_Manufacture]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Manufacture_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Manufacture] CHECK CONSTRAINT [FK_Fleet_Manufacture_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Manufacture]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Manufacture_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Manufacture] CHECK CONSTRAINT [FK_Fleet_Manufacture_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_ManufactureModel_Fleet_Manufacture] FOREIGN KEY([Manufacture])
REFERENCES [dbo].[Fleet_Manufacture] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel] CHECK CONSTRAINT [FK_Fleet_ManufactureModel_Fleet_Manufacture]
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_ManufactureModel_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel] CHECK CONSTRAINT [FK_Fleet_ManufactureModel_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_ManufactureModel_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_ManufactureModel] CHECK CONSTRAINT [FK_Fleet_ManufactureModel_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_Parts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Parts_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Parts] CHECK CONSTRAINT [FK_Fleet_Parts_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Parts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Parts_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Parts] CHECK CONSTRAINT [FK_Fleet_Parts_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_Common_BankNames] FOREIGN KEY([Bank])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_Common_BankNames]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_Common_Parties]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_Common_Parties1] FOREIGN KEY([BrokerId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_Common_Parties1]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_Common_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_Common_PaymentMode]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Purchase]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Purchase_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Purchase] CHECK CONSTRAINT [FK_Fleet_Purchase_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_Common_Parties]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_Common_Parties1] FOREIGN KEY([Broker])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_Common_Parties1]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_Common_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_Common_PaymentMode]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Sale]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Sale_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Sale] CHECK CONSTRAINT [FK_Fleet_Sale_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_ServiceCategory]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_ServiceCategory_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_ServiceCategory] CHECK CONSTRAINT [FK_Fleet_ServiceCategory_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_ServiceCategory]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_ServiceCategory_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_ServiceCategory] CHECK CONSTRAINT [FK_Fleet_ServiceCategory_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_TripsBooking]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_TripsBooking_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[Fleet_TripsBooking] CHECK CONSTRAINT [FK_Fleet_TripsBooking_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[Fleet_TripsBooking]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_TripsBooking_Common_Client] FOREIGN KEY([CustomerId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[Fleet_TripsBooking] CHECK CONSTRAINT [FK_Fleet_TripsBooking_Common_Client]
GO
ALTER TABLE [dbo].[Fleet_TripsBooking]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_TripsBooking_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
GO
ALTER TABLE [dbo].[Fleet_TripsBooking] CHECK CONSTRAINT [FK_Fleet_TripsBooking_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_TripsBooking]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_TripsBooking_LoadingPoints] FOREIGN KEY([StationFrom])
REFERENCES [dbo].[LoadingPoints] ([Id])
GO
ALTER TABLE [dbo].[Fleet_TripsBooking] CHECK CONSTRAINT [FK_Fleet_TripsBooking_LoadingPoints]
GO
ALTER TABLE [dbo].[Fleet_TripsBooking]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_TripsBooking_UnloadingPoints] FOREIGN KEY([StationTo])
REFERENCES [dbo].[UnloadingPoints] ([Id])
GO
ALTER TABLE [dbo].[Fleet_TripsBooking] CHECK CONSTRAINT [FK_Fleet_TripsBooking_UnloadingPoints]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicle_Fleet_FuelType] FOREIGN KEY([FuelType])
REFERENCES [dbo].[Fleet_FuelType] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicle_Fleet_FuelType]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicle_Fleet_ModelYear] FOREIGN KEY([ModelYear])
REFERENCES [dbo].[Fleet_ModelYear] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicle_Fleet_ModelYear]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicle_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicle_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicle_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicle_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicles_Fleet_ManufactureModel] FOREIGN KEY([Model])
REFERENCES [dbo].[Fleet_ManufactureModel] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicles_Fleet_ManufactureModel]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicles_Fleet_Owners] FOREIGN KEY([Owner])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicles_Fleet_Owners]
GO
ALTER TABLE [dbo].[Fleet_Vehicle]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_Vehicles_Fleet_VehicleTypes] FOREIGN KEY([VehicleType])
REFERENCES [dbo].[Fleet_VehicleTypes] ([Id])
GO
ALTER TABLE [dbo].[Fleet_Vehicle] CHECK CONSTRAINT [FK_Fleet_Vehicles_Fleet_VehicleTypes]
GO
ALTER TABLE [dbo].[Fleet_VehicleAssociations]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleAssociations_Fleet_Associations] FOREIGN KEY([AssociationId])
REFERENCES [dbo].[Fleet_Association] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleAssociations] CHECK CONSTRAINT [FK_Fleet_VehicleAssociations_Fleet_Associations]
GO
ALTER TABLE [dbo].[Fleet_VehicleAssociations]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleAssociations_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleAssociations] CHECK CONSTRAINT [FK_Fleet_VehicleAssociations_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleDrivers_Common_Parties] FOREIGN KEY([DriverId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers] CHECK CONSTRAINT [FK_Fleet_VehicleDrivers_Common_Parties]
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleDrivers_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers] CHECK CONSTRAINT [FK_Fleet_VehicleDrivers_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleDrivers_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers] CHECK CONSTRAINT [FK_Fleet_VehicleDrivers_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleDrivers_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleDrivers] CHECK CONSTRAINT [FK_Fleet_VehicleDrivers_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleFuel_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] CHECK CONSTRAINT [FK_Fleet_VehicleFuel_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleFuel_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] CHECK CONSTRAINT [FK_Fleet_VehicleFuel_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleFule_Fleet_Vehicles] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleFuel] CHECK CONSTRAINT [FK_Fleet_VehicleFule_Fleet_Vehicles]
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleInsurance_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance] CHECK CONSTRAINT [FK_Fleet_VehicleInsurance_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleInsurance_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance] CHECK CONSTRAINT [FK_Fleet_VehicleInsurance_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleInsurance_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleInsurance] CHECK CONSTRAINT [FK_Fleet_VehicleInsurance_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleParts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleParts_Fleet_Parts] FOREIGN KEY([PartName])
REFERENCES [dbo].[Fleet_Parts] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleParts] CHECK CONSTRAINT [FK_Fleet_VehicleParts_Fleet_Parts]
GO
ALTER TABLE [dbo].[Fleet_VehicleParts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleParts_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleParts] CHECK CONSTRAINT [FK_Fleet_VehicleParts_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleParts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleParts_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleParts] CHECK CONSTRAINT [FK_Fleet_VehicleParts_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleParts]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleParts_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleParts] CHECK CONSTRAINT [FK_Fleet_VehicleParts_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePermit_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] CHECK CONSTRAINT [FK_Fleet_VehiclePermit_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePermit_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] CHECK CONSTRAINT [FK_Fleet_VehiclePermit_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePermit_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehiclePermit] CHECK CONSTRAINT [FK_Fleet_VehiclePermit_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermitStates]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePermitStates_Fleet_VehiclePermit] FOREIGN KEY([PermitId])
REFERENCES [dbo].[Fleet_VehiclePermit] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehiclePermitStates] CHECK CONSTRAINT [FK_Fleet_VehiclePermitStates_Fleet_VehiclePermit]
GO
ALTER TABLE [dbo].[Fleet_VehiclePermitStates]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePermitStates_ImEx_Default_StateCode] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehiclePermitStates] CHECK CONSTRAINT [FK_Fleet_VehiclePermitStates_ImEx_Default_StateCode]
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePollution_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution] CHECK CONSTRAINT [FK_Fleet_VehiclePollution_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePollution_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution] CHECK CONSTRAINT [FK_Fleet_VehiclePollution_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehiclePolution_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehiclePollution] CHECK CONSTRAINT [FK_Fleet_VehiclePolution_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleRoadTax_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax] CHECK CONSTRAINT [FK_Fleet_VehicleRoadTax_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleRoadTax_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax] CHECK CONSTRAINT [FK_Fleet_VehicleRoadTax_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleRoadTax_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleRoadTax] CHECK CONSTRAINT [FK_Fleet_VehicleRoadTax_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleServices]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleServices_Fleet_ServiceCategory] FOREIGN KEY([ServiceCategory])
REFERENCES [dbo].[Fleet_ServiceCategory] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleServices] CHECK CONSTRAINT [FK_Fleet_VehicleServices_Fleet_ServiceCategory]
GO
ALTER TABLE [dbo].[Fleet_VehicleServices]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleServices_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleServices] CHECK CONSTRAINT [FK_Fleet_VehicleServices_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[Fleet_VehicleServices]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleServices_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleServices] CHECK CONSTRAINT [FK_Fleet_VehicleServices_InsertUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleServices]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleServices_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Fleet_VehicleServices] CHECK CONSTRAINT [FK_Fleet_VehicleServices_UpdateUserId]
GO
ALTER TABLE [dbo].[Fleet_VehicleTyres]  WITH NOCHECK ADD  CONSTRAINT [FK_Fleet_VehicleTyres_Fleet_Vehicle] FOREIGN KEY([VehicleId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Fleet_VehicleTyres] CHECK CONSTRAINT [FK_Fleet_VehicleTyres_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[GST_SACCode]  WITH NOCHECK ADD  CONSTRAINT [FK_GST_SACCode_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[GST_SACCode] CHECK CONSTRAINT [FK_GST_SACCode_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[GST_SACCode]  WITH NOCHECK ADD  CONSTRAINT [FK_GST_SACCode_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[GST_SACCode] CHECK CONSTRAINT [FK_GST_SACCode_InsertUserId]
GO
ALTER TABLE [dbo].[GST_SACCode]  WITH NOCHECK ADD  CONSTRAINT [FK_GST_SACCode_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[GST_SACCode] CHECK CONSTRAINT [FK_GST_SACCode_UpdateUserId]
GO
ALTER TABLE [dbo].[HRMS_Profile]  WITH NOCHECK ADD  CONSTRAINT [FK_HRMS_Profile_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[HRMS_Profile] CHECK CONSTRAINT [FK_HRMS_Profile_Common_Branch]
GO
ALTER TABLE [dbo].[HRMS_Profile]  WITH NOCHECK ADD  CONSTRAINT [FK_HRMS_Profile_Common_Country] FOREIGN KEY([PresentCountry])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[HRMS_Profile] CHECK CONSTRAINT [FK_HRMS_Profile_Common_Country]
GO
ALTER TABLE [dbo].[i3MS_Circle]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Circle_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Circle] CHECK CONSTRAINT [FK_i3MS_Circle_InsertUserId]
GO
ALTER TABLE [dbo].[i3MS_Circle]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Circle_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Circle] CHECK CONSTRAINT [FK_i3MS_Circle_UpdateUserId]
GO
ALTER TABLE [dbo].[i3MS_Lessee]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Lessee_i3MS_Circle] FOREIGN KEY([CircleId])
REFERENCES [dbo].[i3MS_Circle] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Lessee] CHECK CONSTRAINT [FK_i3MS_Lessee_i3MS_Circle]
GO
ALTER TABLE [dbo].[i3MS_Lessee]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Lessee_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Lessee] CHECK CONSTRAINT [FK_i3MS_Lessee_InsertUserId]
GO
ALTER TABLE [dbo].[i3MS_Lessee]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Lessee_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Lessee] CHECK CONSTRAINT [FK_i3MS_Lessee_UpdateUserId]
GO
ALTER TABLE [dbo].[i3MS_Mapping]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Mapping_i3MS_Lessee] FOREIGN KEY([LesseeId])
REFERENCES [dbo].[i3MS_Lessee] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Mapping] CHECK CONSTRAINT [FK_i3MS_Mapping_i3MS_Lessee]
GO
ALTER TABLE [dbo].[i3MS_Settings]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Settings_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Settings] CHECK CONSTRAINT [FK_i3MS_Settings_InsertUserId]
GO
ALTER TABLE [dbo].[i3MS_Settings]  WITH NOCHECK ADD  CONSTRAINT [FK_i3MS_Settings_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[i3MS_Settings] CHECK CONSTRAINT [FK_i3MS_Settings_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Airline]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Airline_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Airline] CHECK CONSTRAINT [FK_ImEx_Airline_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Airline]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Airline_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Airline] CHECK CONSTRAINT [FK_ImEx_Airline_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Consignee]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Consignee_Common_Country] FOREIGN KEY([Country])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Consignee] CHECK CONSTRAINT [FK_ImEx_Consignee_Common_Country]
GO
ALTER TABLE [dbo].[ImEx_Consignee]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Consignee_State] FOREIGN KEY([State])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Consignee] CHECK CONSTRAINT [FK_ImEx_Consignee_State]
GO
ALTER TABLE [dbo].[ImEx_CreditNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNote_Common_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[Common_Vendor] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNote] CHECK CONSTRAINT [FK_ImEx_CreditNote_Common_Vendor]
GO
ALTER TABLE [dbo].[ImEx_CreditNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNote_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNote] CHECK CONSTRAINT [FK_ImEx_CreditNote_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_CreditNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNote_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNote] CHECK CONSTRAINT [FK_ImEx_CreditNote_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_CreditNote] FOREIGN KEY([CreditNoteId])
REFERENCES [dbo].[ImEx_CreditNote] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] CHECK CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_CreditNote]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] CHECK CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_Particulars] FOREIGN KEY([ParticularId])
REFERENCES [dbo].[ImEx_ExpenseParticular] ([Id])
GO
ALTER TABLE [dbo].[ImEx_CreditNoteDetails] CHECK CONSTRAINT [FK_ImEx_CreditNoteDetails_ImEx_Particulars]
GO
ALTER TABLE [dbo].[ImEx_DebitNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DebitNote_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DebitNote] CHECK CONSTRAINT [FK_ImEx_DebitNote_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_DebitNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DebitNote_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DebitNote] CHECK CONSTRAINT [FK_ImEx_DebitNote_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_DebitNote]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DebitNote_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DebitNote] CHECK CONSTRAINT [FK_ImEx_DebitNote_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DebitNoteDetails_ImEx_DebitNote] FOREIGN KEY([DebitNoteId])
REFERENCES [dbo].[ImEx_DebitNote] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] CHECK CONSTRAINT [FK_ImEx_DebitNoteDetails_ImEx_DebitNote]
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DebitNoteDetails_ImEx_Particulars] FOREIGN KEY([ParticularId])
REFERENCES [dbo].[ImEx_Particulars] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DebitNoteDetails] CHECK CONSTRAINT [FK_ImEx_DebitNoteDetails_ImEx_Particulars]
GO
ALTER TABLE [dbo].[ImEx_DestinationPort]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DestinationPort_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DestinationPort] CHECK CONSTRAINT [FK_ImEx_DestinationPort_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_DestinationPort]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_DestinationPort_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_DestinationPort] CHECK CONSTRAINT [FK_ImEx_DestinationPort_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpenseParticular]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseParticular_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseParticular] CHECK CONSTRAINT [FK_ImEx_ExpenseParticular_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[ImEx_ExpenseParticular]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseParticular_GST_SACCode] FOREIGN KEY([SACCodeId])
REFERENCES [dbo].[GST_SACCode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseParticular] CHECK CONSTRAINT [FK_ImEx_ExpenseParticular_GST_SACCode]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_FinancialYear] FOREIGN KEY([FYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_Ledgers] FOREIGN KEY([ReceivedLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePayment] CHECK CONSTRAINT [FK_ImEx_ExpensePayment_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_ExpenseParticular] FOREIGN KEY([ExpenseParticularId])
REFERENCES [dbo].[ImEx_ExpenseParticular] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] CHECK CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_ExpenseParticular]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_ExpensePayment] FOREIGN KEY([ExpensePaymentId])
REFERENCES [dbo].[ImEx_ExpensePayment] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] CHECK CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_ExpensePayment]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] CHECK CONSTRAINT [FK_ImEx_ExpensePaymentList_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePaymentList_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] CHECK CONSTRAINT [FK_ImEx_ExpensePaymentList_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpensePaymentList_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpensePaymentList] CHECK CONSTRAINT [FK_ImEx_ExpensePaymentList_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceive_Accounts_FinancialYear] FOREIGN KEY([FYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive] CHECK CONSTRAINT [FK_ImEx_ExpenseReceive_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceive_ImEx_ExpensePayment] FOREIGN KEY([ExpensePaymentId])
REFERENCES [dbo].[ImEx_ExpensePayment] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive] CHECK CONSTRAINT [FK_ImEx_ExpenseReceive_ImEx_ExpensePayment]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceive_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive] CHECK CONSTRAINT [FK_ImEx_ExpenseReceive_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceive_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceive] CHECK CONSTRAINT [FK_ImEx_ExpenseReceive_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_ExpenseParticular] FOREIGN KEY([ExpenseParticularId])
REFERENCES [dbo].[ImEx_ExpenseParticular] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList] CHECK CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_ExpenseParticular]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_ExpenseReceive] FOREIGN KEY([ExpenseReceiveId])
REFERENCES [dbo].[ImEx_ExpenseReceive] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList] CHECK CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_ExpenseReceive]
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ExpenseReceiveList] CHECK CONSTRAINT [FK_ImEx_ExpenseReceiveList_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_FinalDestination]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_FinalDestination_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_FinalDestination] CHECK CONSTRAINT [FK_ImEx_FinalDestination_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_FinalDestination]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_FinalDestination_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_FinalDestination] CHECK CONSTRAINT [FK_ImEx_FinalDestination_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_ImEx_Currency] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[ImEx_Currency] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_ImEx_Currency]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_ImEx_Particulars] FOREIGN KEY([ParticularId])
REFERENCES [dbo].[ImEx_Particulars] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_ImEx_Particulars]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_ImEx_QuantityUnit] FOREIGN KEY([QuantityUnitId])
REFERENCES [dbo].[ImEx_QuantityUnit] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_ImEx_QuantityUnit]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_ImEx_ShippingTerms] FOREIGN KEY([ShipmentTermsId])
REFERENCES [dbo].[ImEx_ShippingTerms] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_ImEx_ShippingTerms]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Invoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Invoice_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Invoice] CHECK CONSTRAINT [FK_ImEx_Invoice_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Accounts_FinancialYear] FOREIGN KEY([FinancialYear])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPayment_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPayment_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPaymentId_ImEx_InvoiceBulkPayment] FOREIGN KEY([PaymentId])
REFERENCES [dbo].[ImEx_InvoiceBulkPayment] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPaymentId] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPaymentId_ImEx_InvoiceBulkPayment]
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceBulkPaymentId_ImEx_Payment] FOREIGN KEY([InvoicePaymentId])
REFERENCES [dbo].[ImEx_Payment] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceBulkPaymentId] CHECK CONSTRAINT [FK_ImEx_InvoiceBulkPaymentId_ImEx_Payment]
GO
ALTER TABLE [dbo].[ImEx_InvoiceCharges]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceCharges_ImEx_Invoice] FOREIGN KEY([ChargesId])
REFERENCES [dbo].[ImEx_Invoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceCharges] CHECK CONSTRAINT [FK_ImEx_InvoiceCharges_ImEx_Invoice]
GO
ALTER TABLE [dbo].[ImEx_InvoiceCharges]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceCharges_ImEx_ManageInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[ImEx_ManageInvoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceCharges] CHECK CONSTRAINT [FK_ImEx_InvoiceCharges_ImEx_ManageInvoice]
GO
ALTER TABLE [dbo].[ImEx_InvoiceRefPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceRefPayment_ImEx_ManageInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[ImEx_ManageInvoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceRefPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceRefPayment_ImEx_ManageInvoice]
GO
ALTER TABLE [dbo].[ImEx_InvoiceRefPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_InvoiceRefPayment_ImEx_RetainerInvoice] FOREIGN KEY([RetainerInvoiceId])
REFERENCES [dbo].[ImEx_RetainerInvoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_InvoiceRefPayment] CHECK CONSTRAINT [FK_ImEx_InvoiceRefPayment_ImEx_RetainerInvoice]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_Accounts_CostCenters] FOREIGN KEY([CostCenterId])
REFERENCES [dbo].[Accounts_CostCenters] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_Accounts_CostCenters]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_Accounts_FinancialYear] FOREIGN KEY([FYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_Common_Branch]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Airline] FOREIGN KEY([AirlineId])
REFERENCES [dbo].[ImEx_Airline] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Airline]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_CDPaidBy] FOREIGN KEY([CdPaidById])
REFERENCES [dbo].[ImEx_CDPaidBy] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_CDPaidBy]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_ClearingAgent] FOREIGN KEY([ClearingAgentId])
REFERENCES [dbo].[ImEx_ClearingAgent] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_ClearingAgent]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Consignee] FOREIGN KEY([ConsigneeId])
REFERENCES [dbo].[ImEx_Consignee] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Consignee]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_ContainerType] FOREIGN KEY([ContainerTypeId])
REFERENCES [dbo].[ImEx_ContainerType] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_ContainerType]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_DCountry] FOREIGN KEY([DCountryId])
REFERENCES [dbo].[ImEx_DCountry] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_DCountry]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_DestinationPort] FOREIGN KEY([PODId])
REFERENCES [dbo].[ImEx_DestinationPort] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_DestinationPort]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_FinalDestination] FOREIGN KEY([FDestinationId])
REFERENCES [dbo].[ImEx_FinalDestination] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_FinalDestination]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_HandlingAgent] FOREIGN KEY([HandlingAgentId])
REFERENCES [dbo].[ImEx_HandlingAgent] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_HandlingAgent]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_JobStatus] FOREIGN KEY([JobStatusId])
REFERENCES [dbo].[ImEx_JobStatus] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_JobStatus]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[ImEx_JobType] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_JobType]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Liner] FOREIGN KEY([LinerId])
REFERENCES [dbo].[ImEx_Liner] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Liner]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_LoadingPort] FOREIGN KEY([POLId])
REFERENCES [dbo].[ImEx_LoadingPort] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_LoadingPort]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_NotifyParty] FOREIGN KEY([NotifyPartyId])
REFERENCES [dbo].[ImEx_NotifyParty] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_NotifyParty]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Origin] FOREIGN KEY([OriginId])
REFERENCES [dbo].[ImEx_Origin] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Origin]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_QuantityUnit] FOREIGN KEY([UnitId])
REFERENCES [dbo].[ImEx_QuantityUnit] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_QuantityUnit]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Shipper] FOREIGN KEY([ShipperId])
REFERENCES [dbo].[ImEx_Shipper] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Shipper]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_Vessel] FOREIGN KEY([VesselId])
REFERENCES [dbo].[ImEx_Vessel] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_Vessel]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_ImEx_WO] FOREIGN KEY([WOId])
REFERENCES [dbo].[ImEx_WO] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_ImEx_WO]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Job]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Job_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Job] CHECK CONSTRAINT [FK_ImEx_Job_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpense]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpense_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpense] CHECK CONSTRAINT [FK_ImEx_JobExpense_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[ImEx_JobExpense]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpense_Common_Vendor] FOREIGN KEY([VendorId])
REFERENCES [dbo].[Common_Vendor] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpense] CHECK CONSTRAINT [FK_ImEx_JobExpense_Common_Vendor]
GO
ALTER TABLE [dbo].[ImEx_JobExpense]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpense_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpense] CHECK CONSTRAINT [FK_ImEx_JobExpense_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_JobExpense]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpense_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpense] CHECK CONSTRAINT [FK_ImEx_JobExpense_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpense]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpense_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpense] CHECK CONSTRAINT [FK_ImEx_JobExpense_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseId_ImEx_JobExpense] FOREIGN KEY([JobExpenseId])
REFERENCES [dbo].[ImEx_JobExpense] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] CHECK CONSTRAINT [FK_ImEx_JobExpenseId_ImEx_JobExpense]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseId_ImEx_Particulars] FOREIGN KEY([ParticularId])
REFERENCES [dbo].[ImEx_ExpenseParticular] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] CHECK CONSTRAINT [FK_ImEx_JobExpenseId_ImEx_Particulars]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseId_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] CHECK CONSTRAINT [FK_ImEx_JobExpenseId_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseId_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseId] CHECK CONSTRAINT [FK_ImEx_JobExpenseId_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseTax_Accounts_TaxMaster] FOREIGN KEY([TaxId])
REFERENCES [dbo].[Accounts_TaxMaster] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax] CHECK CONSTRAINT [FK_ImEx_JobExpenseTax_Accounts_TaxMaster]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseTax_ImEx_JobExpense] FOREIGN KEY([JobExpenseId])
REFERENCES [dbo].[ImEx_JobExpense] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax] CHECK CONSTRAINT [FK_ImEx_JobExpenseTax_ImEx_JobExpense]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseTax_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax] CHECK CONSTRAINT [FK_ImEx_JobExpenseTax_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobExpenseTax_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobExpenseTax] CHECK CONSTRAINT [FK_ImEx_JobExpenseTax_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_JobType]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobType_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobType] CHECK CONSTRAINT [FK_ImEx_JobType_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_JobType]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_JobType_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_JobType] CHECK CONSTRAINT [FK_ImEx_JobType_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_LoadingPort]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_LoadingPort_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_LoadingPort] CHECK CONSTRAINT [FK_ImEx_LoadingPort_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_LoadingPort]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_LoadingPort_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_LoadingPort] CHECK CONSTRAINT [FK_ImEx_LoadingPort_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ManageInvoice_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice] CHECK CONSTRAINT [FK_ImEx_ManageInvoice_Common_Branch]
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ManageInvoice_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice] CHECK CONSTRAINT [FK_ImEx_ManageInvoice_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ManageInvoice_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice] CHECK CONSTRAINT [FK_ImEx_ManageInvoice_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ManageInvoice_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice] CHECK CONSTRAINT [FK_ImEx_ManageInvoice_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ManageInvoice_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ManageInvoice] CHECK CONSTRAINT [FK_ImEx_ManageInvoice_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_NotifyParty_Common_Country] FOREIGN KEY([CountryId])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] CHECK CONSTRAINT [FK_ImEx_NotifyParty_Common_Country]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_NotifyParty_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] CHECK CONSTRAINT [FK_ImEx_NotifyParty_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_NotifyParty_State] FOREIGN KEY([StateId])
REFERENCES [dbo].[State] ([Id])
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] CHECK CONSTRAINT [FK_ImEx_NotifyParty_State]
GO
ALTER TABLE [dbo].[ImEx_NotifyParty]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_NotifyParty_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_NotifyParty] CHECK CONSTRAINT [FK_ImEx_NotifyParty_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_OnAccountRetainer]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_OnAccountRetainer_ImEx_InvoiceBulkPayment] FOREIGN KEY([BulkPaymentId])
REFERENCES [dbo].[ImEx_InvoiceBulkPayment] ([Id])
GO
ALTER TABLE [dbo].[ImEx_OnAccountRetainer] CHECK CONSTRAINT [FK_ImEx_OnAccountRetainer_ImEx_InvoiceBulkPayment]
GO
ALTER TABLE [dbo].[ImEx_OnAccountRetainer]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_OnAccountRetainer_ImEx_RetainerInvoice] FOREIGN KEY([RetainerId])
REFERENCES [dbo].[ImEx_RetainerInvoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_OnAccountRetainer] CHECK CONSTRAINT [FK_ImEx_OnAccountRetainer_ImEx_RetainerInvoice]
GO
ALTER TABLE [dbo].[ImEx_Origin]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Origin_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Origin] CHECK CONSTRAINT [FK_ImEx_Origin_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Origin]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Origin_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Origin] CHECK CONSTRAINT [FK_ImEx_Origin_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_Accounts_STCategory] FOREIGN KEY([STCategoryId])
REFERENCES [dbo].[Accounts_STCategory] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_Accounts_STCategory]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_GST_SACCode] FOREIGN KEY([SACCodeId])
REFERENCES [dbo].[GST_SACCode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_GST_SACCode]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_ImEx_Group] FOREIGN KEY([GroupId])
REFERENCES [dbo].[ImEx_Group] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_ImEx_Group]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Particulars]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Particulars_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Particulars] CHECK CONSTRAINT [FK_ImEx_Particulars_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_Accounts_Ledgers] FOREIGN KEY([ReceivedLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_Accounts_PaymentMode] FOREIGN KEY([PaymentModeId])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_ImEx_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_ImEx_Job]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_ImEx_ManageInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[ImEx_ManageInvoice] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_ImEx_ManageInvoice]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Payment]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Payment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Payment] CHECK CONSTRAINT [FK_ImEx_Payment_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_ImEx_DestinationPort] FOREIGN KEY([PODId])
REFERENCES [dbo].[ImEx_DestinationPort] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_ImEx_DestinationPort]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_ImEx_LoadingPort] FOREIGN KEY([POLId])
REFERENCES [dbo].[ImEx_LoadingPort] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_ImEx_LoadingPort]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Quotation_Users] FOREIGN KEY([ContactPersonId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_ImEx_Quotation_Users]
GO
ALTER TABLE [dbo].[ImEx_Quotation]  WITH NOCHECK ADD  CONSTRAINT [FK_Quotation_ImEx_QuotationType] FOREIGN KEY([QuotationTypeId])
REFERENCES [dbo].[ImEx_QuotationType] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Quotation] CHECK CONSTRAINT [FK_Quotation_ImEx_QuotationType]
GO
ALTER TABLE [dbo].[ImEx_QuotationApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationApprovals_ImEx_Quotation] FOREIGN KEY([QuotationId])
REFERENCES [dbo].[ImEx_Quotation] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationApprovals] CHECK CONSTRAINT [FK_ImEx_QuotationApprovals_ImEx_Quotation]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_Currency] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[ImEx_Currency] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_Currency]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_QuantityUnit] FOREIGN KEY([QuantityUnitId])
REFERENCES [dbo].[ImEx_QuantityUnit] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_QuantityUnit]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_QuotationParticulars] FOREIGN KEY([ParticularId])
REFERENCES [dbo].[ImEx_QuotationParticulars] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_ImEx_QuotationDetails_ImEx_QuotationParticulars]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationDetails_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_ImEx_QuotationDetails_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationDetails_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_ImEx_QuotationDetails_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_QuotationDetails_ImEx_Quotation] FOREIGN KEY([QuotationID])
REFERENCES [dbo].[ImEx_Quotation] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationDetails] CHECK CONSTRAINT [FK_QuotationDetails_ImEx_Quotation]
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationMaster_ImEx_QuotationParticulars] FOREIGN KEY([QuotationParticularsId])
REFERENCES [dbo].[ImEx_QuotationParticulars] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster] CHECK CONSTRAINT [FK_ImEx_QuotationMaster_ImEx_QuotationParticulars]
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationMaster_ImEx_QuotationType] FOREIGN KEY([QuotationTypeId])
REFERENCES [dbo].[ImEx_QuotationType] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster] CHECK CONSTRAINT [FK_ImEx_QuotationMaster_ImEx_QuotationType]
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationMaster_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster] CHECK CONSTRAINT [FK_ImEx_QuotationMaster_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationMaster_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationMaster] CHECK CONSTRAINT [FK_ImEx_QuotationMaster_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_QuotationType]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationType_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationType] CHECK CONSTRAINT [FK_ImEx_QuotationType_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_QuotationType]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_QuotationType_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_QuotationType] CHECK CONSTRAINT [FK_ImEx_QuotationType_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_PaymentMode] FOREIGN KEY([PaymentModeId])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_RetainerInvoice_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_RetainerInvoice] CHECK CONSTRAINT [FK_ImEx_RetainerInvoice_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Shipper]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Shipper_Common_Country] FOREIGN KEY([CountryId])
REFERENCES [dbo].[Common_Country] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Shipper] CHECK CONSTRAINT [FK_ImEx_Shipper_Common_Country]
GO
ALTER TABLE [dbo].[ImEx_Shipper]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Shipper_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Shipper] CHECK CONSTRAINT [FK_ImEx_Shipper_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Shipper]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Shipper_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Shipper] CHECK CONSTRAINT [FK_ImEx_Shipper_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_ShippingTerms]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ShippingTerms_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ShippingTerms] CHECK CONSTRAINT [FK_ImEx_ShippingTerms_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_ShippingTerms]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_ShippingTerms_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_ShippingTerms] CHECK CONSTRAINT [FK_ImEx_ShippingTerms_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_Vessel]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Vessel_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Vessel] CHECK CONSTRAINT [FK_ImEx_Vessel_InsertUserId]
GO
ALTER TABLE [dbo].[ImEx_Vessel]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_Vessel_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_Vessel] CHECK CONSTRAINT [FK_ImEx_Vessel_UpdateUserId]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_Accounts_FinancialYear] FOREIGN KEY([RecordFYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_Common_Branch] FOREIGN KEY([RecordBranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_Common_Branch]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_Common_Branch1] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_Common_Branch1]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_Common_Client]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_ImEx_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[ImEx_JobType] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_ImEx_JobType]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_ImEx_ShippingTerms] FOREIGN KEY([TypeofShipmentId])
REFERENCES [dbo].[ImEx_ShippingTerms] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_ImEx_ShippingTerms]
GO
ALTER TABLE [dbo].[ImEx_WO]  WITH NOCHECK ADD  CONSTRAINT [FK_ImEx_WO_Users] FOREIGN KEY([BusinessGenerateBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[ImEx_WO] CHECK CONSTRAINT [FK_ImEx_WO_Users]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_Accounts_TDSSettings] FOREIGN KEY([TDSId])
REFERENCES [dbo].[Accounts_TDSSettings] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_Accounts_TDSSettings]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_Common_Parties]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_LoadingAdvanceType] FOREIGN KEY([AdvanceType])
REFERENCES [dbo].[LoadingAdvanceType] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_LoadingAdvanceType]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_LoadingChallan] FOREIGN KEY([LoadingId])
REFERENCES [dbo].[LoadingChallan] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_LoadingChallan]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvance_PumpName] FOREIGN KEY([PumpId])
REFERENCES [dbo].[PumpName] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK_LoadingAdvance_PumpName]
GO
ALTER TABLE [dbo].[LoadingAdvance]  WITH NOCHECK ADD  CONSTRAINT [FK__LoadingAdvance_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvance] CHECK CONSTRAINT [FK__LoadingAdvance_UpdateUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_FinancialYear] FOREIGN KEY([FYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_Ledgers] FOREIGN KEY([BankLedger])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_Common_BankNames] FOREIGN KEY([BankNameId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_Common_BankNames]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_InsertUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPayment] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_InsertUserId]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_LoadingAdvance] FOREIGN KEY([LoadingAdvId])
REFERENCES [dbo].[LoadingAdvance] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_LoadingAdvance]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_LoadingAdvanceBulkPayment] FOREIGN KEY([BulkPaymentId])
REFERENCES [dbo].[LoadingAdvanceBulkPayment] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_LoadingAdvanceBulkPayment]
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingAdvanceBulkPaymentId] CHECK CONSTRAINT [FK_LoadingAdvanceBulkPaymentId_UpdateUserId]
GO
ALTER TABLE [dbo].[LoadingApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingApprovals__ApprovalTypes] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[LoadingApprovals] CHECK CONSTRAINT [FK_LoadingApprovals__ApprovalTypes]
GO
ALTER TABLE [dbo].[LoadingApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingApprovals_Users] FOREIGN KEY([ActionBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingApprovals] CHECK CONSTRAINT [FK_LoadingApprovals_Users]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_Accounts_Ledgers] FOREIGN KEY([BankLedger])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_Common_BankNames] FOREIGN KEY([BankNameId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_Common_BankNames]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_InsertUserId]
GO
ALTER TABLE [dbo].[LoadingBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingBulkPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingBulkPayment] CHECK CONSTRAINT [FK_LoadingBulkPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[LoadingChallan]  WITH CHECK ADD  CONSTRAINT [FK_LoadingChallan_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[LoadingChallan] CHECK CONSTRAINT [FK_LoadingChallan_Common_Client]
GO
ALTER TABLE [dbo].[LoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingChallan_Fleet_Vehicle] FOREIGN KEY([TruckId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
GO
ALTER TABLE [dbo].[LoadingChallan] CHECK CONSTRAINT [FK_LoadingChallan_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[LoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingChallan_JobDetails] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[LoadingChallan] CHECK CONSTRAINT [FK_LoadingChallan_JobDetails]
GO
ALTER TABLE [dbo].[LoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_LoadingChallan_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[LoadingChallan] CHECK CONSTRAINT [FK_LoadingChallan_UpdateUserId]
GO
ALTER TABLE [dbo].[Log_LoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_Log_LoadingChallan_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[Log_LoadingChallan] CHECK CONSTRAINT [FK_Log_LoadingChallan_UpdateUserId]
GO
ALTER TABLE [dbo].[OfferDetails]  WITH CHECK ADD  CONSTRAINT [FK_OfferDetails_Offers] FOREIGN KEY([offerId])
REFERENCES [dbo].[Offers] ([Id])
GO
ALTER TABLE [dbo].[OfferDetails] CHECK CONSTRAINT [FK_OfferDetails_Offers]
GO
ALTER TABLE [dbo].[OfficeAdvance]  WITH CHECK ADD  CONSTRAINT [FK_OfficeAdvance_Fleet_Vehicle] FOREIGN KEY([LoadingTruckId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
GO
ALTER TABLE [dbo].[OfficeAdvance] CHECK CONSTRAINT [FK_OfficeAdvance_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[OfficeAdvance]  WITH CHECK ADD  CONSTRAINT [FK_OfficeAdvance_LoadingChallan] FOREIGN KEY([LoadingId])
REFERENCES [dbo].[LoadingChallan] ([Id])
GO
ALTER TABLE [dbo].[OfficeAdvance] CHECK CONSTRAINT [FK_OfficeAdvance_LoadingChallan]
GO
ALTER TABLE [dbo].[Pump]  WITH NOCHECK ADD  CONSTRAINT [FK_Pump_PumpName] FOREIGN KEY([PumpNameId])
REFERENCES [dbo].[PumpName] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Pump] CHECK CONSTRAINT [FK_Pump_PumpName]
GO
ALTER TABLE [dbo].[PumpName]  WITH NOCHECK ADD  CONSTRAINT [FK_PumpName_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[PumpName] NOCHECK CONSTRAINT [FK_PumpName_InsertUserId]
GO
ALTER TABLE [dbo].[PumpName]  WITH NOCHECK ADD  CONSTRAINT [FK_PumpName_LedgerId] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[PumpName] CHECK CONSTRAINT [FK_PumpName_LedgerId]
GO
ALTER TABLE [dbo].[PumpName]  WITH NOCHECK ADD  CONSTRAINT [FK_PumpName_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[PumpName] NOCHECK CONSTRAINT [FK_PumpName_UpdateUserId]
GO
ALTER TABLE [dbo].[RolePermissions]  WITH NOCHECK ADD  CONSTRAINT [FK_RolePermissions_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[Roles] ([RoleId])
GO
ALTER TABLE [dbo].[RolePermissions] CHECK CONSTRAINT [FK_RolePermissions_RoleId]
GO
ALTER TABLE [dbo].[SystemLedger]  WITH NOCHECK ADD  CONSTRAINT [FK_SystemLedger_Accounts_CostCenters] FOREIGN KEY([CostCenterId])
REFERENCES [dbo].[Accounts_CostCenters] ([Id])
GO
ALTER TABLE [dbo].[SystemLedger] CHECK CONSTRAINT [FK_SystemLedger_Accounts_CostCenters]
GO
ALTER TABLE [dbo].[SystemLedger]  WITH NOCHECK ADD  CONSTRAINT [FK_SystemLedger_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[SystemLedger] CHECK CONSTRAINT [FK_SystemLedger_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[SystemLedger]  WITH NOCHECK ADD  CONSTRAINT [FK_SystemLedger_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[SystemLedger] CHECK CONSTRAINT [FK_SystemLedger_InsertUserId]
GO
ALTER TABLE [dbo].[SystemLedger]  WITH NOCHECK ADD  CONSTRAINT [FK_SystemLedger_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[SystemLedger] CHECK CONSTRAINT [FK_SystemLedger_UpdateUserId]
GO
ALTER TABLE [dbo].[TLoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_TLoadingChallan_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[TLoadingChallan] CHECK CONSTRAINT [FK_TLoadingChallan_InsertUserId]
GO
ALTER TABLE [dbo].[TLoadingChallan]  WITH NOCHECK ADD  CONSTRAINT [FK_TLoadingChallan_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[TLoadingChallan] CHECK CONSTRAINT [FK_TLoadingChallan_UpdateUserId]
GO
ALTER TABLE [dbo].[_Advance]  WITH NOCHECK ADD  CONSTRAINT [FK__Advance_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[_Advance] CHECK CONSTRAINT [FK__Advance_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[_Advance]  WITH NOCHECK ADD  CONSTRAINT [FK__Advance_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[_Advance] CHECK CONSTRAINT [FK__Advance_Common_Branch]
GO
ALTER TABLE [dbo].[_Advance]  WITH NOCHECK ADD  CONSTRAINT [FK__Advance_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_Advance] CHECK CONSTRAINT [FK__Advance_InsertUserId]
GO
ALTER TABLE [dbo].[_Advance]  WITH NOCHECK ADD  CONSTRAINT [FK__Advance_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_Advance] CHECK CONSTRAINT [FK__Advance_UpdateUserId]
GO
ALTER TABLE [dbo].[_AdvanceApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceApprovals__Advance] FOREIGN KEY([AdvanceId])
REFERENCES [dbo].[_Advance] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_AdvanceApprovals] CHECK CONSTRAINT [FK__AdvanceApprovals__Advance]
GO
ALTER TABLE [dbo].[_AdvanceApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceApprovals__ApprovalTypes] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceApprovals] CHECK CONSTRAINT [FK__AdvanceApprovals__ApprovalTypes]
GO
ALTER TABLE [dbo].[_AdvanceApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceApprovals_Users] FOREIGN KEY([ActionBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceApprovals] CHECK CONSTRAINT [FK__AdvanceApprovals_Users]
GO
ALTER TABLE [dbo].[_AdvanceDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetails_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceDetails] CHECK CONSTRAINT [FK__AdvanceDetails_InsertUserId]
GO
ALTER TABLE [dbo].[_AdvanceDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetails_JobDetails] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceDetails] CHECK CONSTRAINT [FK__AdvanceDetails_JobDetails]
GO
ALTER TABLE [dbo].[_AdvanceDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetails__Advance] FOREIGN KEY([AdvanceId])
REFERENCES [dbo].[_Advance] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_AdvanceDetails] CHECK CONSTRAINT [FK__AdvanceDetails__Advance]
GO
ALTER TABLE [dbo].[_AdvanceDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetails_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceDetails] CHECK CONSTRAINT [FK__AdvanceDetails_UpdateUserId]
GO
ALTER TABLE [dbo].[_AdvanceDetailsSupervisor]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetailsSupervisor__AdvanceDetails] FOREIGN KEY([AdvanceDetailId])
REFERENCES [dbo].[_AdvanceDetails] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_AdvanceDetailsSupervisor] CHECK CONSTRAINT [FK__AdvanceDetailsSupervisor__AdvanceDetails]
GO
ALTER TABLE [dbo].[_AdvanceDetailsSupervisor]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceDetailsSupervisor_Users] FOREIGN KEY([SupervisorId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceDetailsSupervisor] CHECK CONSTRAINT [FK__AdvanceDetailsSupervisor_Users]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher_Accounts_Ledgers] FOREIGN KEY([PaymentLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher_Accounts_Ledgers1] FOREIGN KEY([BranchLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher_Accounts_Ledgers1]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher_InsertUserId]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher__Advance] FOREIGN KEY([AdvanceId])
REFERENCES [dbo].[_Advance] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher__Advance]
GO
ALTER TABLE [dbo].[_AdvanceVoucher]  WITH NOCHECK ADD  CONSTRAINT [FK__AdvanceVoucher_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_AdvanceVoucher] CHECK CONSTRAINT [FK__AdvanceVoucher_UpdateUserId]
GO
ALTER TABLE [dbo].[_CHADetails]  WITH NOCHECK ADD  CONSTRAINT [FK_CHADetails_ImEx_ContainerType] FOREIGN KEY([ContainerTypeId])
REFERENCES [dbo].[ImEx_ContainerType] ([Id])
GO
ALTER TABLE [dbo].[_CHADetails] CHECK CONSTRAINT [FK_CHADetails_ImEx_ContainerType]
GO
ALTER TABLE [dbo].[_CHADetails]  WITH NOCHECK ADD  CONSTRAINT [FK_CHADetails_ImEx_Job] FOREIGN KEY([ImExJobId])
REFERENCES [dbo].[ImEx_Job] ([Id])
GO
ALTER TABLE [dbo].[_CHADetails] CHECK CONSTRAINT [FK_CHADetails_ImEx_Job]
GO
ALTER TABLE [dbo].[_CHADetails]  WITH NOCHECK ADD  CONSTRAINT [FK_CHADetails_ImEx_QuantityUnit] FOREIGN KEY([QuantityUnitId])
REFERENCES [dbo].[ImEx_QuantityUnit] ([Id])
GO
ALTER TABLE [dbo].[_CHADetails] CHECK CONSTRAINT [FK_CHADetails_ImEx_QuantityUnit]
GO
ALTER TABLE [dbo].[_CHADetails]  WITH NOCHECK ADD  CONSTRAINT [FK_CHADetails__Advance] FOREIGN KEY([AdvanceId])
REFERENCES [dbo].[_Advance] ([Id])
GO
ALTER TABLE [dbo].[_CHADetails] CHECK CONSTRAINT [FK_CHADetails__Advance]
GO
ALTER TABLE [dbo].[_CHADetails]  WITH NOCHECK ADD  CONSTRAINT [FK_CHADetails__PaymentType] FOREIGN KEY([PaymentTypeId])
REFERENCES [dbo].[_PaymentType] ([Id])
GO
ALTER TABLE [dbo].[_CHADetails] CHECK CONSTRAINT [FK_CHADetails__PaymentType]
GO
ALTER TABLE [dbo].[_ChallanReceivedDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__ChallanReceivedDetails__ChallanRecevied] FOREIGN KEY([ReceivingId])
REFERENCES [dbo].[_ChallanRecevied] ([Id])
GO
ALTER TABLE [dbo].[_ChallanReceivedDetails] CHECK CONSTRAINT [FK__ChallanReceivedDetails__ChallanRecevied]
GO
ALTER TABLE [dbo].[_ChallanRecevied]  WITH NOCHECK ADD  CONSTRAINT [FK__ChallanRecevied_Common_Parties] FOREIGN KEY([ReceivedFromId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[_ChallanRecevied] CHECK CONSTRAINT [FK__ChallanRecevied_Common_Parties]
GO
ALTER TABLE [dbo].[_ClientNature]  WITH NOCHECK ADD  CONSTRAINT [FK__ClientNature_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_ClientNature] CHECK CONSTRAINT [FK__ClientNature_Common_Client]
GO
ALTER TABLE [dbo].[_ClientNature]  WITH NOCHECK ADD  CONSTRAINT [FK__ClientNature__NatureWork] FOREIGN KEY([NatureWorkId])
REFERENCES [dbo].[_NatureWork] ([Id])
GO
ALTER TABLE [dbo].[_ClientNature] CHECK CONSTRAINT [FK__ClientNature__NatureWork]
GO
ALTER TABLE [dbo].[_DODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__DODetails_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_DODetails] CHECK CONSTRAINT [FK__DODetails_InsertUserId]
GO
ALTER TABLE [dbo].[_DODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__DODetails__WorkOrderItems] FOREIGN KEY([WOItemId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_DODetails] CHECK CONSTRAINT [FK__DODetails__WorkOrderItems]
GO
ALTER TABLE [dbo].[_DODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__DODetails_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_DODetails] CHECK CONSTRAINT [FK__DODetails_UpdateUserId]
GO
ALTER TABLE [dbo].[_FreightSectorRules]  WITH NOCHECK ADD  CONSTRAINT [FK__FreightSectorRules_LoadingPoints] FOREIGN KEY([LoadingPoint])
REFERENCES [dbo].[LoadingPoints] ([Id])
GO
ALTER TABLE [dbo].[_FreightSectorRules] CHECK CONSTRAINT [FK__FreightSectorRules_LoadingPoints]
GO
ALTER TABLE [dbo].[_FreightSectorRules]  WITH NOCHECK ADD  CONSTRAINT [FK__FreightSectorRules_UnloadingPoints] FOREIGN KEY([UnloadingPoint])
REFERENCES [dbo].[UnloadingPoints] ([Id])
GO
ALTER TABLE [dbo].[_FreightSectorRules] CHECK CONSTRAINT [FK__FreightSectorRules_UnloadingPoints]
GO
ALTER TABLE [dbo].[_FreightSectorTyre]  WITH NOCHECK ADD  CONSTRAINT [FK__FreightSectorTyre_Fleet_TyreNos] FOREIGN KEY([Tyres])
REFERENCES [dbo].[Fleet_TyreNos] ([Id])
GO
ALTER TABLE [dbo].[_FreightSectorTyre] CHECK CONSTRAINT [FK__FreightSectorTyre_Fleet_TyreNos]
GO
ALTER TABLE [dbo].[_FreightSectorTyre]  WITH NOCHECK ADD  CONSTRAINT [FK__FreightSectorTyre__FreightSectorRules] FOREIGN KEY([SectorId])
REFERENCES [dbo].[_FreightSectorRules] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_FreightSectorTyre] CHECK CONSTRAINT [FK__FreightSectorTyre__FreightSectorRules]
GO
ALTER TABLE [dbo].[_FrieghtTyreRules]  WITH NOCHECK ADD  CONSTRAINT [FK__FrieghtTyreRules__FreightSectorTyre] FOREIGN KEY([SectorTyreId])
REFERENCES [dbo].[_FreightSectorTyre] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_FrieghtTyreRules] CHECK CONSTRAINT [FK__FrieghtTyreRules__FreightSectorTyre]
GO
ALTER TABLE [dbo].[_InstantLoading]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantLoading_Accounts_Ledgers] FOREIGN KEY([PaymentLedger])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_InstantLoading] CHECK CONSTRAINT [FK__InstantLoading_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_InstantLoading]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantLoading_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InstantLoading] CHECK CONSTRAINT [FK__InstantLoading_InsertUserId]
GO
ALTER TABLE [dbo].[_InstantLoading]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantLoading_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InstantLoading] CHECK CONSTRAINT [FK__InstantLoading_UpdateUserId]
GO
ALTER TABLE [dbo].[_InstantLoadingDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantLoadingDetails_InsertUserId] FOREIGN KEY([LoadingId])
REFERENCES [dbo].[LoadingChallan] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InstantLoadingDetails] CHECK CONSTRAINT [FK__InstantLoadingDetails_InsertUserId]
GO
ALTER TABLE [dbo].[_InstantLoadingDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantLoadingDetails__InstantLoading] FOREIGN KEY([InstantId])
REFERENCES [dbo].[_InstantLoading] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InstantLoadingDetails] CHECK CONSTRAINT [FK__InstantLoadingDetails__InstantLoading]
GO
ALTER TABLE [dbo].[_InstantUnloading]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantUnloading_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InstantUnloading] CHECK CONSTRAINT [FK__InstantUnloading_InsertUserId]
GO
ALTER TABLE [dbo].[_InstantUnloading]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantUnloading_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InstantUnloading] CHECK CONSTRAINT [FK__InstantUnloading_UpdateUserId]
GO
ALTER TABLE [dbo].[_InstantUnloadingDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__InstantUnloadingDetails__InstantUnloading] FOREIGN KEY([UnloadInstantId])
REFERENCES [dbo].[_InstantUnloading] ([Id])
GO
ALTER TABLE [dbo].[_InstantUnloadingDetails] CHECK CONSTRAINT [FK__InstantUnloadingDetails__InstantUnloading]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPayment_Accounts_FinancialYear] FOREIGN KEY([FinancialYear])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] CHECK CONSTRAINT [FK__InvoiceBulkPayment_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPayment_Accounts_Ledgers] FOREIGN KEY([ReceivedLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] CHECK CONSTRAINT [FK__InvoiceBulkPayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPayment_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] CHECK CONSTRAINT [FK__InvoiceBulkPayment_Common_Client]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] CHECK CONSTRAINT [FK__InvoiceBulkPayment_InsertUserId]
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPayment] CHECK CONSTRAINT [FK__InvoiceBulkPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPaymentId__InvoiceBulkPayment] FOREIGN KEY([PaymentId])
REFERENCES [dbo].[_InvoiceBulkPayment] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentId] CHECK CONSTRAINT [FK__InvoiceBulkPaymentId__InvoiceBulkPayment]
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPaymentId__InvoicePayment] FOREIGN KEY([InvoicePaymentId])
REFERENCES [dbo].[_InvoicePayment] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentId] CHECK CONSTRAINT [FK__InvoiceBulkPaymentId__InvoicePayment]
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPaymentOnAcc_Accounts_OnAccPayment] FOREIGN KEY([OnAccId])
REFERENCES [dbo].[Accounts_OnAccPayment] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentOnAcc] CHECK CONSTRAINT [FK__InvoiceBulkPaymentOnAcc_Accounts_OnAccPayment]
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceBulkPaymentOnAcc__InvoiceBulkPayment] FOREIGN KEY([BulkPaymentId])
REFERENCES [dbo].[_InvoiceBulkPayment] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InvoiceBulkPaymentOnAcc] CHECK CONSTRAINT [FK__InvoiceBulkPaymentOnAcc__InvoiceBulkPayment]
GO
ALTER TABLE [dbo].[_InvoiceChallan]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceChallan__Invoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[_Invoice] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InvoiceChallan] CHECK CONSTRAINT [FK__InvoiceChallan__Invoice]
GO
ALTER TABLE [dbo].[_InvoicePayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePayment_Accounts_Ledgers] FOREIGN KEY([ReceivedLedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePayment] CHECK CONSTRAINT [FK__InvoicePayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_InvoicePayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePayment] CHECK CONSTRAINT [FK__InvoicePayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[_InvoicePayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePayment] CHECK CONSTRAINT [FK__InvoicePayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[_InvoicePayment]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePayment__Invoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[_Invoice] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePayment] CHECK CONSTRAINT [FK__InvoicePayment__Invoice]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePaymentOnAcc_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] CHECK CONSTRAINT [FK__InvoicePaymentOnAcc_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePaymentOnAcc_Common_Branch] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] CHECK CONSTRAINT [FK__InvoicePaymentOnAcc_Common_Branch]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePaymentOnAcc_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] CHECK CONSTRAINT [FK__InvoicePaymentOnAcc_Common_Client]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePaymentOnAcc_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] CHECK CONSTRAINT [FK__InvoicePaymentOnAcc_InsertUserId]
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoicePaymentOnAcc_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_InvoicePaymentOnAcc] CHECK CONSTRAINT [FK__InvoicePaymentOnAcc_UpdateUserId]
GO
ALTER TABLE [dbo].[_InvoiceTax]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceTax_Accounts_STCategoryRate] FOREIGN KEY([TaxId])
REFERENCES [dbo].[Accounts_STCategoryRate] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceTax] CHECK CONSTRAINT [FK__InvoiceTax_Accounts_STCategoryRate]
GO
ALTER TABLE [dbo].[_InvoiceTax]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceTax__Invoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[_Invoice] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InvoiceTax] CHECK CONSTRAINT [FK__InvoiceTax__Invoice]
GO
ALTER TABLE [dbo].[_InvoiceTaxHandling]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceTaxHandling_Accounts_STCategoryRate] FOREIGN KEY([TaxId])
REFERENCES [dbo].[Accounts_STCategoryRate] ([Id])
GO
ALTER TABLE [dbo].[_InvoiceTaxHandling] CHECK CONSTRAINT [FK__InvoiceTaxHandling_Accounts_STCategoryRate]
GO
ALTER TABLE [dbo].[_InvoiceTaxHandling]  WITH NOCHECK ADD  CONSTRAINT [FK__InvoiceTaxHandling__Invoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[_Invoice] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_InvoiceTaxHandling] CHECK CONSTRAINT [FK__InvoiceTaxHandling__Invoice]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Accounts_CostCenters] FOREIGN KEY([CostCenterId])
REFERENCES [dbo].[Accounts_CostCenters] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Accounts_CostCenters]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Branch] FOREIGN KEY([ExecutingBranch])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Branch]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Branch1] FOREIGN KEY([InvoiceBranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Branch1]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Client] FOREIGN KEY([Consignee])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Client]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Client1] FOREIGN KEY([Consigner])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Client1]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Consig] FOREIGN KEY([ConsigneeId])
REFERENCES [dbo].[Common_Consig] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Consig]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_Consig1] FOREIGN KEY([ConsignerId])
REFERENCES [dbo].[Common_Consig] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_Consig1]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_Common_JobStatus] FOREIGN KEY([JobStatus])
REFERENCES [dbo].[Common_JobStatus] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_Common_JobStatus]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_Job] NOCHECK CONSTRAINT [FK__Job_InsertUserId]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job__WorkOrderItems] FOREIGN KEY([WOSectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job__WorkOrderItems]
GO
ALTER TABLE [dbo].[_Job]  WITH NOCHECK ADD  CONSTRAINT [FK__Job_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_Job] CHECK CONSTRAINT [FK__Job_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__JobApprovals__ApprovalTypes] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[_JobApprovals] CHECK CONSTRAINT [FK__JobApprovals__ApprovalTypes]
GO
ALTER TABLE [dbo].[_JobApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__JobApprovals__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_JobApprovals] CHECK CONSTRAINT [FK__JobApprovals__Job]
GO
ALTER TABLE [dbo].[_JobApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__JobApprovals_Users] FOREIGN KEY([ActionBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobApprovals] CHECK CONSTRAINT [FK__JobApprovals_Users]
GO
ALTER TABLE [dbo].[_JobFreightMktRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightMktRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightMktRules] CHECK CONSTRAINT [FK__JobFreightMktRules_InsertUserId]
GO
ALTER TABLE [dbo].[_JobFreightMktRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightMktRules__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightMktRules] CHECK CONSTRAINT [FK__JobFreightMktRules__Job]
GO
ALTER TABLE [dbo].[_JobFreightMktRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightMktRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightMktRules] CHECK CONSTRAINT [FK__JobFreightMktRules_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete] CHECK CONSTRAINT [FK__JobFreightRules_InsertUserId]
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightRules__JobFreightRules] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete] CHECK CONSTRAINT [FK__JobFreightRules__JobFreightRules]
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightRules_ToBeDelete] CHECK CONSTRAINT [FK__JobFreightRules_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobFreightSpecialParty]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightSpecialParty_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightSpecialParty] CHECK CONSTRAINT [FK__JobFreightSpecialParty_Common_Parties]
GO
ALTER TABLE [dbo].[_JobFreightSpecialParty]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightSpecialParty__JobFreightSpecialParty] FOREIGN KEY([JobSpecialFreightId])
REFERENCES [dbo].[_JobFrieghtSpecialRules] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightSpecialParty] CHECK CONSTRAINT [FK__JobFreightSpecialParty__JobFreightSpecialParty]
GO
ALTER TABLE [dbo].[_JobFreightSpecialTruck]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightSpecialTruck_Fleet_Vehicle] FOREIGN KEY([TruckId])
REFERENCES [dbo].[Fleet_Vehicle] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightSpecialTruck] CHECK CONSTRAINT [FK__JobFreightSpecialTruck_Fleet_Vehicle]
GO
ALTER TABLE [dbo].[_JobFreightSpecialTruck]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFreightSpecialTruck__JobFrieghtSpecialRules] FOREIGN KEY([JobSpecialFreightId])
REFERENCES [dbo].[_JobFrieghtSpecialRules] ([Id])
GO
ALTER TABLE [dbo].[_JobFreightSpecialTruck] CHECK CONSTRAINT [FK__JobFreightSpecialTruck__JobFrieghtSpecialRules]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtAssRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] CHECK CONSTRAINT [FK__JobFrieghtAssRules_InsertUserId]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtAssRules__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] CHECK CONSTRAINT [FK__JobFrieghtAssRules__Job]
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtAssRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFrieghtAssRules] CHECK CONSTRAINT [FK__JobFrieghtAssRules_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtSpecialRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules] CHECK CONSTRAINT [FK__JobFrieghtSpecialRules_InsertUserId]
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtSpecialRules__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules] CHECK CONSTRAINT [FK__JobFrieghtSpecialRules__Job]
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobFrieghtSpecialRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobFrieghtSpecialRules] CHECK CONSTRAINT [FK__JobFrieghtSpecialRules_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobPaymentRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobPaymentRule_Fleet_TyreNos] FOREIGN KEY([Tyre])
REFERENCES [dbo].[Fleet_TyreNos] ([Id])
GO
ALTER TABLE [dbo].[_JobPaymentRule] CHECK CONSTRAINT [FK__JobPaymentRule_Fleet_TyreNos]
GO
ALTER TABLE [dbo].[_JobPaymentRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobPaymentRule_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobPaymentRule] CHECK CONSTRAINT [FK__JobPaymentRule_InsertUserId]
GO
ALTER TABLE [dbo].[_JobPaymentRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobPaymentRule__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_JobPaymentRule] CHECK CONSTRAINT [FK__JobPaymentRule__Job]
GO
ALTER TABLE [dbo].[_JobPaymentRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobPaymentRule_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobPaymentRule] CHECK CONSTRAINT [FK__JobPaymentRule_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobShortageRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobShortageRule_Fleet_TyreNos] FOREIGN KEY([Tyre])
REFERENCES [dbo].[Fleet_TyreNos] ([Id])
GO
ALTER TABLE [dbo].[_JobShortageRule] CHECK CONSTRAINT [FK__JobShortageRule_Fleet_TyreNos]
GO
ALTER TABLE [dbo].[_JobShortageRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobShortageRule_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobShortageRule] CHECK CONSTRAINT [FK__JobShortageRule_InsertUserId]
GO
ALTER TABLE [dbo].[_JobShortageRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobShortageRule__job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_JobShortageRule] CHECK CONSTRAINT [FK__JobShortageRule__job]
GO
ALTER TABLE [dbo].[_JobShortageRule]  WITH NOCHECK ADD  CONSTRAINT [FK__JobShortageRule_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobShortageRule] CHECK CONSTRAINT [FK__JobShortageRule_UpdateUserId]
GO
ALTER TABLE [dbo].[_JobTyreBaseRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobTyreBaseRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobTyreBaseRules] CHECK CONSTRAINT [FK__JobTyreBaseRules_InsertUserId]
GO
ALTER TABLE [dbo].[_JobTyreBaseRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobTyreBaseRules__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_JobTyreBaseRules] CHECK CONSTRAINT [FK__JobTyreBaseRules__Job]
GO
ALTER TABLE [dbo].[_JobTyreBaseRules]  WITH NOCHECK ADD  CONSTRAINT [FK__JobTyreBaseRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_JobTyreBaseRules] CHECK CONSTRAINT [FK__JobTyreBaseRules_UpdateUserId]
GO
ALTER TABLE [dbo].[_MaxEscalationRate]  WITH NOCHECK ADD  CONSTRAINT [FK__MaxEscalationRate__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_MaxEscalationRate] CHECK CONSTRAINT [FK__MaxEscalationRate__Job]
GO
ALTER TABLE [dbo].[_OilFilling]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFilling_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_OilFilling] CHECK CONSTRAINT [FK__OilFilling_InsertUserId]
GO
ALTER TABLE [dbo].[_OilFilling]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFilling_PumpName] FOREIGN KEY([PumpId])
REFERENCES [dbo].[PumpName] ([Id])
GO
ALTER TABLE [dbo].[_OilFilling] CHECK CONSTRAINT [FK__OilFilling_PumpName]
GO
ALTER TABLE [dbo].[_OilFilling]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFilling_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_OilFilling] CHECK CONSTRAINT [FK__OilFilling_UpdateUserId]
GO
ALTER TABLE [dbo].[_OilFillingData]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFillingData_Common_ReconciliationStatus] FOREIGN KEY([Status])
REFERENCES [dbo].[Common_ReconciliationStatus] ([Id])
GO
ALTER TABLE [dbo].[_OilFillingData] CHECK CONSTRAINT [FK__OilFillingData_Common_ReconciliationStatus]
GO
ALTER TABLE [dbo].[_OilFillingData]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFillingData_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_OilFillingData] CHECK CONSTRAINT [FK__OilFillingData_InsertUserId]
GO
ALTER TABLE [dbo].[_OilFillingData]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFillingData__OilFilling] FOREIGN KEY([FillingId])
REFERENCES [dbo].[_OilFilling] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_OilFillingData] CHECK CONSTRAINT [FK__OilFillingData__OilFilling]
GO
ALTER TABLE [dbo].[_OilFillingData]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFillingData_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_OilFillingData] CHECK CONSTRAINT [FK__OilFillingData_UpdateUserId]
GO
ALTER TABLE [dbo].[_OilFillingData]  WITH NOCHECK ADD  CONSTRAINT [FK__OilFillingData_Users] FOREIGN KEY([StatusBy])
REFERENCES [dbo].[Users] ([UserId])
GO
ALTER TABLE [dbo].[_OilFillingData] CHECK CONSTRAINT [FK__OilFillingData_Users]
GO
ALTER TABLE [dbo].[_PaymentPenalty]  WITH NOCHECK ADD  CONSTRAINT [FK__PaymentPenalty__PenaltyType] FOREIGN KEY([PenaltyTypeId])
REFERENCES [dbo].[_PenaltyType] ([Id])
GO
ALTER TABLE [dbo].[_PaymentPenalty] CHECK CONSTRAINT [FK__PaymentPenalty__PenaltyType]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery_Accounts_Ledgers] FOREIGN KEY([LedgerId])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery_Common_Parties] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery_Common_Parties]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery__PaymentType] FOREIGN KEY([PaymentType])
REFERENCES [dbo].[_PaymentType] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery__PaymentType]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery__RecoveryMode] FOREIGN KEY([RecoveryMode])
REFERENCES [dbo].[_RecoveryMode] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery__RecoveryMode]
GO
ALTER TABLE [dbo].[_Recovery]  WITH NOCHECK ADD  CONSTRAINT [FK__Recovery__RecoveryType] FOREIGN KEY([RecoveryTypeId])
REFERENCES [dbo].[_RecoveryType] ([Id])
GO
ALTER TABLE [dbo].[_Recovery] CHECK CONSTRAINT [FK__Recovery__RecoveryType]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver]  WITH NOCHECK ADD  CONSTRAINT [FK__ShoratgeWaiver_Accounts_ApprovalStatus] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] CHECK CONSTRAINT [FK__ShoratgeWaiver_Accounts_ApprovalStatus]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver]  WITH NOCHECK ADD  CONSTRAINT [FK__ShoratgeWaiver_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] CHECK CONSTRAINT [FK__ShoratgeWaiver_InsertUserId]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver]  WITH NOCHECK ADD  CONSTRAINT [FK__ShoratgeWaiver_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] CHECK CONSTRAINT [FK__ShoratgeWaiver_UpdateUserId]
GO
ALTER TABLE [dbo].[_ShoratgeWaiver]  WITH NOCHECK ADD  CONSTRAINT [FK__ShoratgeWaiver_Users] FOREIGN KEY([ActionBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_ShoratgeWaiver] CHECK CONSTRAINT [FK__ShoratgeWaiver_Users]
GO
ALTER TABLE [dbo].[_STODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__STODetails_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_STODetails] CHECK CONSTRAINT [FK__STODetails_InsertUserId]
GO
ALTER TABLE [dbo].[_STODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__STODetails__WorkOrderItems] FOREIGN KEY([WOItemId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_STODetails] CHECK CONSTRAINT [FK__STODetails__WorkOrderItems]
GO
ALTER TABLE [dbo].[_STODetails]  WITH NOCHECK ADD  CONSTRAINT [FK__STODetails_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_STODetails] CHECK CONSTRAINT [FK__STODetails_UpdateUserId]
GO
ALTER TABLE [dbo].[_STOJob]  WITH NOCHECK ADD  CONSTRAINT [FK__STOJob__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_STOJob] CHECK CONSTRAINT [FK__STOJob__Job]
GO
ALTER TABLE [dbo].[_STOJob]  WITH NOCHECK ADD  CONSTRAINT [FK__STOJob__STODetails] FOREIGN KEY([STOId])
REFERENCES [dbo].[_STODetails] ([Id])
GO
ALTER TABLE [dbo].[_STOJob] CHECK CONSTRAINT [FK__STOJob__STODetails]
GO
ALTER TABLE [dbo].[_Token]  WITH NOCHECK ADD  CONSTRAINT [FK__Token_Common_Parties] FOREIGN KEY([DiscounterId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[_Token] CHECK CONSTRAINT [FK__Token_Common_Parties]
GO
ALTER TABLE [dbo].[_Token]  WITH NOCHECK ADD  CONSTRAINT [FK__Token_Common_Parties1] FOREIGN KEY([PartyId])
REFERENCES [dbo].[Common_Parties] ([Id])
GO
ALTER TABLE [dbo].[_Token] CHECK CONSTRAINT [FK__Token_Common_Parties1]
GO
ALTER TABLE [dbo].[_Token]  WITH NOCHECK ADD  CONSTRAINT [FK__Token__Recovery] FOREIGN KEY([RecoveryId])
REFERENCES [dbo].[_Recovery] ([Id])
GO
ALTER TABLE [dbo].[_Token] CHECK CONSTRAINT [FK__Token__Recovery]
GO
ALTER TABLE [dbo].[_TokenApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenApproval_Accounts_ApprovalStatus] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[_TokenApprovals] CHECK CONSTRAINT [FK__TokenApproval_Accounts_ApprovalStatus]
GO
ALTER TABLE [dbo].[_TokenApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenApproval__Token] FOREIGN KEY([TokenId])
REFERENCES [dbo].[_Token] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_TokenApprovals] CHECK CONSTRAINT [FK__TokenApproval__Token]
GO
ALTER TABLE [dbo].[_TokenApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenApproval_Users] FOREIGN KEY([ActionBy])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TokenApprovals] NOCHECK CONSTRAINT [FK__TokenApproval_Users]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_Accounts_FinancialYear] FOREIGN KEY([FYId])
REFERENCES [dbo].[Accounts_FinancialYear] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_Accounts_FinancialYear]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_Accounts_Ledgers] FOREIGN KEY([BankLedger])
REFERENCES [dbo].[Accounts_Ledgers] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_Accounts_Ledgers]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_Accounts_PaymentMode] FOREIGN KEY([PaymentMode])
REFERENCES [dbo].[Accounts_PaymentMode] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_Accounts_PaymentMode]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_Accounts_Vouchers] FOREIGN KEY([VoucherId])
REFERENCES [dbo].[Accounts_Vouchers] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_Accounts_Vouchers]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_Common_BankNames] FOREIGN KEY([BankNameId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_Common_BankNames]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_InsertUserId]
GO
ALTER TABLE [dbo].[_TokenBulkPayment]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPayment_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPayment] CHECK CONSTRAINT [FK__TokenBulkPayment_UpdateUserId]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPaymentId_Common_BankNames] FOREIGN KEY([BankNameId])
REFERENCES [dbo].[Common_BankNames] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] CHECK CONSTRAINT [FK__TokenBulkPaymentId_Common_BankNames]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPaymentId_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] CHECK CONSTRAINT [FK__TokenBulkPaymentId_InsertUserId]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPaymentId__Token] FOREIGN KEY([TokenId])
REFERENCES [dbo].[_Token] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] CHECK CONSTRAINT [FK__TokenBulkPaymentId__Token]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPaymentId__TokenBulkPayment] FOREIGN KEY([BulkPaymentId])
REFERENCES [dbo].[_TokenBulkPayment] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] CHECK CONSTRAINT [FK__TokenBulkPaymentId__TokenBulkPayment]
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenBulkPaymentId_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TokenBulkPaymentId] CHECK CONSTRAINT [FK__TokenBulkPaymentId_UpdateUserId]
GO
ALTER TABLE [dbo].[_TokenChallans]  WITH NOCHECK ADD  CONSTRAINT [FK__TokenChallans__Token] FOREIGN KEY([TokenId])
REFERENCES [dbo].[_Token] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_TokenChallans] CHECK CONSTRAINT [FK__TokenChallans__Token]
GO
ALTER TABLE [dbo].[_TPDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__TPDetails_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TPDetails] CHECK CONSTRAINT [FK__TPDetails_InsertUserId]
GO
ALTER TABLE [dbo].[_TPDetails]  WITH CHECK ADD  CONSTRAINT [FK__TPDetails__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_TPDetails] CHECK CONSTRAINT [FK__TPDetails__Job]
GO
ALTER TABLE [dbo].[_TPDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__TPDetails__WorkOrderItems] FOREIGN KEY([WOItemId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_TPDetails] CHECK CONSTRAINT [FK__TPDetails__WorkOrderItems]
GO
ALTER TABLE [dbo].[_TPDetails]  WITH NOCHECK ADD  CONSTRAINT [FK__TPDetails_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_TPDetails] CHECK CONSTRAINT [FK__TPDetails_UpdateUserId]
GO
ALTER TABLE [dbo].[_TPJob]  WITH NOCHECK ADD  CONSTRAINT [FK__TPJob__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_TPJob] CHECK CONSTRAINT [FK__TPJob__Job]
GO
ALTER TABLE [dbo].[_TPJob]  WITH NOCHECK ADD  CONSTRAINT [FK__TPJob__TPDetails] FOREIGN KEY([TPId])
REFERENCES [dbo].[_TPDetails] ([Id])
GO
ALTER TABLE [dbo].[_TPJob] CHECK CONSTRAINT [FK__TPJob__TPDetails]
GO
ALTER TABLE [dbo].[_WOApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__WOApprovals__WOApprovalTypes] FOREIGN KEY([Status])
REFERENCES [dbo].[Accounts_ApprovalStatus] ([Id])
GO
ALTER TABLE [dbo].[_WOApprovals] CHECK CONSTRAINT [FK__WOApprovals__WOApprovalTypes]
GO
ALTER TABLE [dbo].[_WOApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK__WOApprovals1__WorkOrder] FOREIGN KEY([WOId])
REFERENCES [dbo].[_WorkOrder] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_WOApprovals] CHECK CONSTRAINT [FK__WOApprovals1__WorkOrder]
GO
ALTER TABLE [dbo].[_WorkOrder]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrder_Common_Client] FOREIGN KEY([ClientId])
REFERENCES [dbo].[Common_Client] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrder] CHECK CONSTRAINT [FK__WorkOrder_Common_Client]
GO
ALTER TABLE [dbo].[_WorkOrder]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrder_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrder] CHECK CONSTRAINT [FK__WorkOrder_InsertUserId]
GO
ALTER TABLE [dbo].[_WorkOrder]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrder__WOStatus] FOREIGN KEY([WOStatus])
REFERENCES [dbo].[_WOStatus] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrder] CHECK CONSTRAINT [FK__WorkOrder__WOStatus]
GO
ALTER TABLE [dbo].[_WorkOrder]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrder_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrder] CHECK CONSTRAINT [FK__WorkOrder_UpdateUserId]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH CHECK ADD  CONSTRAINT [FK__WorkOrderItems_i3MS_Circle] FOREIGN KEY([Circle])
REFERENCES [dbo].[i3MS_Circle] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_i3MS_Circle]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_InsertUserId]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems_LoadingPoints] FOREIGN KEY([LoadingPoint])
REFERENCES [dbo].[LoadingPoints] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_LoadingPoints]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems_Materials] FOREIGN KEY([Material])
REFERENCES [dbo].[Materials] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_Materials]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems__ClaimQtyType] FOREIGN KEY([ClaimQtyType])
REFERENCES [dbo].[_ClaimQtyType] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems__ClaimQtyType]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems__WorkOrder] FOREIGN KEY([OrderId])
REFERENCES [dbo].[_WorkOrder] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems__WorkOrder]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems_UnloadingPoints] FOREIGN KEY([UnLoadingPoint])
REFERENCES [dbo].[UnloadingPoints] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_UnloadingPoints]
GO
ALTER TABLE [dbo].[_WorkOrderItems]  WITH NOCHECK ADD  CONSTRAINT [FK__WorkOrderItems_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WorkOrderItems] CHECK CONSTRAINT [FK__WorkOrderItems_UpdateUserId]
GO
ALTER TABLE [dbo].[_WOSectorEscalation]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorEscalation__WorkOrderItems] FOREIGN KEY([SectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorEscalation] CHECK CONSTRAINT [FK__WOSectorEscalation__WorkOrderItems]
GO
ALTER TABLE [dbo].[_WOSectorGWt]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorGWt_Fleet_TyreNos] FOREIGN KEY([TyreNo])
REFERENCES [dbo].[Fleet_TyreNos] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorGWt] CHECK CONSTRAINT [FK__WOSectorGWt_Fleet_TyreNos]
GO
ALTER TABLE [dbo].[_WOSectorGWt]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorGWt__WorkOrderItems] FOREIGN KEY([WOSectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorGWt] CHECK CONSTRAINT [FK__WOSectorGWt__WorkOrderItems]
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorMaterialRate_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate] CHECK CONSTRAINT [FK__WOSectorMaterialRate_InsertUserId]
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorMaterialRate__WorkOrderItems] FOREIGN KEY([WOSectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate] CHECK CONSTRAINT [FK__WOSectorMaterialRate__WorkOrderItems]
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorMaterialRate_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorMaterialRate] CHECK CONSTRAINT [FK__WOSectorMaterialRate_UpdateUserId]
GO
ALTER TABLE [dbo].[_WOSectorRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorRate_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorRate] CHECK CONSTRAINT [FK__WOSectorRate_InsertUserId]
GO
ALTER TABLE [dbo].[_WOSectorRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorRate__Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[_Job] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorRate] CHECK CONSTRAINT [FK__WOSectorRate__Job]
GO
ALTER TABLE [dbo].[_WOSectorRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorRate__WorkOrderItems] FOREIGN KEY([WOSectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[_WOSectorRate] CHECK CONSTRAINT [FK__WOSectorRate__WorkOrderItems]
GO
ALTER TABLE [dbo].[_WOSectorRate]  WITH NOCHECK ADD  CONSTRAINT [FK__WOSectorRate_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOSectorRate] CHECK CONSTRAINT [FK__WOSectorRate_UpdateUserId]
GO
ALTER TABLE [dbo].[_WOShortageRules]  WITH NOCHECK ADD  CONSTRAINT [FK__WOShortageRules_Fleet_TyreNos] FOREIGN KEY([Tyre])
REFERENCES [dbo].[Fleet_TyreNos] ([Id])
GO
ALTER TABLE [dbo].[_WOShortageRules] CHECK CONSTRAINT [FK__WOShortageRules_Fleet_TyreNos]
GO
ALTER TABLE [dbo].[_WOShortageRules]  WITH NOCHECK ADD  CONSTRAINT [FK__WOShortageRules_InsertUserId] FOREIGN KEY([InsertUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOShortageRules] CHECK CONSTRAINT [FK__WOShortageRules_InsertUserId]
GO
ALTER TABLE [dbo].[_WOShortageRules]  WITH NOCHECK ADD  CONSTRAINT [FK__WOShortageRules__WorkOrderItems] FOREIGN KEY([SectorId])
REFERENCES [dbo].[_WorkOrderItems] ([Id])
GO
ALTER TABLE [dbo].[_WOShortageRules] CHECK CONSTRAINT [FK__WOShortageRules__WorkOrderItems]
GO
ALTER TABLE [dbo].[_WOShortageRules]  WITH NOCHECK ADD  CONSTRAINT [FK__WOShortageRules_UpdateUserId] FOREIGN KEY([UpdateUserId])
REFERENCES [dbo].[Users] ([Id])
GO
ALTER TABLE [dbo].[_WOShortageRules] CHECK CONSTRAINT [FK__WOShortageRules_UpdateUserId]
GO
ALTER TABLE [dbo].[UserBranchAccess]  WITH NOCHECK ADD  CONSTRAINT [FK_UserBranchAccess_UserBranchAccess_BranchId] FOREIGN KEY([BranchId])
REFERENCES [dbo].[Common_Branch] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserBranchAccess] CHECK CONSTRAINT [FK_UserBranchAccess_UserBranchAccess_BranchId]
GO
ALTER TABLE [dbo].[UserBranchAccess]  WITH NOCHECK ADD  CONSTRAINT [FK_UserBranchAccess_UserBranchAccess_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[Users] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserBranchAccess] CHECK CONSTRAINT [FK_UserBranchAccess_UserBranchAccess_UserId]
GO
ALTER TABLE [dbo].[UserPermissions]  WITH NOCHECK ADD  CONSTRAINT [FK_UserPermissions_Users] FOREIGN KEY([UserId])
REFERENCES [dbo].[Users] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserPermissions] CHECK CONSTRAINT [FK_UserPermissions_Users]
GO
ALTER TABLE [dbo].[UserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_UserRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[Roles] ([RoleId])
GO
ALTER TABLE [dbo].[UserRoles] CHECK CONSTRAINT [FK_UserRoles_RoleId]
GO
ALTER TABLE [dbo].[UserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_UserRoles_Users] FOREIGN KEY([UserId])
REFERENCES [dbo].[Users] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserRoles] CHECK CONSTRAINT [FK_UserRoles_Users]
GO
ALTER TABLE [dbo].[Users]  WITH NOCHECK ADD  CONSTRAINT [FK_Users_UserCategory] FOREIGN KEY([UserCategoryId])
REFERENCES [dbo].[UserCategory] ([Id])
GO
ALTER TABLE [dbo].[Users] NOCHECK CONSTRAINT [FK_Users_UserCategory]
GO
/****** Object:  StoredProcedure [dbo].[AA_AutoFilldetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AA_AutoFilldetails] (
@Type INT=0,
@Search VARCHAR(100)='',
@JobNo VARCHAR(200)=''
)

AS
DECLARE @data VARCHAR(8000)=''
SET @data = @Search

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	IF(@Type = 1)
	BEGIN
			SELECT JobNo FROM _Job WHERE JobNo Like '%'+@Search+'%' AND JobStatus=1
	END

	IF(@Type = 2)
	BEGIN
			SELECT Id,  Upper(Concat(Name, ' (', ClientCode, ') : ', BranchName)) AS Name
	  , ClientCode FROM Common_Client WHERE Name Like '%'+@Search+'%' 
	END

	IF(@Type = 3)
	BEGIN
			SELECT VehicleNo TruckNumber FROM Fleet_Vehicle WHERE VehicleNo Like '%'+@Search+'%'
	END

	IF(@Type = 4)
	BEGIN
			SELECT Upper(CONCAT(ISNULL(PT.PartyType,''), ':', IsNull(P.ContactNo,''), ':', IsNull(P.PartyName,''), ':' + IsNull(P.PANNumber,'') + ':', CONVERT(VARCHAR(10),P.Id))) AS PaidTo
			From Common_Parties P
			Left Join Common_PartyType PT On PT.Id = P.PartyType WHERE P.PartyName Like '%'+@Search+'%' OR P.PANNumber LIKE '%'+@Search+'%'
	END

	IF(@Type = 5)
	BEGIN
			SELECT Loading FROM LoadingPoints WHERE Loading Like '%'+@Search+'%'
	END

	IF(@Type = 6)
	BEGIN
			SELECT Unloading FROM UnloadingPoints WHERE Unloading Like '%'+@Search+'%'
	END

	IF(@Type = 7)
	BEGIN
			SELECT P.Id, Upper(CONCAT(IsNull(P.PartyName,''), ':' + IsNull(P.PANNumber,'') + ':', CONVERT(VARCHAR(10),P.Id))) AS Code FROM Common_Parties P
			LEFT JOIN Common_PartyType PT On PT.Id = P.PartyType WHERE P.PartyName Like '%'+@Search+'%' OR P.PANNumber LIKE '%'+@Search+'%' AND P.PartyType = 1
	END

	IF(@Type = 8)
	BEGIN
			SELECT P.Id, Upper(CONCAT(IsNull(P.PartyName,''), ':' + IsNull(P.PANNumber,'') + ':', CONVERT(VARCHAR(10),P.Id))) AS Code FROM Common_Parties P
			LEFT JOIN Common_PartyType PT On PT.Id = P.PartyType WHERE P.PartyName Like '%'+@Search+'%' OR P.PANNumber LIKE '%'+@Search+'%' AND P.PartyType = 4
	END

	IF(@Type = 9)
	BEGIN
			SELECT P.Id, Upper(CONCAT(IsNull(P.PartyName,''), ':' + IsNull(P.PANNumber,'') + ':', CONVERT(VARCHAR(10),P.Id))) AS Code FROM Common_Parties P
			LEFT JOIN Common_PartyType PT On PT.Id = P.PartyType WHERE P.PartyName Like '%'+@Search+'%' OR P.PANNumber LIKE '%'+@Search+'%' AND P.PartyType = 2
	END

	IF(@Type = 10)
	BEGIN
			SELECT LedgerName FROM Accounts_Ledgers WHERE LedgerName Like '%'+@Search+'%'
	END
	IF(@Type = 11)
	BEGIN
		SELECT LedgerName FROM _JobAdvanceLedger J
			INNER JOIN Accounts_Ledgers L ON L.Id=J.LedgerId
			INNER JOIN _Job T ON T.Id=J.JobId
			WHERE LedgerName Like '%'+@Search+'%' AND T.JobNo=@JobNo
	END
END



GO
/****** Object:  StoredProcedure [dbo].[Accounting_CreateBill]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Accounting_CreateBill]
	 @BillNo                  VARCHAR(50)
    ,@BillDate				  Date
    ,@PartyName				  VARCHAR(50)
    ,@Amount				  Decimal(18,2)
	,@BillType				  VARCHAR(50)  =NULL
    ,@ContactNumber			  VARCHAR(50)  =NULL
    ,@ServiceTaxAmount		  Decimal(18,2)  =0
    ,@VATAmount				  Decimal(18,2)  =0
    ,@InvoiceNo				  VARCHAR(50)  =NULL
    ,@InvoiceDate			  Date  =NULL
    ,@Remarks			      VARCHAR(50) =NULL
AS
BEGIN
	DECLARE @tempBillId INT = NULL;
	SELECT  @tempBillId = Id FROM [Accounts_Bills] WHERE [BillNo] = @BillNo
	IF @BillType IS NULL 
		SET @BillType = 'Manual'
	IF @tempBillId IS NULL OR @tempBillId = 0
	BEGIN
		INSERT INTO [dbo].[Accounts_Bills](
            [BillNo]
           ,[BillDate]
           ,[PartyName]
		   ,[Amount]
           ,[ContactNumber]
           ,[ServiceTaxAmount]
           ,[VATAmount]
           ,[InvoiceNo]
           ,[InvoiceDate]
           ,[Remarks]
		   ,[BillType]
		   ,IsAutoGenerated)
			 VALUES
			(
			 @BillNo            
			,@BillDate			
			,@PartyName			
			,@Amount			
			,@ContactNumber		
			,@ServiceTaxAmount	
			,@VATAmount			
			,@InvoiceNo			
			,@InvoiceDate		
			,@Remarks
			,@BillType
			,1			
			)
	END
	ELSE
	BEGIN 
		UPDATE [dbo].[Accounts_Bills]
		 SET [BillNo]					= @BillNo            
			,[BillDate]					= @BillDate			
			,[PartyName]				= @PartyName			
			,[ContactNumber]			= @ContactNumber			
			,[ServiceTaxAmount]			= @ServiceTaxAmount		
			,[VATAmount]				= @VATAmount	
			,[Amount]					= @Amount		
			,[InvoiceNo]				= @InvoiceNo			
			,[InvoiceDate]				= @InvoiceDate		
			,[Remarks]					= @Remarks
			,[BillType]					= @BillType
			,IsAutoGenerated			= 1
		WHERE 	Id  = @tempBillId	
	END 	   
	RETURN @tempBillId;
END
GO
/****** Object:  StoredProcedure [dbo].[Accounting_GetCostCenters]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Accounting_GetCostCenters] (@SearchText Varchar(100)  = NULL, @CostCenterId INT = null)
AS
DECLARE @data VARCHAR(8000)=''
SET @data = @SearchText

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
WITH Hierarchy(ChildId, ChildName, Generation, ParentId, CostCenterType, JobId, BranchId, OrderBy)
AS
(
    SELECT Id, Name, 0, ParentId, CostCenterType, JobId, BranchId,
	CAST(Id AS VARCHAR(MAX)) OrderBy
        FROM Accounts_CostCenters AS FirtGeneration
        WHERE ParentId IS NULL        
    UNION ALL
    SELECT NextGeneration.Id, NextGeneration.Name, Parent.Generation + 1, Parent.ChildId, 
	NextGeneration.CostCenterType, NextGeneration.JobId, NextGeneration.BranchId,
	CAST(Parent.OrderBy + '.' + CAST(Id AS VARCHAR(MAX)) as VARCHAR(MAX)) as OrderBy
        FROM Accounts_CostCenters AS NextGeneration
        INNER JOIN Hierarchy AS Parent ON NextGeneration.ParentId = Parent.ChildId    
)
SELECT 
	ChildId as Id, 
	Concat(Replicate('-',Generation), '',ChildName) as Name, 
	Generation as [Level], 
	ParentId, 
	CostCenterType, JobId, BranchId,
	Accounts_CostCentersTypes.[Type] as CostCenterTypeName
FROM Hierarchy 
Left Join Accounts_CostCentersTypes On Accounts_CostCentersTypes.Id = Hierarchy.CostCenterType
WHERE (@SearchText IS NULL OR ChildName Like '%' + @SearchText + '%') AND (@CostCenterId IS NULL OR ChildId  = @CostCenterId OR ParentId = @CostCenterId)
Order by OrderBy
OPTION(MAXRECURSION 32767)
END
GO
/****** Object:  StoredProcedure [dbo].[Accounting_GetCostCentersLedgers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Accounting_GetCostCentersLedgers] (
	@CostCenterId INT, 
	@FinancialYearId INT = NULL,
	@FromDate Date = NULL,
	@ToDate Date = NULL)
AS
BEGIN
	
	IF (@FinancialYearId IS NULL)
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;

	SElect Id as LedgerId, LedgerName, dbo.FN_Accounts_GetLedgerTransaction(Id, 0, @FinancialYearId, @FromDate, @ToDate) as Amount
	FROM Accounts_Ledgers
	Where Id in (Select LedgerId From Accounts_VoucherTransaction Where CostCenter IS NOT NULL AND CostCenter = @CostCenterId)
END
GO
/****** Object:  StoredProcedure [dbo].[Accounting_GetGroups]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Accounting_GetGroups] (@SearchText Varchar(100)  = NULL)
AS
DECLARE @data VARCHAR(8000)=''
SET @data = @SearchText

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
WITH Hierarchy(ChildId, ChildName, Generation, ParentId, GroupNature, SystemCreated, Remarks, OrderBy)
AS
(
    SELECT Id, Name, 0, ParentId, GroupNature, SystemCreated, Remarks, 
	CAST(Id AS VARCHAR(MAX)) OrderBy
        FROM Accounts_Groups AS FirtGeneration
        WHERE ParentId IS NULL        
    UNION ALL
    SELECT NextGeneration.Id, NextGeneration.Name, Parent.Generation + 1, Parent.ChildId, 
	NextGeneration.GroupNature, NextGeneration.SystemCreated, NextGeneration.Remarks, 
	CAST(Parent.OrderBy + '.' + CAST(Id AS VARCHAR(MAX)) as VARCHAR(MAX)) as OrderBy
        FROM Accounts_Groups AS NextGeneration
        INNER JOIN Hierarchy AS Parent ON NextGeneration.ParentId = Parent.ChildId    
)
SELECT 
	ChildId as Id, 
	Concat(Replicate('-',Generation), '',ChildName) as Name, 
	Generation as [Level], 
	ParentId, 
	GroupNature,
	SystemCreated, 
	Remarks, 
	NatureOfGroup as GroupNatureName
FROM Hierarchy 
Left Join Accounts_GroupsNature On Accounts_GroupsNature.Id = Hierarchy.GroupNature
WHERE (@SearchText IS NULL OR ChildName Like '%' + @SearchText + '%')
Order by OrderBy
OPTION(MAXRECURSION 32767)
END
GO
/****** Object:  StoredProcedure [dbo].[Accounting_UnauthBankLedgers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Accounting_UnauthBankLedgers](@UserId INT)
AS
BEGIN
	IF (@UserId = 3105)
	BEGIN
		SELECT Id  From vw_LedgerBanks Where 1 != 1
	END
	ELSE
	BEGIN
	SELECT Id  From vw_LedgerBanks Where 1 != 1
		--Select Id From vw_LedgerBanks Where Id  in (
		--Select LedgerId from Common_Branch Where Id in (
		--Select BranchId from UserBranchAccess Where UserId = @UserId)
		--Union
		--Select LedgerId from Accounts_Banks Where AssociatedBranch in (
		--Select BranchId from UserBranchAccess Where UserId = @UserId))
	END
END
GO
/****** Object:  StoredProcedure [dbo].[Accounting_UpdateBankReconciliation]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[Accounting_UpdateBankReconciliation] (
	@nType Varchar(50), 
	@VoucherId int, 
	@LedgerId int, 
	@Value varchar(5000)
)
AS

DECLARE @data VARCHAR(8000)=''
SET @data = @nType + @Value 

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	IF @nType = 'ReconDate'
	BEGIN
		DECLARE @ReconcileDate DATE = NULL
		SET @Value = REPLACE(@Value, '-', '/') 
		IF CHARINDEX('/',@Value) > 0
			SET @ReconcileDate = Convert(Date, @Value, 103)
		Update Accounts_VoucherTransaction Set ReconciliationDate = @ReconcileDate Where VoucherId = @VoucherId And LedgerId = @LedgerId
	END
	ELSE IF @nType = 'ReconRemark'
	BEGIN
		IF @Value = '' OR LEN(@Value) = 0
			SET @Value = NULL
		Update Accounts_VoucherTransaction Set ReconciliationRemarks = @Value Where VoucherId = @VoucherId And LedgerId = @LedgerId
	END
	ELSE
	BEGIN
		Declare @ErrorMsg Varchar(500) = ''
		SET @ErrorMsg = @nType + ' is not supported parameter in SP Accounting_UpdateBankReconciliation.'
		IF 1=1
			THROW 50000, @ErrorMsg, 1
	END
END

GO
/****** Object:  StoredProcedure [dbo].[Accounts_CreateBranchGroup]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Accounts_CreateBranchGroup](@BranchId INT)
AS
BEGIN
	DECLARE @BranchName Varchar(500)
	DECLARE @BranchCode Varchar(500)
	DECLARE @GroupId Varchar(500)
	DECLARE @GroupPrefix Varchar(500)
	DECLARE @UserId INT

	DECLARE @data VARCHAR(8000)=''
	SET @data = @BranchName + @BranchCode +  @GroupId + @GroupPrefix
	
	DECLARE @flag bit=0
	SELECT @flag = dbo.FN_EscapeSQLInjection(@data)
	
	IF @flag=0
		THROW 50000, 'SQL Server encountered exception', 1
	
	SELECT @BranchName = Name, @BranchCode = BranchCode, @GroupId = BranchGroupId, @UserId = IsNull(UpdateUserId, InsertUserId)  From Common_Branch Where Id = @BranchId
	SELECT @GroupPrefix = FieldValue From [Common_Settings] Where Id = 4 --Branch Account Group Suffix
	IF (@GroupId IS NOT NULL)
	BEGIN
		Update Accounts_Groups Set 
			Name = @BranchName + ' ' + @GroupPrefix,
			GroupNature = 1,
			ParentId = 31,
			UpdateUserId = @UserId
		WHERE Id = @GroupId
	END
	ELSE
	BEGIN
		Insert Into Accounts_Groups (Name, GroupNature, ParentId, Remarks, SystemCreated, InsertUserId)
		Values (@BranchName + ' ' + @GroupPrefix, 1, 31, '', 1, @UserId)
		SET @GroupId = SCOPE_IDENTITY()
		Update Common_Branch Set BranchGroupId = @GroupId Where Id = @BranchId
	END
END

GO
/****** Object:  StoredProcedure [dbo].[Accounts_FinalPayment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--EXEC Accounts_FinalPayment @challanlist='1,2,3,4', @voucherdate='2019-04-01', @newfreight=0, @paidfromledger=1
CREATE PROCEDURE [dbo].[Accounts_FinalPayment]
(
@ChallanList VARCHAR(5000)=null,
@VoucherDate DATE=null,
@NewFreight VARCHAR(10)=null,
@PaidFromLedger VARCHAR(200)=null
)
AS
BEGIN
	SELECT * INTO #ChallanList FROM (
	SELECT	Split.a.value('.', 'VARCHAR(100)') AS Challan
	FROM	
		(
			SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanList, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS Challan  
		) AS A CROSS APPLY Challan.nodes ('/M') AS Split(a)
	) XX

	
	UPDATE LoadingChallan SET OldFreightRate=Freight FROM LoadingChallan L
	INNER JOIN #ChallanList C ON C.Challan=CAST (L.ChallanNo AS VARCHAR)

	UPDATE LoadingChallan SET Freight=@NewFreight, TotalFreight=@NewFreight*NetWT FROM LoadingChallan L
	INNER JOIN #ChallanList C ON C.Challan=CAST (L.ChallanNo AS VARCHAR)

	
	DECLARE @FreightLedger INT=0
	DECLARE @FreightPayableLedger INT=0
	DECLARE @FinalPaymentLedger INT=0
	SELECT @FreightLedger=LedgerId FROM SystemLedger WHERE Description='FREIGHTTRANSPORT'
	SELECT @FreightPayableLedger=LedgerId FROM SystemLedger WHERE Description='FREIGHTPAYABLE'
	SELECT @FinalPaymentLedger=LedgerId FROM SystemLedger WHERE Description='FINALPAYMENT'
	
	DECLARE @AdvLedgerId INT=NULL
	SELECT @AdvLedgerId=LedgerId from SystemLedger WHERE [Description]='TRANSPORTATION ADV TRUCK OWNERS'
	IF @AdvLedgerId IS NULL
		THROW 50000,'Re-Advance ledger not set in system ledger',16	

	SELECT C.Challan, T.Id TransactionId, Y.Id PayTransactionId, T.VoucherId, T.Amount,  @FreightLedger LedgerId,   @FreightPayableLedger PayLedgerId, L.TotalFreight NewAmount, L.TotalFreight-T.Amount DiffAmount, P.PaidAmount NewAdvance, Y.Amount+(L.TotalFreight-T.Amount)-P.PaidAmount NetPayable INTO #ModifedTransactions FROM Accounts_Vouchers A
		INNER JOIN LoadingChallan L ON CAST(ChallanNo AS VARCHAR)=A.ReferenceNo
		INNER JOIN Payment P ON P.LoadingId=L.id
		INNER JOIN #ChallanList C ON CAST(Challan AS VARCHAR)=L.ChallanNo
		INNER JOIN Accounts_VoucherTransaction T ON T.VoucherId=A.Id AND T.LedgerId=@FreightLedger
		INNER JOIN Accounts_VoucherTransaction Y ON Y.VoucherId=A.Id AND Y.LedgerId=@FreightPayableLedger
	
	SELECT DISTINCT TokenId, TokenNo INTO #tempTokenid FROM _TokenChallans TC
		INNER JOIN _Token T ON T.Id=TC.TokenId
		INNER JOIN #ChallanList C ON C.Challan=TC.ChallanNo

	SELECT C.Challan, T.LedgerId, T.PaidOn, T.InsertUserId INTO #PayLedger FROM #ChallanList C 
		INNER JOIN _TokenChallans TC ON TC.ChallanNo=C.Challan
		INNER JOIN _Token T ON T.Id=TC.TokenId
		
	/*INSERT INTO Accounts_Vouchers ( VoucherDate, FinancialYear, VoucherType, Reftype, ReferenceNo, ReferenceId, Description, Status, InsertUserId, InsertDate, VoucherName, BranchId, PaymentMode, ChkNEFTDate, ChkNeftRefNo)
		SELECT A.VoucherDate, A.FinancialYear, A.VoucherType, 5, L.Challan, C.ChallanNo, 'Readvance to Challan '+L.Challan, 2, A.InsertUserId, A.InsertDate, A.VoucherName, A.BranchId, A.PaymentMode, A.ChkNEFTDate, A.ChkNeftRefNo FROM Accounts_Vouchers A
			INNER JOIN _Token T ON T.TokenNo=A.ReferenceNo
			INNER JOIN _TokenChallans C ON C.TokenId=T.id
			INNER JOIN #ChallanList L ON L.Challan=C.ChallanNo*/

	DELETE FROM Accounts_VoucherTransaction 
		WHERE VoucherId IN (SELECT ID FROM Accounts_Vouchers WHERE ReferenceNo IN (SELECT TokenNo FROM #tempTokenid))
			AND LedgerId IN (SELECT LedgerId FROM SystemLedger)
	
	INSERT INTO Accounts_VoucherTransaction (VoucherId, Ledgerid, TransactionType, Amount, fyid )
		SELECT VoucherId, @AdvLedgerId, 2, Amount, fyid FROM Accounts_VoucherTransaction 
			WHERE VoucherId IN (SELECT ID FROM Accounts_Vouchers WHERE ReferenceNo IN (SELECT TokenNo FROM #tempTokenid))

	UPDATE Accounts_Vouchers SET RefType=5, ReferenceNo='A-'+ReferenceNo WHERE ReferenceNo IN (SELECT TokenNo FROM #tempTokenid)

	Update Payment SET NetPayable=B.NetPayable, PaidAmount=B.PaidAmount FROM payment P
	INNER JOIN ( SELECT Challan, M.DiffAmount NetPayable, M.DiffAmount PaidAmount, L.Id LoadingId  FROM #ModifedTransactions M
		INNER JOIN LoadingChallan L ON L.ChallanNo=M.Challan) B ON B.LoadingId=P.LoadingId

	UPDATE _Token SET Amount=B.Amount, LedgerId=NULL, VoucherId=NULL, PaidOn=NULL, PaymentMode=1 FROM _Token A
	INNER JOIN (SELECT TokenId, SUM(PaidAmount) Amount FROM _Tokenchallans A 
					INNER JOIN LoadingChallan L ON L.ChallanNo=A.ChallanNo
					INNER JOIN Payment P ON P.LoadingId=L.id
					WHERE TokenId IN (SELECT TokenId FROM #TempTokenId) group by A.TokenId) B ON B.TokenId=A.Id 

	SELECT LoadingId, PaidAmount, PaidDate INTO #tempPayment FROM Payment P
		INNER JOIN LoadingChallan L ON L.Id=P.LoadingId
		INNER JOIN #ChallanList C ON C.Challan=L.ChallanNo
	
	UPDATE Accounts_VoucherTransaction SET Amount=M.NewAmount FROM Accounts_VoucherTransaction A
		INNER JOIN #ModifedTransactions M ON M.TransactionId=A.Id

	UPDATE Accounts_VoucherTransaction SET Amount=M.NetPayable FROM Accounts_VoucherTransaction A
		INNER JOIN #ModifedTransactions M ON M.PayTransactionId=A.Id

	DELETE FROM Accounts_VoucherTransaction WHERE VoucherId IN (SELECT VoucherId FROM #ModifedTransactions) AND Ledgerid=@FinalPaymentLedger
	
	INSERT INTO Accounts_VoucherTransaction(Voucherid, LedgerId, Amount, TransactionType)
		SELECT DISTINCT VoucherId, @AdvLedgerId, NewAdvance, 1 FROM #ModifedTransactions M
			INNER JOIN #PayLedger P ON P.Challan=M.Challan
	
	INSERT INTO LoadingAdvance(LoadingId, AdvanceType, PaymentMode, Amount, TDSDeduction, TDSRate, NetPayable, PaidOn, InsertDate, InsertUserId)
		SELECT DISTINCT L.Id, 1, 1, NewAdvance, 0, 0, NewAdvance, PaidOn, PaidOn, P.InsertUserId FROM #ModifedTransactions M
			INNER JOIN #PayLedger P ON P.Challan=M.Challan
			INNER JOIN LoadingChallan L ON CAST(L.ChallanNo AS VARCHAR)=P.Challan
	
	UPDATE LoadingChallan SET Advance=B.Advance, TotalAdvance=B.TotalAdvance FROM LoadingChallan A
	INNER JOIN 
	(SELECT DISTINCT L.Id, L.Advance+NewAdvance Advance, L.TotalAdvance+NewAdvance TotalAdvance FROM #ModifedTransactions M
			INNER JOIN #PayLedger P ON P.Challan=M.Challan
			INNER JOIN LoadingChallan L ON CAST(L.ChallanNo AS VARCHAR)=P.Challan) B ON B.Id=A.iD


END
GO
/****** Object:  StoredProcedure [dbo].[Accoutning_ServiceTaxReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Accoutning_ServiceTaxReport]
(@DateFrom Date, @DateTo Date, @ClientLedgerId INT = NULL, @STCategoryId INT = NULL)
As
BEGIN
	DECLARE @IsUSeFilter BIT = 0
	DECLARE @pDateFrom Date =@DateFrom
	DECLARE @pDateTo Date =@DateTo
	DECLARE @pClientLedgerId INT = @ClientLedgerId
	DECLARE @pSTCategoryId INT = @STCategoryId


	CREATE TABLE #VoucherIds (VId INT)
	IF @pClientLedgerId IS NOT NULL
	BEGIN
		SET @IsUSeFilter  = 1
		INSERT INTO #VoucherIds Select VoucherId From Accounts_VoucherTransaction VT Where LedgerId In (Select Id From Accounts_Ledgers Where Id = @pClientLedgerId)
	END
	IF @pSTCategoryId IS NOT NULL
	BEGIN
		SET @IsUSeFilter  = 1
		IF @pClientLedgerId IS NOT NULL
			INSERT INTO #VoucherIds Select VoucherId From Accounts_VoucherTransaction VT Where LedgerId In (Select Id From Accounts_Ledgers Where STCategory = @pSTCategoryId)
			AND VT.Id IN (Select VId From #VoucherIds)
		ELSE
			INSERT INTO #VoucherIds Select VoucherId From Accounts_VoucherTransaction VT Where LedgerId In (Select Id From Accounts_Ledgers Where STCategory = @pSTCategoryId)
	END

	Select V.Id as VoucherId, V.VoucherNo,  V.VoucherDate, R.[Type] as RefType, V.ReferenceNo, L.LedgerName, 
		IsNull(L.TaxPercentage, 0) as TaxRate, T.Amount, T.TransactionType as TType,
		SA.Abatement, DBO.Accounts_GetGroupHirerchy(G.Id) as GroupHirerchy, G.GroupNature, IsNull(STT.Name, STL.Name) as STCategory, (Case WHEN L.TaxType  = 1 THEN 1 ELSE 0 End) IsServiceTax
	From Accounts_VoucherTransaction T
	Left Join Accounts_Vouchers V On V.id = T.VoucherId 
	Left Join Accounts_Ledgers L On L.id = T.LedgerId
	Left Join Accounts_Groups G On G.id = L.[Group]
	Left Join Accounts_VouchersRefType R On R.id = V.RefType
	Left Join Accounts_STCategoryAbatement SA On SA.STCategoryId = L.STCategory And V.VoucherDate >= SA.DateFrom And V.VoucherDate <= IsNull(SA.DateTo, '2222-01-01')
	Left Join Accounts_STCategory STL On STL.Id = L.STCategory 
	Left Join Accounts_STCategory STT On STT.Id = T.STCategory 
	Where 1 = 1
	And V.Id in 
		(Select VoucherId From Accounts_VoucherTransaction VT Where LedgerId In 
			(Select Id From Accounts_Ledgers 
				Where TaxType = 1))
	AND V.VoucherDate >= @pDateFrom AND V.VoucherDate  <= @pDateTo
	AND (@IsUSeFilter = 0 OR V.Id IN (Select VId From #VoucherIds))
	Order By V.Id
END
-- Exec Accounting_STReport @pDateFrom='2016-07-01', @pDateTo='2016-07-31', @pSTCategoryId=1, @pClientLedgerId=1499

GO
/****** Object:  StoredProcedure [dbo].[Accoutning_TDSReportLedger]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Accoutning_TDSReportLedger] (
	@FromDate DATE, 
	@ToDate DATE, 
	@LedgerId INT = NULL, 
	@PANNO Varchar(50) = NULL,
	@PaymentMode INT = NULL,
	@TDSCategory INT = NULL,
	@BranchId INT = NULL)
AS
BEGIN

    DECLARE @data VARCHAR(8000)=''
	SET @data = @PANNO 
	
	DECLARE @flag bit=0
	SELECT @flag = dbo.FN_EscapeSQLInjection(@data)
	
	IF @flag=0
		THROW 50000, 'SQL Server encountered exception', 1


	DECLARE @pFromDate		DATE
	DECLARE @pToDate		DATE 
	DECLARE @pLedgerId		INT = NULL 
	DECLARE @pPANNO			Varchar(50) = NULL
	DECLARE @pPaymentMode	INT = NULL
	DECLARE @pTDSCategory	INT = null
	DECLARE @pBranchId      INT = NULL

	SET @pFromDate	 =  @FromDate	
	SET @pToDate		 = 	@ToDate		
	SET @pLedgerId	 = 	@LedgerId	
	SET @pPANNO		 = 	@PANNO		
	SET @pPaymentMode = 	@PaymentMode
	SET @pTDSCategory = 	@TDSCategory
	SET @pBranchId =  @BranchId 

Select 
	 V.Id as VoucherId
	,V.VoucherNo
	,V.VoucherDate
	,PM.Name as PaymentMode 
	,TT.TDSTypeName
	,VR.[Type] as RefType
	,V.ReferenceNo as RefNo
	,L.LedgerName
	,L.PANNo
	,VT.transactionType
	,VT.Amount
	,VT.TDSRate
	,Concat('['+TN.Section+'] ',IsNull(TN.DisplayName, TN.PaymentNature)) as NatureOfPayment
	,DBO.Accounts_GetGroupHirerchy(L.[Group]) as Groups
	,L.TaxType 
	,B.Name as BranchName
from Accounts_VoucherTransaction  VT
Inner Join (
	Select VoucherId from Accounts_VoucherTransaction  VT
	Left Join Accounts_Ledgers L On L.Id = VT.LedgerId
	Left Join Accounts_Vouchers V On V.Id = VT.VoucherId
	Where VT.TransactionType = 1 
	AND L.TaxType = 2 
	AND V.IsAutoGenerated = 0
	AND V.VoucherDate >= @pFromDate AND V.VoucherDate <= @pToDate
	AND (@pLedgerId IS NULL OR L.Id = @pLedgerId)
	AND (@pBranchId IS NULL OR V.BranchId = @pBranchId)
	AND (@pPANNO IS NULL OR L.PANNo = @pPANNO)
	AND (@pPaymentMode IS NULL OR IsNull(VT.PaymentMode, V.PaymentMode) = @pPaymentMode)
	AND (@pTDSCategory IS NULL OR L.TDSCategory = @pTDSCategory)
) XX On XX.VoucherId = VT.VoucherId
Left Join Accounts_Vouchers V On V.Id = VT.VoucherId
Left Join Accounts_Ledgers L On L.Id = VT.LedgerId
Left Join Accounts_TDSType TT On TT.Id = L.TDSCategory
Left Join Accounts_TDSNatureOfPayment TN On TN.Id = VT.TDSPaymentNature
Left Join Accounts_VouchersRefType VR On VR.Id = V.RefType
Left Join Accounts_PaymentMode PM On PM.Id = IsNull(VT.PaymentMode, V.PaymentMode)
Left Join Common_Branch B On B.Id = V.BranchId
Order By V.VoucherDate Desc, V.Id
END
GO
/****** Object:  StoredProcedure [dbo].[Accoutning_TDSReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Accoutning_TDSReport](
 @DateFrom DATE = NULL
,@DateTo DATE = NULL
,@PartyId INT = NULL
,@PanNumber Varchar(50) = NULL
,@PaymentModeId INT = NULL
,@DeducteeType  INT = NULL
,@BranchId INT = NULL
,@AllRecordsWOTDS INT  =NULL
,@TokenApproved INT  =NULL
) 
AS 
BEGIN

    DECLARE @data VARCHAR(8000)=''
	SET @data = @PanNumber 
	
	DECLARE @flag bit=0
	SELECT @flag = dbo.FN_EscapeSQLInjection(@data)
	
	IF @flag=0
		THROW 50000, 'SQL Server encountered exception', 1


	DECLARE @pDateFrom DATE = @DateFrom
	DECLARE @pDateTo DATE = @DateTo
	DECLARE @pPartyId INT = @PartyId
	DECLARE @pPanNumber Varchar(50) = @PanNumber
	DECLARE @pPaymentModeId INT = @PaymentModeId
	DECLARE @pDeducteeType  INT = @DeducteeType
	DECLARE @pBranchId INT = @BranchId
	DECLARE @pTDSAmount Decimal(18,2)= 0.01
	IF (@AllRecordsWOTDS = 1)
		SET @pTDSAmount = 0.00
	--Declare @pDateFrom Date = '2016-12-01'
	--Declare @pDateTo Date = '2016-12-31'
	Select * From (
		Select 
		 --V.VoucherDate as PaymentDate 
		CONVERT(DATE, T.ReceivedOn) as PaymentDate 
		,L.ChallanNo as InvoiceNo
		,IsNull(L.Other, 0.0) as ATC
		,'Balance' as InvoiceType
		,'Balance' as NatureOfPayment
		, (Case When P.PaidToId = L.OwnerId Then 'Owner' Else 'Third Party' End) as DeducteeType
		,PP.PartyName  as PartyName
		,PP.PANNumber  as PANNumber
		,PP.Address  as PAddress
		,PS.PanStatusName as PanStatus
		,(L.Freight * ISNULL(P.EffectiveWt,0)) as BillingAmount
		--,ROUND(IsNull(P.TDSRate, 0.0),2) as TdsRate
		,ROUND(IsNull(CASE WHEN PP.PANNumber IS NULL THEN X.RateWithOutPAN ELSE X.RateWithPAN END, 0.0),2) as TdsRate
		,IsNull(P.TDSAmount, 0.0) as TDSAmount
		,(L.TotalFreight+IsNull(P.Tollgate,0)+IsNull(L.Other,0)-IsNull(P.Penalty,0)-IsNull(P.ChallanDeduction,0)-IsNull(P.ChallanLost,0)) as NetPaid
		,PM.Name PaymentMode
		,B.Name as BranchName
		,CASE WHEN VoucherNo IS NULL THEN '' ELSE VoucherNo END VoucherNo
		,CASE WHEN VoucherId IS NULL THEN 0 ELSE VoucherId END VoucherId
		, VehicleNo
		,T.TokenNo
	from Payment P
	Left Join LoadingChallan L On L.Id = P.LoadingId
	Left Join _Job J On J.Id = L.JobId
	Left Join Fleet_Vehicle F On F.Id = L.TruckId
	Left Join _TokenChallans TC On TC.ChallanNo = L.ChallanNo
	Left Join _Token T On T.Id = TC.TokenId
	Left Join Accounts_Vouchers V On V.Id = T.VoucherId
	Left Join Common_Branch B On B.LedgerId = J.LedgerId
	Left Join Common_Parties PP On PP.Id = L.OwnerId--T.PartyId
	left join (SElECT * FROM Accounts_TDSSettings TD WHERE Id IN (SELECT Max(Id) FROM Accounts_TDSSettings WHERE DateTo IS NULL GROUP BY TDSTypeId)) X ON X.Id=PP.TDSType
	Left Join vw_PartyPanStatus PS On PS.PartyId = PP.Id
	Left Join Accounts_PaymentMode PM On PM.Id = P.PaymentMode
	Where  
	--P.PaidDate  >= @pDateFrom And P.PaidDate <= @pDateTo 
	 T.ReceivedOn  >= @pDateFrom And T.ReceivedOn <= @pDateTo 
	--V.VoucherDate  >= @pDateFrom And V.VoucherDate <= @pDateTo 
	--And T.VoucherId Is Not Null 
	--And V.Status not in (1,5)
	AND (@PartyId IS NULL OR PP.Id = @PartyId)
	AND (@pPanNumber IS NULL OR PP.PANNumber = @pPanNumber)
	AND (@pPaymentModeId IS NULL OR P.PaymentMode = @pPaymentModeId)
	AND (@pBranchId IS NULL OR B.Id = @pBranchId)
	AND (@pDeducteeType IS NULL OR PP.TDSType = @pDeducteeType)
	AND (@TokenApproved IS NULL OR (1 = @TokenApproved AND T.TokenStatus=4)  OR (0 = @TokenApproved AND T.TokenStatus<>4))

	) XX
	Where (@AllRecordsWOTDS = 1 OR XX.TDSAmount >= @pTDSAmount)
	Order By XX.PaymentDate
	
END

GO
/****** Object:  StoredProcedure [dbo].[Accoutning_TDSSummary]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Accoutning_TDSSummary]
AS
BEGIN
	Declare @StartDate DATE
	Declare @EndDate DATE
	SELECT @StartDate = StartDate, @EndDate = EndDate  From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	Select L.LedgerName, M.ShortMonthName as [MonthName], M.Id As MonthId
		,Sum((Case When VT.TransactionType = 1 THEN VT.Amount ELSE 0 END)) as CR
		,Sum((Case When VT.TransactionType = 2 THEN VT.Amount ELSE 0 END)) as DR
	From Accounts_VoucherTransaction VT
	Left Join Accounts_Vouchers V On  V.Id = VT.VoucherId  
	Left Join Accounts_Ledgers L On  L.Id = VT.LedgerId  
	Left Join Accounts_MonthNames M On M.Id = Month(V.VoucherDate)
	Where L.TaxType = 2 And VoucherDate >= @StartDate And VoucherDate <= @EndDate  AND V.Status Not IN (1,5)
	Group By L.LedgerName, M.ShortMonthName,  M.FinancialYearOrder, M.Id
	Order By L.LedgerName, M.FinancialYearOrder
END

GO
/****** Object:  StoredProcedure [dbo].[Acounting_CreateInvoiceOnAccVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Acounting_CreateInvoiceOnAccVoucher] (@OnAccRowId INT)
As
Begin
	Declare @VoucherId INT  = NULL
	Declare @PaymentLedgerId INT  = NULL
	Declare @ClientLedgerId	 INT = NULL
	Declare @Amount Decimal(18,2) = 0.0
	Declare @Narration Varchar(5000)
	Declare @VoucherDate Date
	Declare @InsertById INT
	DECLARE @trancount int = NULL
	DECLARE @UserBranchId int = NULL
	DECLARE @PaymentMode INT
	DECLARE @ChkNeftRefNo Varchar(50)
	DECLARE @FinancialYearId INT
	DECLARE @VoucherRefType INT = 8 -- Invoice On Acc Payment
	DECLARE @VoucherRefId INT
	DECLARE @VoucherRefNo Varchar(50)

	Select 
		 @ClientLedgerId = C.LedgerId 
		,@VoucherId = IA.VoucherId
		,@PaymentLedgerId = IA.LedgerId
		,@Amount = IA.Amount
		,@Narration = IA.Remarks
		,@VoucherDate = IA.PaymentDate
		,@InsertById = IsNull(IA.UpdateUserId, IA.InsertUserId)
		,@ChkNeftRefNo = IA.NeftChkRefNo
		,@VoucherREfNo = RefNo
		,@VoucherRefId = IA.Id
		,@PaymentMode = IA.PaymentMode
	From _InvoicePaymentOnAcc IA
	Inner Join Common_Client C On C.Id = IA.ClientId
	Where IA.Id = @OnAccRowId

	IF @VoucherId IS NOT NULL
	BEGIN
		DECLARE @VoucherTempStatus INT = 0
		SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
		IF @VoucherTempStatus IS NOT NULL AND @VoucherTempStatus in (4) -- Approved
			THROW 50000, 'Voucher has been approved. Can not modify the payment. Reject the voucher to make modification.', 16
	END

	Select @UserBranchId = BranchId From Users Where Id = @InsertById
	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
	SET @trancount = @@trancount;
	BEGIN TRY
		if @trancount = 0
			begin transaction
		else
			save transaction [sp_paymentvoucher]; 

		IF @VoucherId IS NULL
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo)
			VALUES
				(NULL,
				@VoucherDate,
				3, -- 'RECEIPT',
				2, -- Submitted 
				@InsertById,
				GETDATE(),
				@Narration,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@VoucherDate,
				VoucherType = 3, -- Receipt,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Description]=@Narration,
				[Status] = 2,
				FinancialYear=@FinancialYearId
				,RefType = @VoucherRefType
				,ReferenceNo = @VoucherRefNo
				,ReferenceId = @VoucherRefId
				,PaymentMode = @PaymentMode
				,ChkNeftRefNo = @ChkNeftRefNo
			WHERE Id = @VoucherId
		END

		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@ClientLedgerId,NULL,1, @Amount)

		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@PaymentLedgerId,NULL,2, @Amount)

		Update _InvoicePaymentOnAcc Set VoucherId = @VoucherId Where Id  = @OnAccRowId
		if @trancount = 0
			commit;

	END TRY
	BEGIN CATCH
		declare @error int, @message varchar(4000), @xstate int;
		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [sp_paymentvoucher];

		raiserror ('Error: %s', 16, 1, @message) ;
	END CATCH
End
GO
/****** Object:  StoredProcedure [dbo].[Acounting_DailyBranchClosing]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ------------------------------------------------------------------------------------------------------------------------------------------------
-- ------------------------------------------------------------------------------------------------------------------------------------------------

Create Procedure [dbo].[Acounting_DailyBranchClosing](
@FromDate Date,
@ToDate Date,
@LedgerId INT)
AS
BEGIN
	DECLARE	@pFromDate Date
	DECLARE @pToDate Date
	DECLARE @pLedgerId INT

	SET @pFromDate = @FromDate;
	SET @pToDate = @ToDate;
	SET @pLedgerId = @LedgerId;

	Select 
		 V.VoucherDate
		,Sum(Case When TransactionType = 1 Then Amount Else 0 END) as Credit
		,Sum(Case When TransactionType = 2 Then Amount Else 0 END) as Debit
	from Accounts_VoucherTransaction VT
	Left Join Accounts_Ledgers L ON L.Id = VT.LedgerId
	Left Join Accounts_Vouchers V ON V.Id = VT.VoucherId
	Where LedgerId = @pLedgerId And V.VoucherDate >= @pFromDate And V.VoucherDate <= @pToDate
	Group BY V.VoucherDate 
	Order BY V.VoucherDate
END

GO
/****** Object:  StoredProcedure [dbo].[Acounting_DailyLedgerReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- exec [Acounting_DailyLedgerReport] @LedgerId=1149 select * from accounts_ledgers where id=6562

CREATE PROCEDURE [dbo].[Acounting_DailyLedgerReport]
	@LedgerId INT = NULL
AS
BEGIN
	DECLARE @pLedgerId INT
	DECLARE @pFinancialYearId INT
	DECLARE @pFromDate Date=GETDATE()
	DECLARE @pToDate Date=GETDATE()
	
	SET @pLedgerId = @LedgerId
	SELECT @pFinancialYearId = Id  FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate
	
	IF (@pLedgerId IS NULL)
		THROW 50000, 'Pass any one between @pLedgerId and @pVoucherStampId.',1; 
	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	Select  VoucherId, VoucherNo, OVoucherDate, VType, LegderId, LedgerName, CostCenter, TName, Amount, ChkNeftRefNo, ReconciliationDate, ReconciliationRemarks
			, Narration, Status, ReferenceNo, IsAutoGenerated,  CONVERT(varchar, XX.OVoucherDate, 103) as VoucherDate
			, Concat(Convert(varchar(50),Abs(XX.Amount)), ' ', Convert(varchar(50),XX.TName))  as DisplayAmount
	into #temp
	From (Select 
		V.Id as VoucherId, 
		V.VoucherNo, 
		V.VoucherDate as OVoucherDate, 
		VT.VType, 
		L.Id as LegderId,
		L.LedgerName,   --select top 100 * from accounts_ledgers
		''  as CostCenter, --C.Name 
		T.Name as TName,
		Sum(CASE WHEN VLT.TransactionType = 1 THEN -VLT.Amount ELSE VLT.Amount END) as Amount,
		IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo) as  ChkNeftRefNo, 
		VLT.ReconciliationDate, 
		VLT.ReconciliationRemarks, 
		V.[Description] As Narration
		,V.Status
		,V.ReferenceNo
		,V.IsAutoGenerated
	From Accounts_VoucherTransaction VLT
	LEFT JOIN Accounts_Vouchers V On V.Id = VLT.VoucherId
	LEFT JOIN Accounts_VoucherType VT On VT.Id = V.VoucherType
	LEFT JOIN Accounts_Ledgers L On L.Id = VLT.LedgerId
	LEFT JOIN Accounts_CostCenters C On C.Id = VLT.CostCenter
	LEFT JOIN Accounts_TransactionType T On T.Id = VLT.TransactionType
	--LEFT JOIN Helper_TempLedgerReport TempR ON TempR.VoucherId = V.Id
	Where 
		V.FinancialYear = @pFinancialYearId 
		AND (@pLedgerId  IS NULL OR VLT.LedgerId = @pLedgerId )
		--AND (@pVoucherStampId  IS NULL OR VLT.VoucherId  = TempR.VoucherId)
		AND (V.Status in (2,3,4)) -- Approved
		AND ((V.VoucherDate >= CONVERT(DATE,@pFromDate,102) And V.VoucherDate <=CONVERT(DATE,@pToDate,102)) OR @pFromDate IS NULL OR @pToDate IS NULL) 
	Group By V.Id, VoucherNo, VoucherDate, VType, L.Id, LedgerName, T.Name, IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo), VLT.ReconciliationDate, VLT.ReconciliationRemarks, V.[Description], [Status], V.ReferenceNo, V.IsAutoGenerated
		) XX
	Order By OVoucherDate Asc
	-- Exec [Acounting_GetLedgerReportData] @pLedgerId=33, @pFromDate='2016-06-01', @pToDate='2016-06-30', @pApprovalType=1

	DECLARE @Opening DECIMAL(18,2)=0.0
	SET @Opening= dbo.[FN_Accounts_GetOnDateLedgerOpening] (@LedgerId, 0, @pFinancialYearId, GETDATE())

	
	SELECT 
	   SS.Id VoucherId, REPLACE(
	   STUFF((SELECT '$$$' + L.LedgerName + ' : ' + (CASE WHEN US.TransactionType = 1 THEN  CAST( US.Amount as varchar)+' Cr' ELSE CAST( US.Amount as varchar) +' Dr' END)
			  FROM Accounts_VoucherTransaction US
			  LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=US.LedgerId
			  WHERE US.VoucherId = SS.Id
			  ORDER BY VoucherId
			  FOR XML PATH('')), 1, 3, ''),'$$$','<br>') Transactions INTO #temp1
		FROM Accounts_Vouchers SS
		WHERE CONVERT(DATE, SS.VoucherDate, 102)= CONVERT(DATE, GETDATE(), 102)
		GROUP BY SS.Id, SS.VoucherNo
		ORDER BY 1

	SELECT 
		ROW_NUMBER() Over (Order by XX.VoucherId) As SNo, XX.VoucherDate, YY.Transactions, ChkNeftRefNo, VType VoucherType, XX.VoucherNo
		,CumulativeAmount, Amount
		, CASE WHEN Amount<0 THEN -Amount ELSE NULL END CrTotal, CASE WHEN Amount>0 THEN Amount ELSE NULL END DrTotal  --exec [Acounting_DailyLedgerReport] @LedgerId=1149
		,'<tr><td>'+CAST(ROW_NUMBER() Over (Order by XX.VoucherId) as VARCHAR) +'</td><td>'+XX.VoucherDate+'</td><td>'+YY.Transactions+'<br><br><i>'+Narration+'</i></td><td>'+IsNull(ChkNeftRefNo,'') +'</td><td>'+VType+'</td><td>'+VoucherNo+'</td><td>'+IsNull(CAST(CASE WHEN Amount>0 THEN Amount ELSE NULL END as varchar),'') +'</td><td>'+ IsNull(CAST(CASE WHEN Amount<0 THEN -Amount ELSE NULL END as VARCHAR),'')  +'</td><td>'+CAST(CumulativeAmount as VARCHAR)+'</td></tr>' PrintData
		INTO #temp2
	 FROM (
	SELECT t1.VoucherId, t1.VoucherNo, t1.OVoucherDate, t1.VType, t1.LegderId, t1.LedgerName, t1.CostCenter, t1.TName, t1.Amount, t1.ChkNeftRefNo, t1.ReconciliationDate
			, t1.ReconciliationRemarks, t1.Narration, t1.Status, t1.ReferenceNo, t1.IsAutoGenerated,  t1.VoucherDate, t1.DisplayAmount
			, @Opening+SUM(t2.Amount) as CumulativeAmount
	FROM #temp t1
	INNER JOIN #temp t2 on t1.VoucherId >= t2.VoucherId
	GROUP BY t1.VoucherId, t1.VoucherNo, t1.OVoucherDate, t1.VType, t1.LegderId, t1.LedgerName, t1.CostCenter, t1.TName, t1.Amount, t1.ChkNeftRefNo, t1.ReconciliationDate
			, t1.ReconciliationRemarks, t1.Narration, t1.Status, t1.ReferenceNo, t1.IsAutoGenerated,  t1.VoucherDate, t1.DisplayAmount
		) XX
	LEFT OUTER JOIN #temp1 YY ON YY.VoucherId=XX.VoucherId
	ORDER BY XX.VoucherId

 	Declare @val Varchar(MAX)='';
	DECLARE @CRTotal DECIMAL=0.00
	DECLARE @DRTotal DECIMAL=0.00
	Select @val = COALESCE(@val + ', ' + PrintData, PrintData) From #temp2
	SELECT @CRTotal = SUM(CrTotal), @DRTotal=SUM(DrTotal) FROM #temp2
	DECLARE @Closing DECIMAL(18,2)=0.0
	SET @Closing =  dbo.[FN_Accounts_GetLedgerClosingBalance](@LedgerId, @pFinancialYearId, GETDATE())
	--select @val
	Select '<table border="1px" width="100%" style="font-family:verdana;font-size:10px;border-spacing:0"><tr style="font-weight:bold;align:center;background-color:#DDDDDD"><td>S.No</td><td>Date</td><td>Particulars</td><td>Cheque/NEFT</td><td>Type</td><td>Voucher No</td><td>Debit</td><td>Credit</td><td>Cummulative</td></tr><tr><td colspan=9 align="right"><b>Opening Balance : '+Cast(IsNull(@Opening,0.00) as Varchar)+'</b></td></tr>'+ REPLACE(LTRIM(RTRIM(REPLACE(@val, ',', ' '))), ' ', ',')+'<tr  align="right"  style="font-weight:bold"><td colspan=6 align="right">Total</td><td>'+Cast(IsNull(@DRTotal,0.00) as Varchar)+'</td><td>'+Cast(IsNull(@CRTotal,0.00) as Varchar)+'</td><td>'+Cast(IsNull(@Closing,0.00) as Varchar)+'</td></tr><tr  style="font-weight:bold"><td colspan=9 align="right">Closing Balance : '+Cast(IsNull(@Closing,0.00) as Varchar)+'</td></tr></table>'
	
	
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_DeleteInvoiceVoucherById]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Acounting_DeleteInvoiceVoucherById]
	@VoucherId INT,
	@InvoiceId INT=NULL
AS
BEGIN
	DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @trancount INT = NULL
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated From Accounts_Vouchers Where Id = @VoucherId
	
	IF (@VoucherStatus IS NOT NULL And ((@IsAutoGenerated  = 0 AND @VoucherStatus NOT IN (1,5)) OR (@IsAutoGenerated  = 1 AND @VoucherStatus NOT IN (1,5))))
		THROW 50000, 'Voucher has been created, Can not be deleted. Please reject the voucher to delete it.', 1

	IF @InvoiceId IS NOT NULL AND EXISTS (SELECT 1 FROM _InvoicePayment WHERE InvoiceId=@InvoiceId)
		THROW 50000, 'Payments received against this invoice, please delete payments.', 1
	
	SET @trancount = @@trancount;
	BEGIN TRY
		if @trancount = 0
			begin transaction
		else
			save transaction [DeleteInvoiceVoucherById]; 
		
		DELETE FROM Accounts_VoucherTransactionBills Where TransactionId IN (SELECT Id FROM Accounts_VoucherTransaction Where VoucherId = @VoucherId)
		DELETE FROM Accounts_VoucherTransaction Where VoucherId = @VoucherId
		DELETE FROM Accounts_Vouchers Where Id = @VoucherId
	if @trancount = 0
			commit;
	END TRY
	BEGIN CATCH
		declare @error int, @message varchar(4000), @xstate int;
		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [DeleteInvoiceVoucherById];
		raiserror ('[DeleteInvoiceVoucherById]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_DeleteVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Acounting_DeleteVoucher]
	@VoucherType INT = NULL,
	@VoucherRefType INT,
	@VoucherRefId INT
AS
BEGIN
	DECLARE @trancount INT = NULL
	DECLARE @VoucherStatus INT = NULL
	SELECT @VoucherStatus = [Status] From Accounts_Vouchers Where (@VoucherType IS NULL OR VoucherType = @VoucherType)
	AND RefType = @VoucherRefType
	AND ReferenceId = @VoucherRefId

	IF (@VoucherStatus IS NOT NULL And @VoucherStatus = 4)
		THROW 50000, 'Voucher has been approved, Can not be deleted.', 1
	SET @trancount = @@trancount;
	BEGIN TRY
		if @trancount = 0
			begin transaction
		else
			save transaction [Acounting_DeleteVoucher]; 

		Update Payment Set PVoucherId = NULL WHERE PVoucherId in (Select Id FROM Accounts_Vouchers 
		Where (@VoucherType IS NULL OR VoucherType = @VoucherType)
		AND RefType = @VoucherRefType
		AND ReferenceId = @VoucherRefId)

		Select Id VoucherId INTO #Vouchers FROM Accounts_Vouchers 
		Where (@VoucherType IS NULL OR VoucherType = @VoucherType)
		AND RefType = @VoucherRefType
		AND ReferenceId = @VoucherRefId
		 
		DELETE FROM Accounts_VoucherTransactionBills WHERE TransactionId IN (SELECT Id from Accounts_VoucherTransaction WHERE VoucherId IN (SELECT VoucherId FROM #Vouchers))
		DELETE from Accounts_VoucherTransaction WHERE VoucherId IN (SELECT VoucherId FROM #Vouchers)
		DELETE FROM Accounts_Vouchers 
		Where (@VoucherType IS NULL OR VoucherType = @VoucherType)
		AND RefType = @VoucherRefType
		AND ReferenceId = @VoucherRefId
	if @trancount = 0
			commit;

	END TRY
	BEGIN CATCH
		declare @error int, @message varchar(4000), @xstate int;
		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [Acounting_DeleteVoucher];

		raiserror ('[Acounting_DeleteVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_DeleteVoucherById]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Acounting_DeleteVoucherById]
	@VoucherId INT
AS
BEGIN
	DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @trancount INT = NULL
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated From Accounts_Vouchers Where Id = @VoucherId
	IF (@VoucherStatus IS NOT NULL And ((@IsAutoGenerated = 0 AND @VoucherStatus NOT IN (5)) OR (@IsAutoGenerated = 1 AND @VoucherStatus NOT IN (5))))
		THROW 50000, 'Voucher has been created, Can not be deleted. Please reject the voucher to delete it.', 1
	SET @trancount = @@trancount;
	BEGIN TRY
		if @trancount = 0
			begin transaction
		else
			save transaction [Acounting_DeleteVoucherById]; 
		Update Payment Set PVoucherId = NULL WHERE PVoucherId =  @VoucherId
		DELETE FROM Accounts_VoucherTransactionBills Where TransactionId IN (SELECT Id FROM Accounts_VoucherTransaction Where VoucherId = @VoucherId)
		DELETE FROM Accounts_VoucherTransaction Where VoucherId = @VoucherId
		DELETE FROM Accounts_Vouchers Where Id = @VoucherId
	if @trancount = 0
			commit;
	END TRY
	BEGIN CATCH
		declare @error int, @message varchar(4000), @xstate int;
		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [Acounting_DeleteVoucherById];
		raiserror ('[Acounting_DeleteVoucherById]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetCashFlowData]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Acounting_GetCashFlowData]  (
@FinancialYearId INT  = NULL,
@FromDate DATE,
@ToDate DATE)
AS
BEGIN 
	Select G1.Name as GroupName, T1.TransactionType as TType, Sum(IsNull(Amount,0)) As Amount From Accounts_VoucherTransaction T1
	Left Join Accounts_Vouchers V1  On V1.Id = T1.VoucherId
	Left Join Accounts_Ledgers L1  On L1.Id = T1.LedgerId
	Left Join Accounts_Groups G1  On G1.Id = L1.[Group]
	Where VoucherId In (
		Select VoucherId from Accounts_VoucherTransaction T
		Inner Join Accounts_Ledgers L On L.Id = T.LedgerId
		Where [Group] = 18)
	AND V1.VoucherDate >= @FromDate AND V1.VoucherDate <= @ToDate
	Group BY  G1.Name, T1.TransactionType
END
GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetLedgerReportData]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Acounting_GetLedgerReportData]
	@LedgerId INT = NULL,
	@VoucherStampId BIGINT = NULL,
	@FinancialYearId INT = NULL,
	@FromDate Date = NULL,
	@ToDate Date = NULL,
	@ChkNeftRefNo Varchar(50) = NULL,
	@ApprovalType INT = 1,
	@IsAutoGenerated INT = NULL,
	@VoucherType INT = NULL,
	@IsReconcile INT= NULL

AS

DECLARE @data VARCHAR(8000)=''
SET @data = @ChkNeftRefNo

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @pLedgerId INT
	DECLARE @pVoucherTempID INT
	DECLARE @pFinancialYearId INT
	DECLARE @pFromDate Date
	DECLARE @pToDate Date
	DECLARE @pVoucherStampId BIGINT
	DECLARE @pChkNeftRefNo  Varchar(50)
	DECLARE @pApprovalType INT
	DECLARE @pVoucherType INT
	SET @pLedgerId = @LedgerId
	SET @pFinancialYearId = @FinancialYearId
	SET @pFromDate = @FromDate
	SET @pToDate = @ToDate
	SET @pApprovalType = @ApprovalType
	SET @pChkNeftRefNo = @ChkNeftRefNo
	SET @pVoucherStampId = @VoucherStampId
	SET @pVoucherType = @VoucherType
	IF (@pLedgerId IS NULL AND @pVoucherStampId IS NULL)
		THROW 50000, 'Pass any one between @pLedgerId and @pVoucherStampId.',1; 
	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	SELECT DISTINCT VoucherId VId INTO #VoucherList FROM Accounts_VoucherTransaction WHERE LedgerId=@pLedgerId
	
	Select  XX.*, CONVERT(varchar, XX.OVoucherDate, 103) as VoucherDate, Concat(Convert(varchar(50),Abs(XX.Amount)), ' ', Convert(varchar(50),XX.TName))  as DisplayAmount 
	--into tatakol
	From (Select 
		V.Id as VoucherId, 
		V.VoucherNo, 
		V.VoucherDate as OVoucherDate, 
		VT.VType, 
		L.Id as LegderId,
		L.LedgerName, 
		''  as CostCenter, --C.Name 
		T.Name as TName,
		Sum(CASE WHEN VLT.TransactionType = 1 THEN -VLT.Amount ELSE VLT.Amount END) as Amount,
		IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo) as  ChkNeftRefNo, 
		VLT.ReconciliationDate, 
		VLT.ReconciliationRemarks, 
		V.[Description] As Narration
		,V.Status
		,V.ReferenceNo
		,V.IsAutoGenerated
		,U.UserName
	From #VoucherList VL
	INNER JOIN Accounts_VoucherTransaction VLT ON VL.VId=VLT.VoucherId
	LEFT JOIN Accounts_Vouchers V On V.Id = VLT.VoucherId
	LEFT JOIN Accounts_VoucherType VT On VT.Id = V.VoucherType
	LEFT JOIN Accounts_Ledgers L On L.Id = VLT.LedgerId
	LEFT JOIN Accounts_CostCenters C On C.Id = VLT.CostCenter
	LEFT JOIN Accounts_TransactionType T On T.Id = VLT.TransactionType
	LEFT JOIN Users U On U.Id =V.InsertUserId
--	LEFT JOIN Helper_TempLedgerReport TempR ON TempR.VoucherId = V.Id

	Where 	      
		 V.FinancialYear = @pFinancialYearId 
		AND VLT.VoucherId IN (SELECT VoucherId FROM Accounts_VoucherTransaction WHERE LedgerId=@pLedgerId)
		AND (@pApprovalType = 2 OR (@pApprovalType = 1 AND V.Status in (2,3,4)) OR (@pApprovalType = 0 AND V.Status in (1,5))) -- Approved
		AND ((V.VoucherDate >= CONVERT(DATE,@pFromDate,102) And V.VoucherDate <=CONVERT(DATE,@pToDate,102)) OR @pFromDate IS NULL OR @pToDate IS NULL) 
		AND (@pChkNeftRefNo IS NULL OR IsNull(V.ChkNeftRefNo,'-1') = @pChkNeftRefNo OR IsNull(VLT.ChkNeftRefNo,'-1') = @pChkNeftRefNo)
		AND (@IsAutoGenerated IS NULL OR V.IsAutoGenerated = @IsAutoGenerated)
		AND (@pVoucherType IS NULL OR V.VoucherType = @pVoucherType)
		AND (@IsReconcile IS NULL OR (@IsReconcile = 1 AND ReconciliationDate IS NOT NULL) OR (@IsReconcile = 0 AND ReconciliationDate IS NULL))
	Group By V.Id, VoucherNo, VoucherDate, VType, L.Id, LedgerName, T.Name, IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo), VLT.ReconciliationDate, VLT.ReconciliationRemarks, V.[Description], [Status], V.ReferenceNo, V.IsAutoGenerated,U.UserName
		) XX
	Order By OVoucherDate Asc
	-- Exec [Acounting_GetLedgerReportData]  @pFromDate='2016-06-01', @pToDate='2016-06-30', @pApprovalType=1
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetTrialBalanceData]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[Acounting_GetTrialBalanceData]
	@FinancialYearId INT,
	@FromDate Date,
	@ToDate Date
AS
BEGIN
	DECLARE @pFinancialYearId INT = NULL
	DECLARE @FYStartDate Date
	DECLARE @FYEndDate Date
	DECLARE @pFromDate Date
	DECLARE @pToDate Date
	SET @pFinancialYearId = @FinancialYearId
	SET @pFromDate = @FromDate
	SET @pToDate = @ToDate

	SELECT LedgerId INTO #AllLedger FROM (SELECT LedgerId FROM Accounts_VoucherTransaction UNION SELECT LedgerId From Accounts_LedgerBalance) XX
	IF @pFinancialYearId IS NULL
		SELECT @pFinancialYearId = Id, @FYStartDate = StartDate, @FYEndDate  =EndDate From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	ELSE
		SELECT @FYStartDate = StartDate, @FYEndDate  =EndDate From Accounts_FinancialYear WHERE Id = @pFinancialYearId
	IF (@pFromDate < @FYStartDate OR @pFromDate > @FYEndDate)
		THROW 50000, 'Selected period should be with in financial year.', 1
    Select * INTO #tempTrialBalance FROM (
	SELECT	('L' + Convert(Varchar(20),Accounts_Ledgers.Id)) as Id, 
			('G' + Convert(Varchar(20),[Group])) as ParentId, 
			Accounts_Ledgers.Id as TableId,  
			LedgerName as Name, 
			(Select IsNull(GroupNature,0) From Accounts_Groups Where Id = Accounts_Ledgers.[Group])  As Nature,
			dbo.[FN_Accounts_GetLedgerClosingBalance](Accounts_Ledgers.Id, @pFinancialYearId, DateAdd(Day, -1, @pFromDate)) as OpeningBalance,
			0 as ClosingBalanceDebit, -- This is calculated in the code
			0 as ClosingBalanceCredit, -- This is calculated in the code
			[Group] as ParentIdInt,
			Accounts_Ledgers.Id as IdInt,
			'Ledger' as Type,
			2 As OrderBy
			,IsNull((SELECT SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) FROM vw_VoucherTransactions VT WHERE VT.VoucherStatus Not IN (1,5) And  VT.LedgerId = Accounts_Ledgers.id  AND VT.VoucherDate >= @pFromDate And VT.VoucherDate <= @pToDate),0) as TotalTransactionDebit
			,IsNull((SELECT SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) FROM vw_VoucherTransactions VT WHERE VT.VoucherStatus Not IN (1,5) And VT.LedgerId = Accounts_Ledgers.id  AND VT.VoucherDate >= @pFromDate And VT.VoucherDate <= @pToDate),0) as TotalTransactionCredit
			-- ,SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionDebit
			-- ,SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionCredit
	FROM #AllLedger A
	LEFT JOIN Accounts_VoucherTransaction VT ON VT.LedgerId=A.LedgerId
	LEFT JOIN Accounts_Ledgers ON VT.LedgerId = Accounts_Ledgers.id  
	LEFT JOIN Accounts_Vouchers ON Accounts_Vouchers.Id = VT.VoucherId
	WHERE 1=1
    AND FinancialYear = @pFinancialYearId
	AND [Status] Not In  (1,5) -- Pending and Reject
	-- AND Accounts_Vouchers.VoucherDate >= @pFromDate And Accounts_Vouchers.VoucherDate <= @pToDate
	Group By Accounts_Ledgers.Id, [Group], LedgerName
    -- Having (SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) <> 0 OR SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) <> 0)
	) XX 
	-- Where (TotalTransactionDebit <> 0.0 OR TotalTransactionCredit <> 0.0)
	SELECT	('G' + Convert(Varchar(20),Id)) as Id, 
		('G' + Convert(Varchar(20),ParentId)) as ParentId, 
		Id as TableId, Name, 
		IsNull(GroupNature,0) As Nature,
		0 as OpeningBalanceDebit,
		0 as OpeningBalanceCredit,
		0 as ClosingBalanceDebit,
		0 as ClosingBalanceCredit,
		0 as TotalTransactionDebit,
		0 as TotalTransactionCredit,
		ParentId as ParentIdInt,
		Id as IdInt,
		CASE WHEN ParentId IS NULL THEN 'Group' ELSE 'SubGroup' END as [Type],
		1 as OrderBy
	FROM Accounts_Groups
	Union
	Select Id, ParentId, TableId, Name, Nature,
	(CASE WHEN OpeningBalance > 0 THEN OpeningBalance ELSE 0 END) as OpeningBalanceDebit,
	(CASE WHEN OpeningBalance < 0 THEN Abs(OpeningBalance) ELSE 0 END) as OpeningBalanceCredit,
	ClosingBalanceDebit,
	ClosingBalanceCredit,
	TotalTransactionDebit,
	TotalTransactionCredit,
	ParentIdInt,
	IdInt,
	[Type],
	OrderBy
	FROM #tempTrialBalance Order By OrderBy, ParentIdInt, IdInt /*Do not change order by, this is to show all parent first then subgroups and then ledger*/ 
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetTrialBalanceData_New]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [dbo].[Acounting_GetTrialBalanceData_New]
	@FinancialYearId INT,
	@FromDate Date,
	@ToDate Date
AS
BEGIN
	DECLARE @pFinancialYearId INT = NULL
	DECLARE @FYStartDate Date
	DECLARE @FYEndDate Date
	DECLARE @pFromDate Date
	DECLARE @pToDate Date
	SET @pFinancialYearId = @FinancialYearId
	SET @pFromDate = @FromDate
	SET @pToDate = @ToDate
	
	IF @pFinancialYearId IS NULL
		SELECT @pFinancialYearId = Id, @FYStartDate = StartDate, @FYEndDate  =EndDate From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	ELSE
		SELECT @FYStartDate = StartDate, @FYEndDate  =EndDate From Accounts_FinancialYear WHERE Id = @pFinancialYearId
	IF (@pFromDate < @FYStartDate OR @pFromDate > @FYEndDate)
		THROW 50000, 'Selected period should be with in financial year.', 1
   -- Select * INTO #tempTrialBalance FROM (
	SELECT	('L' + Convert(Varchar(20),AL.Id)) as Id, 
			('G' + Convert(Varchar(20),AL.[Group])) as ParentId, 
			AL.Id as TableId,  
			LedgerName as Name, 
			(Select IsNull(GroupNature,0) From Accounts_Groups Where Id = AL.[Group])  As Nature,
			--0.0 as openingbalance,
			CASE WHEN OpeningTransactionType = 1 THEN -[OpeningBalance] ELSE [OpeningBalance] END as OpeningBalance,
			--dbo.[FN_Accounts_GetLedgerClosingBalance](Accounts_Ledgers.Id, @pFinancialYearId, DateAdd(Day, -1, @pFromDate)) as OpeningBalance,
			0 as ClosingBalanceDebit, -- This is calculated in the code
			0 as ClosingBalanceCredit, -- This is calculated in the code
			[Group] as ParentIdInt,
			AL.Id as IdInt,
			'Ledger' as Type,
			2 As OrderBy
			--,IsNull((SELECT SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) FROM vw_VoucherTransactions VT WHERE VT.VoucherStatus Not IN (1,5) And  VT.LedgerId = Accounts_Ledgers.id  AND VT.VoucherDate >= @pFromDate And VT.VoucherDate <= @pToDate),0) as TotalTransactionDebit
			--,IsNull((SELECT SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) FROM vw_VoucherTransactions VT WHERE VT.VoucherStatus Not IN (1,5) And VT.LedgerId = Accounts_Ledgers.id  AND VT.VoucherDate >= @pFromDate And VT.VoucherDate <= @pToDate),0) as TotalTransactionCredit
			-- ,SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionDebit
			-- ,SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionCredit
			 ,SUM(CASE WHEN TransactionType = 2 AND AV.Status Not IN (1,5) THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionDebit
			 ,SUM(CASE WHEN TransactionType = 1 AND AV.Status Not IN (1,5) THEN ISNUll(Amount,0) ELSE 0 END) as TotalTransactionCredit
		INTO #part1
	FROM Accounts_VoucherTransaction VT 
	LEFT JOIN Accounts_Ledgers AL ON VT.LedgerId = AL.id  
	LEFT JOIN Accounts_Vouchers AV ON AV.Id = VT.VoucherId AND  [Status] Not In  (1,5)
	LEFT JOIN Accounts_LedgerBalance AB ON AB.LedgerId=AL.Id AND AB.[Year] = @pFinancialYearId
	WHERE 1=1
	AND vt.fyid = @pFinancialYearId
    AND FinancialYear = @pFinancialYearId
	--AND AB.[Year] = @pFinancialYearId
	AND [Status] Not In  (1,5) -- Pending and Reject
	AND AV.VoucherDate >= @pFromDate And AV.VoucherDate <= @pToDate
	--AND (IsNull(OpeningBalance,0)+IsNull(Amount,0))<>0
	Group By AL.Id, [Group], LedgerName, OpeningTransactionType, OpeningBalance

	SELECT	('L' + Convert(Varchar(20),AL.Id)) as Id, 
			('G' + Convert(Varchar(20),[Group])) as ParentId, 
			AL.Id as TableId,  
			LedgerName as Name, 
			(Select IsNull(GroupNature,0) From Accounts_Groups Where Id = AL.[Group])  As Nature,
			CASE WHEN OpeningTransactionType = 1 THEN -[OpeningBalance] ELSE [OpeningBalance] END as OpeningBalance,
			--dbo.[FN_Accounts_GetLedgerClosingBalance](Accounts_Ledgers.Id, @pFinancialYearId, DateAdd(Day, -1, @pFromDate)) as OpeningBalance,
			0 as ClosingBalanceDebit, -- This is calculated in the code
			0 as ClosingBalanceCredit, -- This is calculated in the code
			[Group] as ParentIdInt,
			AL.Id as IdInt,
			'Ledger' as Type,
			2 As OrderBy
			,0 as TotalTransactionDebit
			,0 as TotalTransactionCredit
		INTO #part2
	FROM Accounts_LedgerBalance AB 
	LEFT JOIN Accounts_Ledgers AL ON AB.LedgerId = AL.id  
	WHERE 1=1
	AND AB.[Year] = @pFinancialYearId
    AND LedgerId NOT IN (SELECT TableId FROM #part1)
	--AND IsNull(OpeningBalance,0)<>0
	--AND (OpeningBalance>0 OR ClosingBalance>0)
	Group By AL.Id, [Group], LedgerName, OpeningTransactionType, OpeningBalance
    -- Having (SUM(CASE WHEN TransactionType = 2 THEN ISNUll(Amount,0) ELSE 0 END) <> 0 OR SUM(CASE WHEN TransactionType = 1 THEN ISNUll(Amount,0) ELSE 0 END) <> 0)
	
	SELECT * INTO #tempTrialBalance FROM (SELECT * from #Part1 UNION SELECT * FROM #Part2)  ZZ
	
	-- Where (TotalTransactionDebit <> 0.0 OR TotalTransactionCredit <> 0.0)
	
	SELECT	('G' + Convert(Varchar(20),Id)) as Id, 
		('G' + Convert(Varchar(20),ParentId)) as ParentId, 
		Id as TableId, Name, 
		IsNull(GroupNature,0) As Nature,
		0 as OpeningBalanceDebit,
		0 as OpeningBalanceCredit,
		0 as ClosingBalanceDebit,
		0 as ClosingBalanceCredit,
		0 as TotalTransactionDebit,
		0 as TotalTransactionCredit,
		ParentId as ParentIdInt,
		Id as IdInt,
		CASE WHEN ParentId IS NULL THEN 'Group' ELSE 'SubGroup' END as [Type],
		1 as OrderBy
	FROM Accounts_Groups
	Union
	Select Id, ParentId, TableId, Name, Nature,
	(CASE WHEN OpeningBalance > 0 THEN OpeningBalance ELSE 0 END) as OpeningBalanceDebit,
	(CASE WHEN OpeningBalance < 0 THEN Abs(OpeningBalance) ELSE 0 END) as OpeningBalanceCredit,
	ClosingBalanceDebit,
	ClosingBalanceCredit,
	TotalTransactionDebit,
	TotalTransactionCredit,
	ParentIdInt,
	IdInt,
	[Type],
	OrderBy
	FROM #tempTrialBalance WHERE IsNull(ABS(OpeningBalance),0)+IsNull(ClosingBalanceDebit,0)+IsNull(ClosingBalanceCredit,0)+IsNull(TotalTransactionDebit,0)+IsNull(TotalTransactionCredit,0)<>0 Order By OrderBy, ParentIdInt, IdInt /*Do not change order by, this is to show all parent first then subgroups and then ledger*/ 
END	

GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetVouchers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Acounting_GetVouchers]
	@VoucherNo Varchar(200)  = NULL,
	@BillNo Varchar(200)  = NULL,
	@VoucherType INT  = NULL,
	@FinancialYearId INT = NULL,
	@FromDate Date = NULL,
	@ToDate Date = NULL
AS
DECLARE @data VARCHAR(8000)=''
SET @data = @VoucherNo + @BillNo

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @NoRecords INT
	SET @NoRecords = 1

	IF (@FinancialYearId IS NULL)
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	IF @BillNo IS NOT NULL OR LEN(@BillNo) > 0
	BEGIN
		DECLARE @tempVoucherNo VARCHAR(50)
		DECLARE @tempVoucherType INT

		Select @tempVoucherNo = VoucherNo, @tempVoucherType = VoucherType
		From Accounts_VoucherTransactionBills
		Left Join Accounts_Bills On Accounts_Bills.Id = Accounts_VoucherTransactionBills.BillId
		Left Join Accounts_VoucherTransaction On Accounts_VoucherTransaction.Id = Accounts_VoucherTransactionBills.TransactionId
		Left Join Accounts_Vouchers On Accounts_Vouchers.Id = Accounts_VoucherTransaction.VoucherId
		Where Accounts_Bills.BillNo = @BillNo
		IF @tempVoucherNo IS NULL 
			SET @NoRecords = 2
		ELSE
			SET @VoucherNo = @tempVoucherNo
			SET @VoucherType = @tempVoucherType
	END
	-- CONVERT(varchar, VoucherDate, 103) As 
	-- CONVERT(varchar, StatusOn, 103) As 
	SELECT TOP 400 V.Id as VoucherId, VoucherNo, VoucherDate, FY.Name as FYName, 
			VT.VType, VR.[Type] as RefType, ReferenceNo, 
			[Description] as Narration, VA.StatusType, ISNULL(U.DisplayName, U.UserName) as StatusBy, 
			StatusOn
			,V.InsertDate, V.UpdateDate, IUser.Name as CreatedByUserName, UUser.Name as UpdatedByUserName
	FROM Accounts_Vouchers V
	Left Join Accounts_FinancialYear FY On FY.Id = V.FinancialYear
	Left Join Accounts_VoucherType VT On VT.Id = V.VoucherType
	Left Join Accounts_VouchersRefType VR On VR.Id = V.RefType
	Left Join Accounts_ApprovalStatus VA On VA.Id = V.[Status]
	Left Join Users IUser On IUser.Id = V.InsertUserId
	Left Join Users UUser On UUser.Id = V.UpdateUserId
	Left Join Users U On U.Id = V.[StatusBy]
	Where V.FinancialYear = @FinancialYearId
    AND (ISNULL(@VoucherType,0) = 0 OR V.VoucherType = @VoucherType)
	AND V.VoucherDate >= ISNULL(@FromDate, '2001-01-01') AND V.VoucherDate <= ISNULL(@ToDate, '2222-01-01')
	AND (@VoucherNo IS NULL OR V.VoucherNo Like  '%' + @VoucherNo + '%')
	AND @NoRecords = 1
	Order BY V.VoucherDate  Desc
END	
GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetVouchersTransactions]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* *************************************** */
CREATE PROCEDURE [dbo].[Acounting_GetVouchersTransactions]
	@VoucherId INT
AS
BEGIN
	SELECT VT.Id as Id, L.LedgerName, C.Name as CostCenterName, VT.Narration, TransactionType, Amount, ChkNeftRefNo FROM 
	Accounts_VoucherTransaction VT
	LEFT JOIN Accounts_Ledgers L ON L.Id =  VT.LedgerId
	LEFT JOIN Accounts_CostCenters C ON C.Id =  VT.CostCenter
	WHERE VT.VoucherId = @VoucherId
END	
GO
/****** Object:  StoredProcedure [dbo].[Acounting_GetVouchersTransactionsBills]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* *************************************** */
CREATE PROCEDURE [dbo].[Acounting_GetVouchersTransactionsBills]
	@TransactionId INT
AS
BEGIN
	SELECT B.BillNo, B.BillDate, B.PartyName,(B.VATAmount + B.ServiceTaxAmount + B.Amount) as TotalAmount FROM
	Accounts_VoucherTransactionBills VB
	LEFT JOIN Accounts_Bills B ON B.Id =  VB.BillId
	WHERE VB.TransactionId = @TransactionId
END	
GO
/****** Object:  StoredProcedure [dbo].[Acounting_LedgerReportNew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- exec [Acounting_DailyLedgerReport] @LedgerId=1149 select * from accounts_ledgers where id=6562

CREATE PROCEDURE [dbo].[Acounting_LedgerReportNew]
	@LedgerId INT = NULL
AS
BEGIN
	DECLARE @pLedgerId INT
	DECLARE @pFinancialYearId INT
	DECLARE @pFromDate Date=CONVERT(DATE, '2017-04-01', 102)
	DECLARE @pToDate Date=CONVERT(DATE, '2018-03-31', 102)
	
	SET @pLedgerId = @LedgerId
	SELECT @pFinancialYearId = Id  FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate
	
	IF (@pLedgerId IS NULL)
		THROW 50000, 'Pass any one between @pLedgerId and @pVoucherStampId.',1; 
	IF (@pFinancialYearId IS NULL)
		SELECT @pFinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;
	Select  VoucherId, VoucherNo, OVoucherDate, VType, LegderId, LedgerName, CostCenter, TName, Amount, ChkNeftRefNo, ReconciliationDate, ReconciliationRemarks
			, Narration, Status, ReferenceNo, IsAutoGenerated,  CONVERT(varchar, XX.OVoucherDate, 103) as VoucherDate
			, Concat(Convert(varchar(50),Abs(XX.Amount)), ' ', Convert(varchar(50),XX.TName))  as DisplayAmount
	into #temp
	From (Select 
		V.Id as VoucherId, 
		V.VoucherNo, 
		V.VoucherDate as OVoucherDate, 
		VT.VType, 
		L.Id as LegderId,
		L.LedgerName,   --select top 100 * from accounts_ledgers
		''  as CostCenter, --C.Name 
		T.Name as TName,
		Sum(CASE WHEN VLT.TransactionType = 1 THEN -VLT.Amount ELSE VLT.Amount END) as Amount,
		IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo) as  ChkNeftRefNo, 
		VLT.ReconciliationDate, 
		VLT.ReconciliationRemarks, 
		V.[Description] As Narration
		,V.Status
		,V.ReferenceNo
		,V.IsAutoGenerated
	From Accounts_VoucherTransaction VLT
	LEFT JOIN Accounts_Vouchers V On V.Id = VLT.VoucherId
	LEFT JOIN Accounts_VoucherType VT On VT.Id = V.VoucherType
	LEFT JOIN Accounts_Ledgers L On L.Id = VLT.LedgerId
	LEFT JOIN Accounts_CostCenters C On C.Id = VLT.CostCenter
	LEFT JOIN Accounts_TransactionType T On T.Id = VLT.TransactionType
	--LEFT JOIN Helper_TempLedgerReport TempR ON TempR.VoucherId = V.Id
	Where 
		V.FinancialYear = @pFinancialYearId 
		AND (@pLedgerId  IS NULL OR VLT.LedgerId = @pLedgerId )
		--AND (@pVoucherStampId  IS NULL OR VLT.VoucherId  = TempR.VoucherId)
		AND (V.Status in (2,3,4)) -- Approved
		AND ((V.VoucherDate >= CONVERT(DATE,@pFromDate,102) And V.VoucherDate <=CONVERT(DATE,@pToDate,102)) OR @pFromDate IS NULL OR @pToDate IS NULL) 
	Group By V.Id, VoucherNo, VoucherDate, VType, L.Id, LedgerName, T.Name, IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo), VLT.ReconciliationDate, VLT.ReconciliationRemarks, V.[Description], [Status], V.ReferenceNo, V.IsAutoGenerated
		) XX
	Order By OVoucherDate Asc
	-- Exec [Acounting_GetLedgerReportData] @pLedgerId=33, @pFromDate='2016-06-01', @pToDate='2016-06-30', @pApprovalType=1

	DECLARE @Opening DECIMAL(18,2)=0.0
	SET @Opening= dbo.[FN_Accounts_GetOnDateLedgerOpening] (@LedgerId, 0, @pFinancialYearId, GETDATE())

	
	SELECT 
	   SS.Id VoucherId, REPLACE(
	   STUFF((SELECT '$$$' + L.LedgerName + ' : ' + (CASE WHEN US.TransactionType = 1 THEN  CAST( US.Amount as varchar)+' Cr' ELSE CAST( US.Amount as varchar) +' Dr' END)
			  FROM Accounts_VoucherTransaction US
			  LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=US.LedgerId
			  WHERE US.VoucherId = SS.Id
			  ORDER BY VoucherId
			  FOR XML PATH('')), 1, 3, ''),'$$$','<br>') Transactions INTO #temp1
		FROM Accounts_Vouchers SS
		WHERE CONVERT(DATE, SS.VoucherDate, 102) BETWEEN CONVERT(DATE, @pFromDate, 102) AND CONVERT(DATE, @pToDate, 102)
		GROUP BY SS.Id, SS.VoucherNo
		ORDER BY 1

	SELECT 
		ROW_NUMBER() Over (Order by XX.VoucherId) As SNo, XX.VoucherDate, YY.Transactions, ChkNeftRefNo, VType VoucherType, XX.VoucherNo
		,CumulativeAmount, Amount
		, CASE WHEN Amount<0 THEN -Amount ELSE NULL END CrTotal, CASE WHEN Amount>0 THEN Amount ELSE NULL END DrTotal  --exec [Acounting_DailyLedgerReport] @LedgerId=1149
		,'<tr><td>'+CAST(ROW_NUMBER() Over (Order by XX.VoucherId) as VARCHAR) +'</td><td>'+XX.VoucherDate+'</td><td>'+YY.Transactions+'<br><br><i>'+Narration+'</i></td><td>'+IsNull(ChkNeftRefNo,'') +'</td><td>'+VType+'</td><td>'+VoucherNo+'</td><td>'+IsNull(CAST(CASE WHEN Amount>0 THEN Amount ELSE NULL END as varchar),'') +'</td><td>'+ IsNull(CAST(CASE WHEN Amount<0 THEN -Amount ELSE NULL END as VARCHAR),'')  +'</td><td>'+CAST(CumulativeAmount as VARCHAR)+'</td></tr>' AS PrintData
		INTO #temp2
	 FROM (
	SELECT t1.VoucherId, t1.VoucherNo, t1.OVoucherDate, t1.VType, t1.LegderId, t1.LedgerName, t1.CostCenter, t1.TName, t1.Amount, t1.ChkNeftRefNo, t1.ReconciliationDate
			, t1.ReconciliationRemarks, t1.Narration, t1.Status, t1.ReferenceNo, t1.IsAutoGenerated,  t1.VoucherDate, t1.DisplayAmount
			, @Opening+SUM(t2.Amount) as CumulativeAmount
	FROM #temp t1
	INNER JOIN #temp t2 on t1.VoucherId >= t2.VoucherId
	GROUP BY t1.VoucherId, t1.VoucherNo, t1.OVoucherDate, t1.VType, t1.LegderId, t1.LedgerName, t1.CostCenter, t1.TName, t1.Amount, t1.ChkNeftRefNo, t1.ReconciliationDate
			, t1.ReconciliationRemarks, t1.Narration, t1.Status, t1.ReferenceNo, t1.IsAutoGenerated,  t1.VoucherDate, t1.DisplayAmount
		) XX
	LEFT OUTER JOIN #temp1 YY ON YY.VoucherId=XX.VoucherId
	ORDER BY XX.VoucherId

 	Declare @val Varchar(MAX)='';
	DECLARE @CRTotal DECIMAL=0.00
	DECLARE @DRTotal DECIMAL=0.00
	Select @val = COALESCE(@val + '' + PrintData, PrintData) From #temp2
	SELECT @CRTotal = SUM(CrTotal), @DRTotal=SUM(DrTotal) FROM #temp2
	DECLARE @Closing DECIMAL(18,2)=0.0
	SET @Closing =  dbo.[FN_Accounts_GetLedgerClosingBalance](@LedgerId, @pFinancialYearId, GETDATE())
	--select @val
	Select '<table border="1px" width="100%" style="font-family:verdana;font-size:10px;border-spacing:0"><tr style="font-weight:bold;align:center;background-color:#DDDDDD"><td>S.No</td><td>Date</td><td>Particulars</td><td>Cheque/NEFT</td><td>Type</td><td>Voucher No</td><td>Debit</td><td>Credit</td><td>Cummulative</td></tr><tr><td colspan=9 align="right"><b>Opening Balance : '+Cast(IsNull(@Opening,0.00) as Varchar)+'</b></td></tr>'+ REPLACE(LTRIM(RTRIM(REPLACE(@val, ',', ' '))), ' ', ',')+'<tr  align="right"  style="font-weight:bold"><td colspan=6 align="right">Total</td><td>'+Cast(IsNull(@DRTotal,0.00) as Varchar)+'</td><td>'+Cast(IsNull(@CRTotal,0.00) as Varchar)+'</td><td>'+Cast(IsNull(@Closing,0.00) as Varchar)+'</td></tr><tr  style="font-weight:bold"><td colspan=9 align="right">Closing Balance : '+Cast(IsNull(@Closing,0.00) as Varchar)+'</td></tr></table>'
	
	
END	
GO
/****** Object:  StoredProcedure [dbo].[Acounting_ReportDailyLedgerClosing]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ------------------------------------------------------------------------------------------------------------------------------------------------
-- ------------------------------------------------------------------------------------------------------------------------------------------------
-- EXEC [Acounting_ReportsDailLedgerClosing]
CREATE Procedure [dbo].[Acounting_ReportDailyLedgerClosing]
AS
BEGIN
	DECLARE	@pFromDate Date
	DECLARE @pToDate Date
	DECLARE @pLedgerId INT

	--SET @pFromDate = @FromDate;
	--SET @pToDate = @ToDate;
	--SET @pLedgerId = @LedgerId;

	Select 
		 V.VoucherDate
		,Sum(Case When TransactionType = 1 Then Amount Else 0 END) as Credit
		,Sum(Case When TransactionType = 2 Then Amount Else 0 END) as Debit
	from Accounts_VoucherTransaction VT
	Left Join Accounts_Ledgers L ON L.Id = VT.LedgerId
	Left Join Accounts_Vouchers V ON V.Id = VT.VoucherId
	Where LedgerId = @pLedgerId And V.VoucherDate >= @pFromDate And V.VoucherDate <= @pToDate
	Group BY V.VoucherDate 
	Order BY V.VoucherDate
END

GO
/****** Object:  StoredProcedure [dbo].[Acounting_ReportFundUtilization]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Acounting_ReportFundUtilization] (@BranchId int, @FromDate Date, @ToDate Date)
As
BEGIN
	--DECLARE @BranchId INT = 4028
	-- DECLARE @FromDate DATE= '2016-09-01'
	-- DECLARE @ToDate DATE = '2016-09-04'

	Declare @BranchLedgerId INT
	Declare @HOBranchId INT
	Declare @HOLedgerId INT

	Select @BranchLedgerId = LedgerId From Common_Branch Where Id = @BranchId --1149
	Select @HOLedgerId = LedgerId, @HOBranchId = Id From Common_Branch Where  IsHeadOffice = 1 --1149

	Declare @CashReceivedFromHO Decimal(18,2)
	Declare @CashReceivedFromBank Decimal(18,2)
	Declare @CashReceivedFromOther Decimal(18,2)

	Declare @BankReceivedFromHO Decimal(18,2)
	Declare @BankReceivedFromOther Decimal(18,2)

	Declare @PaidToJobAdv Decimal(18,2)
	Declare @BalancePaymentCash Decimal(18,2)
	Declare @BalancePaymentChk Decimal(18,2)
	Declare @OtherPaymentCash Decimal(18,2)
	Declare @OtherPaymentChk Decimal(18,2)
	
	Select T.*, V.PaymentMode as VoucherPaymentMode into #TempCash From Accounts_VoucherTransaction T
	Inner Join Accounts_Vouchers V  On V.Id = T.VoucherId
	Where 
		(T.LedgerId = @BranchLedgerId OR T.LedgerId In (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId))
		And V.VoucherDate >= @FromDate And  V.VoucherDate <= @ToDate And V.[Status] Not in (1,5)
	IF @BranchId = @HOBranchId
		SET @CashReceivedFromHO = 0
	ELSE
		Select @CashReceivedFromHO = Sum(Amount) From #TempCash 
		Where TransactionType = 2 And LedgerId = @BranchLedgerId
		And VoucherId in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId  In (Select  @HOLedgerId union Select LedgerId From Accounts_Banks Where AssociatedBranch  = @HOBranchId))

	Select @CashReceivedFromBank = Sum(Amount) From #TempCash 
	Where TransactionType = 2 And LedgerId = @BranchLedgerId
	And VoucherId in (Select VoucherId From #TempCash Where LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId))

	IF @BranchId = @HOBranchId
		Select @CashReceivedFromOther = Sum(Amount) From #TempCash 
		Where TransactionType = 2  And LedgerId = @BranchLedgerId 
		And VoucherId not in (Select VoucherId From #TempCash 
		Where  LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId ))
	ELSE
		Select @CashReceivedFromOther = Sum(Amount) From #TempCash 
		Where TransactionType = 2  And LedgerId = @BranchLedgerId
		And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction 
			Where LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId 
				union 
				Select @HOLedgerId union (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @HOBranchId)))

	Select @BankReceivedFromHO = Sum(Amount) From #TempCash 
	Where TransactionType = 2 And LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId)
	And VoucherId in (Select VoucherId From Accounts_VoucherTransaction  
						Where LedgerId in (Select @HOLedgerId union (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @HOBranchId)))

	Select @BankReceivedFromOther = Sum(Amount) From #TempCash 
	Where TransactionType = 2  And LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId)
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  
						Where LedgerId in (Select @HOLedgerId union (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @HOBranchId)))


	Select @PaidToJobAdv = Sum(Amount) From #TempCash 
	Where TransactionType = 1 And LedgerId = @BranchLedgerId
	And VoucherId in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select Id From Accounts_Ledgers Where LedgerType = 9)) -- 9 : Job Advance


	Select @BalancePaymentCash = Sum(Amount) From #TempCash 
	Where TransactionType = 1  And LedgerId = @BranchLedgerId
	And VoucherId in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select LedgerId From SystemLedger Where [Description] = 'FREIGHTPAYABLE')) -- 9 : Job Advance
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select Id From Accounts_Ledgers Where LedgerType = 9))

	Select @BalancePaymentChk = Sum(Amount) From #TempCash 
	Where TransactionType = 1 AND LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId)
	And VoucherId in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select LedgerId From SystemLedger Where [Description] = 'FREIGHTPAYABLE')) -- 9 : Job Advance
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select Id From Accounts_Ledgers Where LedgerType = 9))

	Select @OtherPaymentCash = Sum(Amount) From #TempCash 
	Where TransactionType = 1 And LedgerId = @BranchLedgerId
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select LedgerId From SystemLedger Where [Description] = 'FREIGHTPAYABLE')) -- 9 : Job Advance
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select Id From Accounts_Ledgers Where LedgerType = 9))

	Select @OtherPaymentChk = Sum(Amount) From #TempCash 
	Where TransactionType = 1 AND LedgerId in (Select LedgerId From Accounts_Banks Where AssociatedBranch  = @BranchId)
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select LedgerId From SystemLedger Where [Description] = 'FREIGHTPAYABLE')) -- 9 : Job Advance
	And VoucherId not in (Select VoucherId From Accounts_VoucherTransaction  Where LedgerId in (Select Id From Accounts_Ledgers Where LedgerType = 9))

	Select IsNull(@CashReceivedFromHO, 0.0) as CashFromHO, IsNull(@CashReceivedFromBank,0.0) CashFromBank, IsNull(@CashReceivedFromOther,0.0) CashFromOther, 
	IsNull(@BankReceivedFromHO,0.0) BankFundFromHO, IsNull(@BankReceivedFromOther,0.0) BankFundFromOther
	,IsNull(@PaidToJobAdv,0.0) PaidToJobAdvance
	,IsNull(@BalancePaymentCash,0.0) BalancePaymentCash
	,IsNull(@BalancePaymentChk,0.0) BalancePaymentChk
	,IsNull(@OtherPaymentCash,0.0) OtherPaymentCash
	,IsNull(@OtherPaymentChk,0.0) OtherPaymentChk
END

GO
/****** Object:  StoredProcedure [dbo].[Acounting_ReportsDailyLedgerClosing]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- exec [Acounting_ReportsDailyLedgerClosing] @FromDate='2017-08-28', @ToDate='2017-08-28', @FinancialYearId=3, @LedgerId=6562, @ApprovalType=1, @IsAutoGenerated=1 select * from common_client
CREATE PROCEDURE [dbo].[Acounting_ReportsDailyLedgerClosing]
AS
BEGIN
	DECLARE @pFinancialYearId INT
	DECLARE @pApprovalType INT
	
	--SELECT @pFinancialYearId = Id FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate
	SET @pApprovalType = 1
	
	SELECT VoucherId INTO #TodayVouchers from Accounts_VoucherTransaction T LEFT OUTER JOIN Accounts_Vouchers V ON V.Id=T.VoucherId LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=T.LedgerId 
		where [Group] in (17,18) AND CONVERT(DATE,VoucherDate,102)=CONVERT(DATE,GETDATE(),102) AND V.Status in (2,3,4) AND V.VoucherType IN (1,2,3)

	Select  XX.*, CONVERT(varchar, XX.OVoucherDate, 103) as VoucherDate, Concat(Convert(varchar(50),Abs(XX.Amount)), ' ', Convert(varchar(50),XX.TName))  as DisplayAmount 
	--into tatakol
	From (Select 
		V.Id as VoucherId, 
		V.VoucherNo, 
		V.VoucherDate as OVoucherDate, 
		VT.VType, 
		L.Id as LegderId,
		L.LedgerName, 
		--L.[Group] LedgerGroup,
		''  as CostCenter, --C.Name 
		T.Name as TName,
		Sum(CASE WHEN VLT.TransactionType = 1 THEN -VLT.Amount ELSE VLT.Amount END) as Amount,
		IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo) as  ChkNeftRefNo, 
		VLT.ReconciliationDate, 
		VLT.ReconciliationRemarks, 
		V.[Description] As Narration
		,V.Status
		,V.ReferenceNo
		,V.IsAutoGenerated
	From Accounts_VoucherTransaction VLT
	LEFT JOIN Accounts_Vouchers V On V.Id = VLT.VoucherId
	LEFT JOIN Accounts_VoucherType VT On VT.Id = V.VoucherType
	LEFT JOIN Accounts_Ledgers L On L.Id = VLT.LedgerId
	LEFT JOIN Accounts_CostCenters C On C.Id = VLT.CostCenter
	LEFT JOIN Accounts_TransactionType T On T.Id = VLT.TransactionType
	--LEFT JOIN Helper_TempLedgerReport TempR ON TempR.VoucherId = V.Id
	Where 
		--V.FinancialYear = @pFinancialYearId 
		----AND 
		EXISTS  (SELECT 1 from #TodayVouchers where VoucherId=VLT.VoucherId)
		--AND V.Status in (2,3,4) -- Approved
		--AND CONVERT(DATE,VoucherDate,102)=CONVERT(DATE,GETDATE(),102)
		--AND V.VoucherType IN (1,2,3)
	Group By V.Id, VoucherNo, VoucherDate, VType, L.Id, LedgerName, T.Name, IsNull(VLT.ChkNeftRefNo, V.ChkNeftRefNo), VLT.ReconciliationDate, VLT.ReconciliationRemarks, V.[Description], [Status], V.ReferenceNo, V.IsAutoGenerated
		) XX
	Order By OVoucherDate Asc
	-- Exec [Acounting_GetLedgerReportData] @pLedgerId=33, @pFromDate='2016-06-01', @pToDate='2016-06-30', @pApprovalType=1
END	









GO
/****** Object:  StoredProcedure [dbo].[Acounting_ValidateVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Acounting_ValidateVoucher] (@Voucherid INT)
AS
BEGIN
	DECLARE @NegLedgers VARCHAR(2500) = NULL
	DECLARE @VoucherRefType INT = NULL
	DECLARE @VoucherType INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @VoucherCRAmount Decimal(18,2) = NULL
	DECLARE @VoucherDRAmount Decimal(18,2) = NULL
	DECLARE @FinancialYearId INT
	DECLARE @TokenNo VARcHAR(50)=NULL
	DECLARE @ChequeNo VARcHAR(50)=NULL
	SELECT @FinancialYearId = FinancialYear, @TokenNo=ReferenceNo FROM [Accounts_Vouchers] WHERE Id = @VoucherId
	SELECT @ChequeNo=chkNeftRefNo FROM _Token WHERE TokenNo=@TokenNo

	--IF NOT EXISTS (SELECT 1 FROM Common_ChequeMaster C WHERE @ChequeNo BETWEEN ChequeNoFrom AND ChequeNoTo) AND @ChequeNo IS NOT NULL
	--	THROW 50000, 'Cheque not registered with system', 1

	IF EXISTS (	SELECT 1 from Accounts_VoucherTransaction T 
						INNER JOIN Accounts_Vouchers A ON A.Id=T.VoucherId
						INNER JOIN SystemLedger S ON S.LedgerId=T.LedgerId
					WHERE IsAutoGenerated=0 AND S.[Description] IN ('LOADDETENTION','UNLOADDETENTION') AND VoucherId=@Voucherid)
		THROW 50000, 'Detention cannot be added manually', 1

	Select LedgerId, L.LedgerName,
	([dbo].[FN_Accounts_GetLedgerClosingBalance](VT.LedgerId, V.FinancialYear, V.VoucherDate) + 
		SUM(Case 
			When V.[Status] in (1,5) THEN 
				Case When VT.TransactionType = 1 THEN (VT.Amount*-1) ELSE VT.Amount END ELSE 0 END)) as Balance
	INTO #TempLedgerBalance
	from Accounts_VoucherTransaction VT
	Inner Join Accounts_Vouchers  V ON V.Id = VT.VoucherId
	Inner Join Accounts_Ledgers  L ON L.Id = VT.LedgerId
	Where VT.VoucherId =  @VoucherId  AND AllowNegativeBalance = 0  and vt.fyid=@FinancialYearId
	Group By V.FinancialYear, V.VoucherDate, LedgerId, L.LedgerName
	Update #TempLedgerBalance SET Balance = 0.0 WHERE Balance IS NULL
	--Select 
	--	L.LedgerName, 
	--	([dbo].[FN_Accounts_GetLedgerClosingBalance](VT.LedgerId, V.FinancialYear, V.VoucherDate) + 
	--	(Case When V.[Status] in (1,5) THEN 
	--		Case When VT.TransactionType = 1 THEN (VT.Amount*-1) ELSE VT.Amount END ELSE 0 END)) as Balance
	--INTO #TempLedgerBalance
	--from Accounts_VoucherTransaction VT
	--Inner Join Accounts_Vouchers  V ON V.Id = VT.VoucherId
	--Inner Join Accounts_Ledgers  L ON L.Id = VT.LedgerId
	--Where VT.VoucherId = @VoucherId AND AllowNegativeBalance = 0
	/*Future date vouchers not allowed*/
	DECLARE @VoucherDateValid INT=1
	IF EXISTS (Select 1 from Accounts_Vouchers VT 
		Where VT.Id = @VoucherId AND CONVERT(SMALLDATETIME, VoucherDate, 103)>CONVERT(SMALLDATETIME, GETDATE(), 103)  and vt.FinancialYear=@FinancialYearId)
		SET @VoucherDateValid = 0
	IF @VoucherDateValid != 1
		THROW 50000, 'Voucher cannot have future date.', 1
	
	Select 
		@VoucherCRAmount = Sum(Case When TransactionType = 1 THEN Amount ELSE 0 END),
		@VoucherDRAmount = Sum(Case When TransactionType = 2 THEN Amount ELSE 0 END) 
	from Accounts_VoucherTransaction VT
	Where VT.VoucherId = @VoucherId  and vt.fyid=@FinancialYearId
	IF @VoucherCRAmount != @VoucherDRAmount
		THROW 50000, 'Voucher amount is mismatch. CR and DR entries are not equal.', 1
	SELECT @NegLedgers = STUFF((
	   SELECT ', ' + LedgerName, '(' + Convert(Varchar(50),P1.Balance) + ')' FROM #TempLedgerBalance P1
	   WHERE P1.Balance < 0.0 
	   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '') 
	
	IF @NegLedgers IS NOT NULL
		SET @NegLedgers = 'Following Ledger(s) are not allowed for negative balance - ' + REPLACE(@NegLedgers, '%', '') 
	IF @NegLedgers IS NOT NULL
		THROW 50000, @NegLedgers, 1
	IF @NegLedgers IS NULL
	BEGIN
		Select 
			 L.LedgerName
		INTO #TempLedgerBalance1
		from Accounts_VoucherTransaction VT
		Inner Join Accounts_Vouchers  V ON V.Id = VT.VoucherId
		Inner Join Accounts_Ledgers  L ON L.Id = VT.LedgerId
		Where vt.fyid=@FinancialYearId and Convert(Date,V.VoucherDate) < DateAdd(DAY, Case When L.AllowBackDateEntry = 1 Then -L.AllowBackDayEntry Else 0 End, Convert(Date,GetDate())) And VT.VoucherId = @VoucherId
		SELECT @NegLedgers = STUFF((
		   SELECT ', ' + LedgerName FROM #TempLedgerBalance1 P1
		   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
		--IF @NegLedgers IS NOT NULL
		--	SET @NegLedgers = 'Following Ledger(s) are not allowed for back date entry - ' + REPLACE(@NegLedgers, '%', '') 
		--IF @NegLedgers IS NOT NULL
		--	THROW 50000, @NegLedgers, 1
		IF @NegLedgers IS NULL
		BEGIN
			SELECT @NegLedgers = STUFF((
			SELECT ', ' +  LedgerName from Accounts_VoucherTransaction VT
			Inner Join Accounts_Vouchers V On V.Id = VT.VoucherId
			Inner Join Accounts_Ledgers L On L.Id = VT.LedgerId
			Inner Join SystemLedger S On S.LedgerId = L.Id
			Where VT.VoucherId = @VoucherId AND IsNull(V.IsAutoGenerated,0) = 0 AND IsNull(S.IsAllowManualVoucher, 0) = 1  and vt.fyid=@FinancialYearId
			FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
			IF @NegLedgers IS NOT NULL
				SET @NegLedgers = 'Following Ledger(s) are system ledgers and manual entry is not allowed - ' + REPLACE(@NegLedgers, '%', '') 
			IF @NegLedgers IS NOT NULL
				THROW 50000, @NegLedgers, 1
		END
	END
	
	
	Declare @IsJobAdvInvalidUser INT = 0
	Select @IsJobAdvInvalidUser = Count(*) from Accounts_VoucherTransaction VT
	Inner Join Accounts_Vouchers V On V.Id = VT.VoucherId
	Inner Join Accounts_Ledgers L On L.Id = VT.LedgerId
	Where VT.VoucherId = @Voucherid AND IsAutoGenerated = 0 And L.LedgerType = 9  and vt.fyid=@FinancialYearId
	AND V.VoucherType Not In (2,3)  -- 2:Payment, 3: receipt
	IF @IsJobAdvInvalidUser > 0
	BEGIN
		SET @IsJobAdvInvalidUser = 0
		Select @IsJobAdvInvalidUser = Count(LedgerId) From (
		Select LedgerId, DBO.Accounts_GetGroupHirerchy(L.[Group]) as GroupHir  
		from Accounts_VoucherTransaction VT
		Inner Join Accounts_Ledgers L On L.Id = VT.LedgerId
		Where   vt.fyid=@FinancialYearId and VT.VoucherId = @Voucherid 
		) XX Where (GroupHir Like '%\[101]%' ESCAPE '\' OR GroupHir Like '%\[111]%' ESCAPE '\' OR GroupHir Like '%\[41]%' ESCAPE '\') 
		IF @IsJobAdvInvalidUser IS NULL OR  @IsJobAdvInvalidUser = 0
			THROW 50000, 'JOB Advance Ledger can only be use with Payment and Receipt vouchers.', 1
	END
	
	
	Select @VoucherRefType = RefType, @VoucherType = VoucherType, @IsAutoGenerated = IsAutoGenerated from Accounts_Vouchers V Where V.Id = @Voucherid and [Status] Not IN (1,5)
	IF (@VoucherType = 2 OR @VoucherType = 3) -- 2:Payment, 3: receipt
	BEGIN
		Declare @VTTYpe INT = NULL
		Select Top 1 @VTTYpe =  VT.TransactionType  From Accounts_VoucherTransaction VT 
		Inner Join Accounts_Ledgers L On L.Id = VT.LedgerId
		Inner Join Accounts_LedgerType LT On LT.Id = L.LedgerType
		Where VT.VoucherId = @Voucherid  and vt.fyid=@FinancialYearId ANd LT.LedgerGroup IN (2,3) -- 2: Bank, 3 Cash
		IF @VTTYpe IS NULL
		  UPDATE Accounts_Vouchers SET VoucherType=4 WHERE Id=@Voucherid
			--THROW 50000, 'In Payment and Receipt voucher, At least one Bank Or Cash Ledger is Mandatory.', 1
		IF  @VoucherType = 3  AND @VTTYpe  <> 2
			THROW 50000, 'In Receipt voucher, At least one Bank Or Cash Ledger must be debit.', 1
		IF  @VoucherType = 2  AND @VTTYpe  <> 1
			THROW 50000, 'In Receipt voucher, At least one Bank Or Cash Ledger must be credit.', 1
	END
	IF @VoucherRefType = 8 -- INVOIC ON ACCOUNT PAYMENT
	BEGIN
		DECLARE @ClientId INT
		DECLARE @BranchId INT
		DECLARE @OnAccId INT
		Select @ClientId = C.Id from Common_Client C
		Inner Join Accounts_VoucherTransaction VT ON VT.LedgerId = C.LedgerId
		Where VT.VoucherId = @Voucherid
		Select @BranchId = AssociatedBranch from Accounts_Banks C
		Inner Join Accounts_VoucherTransaction VT ON VT.LedgerId =  C.LedgerId
		Where VT.VoucherId = @Voucherid
		
		IF @BranchId IS NULL
			Select @BranchId = C.Id from Common_Branch C
			Inner Join Accounts_VoucherTransaction VT ON VT.LedgerId = C.LedgerId
			Where VT.VoucherId = @Voucherid  and vt.fyid=@FinancialYearId
		IF @ClientId IS NULL
			THROW 50000, 'This voucher does not contains Client Ledger. Please select client ledger for On Accout Payment vouchers.', 1
		IF @BranchId IS NULL
			THROW 50000, 'Selected Bank / Cash ledger is not associated with any Branch. Failed to create voucher.', 1
		SELECT @OnAccId  = Id From [Accounts_OnAccPayment] Where VoucherId = @Voucherid 
		IF @OnAccId IS NULL
			INSERT INTO [dbo].[Accounts_OnAccPayment]
				([VoucherId]
				,[Amount]
				,[ClientId]
				,[BranchId]
				,[Remarks])
			VALUES
				(@Voucherid
				,@VoucherDRAmount
				,@ClientId
				,@BranchId
				,NULL)
		ELSE 
			UPDATE [Accounts_OnAccPayment] SET
				 [Amount] = @VoucherDRAmount
				,[ClientId] = @ClientId
				,[BranchId] = @BranchId
			WHERE Id = @OnAccId
	END
	Select 'S'
END	
GO
/****** Object:  StoredProcedure [dbo].[Administration_GetAuditLog]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Administration_GetAuditLog]
	@FromDate Date,
	@ToDate Date,
	@UserId INT=NULL,
	@ModuleName Varchar(50)=NULL,
	@ActionName Varchar(50)=NULL
AS
DECLARE @data VARCHAR(8000)=''
SET @data = @ModuleName + @ActionName

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1


BEGIN
		SELECT UserId,UserName,[Action],ChangedOn,Module, RowId,[Changes] from auditlog
		WHERE (ChangedOn Between @FromDate AND @ToDate) 
		 AND (@UserId IS NULL OR UserId=@UserId )
		 AND (Len(IsNull(@ModuleName, '')) = 0 OR @ModuleName = Module)
		 AND (Len(IsNull(@ActionName, '')) = 0 OR @ActionName = [Action])
		Order By ChangedOn Desc
END
GO
/****** Object:  StoredProcedure [dbo].[Administration_JobInvestmentList]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[Administration_JobInvestmentList]
	@FromDate Date,
	@ToDate Date,
	@UserId INT=NULL,
	@BranchId INT=null,
	@jobNo VARCHAR(50)=null,
	@ClientId INT=null
AS

DECLARE @data VARCHAR(8000)=''
SET @data = @jobNo

DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag = 0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	Select *
		, (XX.InvoiceAmt - XX.PaymentReceived-XX.Deduction) as AmountReceivale -- change here xx.deduction
		,((XX.InvoiceAmt - XX.Deduction)-(XX.AdvancePaid+XX.BalancePaid+XX.BalanceToBePayable)) as NetFundRealized  
		,((XX.PaymentReceived)-(XX.AdvancePaid+XX.BalancePaid)) as ActualRealized  
	FROM (
		Select J.JobId, J.JobNo, J.Sector, J.JobClientName as ClientName, IsNull(J.ClientRate, 0.0) as ClientRate, J.ExecutingBranchName as BranchName, J.RunningStatusName as JobStatus
			   ,(Select Count(Id) From LoadingChallan L Where L.JobId = J.JobId) as TotalTruck
			   ,IsNull((Select Sum(IsNull(NetWT,0.000)) From LoadingChallan L Where L.JobId = J.JobId),0.00) as Liftqty
			   ,IsNull(Sum(IsNull(I.TotalInvoiceAmount,0.0)),0.00)  as  InvoiceAmt  
			   ,IsNull(Sum(IsNull(I.Deduction,0.0) + IsNull(I.OtherDeduction,0.0)) ,0.00)  as  ShortageDeduction  
			   ,IsNull(Sum(IsNull(I.MoistureDeduction,0.0)),0.00)  as  MoistureDeduction  
			   ,IsNull(Sum(IsNull(I.TDS,0.0)),0.00)  as  TDSDeduction  
			   ,IsNull(Sum(IsNull(I.Deduction,0.0) + IsNull(I.MoistureDeduction,0.0) + IsNull(I.OtherDeduction,0.0) + IsNull(I.TDS,0.0)),0.00)  as  Deduction  
			   ,IsNull(Sum(IsNull(I.ReceivedAmount,0.0)),0.00)  as  PaymentReceived
			   ,IsNull((Select Sum(IsNull(TotalAdvance,0.0)) from vw_unloadingchallandetails P where P.JobId = J.JobId),0.00) as AdvancePaid
			   ,IsNull((Select Sum(IsNull(NetPayable,0.0)) from vw_paymentchallandetails P where P.JobId = J.JobId And (P.PaymentVoucherId IS NOT NULL OR P.TokenVoucher IS NOT NULL)),0.00) as BalancePaid
			   ,IsNull((Select Sum(IsNull(NetPayable,CONVERT(DECIMAL(18,2),(Freight*(CASE WHEN NetWt<IsNull(UnloadedNetWt,999999999999) THEN NetWt ELSE UnloadedNetWt END)),1) - TotalAdvance)) From vw_paymentchallwithpendingwithnotunloading P where P.JobId = J.JobId And (P.PaymentVoucherId IS NULL AND P.TokenVoucher IS NULL)),0.00) as BalanceToBePayable
			   ,ISNULL(SUM(ISNULL(I.ClaimWt,0.0)),0.00) AS ClaimQty -- add new field
		From vw_jobdetails J
		Left Join vw_InvoiceDetails I on I.JobId = J.JobId
		Where 1=1 
			AND (@jobNo IS NULL OR J.JobNo = @jobNo)
			AND (@BranchId IS NULL OR J.ExecutingBranchId = @BranchId)
			AND (J.JobId IN (SELECT DISTINCT JobId From LoadingChallan Where LoadDate >= @FromDate AND LoadDate <=  @ToDate))
			AND (@ClientId IS NULL OR J.ClientId = @ClientId)
		Group By J.JobId, J.JobNo, J.Sector, J.JobClientName , J.ClientRate, J.ExecutingBranchName, J.RunningStatusName ) XX 
		Order By XX.BranchName
END	

GO
/****** Object:  StoredProcedure [dbo].[Altra_AdvancePaymentVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Altra_AdvancePaymentVoucher] 
(
  @PayId INT

)
AS
BEGIN
 DECLARE @trancount INT;
    DECLARE @PaymentDate DATE;
    DECLARE @ClientLedgerId INT;
	DECLARE @TdsLedgerId INT;
	DECLARE @MoistureLedgerId INT;
	DECLARE @ShortageLedgerId INT;
    DECLARE @ReceivedLedgerId INT;
    DECLARE @PaymentModeId INT;
    DECLARE @TotalAmount DECIMAL(18,2)=0.0;
    DECLARE @Narration VARCHAR(2000) = NULL;
    DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
    DECLARE @FinancialYearId INT;
    DECLARE @InsertById INT=NULL;
    DECLARE @VoucherStatus INT = 2;
    DECLARE @UserBranchId INT=NULL;
    DECLARE @VoucherId INT=0;
    DECLARE @CurrentVoucherStatus INT=0;
    DECLARE @TdsAmount DECIMAL(18,3)=0.000
	DECLARE @ShortageDeduction DECIMAL(18,3)=0.000
	DECLARE @MoistureDeduction DECIMAL(18,3)=0.000

	SET @trancount = @@trancount;
    

	SELECT @PaymentDate = R.TransactionDate , @ClientLedgerId = C.LedgerId, @PaymentModeId = 1
		  ,@InsertById = 3105
		  ,@UserBranchId = 1
		  , @TotalAmount = R.TotalRecoverableAmount
    FROM _Recovery R
    LEFT OUTER JOIN
    Common_Parties C ON C.Id = R.PartyId
    WHERE R.Id = @PayId


	SELECT @ShortageLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE SHORTAGE DEDUCTION'
	SELECT @MoistureLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE MOISTURE DEDUCTION'
	SELECT @TdsLedgerId = LedgerId FROM SystemLedger WHERE Description='INVOICE TDS DEDUCTION'
	 SELECT @ReceivedLedgerId =Id FROM Accounts_Ledgers WHERE LedgerName='CASH HO'

	
	--IF(1 = 1)
	--  throw 50000, @Narration, 1

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @PaymentDate Between StartDate And EndDate;

	IF(@VoucherId IS NOT NULL) 
    BEGIN
       SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
    END
	IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
          THROW 50000, 'Please Reject Vouchers ???. ' , 1
    IF(@TotalAmount = 0.0)
          THROW 50000, 'Voucher cannot be create of zero Amount ???.', 1

	


    BEGIN
       BEGIN TRY
           IF @trancount = 0
          BEGIN TRANSACTION
       ELSE
          SAVE TRANSACTION AdvancePaymentVoucher;
    
          IF(@VoucherId = 0 OR @VoucherId IS NULL)
          BEGIN
             INSERT INTO [Accounts_Vouchers]
					 (VoucherName
					 ,VoucherDate
					 ,VoucherType
					 ,[Status]
					 ,InsertUserId
					 ,InsertDate
					 ,[Description]
					 ,BranchId
					 ,FinancialYear
					 ,RefType
					 ,ReferenceNo
					 ,ReferenceId
					 ,PaymentMode
					 ,ChkNeftRefNo)
             VALUES
					 (NULL,
					 @PaymentDate,
					 2, -- Receipt Voucher
					 @VoucherStatus, -- Submitted 
					 @InsertById,
					 GETDATE(),
					 @Narration,
					 @UserBranchId,
					 @FinancialYearId,
					 NULL, 
					 NULL,
					 @PayId,
					 @PaymentModeId,
					 @ChkNeftRefNo)
                     SET @VoucherId = SCOPE_IDENTITY()
              END
             ELSE
             BEGIN
				 UPDATE Accounts_Vouchers SET 
				 VoucherDate = @PaymentDate,
				 UpdateUserId= @InsertById,
				 UpdateDate = GETDATE(),
				 [Status] = @VoucherStatus,
				 ReferenceId=@PayId,
				 FinancialYear=@FinancialYearId,
				 [Description]=@Narration
				 WHERE Id = @VoucherId
             END
    
         DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
    
	

	    -- IF(@TdsAmount > 0.00)
	    -- BEGIN
	    --      IF(@TdsLedgerId IS NULL)
	    -- 	    THROW 50000, 'Please set tds ledger in system ledger of  INVOICE TDS DEDUCTION', 1
			  --ELSE
			  -- BEGIN
			  --    INSERT INTO Accounts_VoucherTransaction
				 --     (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				 -- VALUES
				 --     (@VoucherId, @TdsLedgerId, NULL, 2, @TdsAmount)
			  -- END
	    -- END
	     
	    -- IF(@ShortageDeduction > 0.00)
	    -- BEGIN
	    --      IF(@ShortageLedgerId IS NULL)
	    -- 	   THROW 50000, 'Please set Shortage ledger in system ledger of  INVOICE SHORTAGE DEDUCTION', 1
			  --ELSE
			  -- BEGIN
			  --    INSERT INTO Accounts_VoucherTransaction
				 --     (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				 -- VALUES
				 --     (@VoucherId, @ShortageLedgerId, NULL, 2, @ShortageDeduction)
			  -- END
	    -- END
	     
	   --  IF(@MoistureDeduction > 0.00)
	   --  BEGIN
	   --       IF(@MoistureLedgerId IS NULL)
	   --  	   THROW 50000, 'Please set Moisture ledger in system ledger of  INVOICE MOISTURE DEDUCTION', 1
			 --ELSE
			 --  BEGIN
			 --     INSERT INTO Accounts_VoucherTransaction
				--      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				--  VALUES
				--      (@VoucherId, @MoistureLedgerId, NULL, 2, @MoistureDeduction)
			 --  END
	   --  END

		 DECLARE @NetReceivedAmount DECIMAL(18, 3) = 0.000
		 SET @NetReceivedAmount = @TotalAmount
		 SET @TotalAmount = @TotalAmount + @TdsAmount + @ShortageDeduction + @MoistureDeduction

		  INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ReceivedLedgerId, NULL, 1, @NetReceivedAmount)

		 INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ClientLedgerId, NULL, 2, @TotalAmount)
    

	--exec Altra_AdvancePaymentVoucher @PayiD=129
        UPDATE _Recovery SET LedgerId = @ClientLedgerId WHERE Id = @PayId
           EXEC [Acounting_ValidateVoucher] @VoucherId	
    
    IF @trancount = 0
     COMMIT;
    END TRY
    BEGIN CATCH
       DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
       SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
    IF @xstate = -1
       ROLLBACK;
    IF @xstate = 1 and @trancount = 0
       ROLLBACK
    IF @xstate = 1 and @trancount > 0
       ROLLBACK transaction AdvancePaymentVoucher;
    
     RAISERROR ('[AdvancePaymentVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
    END CATCH
  END
END
GO
/****** Object:  StoredProcedure [dbo].[Altra_LoadingChallanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--exec Altra_LoadingChallanDetails @InvoiceNo = 'JST/TR-213/20-21'

CREATE PROCEDURE [dbo].[Altra_LoadingChallanDetails]
@ClientId INT= NULL,
@InvoiceId INT= NULL,
@PermitId INT= NULL,
@LoadDateFrom Date = NULL,
@LoadDateTo Date = NULL,
@TPInvNo Varchar(50) = NULL,
@PermitNo VARCHAR(10) = NULL,
@InvoiceNo VARCHAR(50) = NULL
AS
BEGIN
   SELECT TOP 10000 v.ChallanNo
   ,v.TP,CONVERT(VARCHAR(10),v.LoadDate, 103)  LoadDate,v.TruckNumber,v.NetWT,v.UnloadedNetWt,v.ClaimLoad
   ,CONVERT(VARCHAR(10),v.UnloadedDate, 103) UnloadedDate,v.ChallanSerialNo 
   , REPLACE(V.ChallanNoKey, '//','/') ChallanNoKey,c.Name as ClientName
   ,L.Address as ClientAddress,L.State as ClientState,L.PinCode as PinCode ,IC.InvoiceClientRate ,IC.TPNo AS PermitNo 
   ,IC.InvoiceNo ,LC.Tp AS PassNo ,LC.InvoiceClientRate ClientRate
  FROM   vw_ReportLoadingChallanReport v 
   Left Outer Join Common_Client C ON C.Id= v.ClientId
   Left Outer Join Accounts_Ledgers L ON C.LedgerId=L.Id
   Left outer Join vw_InvoiceChallanDetails IC ON IC.ChallanNo = V.ChallanNo
   Left Outer Join LoadingChallan LC ON LC.ChallanNo = V.ChallanNo 
   WHERE IC.InvoiceId is not null
    AND (@ClientId IS NULL OR v.ClientId = @ClientId)
	AND (@InvoiceId IS NULL OR IC.InvoiceId = @ClientId)
    AND (@PermitId IS NULL OR V.PermitId = @PermitId)
    AND (@LoadDateFrom IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadDateFrom)
    AND (@LoadDateTo IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadDateTo)
    AND (@PermitNo IS NULL  OR IC.TPNo=@PermitNo)
    AND (@InvoiceNo IS NULL  OR IC.InvoiceNo=@InvoiceNo)

   ORDER BY v.LoadDate  ,LC.TP  asc 
END
GO
/****** Object:  StoredProcedure [dbo].[Altra_ModifyAdvanceVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Exec Altra_ModifyAdvanceVoucher @ChallanNo = 14060

CREATE PROC [dbo].[Altra_ModifyAdvanceVoucher] 
(
  @ChallanNo INT

)
AS
BEGIN
 DECLARE @trancount INT;
    DECLARE @PaymentDate DATE;
    DECLARE @ClientLedgerId INT;
	DECLARE @TdsLedgerId INT;
	DECLARE @MoistureLedgerId INT;
	DECLARE @ShortageLedgerId INT;
    DECLARE @ReceivedLedgerId INT;
    DECLARE @PaymentModeId INT;
    DECLARE @TotalAmount DECIMAL(18,2)=0.0;
    DECLARE @Narration VARCHAR(2000) = NULL;
    DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
    DECLARE @FinancialYearId INT;
    DECLARE @InsertById INT=NULL;
    DECLARE @VoucherStatus INT = 2;
    DECLARE @UserBranchId INT=NULL;
    DECLARE @VoucherId INT=0;
    DECLARE @CurrentVoucherStatus INT=0;
    DECLARE @TdsAmount DECIMAL(18,3)=0.000
	DECLARE @ShortageDeduction DECIMAL(18,3)=0.000
	DECLARE @MoistureDeduction DECIMAL(18,3)=0.000

	SET @trancount = @@trancount;
    

	SELECT @PaymentDate =  Max(R.LoadDate) , @ClientLedgerId = Max(C.LedgerId), @PaymentModeId = 1
		  ,@InsertById = 3105
		  ,@UserBranchId = 1
		  , @TotalAmount = Sum(A.Amount) 
    FROM LoadingChallan R
    LEFT OUTER JOIN
    Common_Parties C ON C.Id = R.OwnerId
	LEFT OUTER JOIN LoadingAdvance A ON A.LoadingId = R.Id
	LEFT OUTER JOIN _TokenChallans TC ON TC.ChallanNo = R.ChallanNo
	LEFT OUTER JOIN _Token T ON T.Id = TC.TokenId
    WHERE a.AdvanceType =1  and T.Id = @ChallanNo

	 SELECT @ReceivedLedgerId =Id FROM Accounts_Ledgers WHERE LedgerName='CASH HO'

	
	--IF(1 = 1)
	--  throw 50000, @Narration, 1

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @PaymentDate Between StartDate And EndDate;

	IF(@VoucherId IS NOT NULL) 
    BEGIN
       SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
    END
	IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
          THROW 50000, 'Please Reject Vouchers ???. ' , 1
    IF(@TotalAmount = 0.0)
          THROW 50000, 'Voucher cannot be create of zero Amount ???.', 1

		  DECLARE @Cash DECIMAL(18,3)=0.000

	--select @Cash=ISNULL(L.Advance ,0) from LoadingAdvance A Left outer Join LoadingChallan L ON L.Id = A.LoadingId where L.ChallanNo = @ChallanNo 
	select @Cash=ISNULL(Advance ,0) from  LoadingChallan  where ChallanNo= @ChallanNo 
	IF @Cash >0 AND  @Cash is Not Null

    BEGIN
       BEGIN TRY
           IF @trancount = 0
          BEGIN TRANSACTION
       ELSE
          SAVE TRANSACTION ModifyAdvanceVoucher;
    
          IF(@VoucherId = 0 OR @VoucherId IS NULL)
          BEGIN
             INSERT INTO [Accounts_Vouchers]
					 (VoucherName
					 ,VoucherDate
					 ,VoucherType
					 ,[Status]
					 ,InsertUserId
					 ,InsertDate
					 ,[Description]
					 ,BranchId
					 ,FinancialYear
					 ,RefType
					 ,ReferenceNo
					 ,ReferenceId
					 ,PaymentMode
					 ,ChkNeftRefNo)
             VALUES
					 (NULL,
					 @PaymentDate,
					 2, -- Payment Voucher
					 @VoucherStatus, -- Submitted 
					 @InsertById,
					 GETDATE(),
					 @Narration,
					 @UserBranchId,
					 @FinancialYearId,
					 NULL, 
					 NULL,
					 @ChallanNo,
					 @PaymentModeId,
					 @ChkNeftRefNo)
                     SET @VoucherId = SCOPE_IDENTITY()
              END
             ELSE
             BEGIN
				 UPDATE Accounts_Vouchers SET 
				 VoucherDate = @PaymentDate,
				 UpdateUserId= @InsertById,
				 UpdateDate = GETDATE(),
				 [Status] = @VoucherStatus,
				 ReferenceId=@ChallanNo,
				 FinancialYear=@FinancialYearId,
				 [Description]=@Narration
				 WHERE Id = @VoucherId
             END
    
         DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
    
		 DECLARE @NetReceivedAmount DECIMAL(18, 3) = 0.000
		 SET @NetReceivedAmount = @TotalAmount
		 SET @TotalAmount = @TotalAmount 

		  INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ReceivedLedgerId, NULL, 1, @NetReceivedAmount)

		 INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ClientLedgerId, NULL, 2, @TotalAmount)
    
           EXEC [Acounting_ValidateVoucher] @VoucherId	
    
    IF @trancount = 0
     COMMIT;
    END TRY
    BEGIN CATCH
       DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
       SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
    IF @xstate = -1
       ROLLBACK;
    IF @xstate = 1 and @trancount = 0
       ROLLBACK
    IF @xstate = 1 and @trancount > 0
       ROLLBACK transaction ModifyAdvanceVoucher;
    
     RAISERROR ('[ModifyAdvanceVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
    END CATCH
  END

END
GO
/****** Object:  StoredProcedure [dbo].[Altra_PartyDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Altra_PartyDetails]

@LoadFromDate Date = NULL,
@LoadToDate Date = NULL,
@PartyId INT=NULL,
@TruckId INT=NULL

AS
BEGIN
   SELECT TOP 10000  P.PartyName ,L.ChallanNo ,L.Advance AS Advance ,L.HSD AS HSDCost  , N.PumpName ,V.VehicleNo AS TruckNumber  
,Convert(varchar ,L.LoadDate ,3) AS LoadDate ,  PA.PaidAmount , A.Amount AS BulkAdvance , B.Amount As SecondHsd
,PN.PumpName AS SecondPump ,L.Tp ,L.CommAmount
from Common_parties P 
LEFT OUTER JOIN LoadingChallan L On L.OwnerId  = P.Id
LEFT OUTER JOIN PumpName N On N.Id =  L.PumpId 
LEFT OUTER JOIN Fleet_Vehicle V On V.Id =  L.TruckId
LEFT OUTER JOIN Payment PA On PA.LoadingId = L.Id
LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount from LoadingAdvance  Where AdvanceType = 1 and PaymentMode = 3) AS A ON L.Id =A.LoadingId
LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount ,A.PumpId from LoadingAdvance A
LEFT OUTER JOIN LoadingChallan L On L.Id = A.LoadingId Where AdvanceType = 2 and L.PumpId<>A.PumpId) AS B ON L.Id =B.LoadingId
Left Outer Join PumpName PN ON B.pumpId = PN.Id
   Where
   (@LoadFromDate IS NULL OR CONVERT(date, L.LoadDate, 103)>= @LoadFromDate)
   AND (@LoadToDate IS NULL OR CONVERT(date,L.LoadDate, 103) <= @LoadToDate)
   AND (@PartyId IS NULL OR L.OwnerId = @PartyId) 
    AND (@TruckId IS NULL OR L.TruckId = @TruckId) 
   
END
GO
/****** Object:  StoredProcedure [dbo].[Altra_ShortageReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Altra_ShortageReport]
(
@ClientId INT=NULL,
@BranchId INT=NULL,
@JobId INT=NULL,
@LoadDateFrom DATE=NULL,
@LoadDateTo DATE=NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@TruckId INT=NULL,
@Status INT=NULL,
@ShortageStatus INT=NULL,
@InvoiceId INT=NULL
)

AS
BEGIN
    
	-- Drop Table #Temp

    SELECT L.JobId, L.TruckId, L.Id, L.ChallanNo, L.TruckSource, L.LoadType, L.NetWT, CONVERT(date, L.LoadDate,103) AS LoadDate, L.Freight, L.TotalFreight
           ,L.Advance, L.HSDCost, L.TotalAdvance, L.OwnerId , U.UnloadedNetWt, U.UnloadedDate,
           (CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000 AS TotalShortage, F.TotalTyers, F.VehicleNo,
		   T.TokenNo, T.ReceivedOn, T.PaidOn
		   ,PT.PartyType + ':' + P.ContactNo + ':' + P.PartyName + ':' + P.PANNumber + ':' + CONVERT(VARCHAR, P.Id) AS PaidName,
		    PC.ShortageWt, PC.ShortagePenaltyWt, PC.PenaltyRate, PC.Penalty, PC.ChallanDeduction, PC.NetPayable ,L.Tp AS TP , I.InvoiceNo AS BillNo INTO #Temp
    FROM Loadingchallan L
    LEFT OUTER JOIN
    Unloadingchallan U On U.LoadingChallanId=L.Id
    LEFT OUTER JOIN
    Fleet_Vehicle F ON F.Id=L.TruckId
	LEFT OUTER JOIN
	vw_ReportJobDetails J ON J.JobId=L.JobId
	LEFT OUTER JOIN
	_TokenChallans TC ON TC.ChallanNo=L.ChallanNo
	LEFT OUTER JOIN
	_Token T ON T.Id = TC.TokenId
	LEFT OUTER JOIN
	Common_Parties P ON P.Id = T.PartyId
	LEFT OUTER JOIN
	Common_PartyType PT ON PT.Id = P.PartyType
	LEFT OUTER JOIN
	Payment PC ON PC.LoadingId = L.Id
	LEFT OUTER JOIN
	_InvoiceChallan IC ON IC.ChallanNo = L.ChallanNo
	LEFT OUTER JOIN 
	_Invoice I ON I.Id = IC.InvoiceId
    WHERE U.Id IS NOT NULL AND (L.NetWt - U.UnloadedNetWt) > 0 AND 1=1
		AND (@ClientId IS NULL OR J.ClientId = @ClientId)
	AND (@BranchId IS NULL OR J.JobBranchId = @BranchId)
	AND (@JobId IS NULL OR L.JobId = @JobId)
		AND (@InvoiceId IS NULL OR I.Id = @InvoiceId)
	AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103) >= @LoadDateFrom) 
	AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103) <= @LoadDateTo) 
	AND (@LoadingPointId IS NULL OR J.LoadingPointId = @LoadingPointId)
	AND (@UnloadingPointId IS NULL OR J.UnLoadingPointId = @UnloadingPointId)
	AND (@Status IS NULL OR ((@Status=0 AND (PC.Id IS NULL)) OR (@Status=1 AND (PC.Id IS NOT NULL))))
	AND (@ShortageStatus IS NULL OR ((CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000) >= @ShortageStatus)
	-- AND (@Status=1 OR (PC.Id IS NULL))
	-- AND (@Status=0 OR (PC.Id IS NOT NULL)) 

	  -- ORDER BY L.LoadDate ASC
    
    
    
    SELECT    T.JobId, J.JobNo,J.JobBranchId,J.BranchName, J.Sector, J.MaterialName, J.ClientName,T.TruckSource, T.ChallanNo,T.VehicleNo,C.PartyName, C.PANNumber, CONVERT(VARCHAR, T.LoadDate,103) AS LoadDate, T.NetWT, CONVERT(VARCHAR, T.UnloadedDate,103) AS UnloadedDate , T.UnloadedNetWt, T.LoadType, 
              T.Freight AS Rate, 
    		  T.Freight * CASE WHEN (T.NetWT<T.UnloadedNetWt) THEN T.NetWT ELSE T.UnloadedNetWt END AS Freight, ISNULL(T.TotalAdvance, 0) AS TotalAdvance,
    		  ISNULL(T.Advance,0) AS Advance, ISNULL(T.HSDCost,0) AS HSDCost, ISNULL(T.TotalShortage,0) AS TotalShortage, 
			  ISNULL(FC.PenaltyShortageWt, 0) AS PenaltyShortageWt, ISNULL(FC.ShortageAmt, 0) AS ShortageAmt, FC.DeductionType,
			  T.TokenNo, CONVERT(VARCHAR, T.ReceivedOn, 103) AS TokenDate, CONVERT(VARCHAR, T.PaidOn, 103) AS PaidDate, T.PaidName,
			  ISNULL(T.ShortageWt,0) AS ShortageWt, ISNULL(T.ShortagePenaltyWt,0) AS ShortagePenaltyWt,
			  ISNULL(T.PenaltyRate,0) AS PenaltyRate, ISNULL(T.Penalty,0) AS Penalty, ISNULL(T.ChallanDeduction,0) AS ChallanDeduction, ISNULL(T.NetPayable,0) AS NetPayble ,T.TP ,ISNULL(T.BillNo,'') AS BillNo
    FROM #Temp T 
	LEFT OUTER JOIN
    vw_ReportJobDetails J ON J.JobId=T.JobId
    LEFT OUTER JOIN
    Common_Parties C ON C.Id=T.OwnerId AND C.PartyType = 1
    OUTER APPLY
    [FN_GetPenaltyForChallanDyanamic] (T.JobId, T.NetWT, T.TotalShortage, T.TotalTyers, T.LoadType, T.TruckSource)
    AS FC  ORDER BY T.LoadDate DESC


END
GO
/****** Object:  StoredProcedure [dbo].[Altra_TokenVouchers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Exec Altra_TokenVouchers @PayId = 14052

CREATE PROC [dbo].[Altra_TokenVouchers] 
(
  @PayId INT

)
AS
BEGIN
 DECLARE @trancount INT;
    DECLARE @PaymentDate DATE;
    DECLARE @ClientLedgerId INT;
	DECLARE @TdsLedgerId INT;
	DECLARE @MoistureLedgerId INT;
	DECLARE @ShortageLedgerId INT;
    DECLARE @ReceivedLedgerId INT;
    DECLARE @PaymentModeId INT;
    DECLARE @TotalAmount DECIMAL(18,2)=0.0;
    DECLARE @Narration VARCHAR(2000) = NULL;
    DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
    DECLARE @FinancialYearId INT;
    DECLARE @InsertById INT=NULL;
    DECLARE @VoucherStatus INT = 2;
    DECLARE @UserBranchId INT=NULL;
    DECLARE @VoucherId INT=0;
    DECLARE @CurrentVoucherStatus INT=0;
    DECLARE @TdsAmount DECIMAL(18,3)=0.000
	DECLARE @ShortageDeduction DECIMAL(18,3)=0.000
	DECLARE @MoistureDeduction DECIMAL(18,3)=0.000

	SET @trancount = @@trancount;
    

	SELECT @PaymentDate = R.ReceivedOn , @ClientLedgerId = C.LedgerId, @PaymentModeId = R.PaymentMode
		  ,@InsertById = 3105
		  ,@UserBranchId = 1
		  , @TotalAmount = R.Amount
    FROM _Token R
    LEFT OUTER JOIN
    Common_Parties C ON C.Id = R.PartyId
    WHERE R.Id = @PayId


	SELECT @ShortageLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE SHORTAGE DEDUCTION'
	SELECT @MoistureLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE MOISTURE DEDUCTION'
	SELECT @TdsLedgerId = LedgerId FROM SystemLedger WHERE Description='INVOICE TDS DEDUCTION'
	 SELECT @ReceivedLedgerId =Id FROM Accounts_Ledgers WHERE LedgerName='Freight & Transportation Payable'

	
	--IF(1 = 1)
	--  throw 50000, @Narration, 1

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @PaymentDate Between StartDate And EndDate;

	IF(@VoucherId IS NOT NULL) 
    BEGIN
       SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
    END
	IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
          THROW 50000, 'Please Reject Vouchers ???. ' , 1
    IF(@TotalAmount = 0.0)
          THROW 50000, 'Voucher cannot be create of zero Amount ???.', 1

	


    BEGIN
       BEGIN TRY
           IF @trancount = 0
          BEGIN TRANSACTION
       ELSE
          SAVE TRANSACTION TokenVoucher;
    
          IF(@VoucherId = 0 OR @VoucherId IS NULL)
          BEGIN
             INSERT INTO [Accounts_Vouchers]
					 (VoucherName
					 ,VoucherDate
					 ,VoucherType
					 ,[Status]
					 ,InsertUserId
					 ,InsertDate
					 ,[Description]
					 ,BranchId
					 ,FinancialYear
					 ,RefType
					 ,ReferenceNo
					 ,ReferenceId
					 ,PaymentMode
					 ,ChkNeftRefNo)
             VALUES
					 (NULL,
					 @PaymentDate,
					 3, -- Receipt Voucher
					 @VoucherStatus, -- Submitted 
					 @InsertById,
					 GETDATE(),
					 @Narration,
					 @UserBranchId,
					 @FinancialYearId,
					 NULL, 
					 NULL,
					 @PayId,
					 @PaymentModeId,
					 @ChkNeftRefNo)
                     SET @VoucherId = SCOPE_IDENTITY()
              END
             ELSE
             BEGIN
				 UPDATE Accounts_Vouchers SET 
				 VoucherDate = @PaymentDate,
				 UpdateUserId= @InsertById,
				 UpdateDate = GETDATE(),
				 [Status] = @VoucherStatus,
				 ReferenceId=@PayId,
				 FinancialYear=@FinancialYearId,
				 [Description]=@Narration
				 WHERE Id = @VoucherId
             END
    
         DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
    
	

	     IF(@TdsAmount > 0.00)
	     BEGIN
	          IF(@TdsLedgerId IS NULL)
	     	    THROW 50000, 'Please set tds ledger in system ledger of  INVOICE TDS DEDUCTION', 1
			  ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @TdsLedgerId, NULL, 2, @TdsAmount)
			   END
	     END
	     
	     IF(@ShortageDeduction > 0.00)
	     BEGIN
	          IF(@ShortageLedgerId IS NULL)
	     	   THROW 50000, 'Please set Shortage ledger in system ledger of  INVOICE SHORTAGE DEDUCTION', 1
			  ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @ShortageLedgerId, NULL, 2, @ShortageDeduction)
			   END
	     END
	     
	     IF(@MoistureDeduction > 0.00)
	     BEGIN
	          IF(@MoistureLedgerId IS NULL)
	     	   THROW 50000, 'Please set Moisture ledger in system ledger of  INVOICE MOISTURE DEDUCTION', 1
			 ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @MoistureLedgerId, NULL, 2, @MoistureDeduction)
			   END
	     END

		 DECLARE @NetReceivedAmount DECIMAL(18, 3) = 0.000
		 SET @NetReceivedAmount = @TotalAmount
		 SET @TotalAmount = @TotalAmount --+ @TdsAmount + @ShortageDeduction + @MoistureDeduction

		  INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ReceivedLedgerId, NULL, 1, @NetReceivedAmount)

		 INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ClientLedgerId, NULL, 2, @TotalAmount)
    

	--exec Altra_AdvancePaymentVoucher @PayiD=129
        --UPDATE _Recovery SET VoucherId = @VoucherId WHERE Id = @PayId
           EXEC [Acounting_ValidateVoucher] @VoucherId	
    
    IF @trancount = 0
     COMMIT;
    END TRY
    BEGIN CATCH
       DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
       SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
    IF @xstate = -1
       ROLLBACK;
    IF @xstate = 1 and @trancount = 0
       ROLLBACK
    IF @xstate = 1 and @trancount > 0
       ROLLBACK transaction TokenVoucher;
    
     RAISERROR ('[TokenVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
    END CATCH
  END
END
GO
/****** Object:  StoredProcedure [dbo].[BackEnd_UpdateDetentionInLoadingChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select * from accounts_systemleder
CREATE Procedure [dbo].[BackEnd_UpdateDetentionInLoadingChallan] (@ChallanNo INT, @DetentionAmount  Decimal(18,2))
AS
Begin
Declare @AdvanceType INT = NULL
Declare @LoadingId INT = NULL
Declare @JobId INT = NULL
Declare @JobLedgerId INT = NULL

Declare @VoucherId INT = NULL
Declare @DetentionLedgerId INT = 1141
Declare @DetentionEntry INT = 0

Select @LoadingId = Id, @JobId = JobId From LoadingChallan Where ChallanNo = @ChallanNo
Select @AdvanceType = AdvanceType From LoadingAdvance Where  LoadingId  = @LoadingId And AdvanceType = 5
Select @VoucherId = Id From Accounts_Vouchers Where ReferenceId = @ChallanNo And VoucherType = 4
Select @JobLedgerId = LedgerId From _Job Where Id = @JobId
Select @DetentionEntry = Count(*) From Accounts_VoucherTransaction Where VoucherId = @VoucherId And LedgerId =@DetentionLedgerId

IF @AdvanceType IS NOT NULL
 THROW 50000, 'Detention already exist.', 1
IF @DetentionEntry > 0
    THROW 50000, 'Detention Ledger entry already available in voucher', 1

BEGIN TRANSACTION
BEGIN TRY
IF @AdvanceType IS NULL
BEGIN
 INSERT INTO [dbo].[LoadingAdvance]
      ([LoadingId]
      ,[AdvanceType]
      ,[PaymentMode]
      ,[Amount]
      ,[TDSId]
      ,[TDSRate]
      ,[TDSDeduction]
      ,[NetPayable]
      ,[PartyId]
      ,[PumpId]
      ,[Remarks]
      ,[VoucherId]
      ,[LedgerId]
      ,[PaidOn]
      ,[ChkNeftRefNo]
      ,[Narration]
      ,[InsertUserId]
      ,[InsertDate]
      ,[UpdateUserId]
      ,[UpdateDate])
   VALUES
      (@LoadingId
      ,5
      ,1
      ,@DetentionAmount
      ,NULL
      ,0.0
      ,0.0
      ,@DetentionAmount
      ,NULL
      ,NULL
      ,'Auto Created by Supported Team On Request'
      ,NULL
      ,NULL
      ,NULL
      ,NULL
      ,NULL
      ,3105
      ,GetDate()
      ,NULL
      ,NULL)

INSERT INTO [dbo].[Accounts_VoucherTransaction]
           ([VoucherId]
           ,[LedgerId]
           ,[CostCenter]
           ,[Narration]
           ,[TransactionType]
           ,[Amount]
           ,[ChkNeftRefNo]
           ,[PaymentMode]
           ,[ReconciliationDate]
           ,[ReconciliationRemarks]
           ,[TDSPaymentNature]
           ,[TDSRate]
           ,[STCategory]
           ,[STRate])
     VALUES
           (@VoucherId
           ,@DetentionLedgerId
           ,NULL
           ,'BackEnd Entry by Support Team'
           ,2
           ,@DetentionAmount
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL)

INSERT INTO [dbo].[Accounts_VoucherTransaction]
           ([VoucherId]
           ,[LedgerId]
           ,[CostCenter]
           ,[Narration]
           ,[TransactionType]
           ,[Amount]
           ,[ChkNeftRefNo]
           ,[PaymentMode]
           ,[ReconciliationDate]
           ,[ReconciliationRemarks]
           ,[TDSPaymentNature]
           ,[TDSRate]
           ,[STCategory]
           ,[STRate])
     VALUES
           (@VoucherId
           ,@JobLedgerId
           ,NULL
           ,'BackEnd Entry by Support Team'
           ,1
           ,@DetentionAmount
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL)
COMMIT
END
END TRY
BEGIN CATCH
 rollback;
 declare @error int, @message varchar(4000), @xstate int;
 select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
 raiserror ('[BackEnd_UpdateDetentionInLoadingChallan]: %s %d: %s', 16, 1, '', @error, @message) ;
END CATCH
END





GO
/****** Object:  StoredProcedure [dbo].[BackEnd_UpdateWelfareInLoadingChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[BackEnd_UpdateWelfareInLoadingChallan] (@ChallanNo INT, @WelfareAmount  Decimal(18,2))
AS
Begin
Declare @AdvanceType INT = NULL
Declare @LoadingId INT = NULL
Declare @JobId INT = NULL
Declare @JobLedgerId INT = NULL

Declare @VoucherId INT = NULL
Declare @WelfareLedgerId INT = 5064
Declare @WalfareEntry INT = 0

Select @LoadingId = Id, @JobId = JobId From LoadingChallan Where ChallanNo = @ChallanNo
Select @AdvanceType = AdvanceType From LoadingAdvance Where  LoadingId  = @LoadingId And AdvanceType = 4
Select @VoucherId = Id From Accounts_Vouchers Where ReferenceId = @ChallanNo And VoucherType = 4
Select @JobLedgerId = LedgerId From _Job Where Id = @JobId
Select @WalfareEntry = Count(*) From Accounts_VoucherTransaction Where VoucherId = @VoucherId And LedgerId = @WelfareLedgerId

IF @AdvanceType IS NOT NULL
 THROW 50000, 'Welfare laready exist.', 1
IF @WalfareEntry > 0
    THROW 50000, 'Walfare Ledger entry already available in voucher', 1

BEGIN TRANSACTION
BEGIN TRY
IF @AdvanceType IS NULL
BEGIN
 INSERT INTO [dbo].[LoadingAdvance]
      ([LoadingId]
      ,[AdvanceType]
      ,[PaymentMode]
      ,[Amount]
      ,[TDSId]
      ,[TDSRate]
      ,[TDSDeduction]
      ,[NetPayable]
      ,[PartyId]
      ,[PumpId]
      ,[Remarks]
      ,[VoucherId]
      ,[LedgerId]
      ,[PaidOn]
      ,[ChkNeftRefNo]
      ,[Narration]
      ,[InsertUserId]
      ,[InsertDate]
      ,[UpdateUserId]
      ,[UpdateDate])
   VALUES
      (@LoadingId
      ,4
      ,1
      ,@WelfareAmount
      ,NULL
      ,0.0
      ,0.0
      ,@WelfareAmount
      ,NULL
      ,NULL
      ,'Auto Created by Supported Team On Request'
      ,NULL
      ,NULL
      ,NULL
      ,NULL
      ,NULL
      ,3105
      ,GetDate()
      ,NULL
      ,NULL)

INSERT INTO [dbo].[Accounts_VoucherTransaction]
           ([VoucherId]
           ,[LedgerId]
           ,[CostCenter]
           ,[Narration]
           ,[TransactionType]
           ,[Amount]
           ,[ChkNeftRefNo]
           ,[PaymentMode]
           ,[ReconciliationDate]
           ,[ReconciliationRemarks]
           ,[TDSPaymentNature]
           ,[TDSRate]
           ,[STCategory]
           ,[STRate])
     VALUES
           (@VoucherId
           ,@WelfareLedgerId
           ,NULL
           ,'BackEnd Entry by Support Team'
           ,2
           ,@WelfareAmount
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL)

INSERT INTO [dbo].[Accounts_VoucherTransaction]
           ([VoucherId]
           ,[LedgerId]
           ,[CostCenter]
           ,[Narration]
           ,[TransactionType]
           ,[Amount]
           ,[ChkNeftRefNo]
           ,[PaymentMode]
           ,[ReconciliationDate]
           ,[ReconciliationRemarks]
           ,[TDSPaymentNature]
           ,[TDSRate]
           ,[STCategory]
           ,[STRate])
     VALUES
           (@VoucherId
           ,@JobLedgerId
           ,NULL
           ,'BackEnd Entry by Support Team'
           ,1
           ,@WelfareAmount
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL
           ,NULL)
COMMIT
END
END TRY
BEGIN CATCH
 rollback;
 declare @error int, @message varchar(4000), @xstate int;
 select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
 raiserror ('[sp_paymentvoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
END CATCH
END





GO
/****** Object:  StoredProcedure [dbo].[ChecquePaymentSummary]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChecquePaymentSummary](@LoadFromDate DATE, @LoadToDate DATE)
AS
BEGIN

select T.ChkNeftRefNo, T.Amount, P.PartyName, A.Name Bank, T.Remarks,L.LedgerName,Convert(varchar, B.PaymentDate, 3) PaymentDate
, T.TokenNo
 from _Token T
LEFT OUTER JOIN _TokenBulkPaymentId D ON D.TokenId=T.Id
LEFT OUTER JOIN _TokenBulkPayment B ON B.Id=D.BulkPaymentId
LEFT OUTER JOIN Common_Parties P ON P.Id=T.PartyId
LEFT OUTER JOIN Common_BankNames A ON A.Id=B.BankNameId
LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=T.LedgerId
WHERE T.ChkNeftRefNo IS NOT NULL AND T.PaidOn BETWEEN @LoadFromDate AND @LoadToDate AND  B.PaymentDate is not null 

END


--select * from _TokenBulkPayment
GO
/****** Object:  StoredProcedure [dbo].[Common_AuditLog]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[Common_AuditLog]
	 @UserId                  INT
    ,@UserName				  VARCHAR(50)
	,@Action				  VARCHAR(50)
    ,@TableName				  VARCHAR(50)
	,@RowId					  INT
    ,@Module				  VARCHAR(50) = NULL
    ,@Page					  VARCHAR(500) = NULL
    ,@Changes				  VARCHAR(MAX) = NULL
AS
BEGIN
INSERT INTO [dbo].[AuditLog]
           ([UserId]
           ,[UserName]
		   ,[Action]
           ,[ChangedOn]
           ,[TableName]
           ,[RowId]
           ,[Module]
           ,[Page]
           ,[Changes])
     VALUES
           (
		    @UserId    
		   ,@UserName
		   ,@Action
		   ,GetDate()	
		   ,@TableName	
		   ,@RowId		
		   ,@Module	
		   ,@Page		
		   ,@Changes	
		   )
END
GO
/****** Object:  StoredProcedure [dbo].[Common_GetUsersByPermissionKey]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Common_GetUsersByPermissionKey](@PermissionKey VARCHAR(500), @BranchId INT=0)
AS
BEGIN
	SELECT DISTINCT * FROM (
	Select P.UserId, ISNULL(U.Name, ISNULL(U.DisplayName, U.UserName)) as UserName, U.Email
	FROM UserPermissions P
	LEFT JOIN Users U On U.Id = P.UserId
	LEFT JOIN UserBranchAccess B ON B.UserId=U.UserId
	WHERE P.PermissionKey = @PermissionKey AND (@BranchId=0 OR B.BranchId=@BranchId)
	UNION
	Select UR.UserId, ISNULL(U.Name, ISNULL(U.DisplayName, U.UserName)) as UserName, U.Email 
	FROM RolePermissions R
	Left Join UserRoles UR ON UR.RoleId = R.RoleId
	LEFT JOIN Users U On U.Id = UR.UserId
	LEFT JOIN UserBranchAccess B ON B.UserId=U.UserId
	WHERE R.PermissionKey = @PermissionKey  AND (@BranchId=0 OR B.BranchId=@BranchId)) XX
END
GO
/****** Object:  StoredProcedure [dbo].[Common_UpdateContigousSettings]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Common_UpdateContigousSettings] (
	@Type INT,
	@TableName Varchar(50),
	@RowId INT = NULL ,
	@DateFrom DATE = NULL,
	@DateTo DATE = NULL,
	@PFName1 VARCHAR(50) = NULL ,
	@PFValue1 INT = NULL ,
	@PFName2 VARCHAR(50) = NULL ,
	@PFValue2 INT = NULL ,
	@PFName3 VARCHAR(50) = NULL ,
	@PFValue3 INT = NULL ,
	@PFName4 VARCHAR(50) = NULL ,
	@PFValue4 INT = NULL 
)
AS


DECLARE @data VARCHAR(8000)=''
SET @data = @TableName + @PFName1 + @PFName2 + @PFName3 + @PFName4
DECLARE @flag bit=0
SELECT @flag = dbo.FN_EscapeSQLInjection(@data)

IF @flag=0
	THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @MySQL NVARCHAR(MAX)=''
	DECLARE @sRowId Varchar(50) = Convert(Varchar(50) ,@RowId)
	DECLARE @PreviousRowId INT = NULL
	DECLARE @NextRowId INT = NULL
	DECLARE @ParentFieldsQry VARCHAR(500) = ''

	IF @PFName1 IS NOT NULL
		SET @ParentFieldsQry = @ParentFieldsQry + ' AND '+ @PFName1 +' = ' + Convert(Varchar,@PFValue1)
	IF @PFName2 IS NOT NULL
		SET @ParentFieldsQry = @ParentFieldsQry + ' AND '+ @PFName2 +' = ' + Convert(Varchar,@PFValue2)
	IF @PFName3 IS NOT NULL
		SET @ParentFieldsQry = @ParentFieldsQry + ' AND '+ @PFName3 +' = ' + Convert(Varchar,@PFValue3)
	IF @PFName4 IS NOT NULL
		SET @ParentFieldsQry = @ParentFieldsQry + ' AND '+ @PFName4 +' = ' + Convert(Varchar,@PFValue4)

	IF @Type = 1 -- Before Creating new Row
	BEGIN
		IF LEN(@ParentFieldsQry) > 0
		BEGIN
			Declare @LastDateFrom DATE = NULL
			SET @MySQL= 'SELECT @LastDateFrom1 = DateFrom FROM ' + @TableName + ' WHERE DateTo IS NULL ' + @ParentFieldsQry
			EXECUTE sp_executesql @MySQL, N' @LastDateFrom1 DATE OUTPUT',  @LastDateFrom1=@LastDateFrom OUTPUT

			IF @LastDateFrom IS NOT NULL AND @LastDateFrom > @DateFrom 
				THROW 50000, 'Effective From should be greater then last From Date', 1

			SET @MySQL= 'UPDATE '+@TableName+' SET DateTo = '''+ CONVERT(VARCHAR(10),DATEADD(DD,-1,@DateFrom), 101) +''' WHERE DateTo IS NULL ' + @ParentFieldsQry
			EXECUTE sp_executeSQL @MySQL
		END
	END
	ELSE IF @Type = 2 -- Update Row
	BEGIN
		SET @MySQL= 'SELECT @PId = MAX(Id) FROM ' + @TableName+ ' WHERE 1=1 AND Id < ' + @sRowId + @ParentFieldsQry
		EXECUTE sp_executesql @MySQL, N'@PId INT OUTPUT', @PId=@PreviousRowId OUTPUT
		SET @MySQL= 'SELECT @NId = MIN(Id) FROM ' + @TableName+ ' WHERE 1=1 AND Id > ' + @sRowId + @ParentFieldsQry
		EXECUTE sp_executesql @MySQL, N'@NId INT OUTPUT', @NId=@NextRowId OUTPUT
		
		IF @PreviousRowId IS NOT NULL
		BEGIN
			SET @MySQL= 'UPDATE '+@TableName+' SET DateTo = '''+ CONVERT(VARCHAR(10),DATEADD(DD,-1,@DateFrom), 101) +''' WHERE Id = ' + Convert(Varchar,@PreviousRowId)
			EXECUTE sp_executeSQL @MySQL
		END

		IF @NextRowId IS NOT NULL
		BEGIN
			SET @MySQL= 'UPDATE '+@TableName+' SET DateFrom = '''+ CONVERT(VARCHAR(10),DATEADD(DD,1,@DateTo), 101) +''' WHERE Id = ' + Convert(Varchar,@NextRowId)
			EXECUTE sp_executeSQL @MySQL
		END
	END
	ELSE IF @Type = 3 -- Delete Row
	BEGIN
		SET @MySQL= 'SELECT @PId = MAX(Id) FROM ' + @TableName+ ' WHERE 1=1 AND Id < ' + @sRowId + @ParentFieldsQry
		EXECUTE sp_executesql @MySQL, N'@PId INT OUTPUT', @PId=@PreviousRowId OUTPUT
		SET @MySQL= 'SELECT @NId = MIN(Id) FROM ' + @TableName+ ' WHERE 1=1 AND Id > ' + @sRowId + @ParentFieldsQry
		EXECUTE sp_executesql @MySQL, N'@NId INT OUTPUT', @NId=@NextRowId OUTPUT
		IF @PreviousRowId IS NULL
		BEGIN
			SELECT 'S' -- Do nothing here
		END
		ELSE IF @PreviousRowId IS NOT NULL AND @NextRowId IS NULL
		BEGIN
			SET @MySQL= 'UPDATE '+@TableName+' SET DateTo = NULL WHERE Id = '+ Convert(Varchar,@PreviousRowId)
			EXECUTE sp_executeSQL @MySQL
		END
		ELSE IF @NextRowId IS NOT NULL AND @PreviousRowId IS NOT NULL
		BEGIN
			SET @MySQL= 'UPDATE '+@TableName+' SET DateTo = (Select DATEADD(DD, -1, DateFrom) From '+@TableName+' Where Id = ' + Convert(Varchar,@NextRowId) + ') WHERE Id = ' + Convert(Varchar,@PreviousRowId)
			EXECUTE sp_executeSQL @MySQL
		END
		ELSE
			THROW 50000, 'Case not handled for Delete.', 1	
	END
	SET @MySQL = 'SELECT @PId = COUNT(*) From ' + 	@TableName + ' Where 1=1 ' + @ParentFieldsQry + ' And IsNull(DateTo, ''2555-01-01'') < DateFrom'
	EXECUTE sp_executesql @MySQL, N'@PId INT OUTPUT', @PId=@PreviousRowId OUTPUT
	--IF (@PreviousRowId > 0)
	--	THROW 50000, 'DateFrom can not be greater then DateTo. Please check all contigous records.', 1
END
GO
/****** Object:  StoredProcedure [dbo].[Common_ValidateParty]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Common_ValidateParty]
	@PartyId INT
AS
BEGIN
	DECLARE @PanNumber Varchar(50) = NULL
	DECLARE @ParytCode Varchar(50) = NULL
	DECLARE @ParytType INT = NULL
	DECLARE @ExistingPANNo INT = 0
	DECLARE @ExistingACNo INT = 0
	DECLARE @ExistingPartyCode INT = 0
	DECLARE @IFSCCode VARCHAR(50) = NULL
	DECLARE @BankACNo VARCHAR(50) = NULL
	DECLARE @BankId INT = NULL
	SELECT @PanNumber = PANNumber, @ParytCode = PartyCode, @ParytType = PartyType From Common_Parties Where Id = @PartyId
	SELECT @ExistingPANNo = Count(PANNumber) From Common_Parties WHERE Id <> @PartyId AND PartyType = @ParytType AND PANNumber IS NOT NULL AND LEN(PANNumber) > 0 AND PANNumber = @PanNumber
	IF @ExistingPANNo > 0
		THROW 50000, 'PAN No already exist for same Party Type', 1
	SELECT @ExistingPartyCode = Count(PartyCode) From Common_Parties WHERE Id <> @PartyId AND PartyCode IS NOT NULL AND LEN(PartyCode) > 0 AND PartyCode = @ParytCode
	IF @ExistingPartyCode > 0
		THROW 50000, 'Party Code already exist', 1
	Select @IFSCCode = P.IFSCCode, @BankId = P.BankName, @BankACNo = P.BankACNo From Common_Parties P WHERE Id = @PartyId
	SELECT @ExistingACNo = Count(BankACNo) From Common_Parties WHERE Id <> @PartyId AND PartyType = @ParytType AND BankACNo IS NOT NULL AND LEN(BankACNo) > 0 AND BankACNo = @BankACNo
	IF @ExistingACNo > 0
		THROW 50000, 'A/C No already exist for same Party Type', 1
	IF @IFSCCode IS NOT NULL OR @BankId IS NOT NULL OR @BankACNo IS NOT NULL
	BEGIN
		IF @BankId IS NULL
			THROW 50000, 'Bank selection is required', 1
		IF @BankACNo IS NULL
			THROW 50000, 'Bank A/C No is required', 1
		-- DECLARE @BulkPayment INT = 0
		--SELECT @BulkPayment = B.IsBulkPaymentUse  From Common_BankNames B Where Id = @BankId
		--IF @BulkPayment = 0 AND @IFSCCode IS NULL 
		--	THROW 50000, 'IFSC Code is required', 1
		IF @IFSCCode IS NULL 
			THROW 50000, 'IFSC Code is required', 1
	END
END	

GO
/****** Object:  StoredProcedure [dbo].[Dashboard_GetInvoiceDataNew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 --- exec [Dashboard_GetInvoiceDataNew] 1
CREATE PROCEDURE [dbo].[Dashboard_GetInvoiceDataNew](
	@Type INT,
	@FinancialYearId INT=0
)
AS
BEGIN
	DECLARE @FYStartDate DATE
	DECLARE @FYEndDate DATE
	SELECT @FYStartDate = StartDate, @FYEndDate = EndDate, @FinancialYearId=Id From Accounts_FinancialYear   
	with (nolock) WHERE ID=@FinancialYearId
	IF @Type = 1 
	BEGIN
			  SELECT 
				L.JobNo, L.ChallanNo, L.NetWT, L.LoadDate,  L.UnloadedDate
				,ClientRate BillingRate
				,
				 --CASE 
					--WHEN WO.ClaimQtyType = 3 THEN ISNULL(L.NETWT,0)  -- Load WT
					--WHEN WO.ClaimQtyType = 4 THEN ISNULL(U.UnloadedNetWt,0)  -- UnLoad WT
					--WHEN WO.ClaimQtyType = 5 THEN ISNULL(L.GuaranteeWT,0) -- Gurantee WT
					--WHEN WO.ClaimQtyType = 2 AND L.NetWT < U.UnloadedNetWt THEN L.NetWT -- At Low
					--WHEN WO.ClaimQtyType = 1 AND L.NetWT > U.UnloadedNetWt THEN L.NetWT -- At High
				    --ELSE U.UnloadedNetWt
			     --END  
				L.NetWT AS BillingWt
				INTO #Temp
				FROM vw_InvoiceChallanPending L/*
				WHERE L.ChallanNo IN (
					SELECT ChallanNo FROM LoadingChallan L
					WHERE NOT EXISTS 
					(
					   SELECT 1 FROM _InvoiceChallan IC WHERE IC.ChallanNo=L.ChallanNo AND L.LoadDate >= @FYStartDate AND L.LoadDate <= @FYEndDate
					)
					AND L.LoadDate >= @FYStartDate AND  L.LoadDate <= @FYEndDate	 
			   )*/
			   
			  
	
	CREATE TABLE #invoicedata(
	[ClientId] [int] NULL,
	[ExecutingBranchId] [int] NULL,
	[PartyName] [varchar](166) NULL,
	[BranchName] [varchar](200) NULL,
	[OpeningBalance] [decimal](38, 2) NOT NULL,
	[OnAccAmount] [decimal](38, 2) NOT NULL,
	[OD] [decimal](38, 0) NOT NULL,
	[ODOnCC] [decimal](38, 2) NOT NULL,
	[Org] [decimal](38, 0) NULL,
	[TotalInvoice] [int] NOT NULL,
	[TotalPendingInvoiceCount] [int] NULL,
	[TotalPendingAge] [int] NULL,
	[TotalOverdueInvoiceCount] [int] NULL,
	[TotalOverdueAge] [int] NULL,
	[PendingAmount] [decimal](38, 0) NULL,
	[Amount] [int] NOT NULL,
	[OverDueAmount] [decimal](38, 0) NULL,
	[Received] [int] NOT NULL,
	[CheckReceived] [int] NOT NULL,
	[ShortageDeduction] [int] NOT NULL,
	[TDSDeduction] [int] NOT NULL,
	[OtherDeduction] [int] NOT NULL,
	[UnbilledAmount] [decimal](38, 5) NULL,
	[Email] [varchar](500) NOT NULL
)
		INSERT INTO #invoicedata
			EXEC _CurrentInvoiceReport
		DECLARE @Pending decimal(18,2)=0.00
		DECLARE @Received decimal(18,2)=0.00
		DECLARE @Unbilled decimal(18,2)=0.00
		SELECT @Pending=SUM(PendingAmount), @Received=SUM(Amount), @Unbilled=SUM(UnbilledAmount) from #invoicedata
		--SELECT SUM(PendingAmount), SUM(Amount) from #invoicedata
		 SELECT COUNT(ChallanNo) AS TotalPendingChallans,
				COUNT(ChallanNo) AS PendingLoadedChallans,
				ISNULL(SUM( CASE WHEN UnloadedDate IS NULL THEN 1 ELSE 0
				END ), 0) AS PendingUnLoadedChallans,
				ISNULL(SUM(BillingRate*BillingWt),0) AS PendingBillingAmount
				, IsNull(@Pending,0) PendingForRealization, IsNULL(@Received,0) Received, IsNull(@Unbilled,0) UnbilledAmount
				FROM #temp

	END
	ELSE IF @Type = 2
	BEGIN
		Select I.ClientId, I.ClientName, I.Age, (IsNull(C.MaxInvoiceAge,90) - I.Age) DaysLeft From (
		Select ClientId, ClientName, Max(IsNull(Age,0)) Age from vw_InvoiceDetails
	    Where InvoiceDate >= @FYStartDate And InvoiceDate <= @FYEndDate
		Group By ClientId, ClientName
		Having Max(IsNull(Age,0)) > 30) I
		Left Join Common_Client C On C.Id = I.ClientId
		Order BY DaysLeft asc
	END
END
GO
/****** Object:  StoredProcedure [dbo].[Dashboard_GetPaymentData]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Dashboard_GetPaymentData](
	@FinancialYearId INT
)
AS
BEGIN
	DECLARE @FYStartDate DATE
	DECLARE @FYEndDate DATE
	SELECT @FYStartDate = StartDate, @FYEndDate = EndDate From Accounts_FinancialYear WHERE Id = @FinancialYearId
	Select 
		Sum(Case When D.TokenStatus = 2 THEN D.TokenAmount ELSE 0.0 End) as PendingVerification 
		,Sum(Case When D.TokenStatus = 3 THEN D.TokenAmount ELSE 0.0 End) as PendingApproval
	from vw_TokenDetails D
	Inner Join _Token T On D.Id = T.Id
	WHERE T.ReceivedOn >= @FYStartDate AND T.ReceivedOn <= @FYEndDate
END

GO
/****** Object:  StoredProcedure [dbo].[Email_Acounting_DailyLedgerReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Email_Acounting_DailyLedgerReport]
AS
BEGIN
	DECLARE @BranchName VARCHAR(50)=''
	DECLARE @LedgerName VARCHAR(50)=''
	DECLARE @OldBranchName VARCHAR(50)=''
	DECLARE @LedgerId INT =NULL
	DECLARE @Email VARCHAR(200)=''
	DECLARE @OldEmail VARCHAR(200)=''
	DECLARE @Text VARCHAR(max)=''
	
	DECLARE @data VARCHAR(MAX)= ''

	DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @data + @Text + @OldEmail + @Email + @OldBranchName + @LedgerName + @BranchName
	
	DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
	IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	DECLARE db_cursor CURSOR FOR  
		SELECT BranchName, LedgerName, (CASE WHEN Email IS NULL THEN 'satya@eximlogistics.in' ELSE Email END) Email, LedgerId  FROM (
			SELECT Name BranchName, LedgerId FROM Common_Branch
			UNION ALL
			SELECT Name BranchName, AB.LedgerId FROM Accounts_Banks AB
			LEFT OUTER JOIN Common_Branch CB ON CB.Id=AB.AssociatedBranch
			) XX
		LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=XX.LedgerId
		WHERE [Group] IN (17,18) ORDER BY BranchName

	OPEN db_cursor   
	FETCH NEXT FROM db_cursor INTO @BranchName, @LedgerName, @Email, @LedgerId

	WHILE @@FETCH_STATUS = 0   
	BEGIN   
		PRINT 'New=>'+@BranchName
		PRINT 'Old=>'+@OldBranchName
		
		DECLARE @Subject VARCHAR(100)=''
		
		SET @Text = @Text + @data
		IF @OldBranchName='' OR @OldBranchName=@BranchName
			BEGIN	
				SET @data = ''
			END
		ELSE
			BEGIN
				SET @Subject = @OldBranchName + ' Ledger Details : ' + CONVERT(VARCHAR(10), GETDATE(),103)
				PRINT ' Subject=>'+@Subject
				INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
					VALUES  (NULL ,@OldEmail   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
				SET @Text=''
				SET @data = ''
			END
		
		PRINT '==================================='
		IF OBJECT_ID('tempdb..#TempTable') IS NOT NULL
		  DROP TABLE #TempTable
		CREATE TABLE #TempTable(data varchar(max))
		INSERT INTO #TempTable
			EXEC [Acounting_DailyLedgerReport] @LedgerId
		
		SELECT top 1 @data= '<div><div><b>'+@LedgerName+'</b></div><div>'+ data + '</div></div>' FROM #TempTable
		
		SET	@OldBranchName=@BranchName
		SET	@OldEmail = @Email
		
		FETCH NEXT FROM db_cursor INTO @BranchName, @LedgerName, @Email , @LedgerId  

		IF @@FETCH_STATUS!=0
		BEGIN
			SET @Subject = @OldBranchName + ' Ledger Details : ' + CONVERT(VARCHAR(10), GETDATE(),103)
			PRINT 'Last=>'+@Subject
			INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
				VALUES  (NULL ,@Email   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
			SET @Text=''
			SET @data = ''
		END
	END   

	CLOSE db_cursor   
	DEALLOCATE db_cursor
END
GO
/****** Object:  StoredProcedure [dbo].[Email_EWayBillReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Email_EWayBillReport]
AS
BEGIN
	DECLARE @BranchName VARCHAR(50)=''
	DECLARE @OldBranchName VARCHAR(50)=''
	DECLARE @BranchId INT =NULL
	DECLARE @Email VARCHAR(200)=''
	DECLARE @OldEmail VARCHAR(200)=''
	DECLARE @Text VARCHAR(max)=''
	
	DECLARE @data VARCHAR(MAX)= ''

	DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @data + @Text + @OldEmail + @Email + @OldBranchName + @BranchName
	
	DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
	IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	DECLARE db_cursor CURSOR FOR  
		SELECT BranchId, BranchName, (CASE WHEN L.Email IS NULL THEN 'satya@eximlogistics.in' ELSE L.Email END) Email FROM (
			SELECT Id BranchId, Name BranchName, LedgerId FROM Common_Branch
			) XX
		LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=XX.LedgerId
		ORDER BY BranchName

	OPEN db_cursor   
	FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

	WHILE @@FETCH_STATUS = 0   
	BEGIN   
		PRINT 'New=>'+@BranchName
		PRINT 'Old=>'+@OldBranchName
		
		DECLARE @Subject VARCHAR(100)=''
		
		SET @Text = @Text + @data
		IF @OldBranchName='' OR @OldBranchName=@BranchName
			BEGIN	
				SET @data = ''
			END
		ELSE IF @Text<>''
			BEGIN
				SET @Subject = @OldBranchName + ' EWay Bill Details : ' + CONVERT(VARCHAR(10), GETDATE(),103)
				PRINT ' Subject=>'+@Subject
				SET @OldEmail = REPLACE(@OldEmail, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
				SET @OldEmail = REPLACE(@OldEmail, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
				INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
					VALUES  (NULL ,@OldEmail   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
				SET @Text=''
				SET @data = ''
			END
		
		PRINT '==================================='
		IF OBJECT_ID('tempdb..#temp') IS NOT NULL
		  DROP TABLE #temp

		DECLARE @val VARCHAR(MAX);
		SELECT '<TR><TD>'+ISNULL(L.WayBillNo,'')+'</TD><TD>'+CONVERT(VARCHAR,L.ValidityDate, 103) +'</TD><TD>'+ CONVERT(VARCHAR,ISNULL(L.Distance,'0')) +'</TD><TD>'+ ISNULL(L.WayBillBy,'')
				+'</TD><TD>'+ CONVERT(VARCHAR, L.ChallanNo) +'</TD><TD>'+ ISNULL(L.TruckNumber,'') +'</TD><TD>'+ ISNULL(L.OwnerName,'') +'</TD><TD>'+ ISNULL(L.OwnerContact,'')+'</TD></TR>' AS EWayBillData 
				INTO #temp 
				FROM vw_ReportLoadingChallanReport L
			WHERE 
				L.JobBranchId=@BranchId
			AND	L.ValidityDate IS NOT NULL 
			AND L.UnloadingId IS NULL
			AND CONVERT(DATE, L.ValidityDate, 102) <= DATEADD(DAY,1,CONVERT(DATE, GETDATE(), 102)) ORDER BY LoadDate
		SELECT @val=COALESCE(@Val+EWayBillData,EWayBillData) FROM #temp

		IF RTRIM(LTRIM(@val))<>''
		BEGIN
			SET @data='<TABLE STYLE="border-color:black;border:1px;font-family:verdana;font-size:8px;"><TR><TD>EWay Bill No</TD><TD>EWay Date</TD><TD>Distance</TD><TD>EWay Bill By</TD><TD>Challan No</TD><TD>Vechile No</TD><TD>Owner</TD><TD>Owner Contact</TD></TR>'+@val+'</TABLE>'
		END

		SET	@OldBranchName=@BranchName
		SET	@OldEmail = @Email
		
		FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

		IF @@FETCH_STATUS!=0
		BEGIN
			SET @Subject = @OldBranchName + ' EWay Bill Details : ' + CONVERT(VARCHAR(10), GETDATE(),103)
			PRINT 'Last=>'+@Subject
			SET @Email = REPLACE(@Email, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
			SET @Email = REPLACE(@Email, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
			INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
				VALUES  (NULL ,@Email   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
			SET @Text=''
			SET @data = ''
		END
	END   

	CLOSE db_cursor   
	DEALLOCATE db_cursor
END
GO
/****** Object:  StoredProcedure [dbo].[Email_ExceptionInvoiceRealizationGap]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Email_ExceptionInvoiceRealizationGap]
AS
BEGIN
	DECLARE @BranchName VARCHAR(50)=''
	DECLARE @OldBranchName VARCHAR(50)=''
	DECLARE @BranchId INT =NULL
	DECLARE @Email VARCHAR(200)=''
	DECLARE @OldEmail VARCHAR(200)=''
	DECLARE @Text VARCHAR(max)=''
	
	DECLARE @data VARCHAR(MAX)= ''

	DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @data + @Text + @OldEmail + @Email + @OldBranchName + @BranchName
	
	DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
	IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	DECLARE db_cursor CURSOR FOR  
		SELECT BranchId, BranchName, (CASE WHEN L.Email IS NULL THEN 'satya@eximlogistics.in' ELSE L.Email END) Email FROM (
			SELECT Id BranchId, Name BranchName, LedgerId FROM Common_Branch
			) XX
		LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=XX.LedgerId
		ORDER BY BranchName

	OPEN db_cursor   
	FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

	WHILE @@FETCH_STATUS = 0   
	BEGIN   
		PRINT 'New=>'+@BranchName
		PRINT 'Old=>'+@OldBranchName
		
		DECLARE @Subject VARCHAR(100)=''
		
		SET @Text = @Text + @data
		IF @OldBranchName='' OR @OldBranchName=@BranchName
			BEGIN	
				SET @data = ''
			END
		ELSE IF @Text<>''
			BEGIN
				SET @Subject = @OldBranchName + ' Invoice Realization Gap Report : ' + CONVERT(VARCHAR(10), GETDATE(),103)
				PRINT ' Subject=>'+@Subject
				SET @OldEmail = REPLACE(@OldEmail, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
				SET @OldEmail = REPLACE(@OldEmail, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
				INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
					VALUES  (NULL ,@OldEmail   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
				SET @Text=''
				SET @data = ''
			END
		
		PRINT '==================================='
		IF OBJECT_ID('tempdb..#temp') IS NOT NULL
		  DROP TABLE #temp

		DECLARE @val VARCHAR(MAX);

		SELECT '<TR><TD>'+CAST(DATEDIFF(DAY, CONVERT(DATE,I.InvoiceDate,102), GETDATE()) AS VARCHAR)+'</TD><TD>'+CAST(I.InvoiceNo AS VARCHAR)+'</TD><TD>'+CONVERT(VARCHAR(10),I.InvoiceDate,103) +'</TD><TD>'+ CAST(I.InvoiceAmount AS VARCHAR) +'</TD><TD>'+ CAST(I.TotalChallans AS VARCHAR)
				+'</TD><TD>'+ I.ClientName +'</TD></TR>' AS TableData 
			INTO #temp 
			FROM vw_InvoiceDetails I 
			LEFT OUTER JOIN Common_Client C ON C.Id=I.ClientId
			WHERE CONVERT(DATE,I.InvoiceDate,102)>=CONVERT(DATE,'2018-04-01',102) 
				AND I.InvoiceBranchId=@BranchId
				AND I.RealizationDate IS NULL
				AND DATEDIFF(DAY, DATEADD(DAY, IsNull(C.MaxInvoiceAge,0), I.InvoiceDate), GETDATE())>5
			ORDER BY DATEDIFF(DAY, DATEADD(DAY, IsNull(C.MaxInvoiceAge,0), I.InvoiceDate), GETDATE()) DESC
		
		SELECT @val=COALESCE(@Val+TableData,TableData) FROM #temp

		IF RTRIM(LTRIM(@val))<>''
		BEGIN
			SET @data='<style>table, th, td {   border: 1px solid black;    border-collapse: collapse;} th{background-color:yellow;}</style><TABLE STYLE="font-family:verdana;font-size:10px;"><TR><TD>Age</TD><TD>Invoice No</TD><TD>Invoice Date</TD><TD>Amount</TD><TD>Total Challans</TD><TD>Client Name</TD></TR>'+@val+'</TABLE>'
		END

		SET	@OldBranchName=@BranchName
		SET	@OldEmail = @Email
		
		FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

		IF @@FETCH_STATUS!=0
		BEGIN
			SET @Subject = @OldBranchName + ' Invoice Realization Gap Report : ' + CONVERT(VARCHAR(10), GETDATE(),103)
			PRINT 'Last=>'+@Subject
			SET @Email = REPLACE(@Email, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
			SET @Email = REPLACE(@Email, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
			INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
				VALUES  (NULL ,@Email   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
			SET @Text=''
			SET @data = ''
		END
	END   

	CLOSE db_cursor   
	DEALLOCATE db_cursor
END
GO
/****** Object:  StoredProcedure [dbo].[Email_ExceptionTokenInvoiceGap]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Email_ExceptionTokenInvoiceGap]
AS
BEGIN
	DECLARE @BranchName VARCHAR(50)=''
	DECLARE @OldBranchName VARCHAR(50)=''
	DECLARE @BranchId INT =NULL
	DECLARE @Email VARCHAR(200)=''
	DECLARE @OldEmail VARCHAR(200)=''
	DECLARE @Text VARCHAR(max)=''
	
	DECLARE @data VARCHAR(MAX)= ''

	DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @data + @Text + @OldEmail + @Email + @OldBranchName + @BranchName
	
	DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
	IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	DECLARE db_cursor CURSOR FOR  
		SELECT BranchId, BranchName, (CASE WHEN L.Email IS NULL THEN 'satya@eximlogistics.in' ELSE L.Email END) Email FROM (
			SELECT Id BranchId, Name BranchName, LedgerId FROM Common_Branch
			) XX
		LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=XX.LedgerId
		ORDER BY BranchName

	OPEN db_cursor   
	FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

	WHILE @@FETCH_STATUS = 0   
	BEGIN   
		PRINT 'New=>'+@BranchName
		PRINT 'Old=>'+@OldBranchName
		
		DECLARE @Subject VARCHAR(100)=''
		
		SET @Text = @Text + @data
		IF @OldBranchName='' OR @OldBranchName=@BranchName
			BEGIN	
				SET @data = ''
			END
		ELSE IF @Text<>''
			BEGIN
				SET @Subject = @OldBranchName + ' Token Invoice Gap Report : ' + CONVERT(VARCHAR(10), GETDATE(),103)
				PRINT ' Subject=>'+@Subject
				SET @OldEmail = REPLACE(@OldEmail, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
				SET @OldEmail = REPLACE(@OldEmail, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
				INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
					VALUES  (NULL ,@OldEmail   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
				SET @Text=''
				SET @data = ''
			END
		
		PRINT '==================================='
		IF OBJECT_ID('tempdb..#temp') IS NOT NULL
		  DROP TABLE #temp

		DECLARE @val VARCHAR(MAX);

		SELECT '<TR><TD>'+CAST(T.ChallanNo AS VARCHAR)+'</TD><TD>'+TT.TokenNo +'</TD><TD>'+ CONVERT(VARCHAR(10),TT.PaidOn,103) +'</TD><TD>'+ ISNULL(II.InvoiceNo,'')
				+'</TD><TD>'+ CASE WHEN II.InvoiceDate IS NOT NULL THEN CONVERT(VARCHAR(10),II.InvoiceDate,103) ELSE 'NOT INVOICED' END +'</TD></TR>' AS TableData 
			INTO #temp 
			FROM _TokenChallans T
				INNER JOIN _Token TT ON TT.Id=T.TokenId
				LEFT OUTER JOIN _InvoiceChallan I ON I.ChallanNo=T.ChallanNo
				INNER JOIN _Invoice II ON II.Id=I.InvoiceId
				LEFT OUTER JOIN _InvoicePayment IP ON IP.InvoiceId=II.Id
			WHERE DATEDIFF(DAY,TT.PaidOn, ISNULL(II.InvoiceDate,'2055-01-01'))>1 
				AND IP.InvoiceId IS NULL 
				AND CONVERT(DATE,TT.PaidOn,102)>=CONVERT(DATE,'2018-04-01',102) 
				AND TT.TokenBranchId=@BranchId
			ORDER BY TT.PaidOn
		
		SELECT @val=COALESCE(@Val+TableData,TableData) FROM #temp

		IF RTRIM(LTRIM(@val))<>''
		BEGIN
			SET @data='<style>table, th, td {   border: 1px solid black;    border-collapse: collapse;} th{background-color:yellow;}</style><TABLE STYLE="font-family:verdana;font-size:10px;"><TR><TD>Challan No</TD><TD>Token No</TD><TD>Paid On</TD><TD>Invoice No</TD><TD>Invoice Date</TD></TR>'+@val+'</TABLE>'
		END

		SET	@OldBranchName=@BranchName
		SET	@OldEmail = @Email
		
		FETCH NEXT FROM db_cursor INTO @BranchId, @BranchName, @Email

		IF @@FETCH_STATUS!=0
		BEGIN
			SET @Subject = @OldBranchName + ' Token Invoice Gap Report : ' + CONVERT(VARCHAR(10), GETDATE(),103)
			PRINT 'Last=>'+@Subject
			SET @Email = REPLACE(@Email, 'himadri@eximlogistics.in', 'satya@eximlogistics.in')
			SET @Email = REPLACE(@Email, 'phalguni@eximlogistics.in', 'satya@eximlogistics.in')
			INSERT INTO Common_EmailSent (FromEmail ,ToEmail   ,CC  ,BCC  ,Subject   ,Content ,IsHtml  ,TimeStamp  ,Error)
				VALUES  (NULL ,@Email   ,NULL    ,NULL    ,@Subject    ,@Text     ,1    ,GETDATE()    ,NULL)
			SET @Text=''
			SET @data = ''
		END
	END   

	CLOSE db_cursor   
	DEALLOCATE db_cursor
END
GO
/****** Object:  StoredProcedure [dbo].[Fleet_GetExpenseReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Fleet_GetExpenseReport]
	@FromDate Date,
	@ToDate Date
AS
BEGIN
	SELECT * FROM 
	(
	SELECT Top 1000
		  V.VehicleNo as VehicleNo
		  ,ModelYear
		  ,CONVERT(varchar, RegistrationDate, 103) As RegistrationDate
		  ,ChassisNo
		  ,EngineNo
		  ,IsNull(Sum(VF.TotalCost),0) Fuel
		  ,IsNull(Sum(VS.Cost),0) [Serviceing]
		  ,IsNull(Sum(VT.Cost),0) Tyre
		  ,IsNull(Sum(VP.TotalPrice),0) Parts
		  ,IsNull(Sum(VI.Premium),0) Insurance
		  ,IsNull(Sum(VA.Fees),0) Association
		  ,IsNull(Sum(VPol.Amount),0) Pollution
		  ,IsNull(Sum(VR.Amount),0) RoadTax
		  ,IsNull(Sum(VPr.Amount),0) Permit
	FROM Fleet_Vehicle  V
	Left Join Fleet_VehicleFueL VF On VF.VehicleId = V.Id And  VF.FillUpDate >= @FromDate And VF.FillUpDate < @ToDate 
	Left Join Fleet_VehicleServices VS On VS.VehicleId = V.Id And  VS.ServiceDate >= @FromDate And VS.ServiceDate < @ToDate 
	Left Join Fleet_VehicleTyres VT On VT.VehicleId = V.Id And  VT.PaidOn >= @FromDate And VS.ServiceDate < @ToDate 
	Left Join Fleet_VehicleParts VP On VP.VehicleId = V.Id And  VP.[Date] >= @FromDate And  VP.[Date]  < @ToDate 
	Left Join Fleet_VehicleInsurance VI On VI.VehicleId = V.Id And  VI.PremiumDate >= @FromDate And  VI.PremiumDate  < @ToDate 
	Left Join Fleet_VehicleAssociations VA On VA.VehicleId = V.Id And  VA.PaidOn >= @FromDate And  VA.PaidOn  < @ToDate 
	Left Join Fleet_VehiclePollution VPol On VPol.VehicleId = V.Id And  VPol.PollutionDate >= @FromDate And  VPol.PollutionDate  < @ToDate 
	Left Join Fleet_VehicleRoadTax VR On VR.VehicleId = V.Id And  VR.PaidOn >= @FromDate And  VR.PaidOn  < @ToDate 
	Left Join Fleet_VehiclePermit VPr On VPr.VehicleId = V.Id And  VPr.PaidOn >= @FromDate And  VPr.PaidOn  < @ToDate 
	Group By V.VehicleNo 
			,ModelYear
			,RegistrationDate
			,ChassisNo
			,EngineNo
	) A
	WHERE (Fuel+ [Serviceing]+ Tyre+ Parts + Insurance+ Association+ Pollution+ RoadTax +Permit) > 0
END	
GO
/****** Object:  StoredProcedure [dbo].[Fleet_GetExpireReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Fleet_GetExpireReport]
	@ExpireInDays INT,
	@Type Varchar(50) = NULL

AS
    DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @Type
	
	DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
	IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
SELECT  Top 1000 ET.Name as [Type], VehicleNo, ReferenceNo , CONVERT(varchar, ExpireOn, 103) As ExpireOn, 
DATEDIFF(DAY, GetDate(), ExpireOn) as ExpireDays, A.Remarks 
FROM (
	SELECT 1 as [Type],VehicleId,ReferenceNo,ExpireOn,'States: ' + dbo.FN_Fleet_GetPermitStates(Id) as Remarks
	FROM [Fleet_VehiclePermit]
	UNION
	SELECT 2 as [Type],VehicleId, NULL as ReferenceNo, NextServiceDate as ExpireOn,Remarks
	FROM [Fleet_VehicleServices]
	UNION
	SELECT 3 as [Type],VehicleId, ReferenceNo, [ExpireDate] as ExpireOn,Remarks
	FROM [Fleet_VehicleRoadTax]
	UNION
	SELECT 4 as [Type],VehicleId, Null as ReferenceNo, ExpiringOn as ExpireOn,Remarks
	FROM [Fleet_VehiclePollution]
	UNION 
	SELECT 5 as [Type],VehicleId, InsuranceNo as ReferenceNo, NextPremiumDate as ExpireOn,Remarks
	FROM [Fleet_VehicleInsurance]
	UNION 
	SELECT 6 as [Type],VehicleId, Name as ReferenceNo, [ToDate] as ExpireOn,Remarks
	FROM [Fleet_VehicleAssociations]
	LEFT JOIN Fleet_Association ON Fleet_Association.Id = Fleet_VehicleAssociations.AssociationId
	UNION 
	SELECT 7 as [Type],VehicleId, PartyName as ReferenceNo, [ToDate] as ExpireOn, [Fleet_VehicleDrivers].Remarks
	FROM [Fleet_VehicleDrivers]
	LEFT JOIN Common_Parties ON Common_Parties.Id = [Fleet_VehicleDrivers].DriverId
	) A
LEFT JOIN Fleet_Vehicle ON Fleet_Vehicle.Id = A.VehicleId
LEFT JOIN Fleet_ExpireType ET ON ET.Id = A.[Type]
WHERE (@Type IS NULL OR ET.Name = @Type)
 AND DATEDIFF(DAY, GetDate(), ExpireOn) <= @ExpireInDays
END	
GO
/****** Object:  StoredProcedure [dbo].[Fleet_ReportAdvance]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Fleet_ReportAdvance] (@FromLoadDate Date, @ToLoadDate Date)
As
Begin
	Select 
		 L.TruckNumber as [Vehicle No]
		,L.DriverName
		,L.Sector
		,L.ChallanNo
		,L.TruckSource
		,L.NetWT
		,L.Advance [Cash Advance]
		,L.HSDCost [Diesel Advance]
		,L.TotalAdvance [Total Advance]
	from vw_loadingchallandetails L
	Where TotalAdvance > 0 And Convert(Date, L.LoadDate, 103) >= @FromLoadDate And Convert(Date, L.LoadDate, 103) <= @ToLoadDate
END

GO
/****** Object:  StoredProcedure [dbo].[Fleet_ReportBlocked]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Fleet_ReportBlocked] 
As
BEGIN
Select 
	V.VehicleNo as [VehicleNo] 
	,V.ModelYear as [Model Year]
	,V.TotalTyers as Tyre
	,V.MaxLoadLimit as [Load Limit]
	,V.RegistrationDate as [Registration]
	,V.ChassisNo as ChassisNo
	,V.EngineNo as EngineNo
	,O.PartyName as [Owner]
	,O.Remarks as [Remarks]
from Fleet_Vehicle  V
Left Join Common_Parties O On O.Id =V.[Owner] 
Where IsBlocked = 1
END

GO
/****** Object:  StoredProcedure [dbo].[Fleet_ReportPurchase]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[Fleet_ReportPurchase] 
( @FromDate Date = NULL
 ,@ToDate Date = NULL
 ,@DueFromDate Date = NULL
 ,@DueToDate Date = NULL
 ,@PaymentStatus INT = NULL
)
As
Begin
	Select V.VehicleNo, V.ModelYear as [Model Year], P.PartyName as [Seller Name], S.ContactName as [Contact Name], S.ContactNo as [Contact No]
	,Convert(Varchar, S.PurchaseDate, 103) as [Purchase Date]
	,S.TotalAmount as [Total Amount]
	,S.BookingAmount as [Booking Payment]
	,Convert(Varchar, S.PaymentDueDate, 103) [Payment Due Date]
	,Convert(Varchar, S.ActualyPaidOn, 103) [Actually PaidOn]
	,M.Name as Mode
	,S.InvoiceNo
	,S.[BrokerCommission]
	from Fleet_Purchase S
	Left Join Fleet_Vehicle V On V.Id = S.VehicleId
	Left Join Common_Parties P On P.Id = S.PartyId
	Left Join Accounts_PaymentMode M On M.Id = S.PaymentMode
	Where (@FromDate IS NULL OR S.PurchaseDate >= @FromDate)
	AND (@ToDate IS NULL OR S.PurchaseDate <= @ToDate)
	AND (@DueFromDate IS NULL OR S.PaymentDueDate >= @DueFromDate)
	AND (@DueToDate IS NULL OR S.PaymentDueDate <= @DueToDate)
	AND (@PaymentStatus IS NULL OR (@PaymentStatus = 1 AND S.ActualyPaidOn IS NULL) OR (@PaymentStatus = 2 AND S.ActualyPaidOn IS NOT NULL))
END

GO
/****** Object:  StoredProcedure [dbo].[Fleet_ReportSale]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Fleet_ReportSale] 
( @FromSaleDate Date = NULL
 ,@ToSaleDate Date = NULL
 ,@BalPaymentFromDate Date = NULL
 ,@BalPaymentToDate Date = NULL
 ,@IsPendingOnly INT = NULL
)
As
Begin
	Select V.VehicleNo, V.ModelYear as [Model Year], P.PartyName as [Buyer Name], S.ContactName as [Contact Name], S.ContactNo as [Contact No]
	,Convert(Varchar, S.SellingDate, 103) as [Selling Date]
	,S.SellingAmount as [Selling Amount]
	,S.AdvancePayment as [Advance Payment]
	,Convert(Varchar, S.BalancePaymentDate, 103) [Balance PayableOn]
	,Convert(Varchar, S.BalanceActuallyPaidOn, 103) [Actually PaidOn]
	,M.Name as Mode
	,S.InvoiceNo
	,S.[Broker]
	,S.[BrokerCommission]
	from Fleet_Sale S
	Left Join Fleet_Vehicle V On V.Id = S.VehicleId
	Left Join Common_Parties P On P.Id = S.PartyId
	Left Join Accounts_PaymentMode M On M.Id = S.PaymentMode
	Where (@FromSaleDate IS NULL OR S.SellingDate >= @FromSaleDate)
	AND (@ToSaleDate IS NULL OR S.SellingDate <= @ToSaleDate)
	AND (@BalPaymentFromDate IS NULL OR S.BalancePaymentDate >= @BalPaymentFromDate)
	AND (@BalPaymentToDate IS NULL OR S.BalancePaymentDate <= @BalPaymentToDate)
	AND (@IsPendingOnly IS NULL OR (@IsPendingOnly = 1 AND S.BalanceActuallyPaidOn IS NULL) OR (@IsPendingOnly = 2 AND S.BalanceActuallyPaidOn IS NOT NULL))
END

GO
/****** Object:  StoredProcedure [dbo].[Fleet_ReportTruckTrip]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Fleet_ReportTruckTrip] (@FromLoadDate Date, @ToLoadDate Date, @TruckNo Varchar(50) = NULL)
As
Begin
	Select 
		 L.TruckNumber as [Vehicle No]
		,Year(Convert(Date, L.LoadDate, 103) ) as [Year]
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 1 Then 1 Else 0 End) as JAN
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 2 Then 1 Else 0 End) as FEB
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 3 Then 1 Else 0 End) as MAR
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 4 Then 1 Else 0 End) as APR
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 5 Then 1 Else 0 End) as MAY
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 6 Then 1 Else 0 End) as JUN
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 7 Then 1 Else 0 End) as JUL
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 8 Then 1 Else 0 End) as AUG
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 9 Then 1 Else 0 End) as SEP
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 10 Then 1 Else 0 End) as OCT
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 11 Then 1 Else 0 End) as NOV
		,Sum(Case when Month(Convert(Date, L.LoadDate, 103)) = 12 Then 1 Else 0 End) as [DEC]
		,Count(L.ChallanNo) as [TOTAL]
	from vw_loadingchallandetails L
	 Where Convert(Date, L.LoadDate, 103) >= @FromLoadDate And Convert(Date, L.LoadDate, 103) <= @ToLoadDate
	 And (@TruckNo IS NULL OR @TruckNo = L.TruckNumber)
	Group By L.TruckNumber, Year(Convert(Date, L.LoadDate, 103) ) 
END

GO
/****** Object:  StoredProcedure [dbo].[GetJSON]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetJSON] (@ObjectName VARCHAR(255), @registries_per_request smallint = null, @FieldSettings VARCHAR(MAX) OUTPUT)
AS
BEGIN
	SET NOCOUNT ON
    IF OBJECT_ID(@ObjectName) IS NULL
        BEGIN
            SELECT Json = '';
            RETURN
        END;

    DECLARE @Top NVARCHAR(20) = CASE WHEN @registries_per_request IS NOT NULL 
                                    THEN 'TOP (' + CAST(@registries_per_request AS NVARCHAR) + ') ' 
                                    ELSE '' 
                                END;

    DECLARE @SQL NVARCHAR(MAX) = N'SELECT ' + @Top + '* INTO ##T ' + 
                                'FROM ' + @ObjectName;

    EXECUTE SP_EXECUTESQL @SQL;

    DECLARE @X NVARCHAR(MAX) = '[' + (SELECT * FROM ##T FOR XML PATH('')) + ']';


    SELECT  @X = REPLACE(@X, '<' + Name + '>', 
                    CASE WHEN ROW_NUMBER() OVER(ORDER BY Column_ID) = 1 THEN '{'
                         ELSE '' END + '"'+Name+'"' + ':'),
            @X = REPLACE(@X, '</' + Name + '>', ','),
            @X = REPLACE(@X, ',{', '}, {'),
            @X = REPLACE(@X, ',]', '}]')
    FROM    sys.columns
    WHERE   [Object_ID] = OBJECT_ID(@ObjectName)
    ORDER BY Column_ID;

    DROP TABLE ##T;

    SELECT  @FieldSettings = @X;

END
GO
/****** Object:  StoredProcedure [dbo].[ImEx_CreateCreditNote]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[ImEx_CreateCreditNote]
( 
  @CreditNoteId INT,
  @GST INT = 0 -- default set local gst
)
AS
BEGIN
     DECLARE @trancount INT;
	 DECLARE @CreditNoteNo VARCHAR(50)=NULL
	 DECLARE @CreditNoteDate DATE=NULL;
	 DECLARE @InsertById INT=NULL
     DECLARE @UserBranchId INT=NULL
	 DECLARE @CostCenterId INT = NULL
	 DECLARE @FinancialYearId INT = NULL
	 DECLARE @VendorLedgerId INT = NULL
	 DECLARE @AllRemarks VARCHAR(2000)=''
	 DECLARE @VoucherStatus INT = 2
	 DECLARE @LedgerId INT = NULL
	 DECLARE @Amount DECIMAL(18,2)=0.00
	 DECLARE @JobId INT = NULL
	 DECLARE @TotalAmount DECIMAL(18,2) = NULL
	 DECLARE @CGST DECIMAL(18,2)=0.0
	 DECLARE @SGST DECIMAL(18,2)=0.0
	 DECLARE @IGST DECIMAL(18,2)=0.0
	 DECLARE @IsTaxApplicable BIT=0

	 SET @trancount = @@trancount;

	 SELECT 
		@CreditNoteDate=C.CreditNoteDate,
		@CreditNoteNo=C.CreditNoteNo,
		@AllRemarks=C.Narration,
		@InsertById = (CASE WHEN C.UpdateUserId IS NULL THEN C.InsertUserId ELSE C.UpdateUserId END),
		@UserBranchId=U.BranchId,
		@VendorLedgerId=V.LedgerId
	FROM ImEx_CreditNote C
	LEFT OUTER JOIN Common_Vendor V ON V.Id=C.VendorId
	LEFT OUTER JOIN Users U On U.Id = C.InsertUserId WHERE C.Id= @CreditNoteId

	IF(@VendorLedgerId IS NULL OR @VendorLedgerId=0)
	   THROW 50000, 'Please Define ledger of vendor in  Vendor master ???', 1

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @CreditNoteDate Between StartDate And EndDate;
	 
BEGIN
   DECLARE @VoucherId INT = 0
   DECLARE @VoucherType INT = 4   -- Jounral Voucher of Credit Note
   DECLARE @VoucherRefType INT = 14
   DECLARE @EexecutionMessage VARCHAR(5000) = ''

			BEGIN TRY
					IF @trancount = 0
							BEGIN TRANSACTION
						ELSE
							SAVE TRANSACTION ImEx_CreateCreditNote;
				
				SELECT @VoucherId = Id 
					FROM [Accounts_Vouchers] 
					WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @CreditNoteId
			
			IF(@VoucherId = 0)
			BEGIN
				INSERT INTO [Accounts_Vouchers]
					(VoucherName
					,VoucherDate
					,VoucherType
					,[Status]
					,InsertUserId
					,InsertDate
					,[Description]
					,BranchId
					,FinancialYear
					,RefType
					,ReferenceNo
					,ReferenceId)
				VALUES
					(NULL,
					@CreditNoteDate,
					@VoucherType,
					@VoucherStatus, -- Submitted 
					@InsertById,
					GETDATE(),
					'IMEX',
					@UserBranchId,
					@FinancialYearId,
					@VoucherRefType, 
					@CreditNoteNo,
					@CreditNoteId)
				SET @VoucherId=SCOPE_IDENTITY()
			END
			ELSE
			BEGIN
				UPDATE Accounts_Vouchers SET 
					VoucherDate = @CreditNoteDate,
					VoucherType = @VoucherType,
					UpdateUserId = @InsertById,
					UpdateDate = GETDATE(),
					[Status] = @VoucherStatus,
					ReferenceNo = @CreditNoteNo,
					FinancialYear = @FinancialYearId
				WHERE Id = @VoucherId
			END
			
			DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId

			DECLARE @BranchId INT=NULL
			SELECT @BranchId=BranchId FROM ImEx_Job WHERE Id=(SELECT TOP 1 JobId  FROM ImEx_CreditNoteDetails WHERE CreditNoteId=@CreditNoteId)
	    
		    DECLARE db_cursor CURSOR FOR 
				SELECT P.LedgerId, CN.JobId,  J.CostCenterId, CN.TotalAmount AS Amount, IsTaxApplicable, G.CGST, G.SGST, G.IGST  from ImEx_CreditNote C
				LEFT OUTER JOIN
				ImEx_CreditNoteDetails CN ON CN.CreditNoteId = C.Id 
				LEFT OUTER JOIN
				ImEx_ExpenseParticular P ON P.Id = CN.ParticularId
				LEFT OUTER JOIN
				GST_SACCode G ON G.Id=P.SACCodeId
				LEFT OUTER JOIN
				ImEx_Job J ON J.Id = CN.JobId
				WHERE C.Id = @CreditNoteId
			
			OPEN db_cursor
			FETCH NEXT FROM db_cursor INTO @LedgerId, @JobId, @CostCenterId, @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
		    WHILE @@FETCH_STATUS = 0 
			BEGIN
			  IF @JobId IS NOT NULL AND  @CostCenterId IS NULL
				    THROW 50000, 'Cost center is not create of this job please save again job ???', 16
			  
			  IF @LedgerId IS NULL
					THROW 50000, 'Ledger not Found ???', 16
              
			  INSERT INTO  Accounts_VoucherTransaction 
		    	(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate, FYId, Narration )
		      VALUES
		    	(@VoucherId, @LedgerId, @CostCenterId, 1 , @Amount, NULL, @FinancialYearId, @AllRemarks)
			IF(@IsTaxApplicable = 1)
			BEGIN
			   IF(@GST = 0) -- Local GST 
			   BEGIN
					DECLARE @CGSTLedgerId INT=NULL
					DECLARE @SGSTLedgerId INT=NULL
					SELECT @SGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=1 AND TaxRate=@SGST AND LedgerId IS NOT NULL
					SELECT @CGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=2 AND TaxRate=@CGST AND LedgerId IS NOT NULL
					
					IF @SGSTLedgerId IS NULL
							THROW 50000, 'SGST Ledger not setup in Branch GST Setup', 16
						IF @CGSTLedgerId IS NULL
							THROW 50000, 'CGST Ledger not setup in Branch GST Setup', 16

			      	INSERT INTO  Accounts_VoucherTransaction 
			   				(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
					VALUES
							(@VoucherId, @SGSTLedgerId, NULL, 1, ROUND(@Amount*@SGST*(0.01), 0), @SGST, @FinancialYearId),
							(@VoucherId, @CGSTLedgerId, NULL, 1, ROUND(@Amount*@CGST*(0.01), 0), @CGST, @FinancialYearId)

			   			/*	SELECT @VoucherId, S.InputLedgerId, NULL, 1,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
			   					LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.IGSTId
			   				WHERE L.IGSTId IS NOT NULL AND (@CreditNoteDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId */
			   			
			   END
			   ELSE  -- I GST
			   BEGIN
					DECLARE @IGSTLedgerId INT=NULL
					SELECT @IGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=3 AND TaxRate=@IGST AND LedgerId IS NOT NULL
						
					IF @IGSTLedgerId IS NULL
						THROW 50000, 'IGST Ledger not setup in Branch GST Setup', 16

					INSERT INTO  Accounts_VoucherTransaction 
			   			(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate,  FYId )
					VALUES
						(@VoucherId, @IGSTLedgerId, NULL, 1, ROUND(@Amount*@IGST*(0.01), 0), @IGST, @FinancialYearId)
			   			/*	SELECT @VoucherId, S.InputLedgerId, NULL, 1,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
			   					LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.LGSTId
			   				WHERE L.IGSTId IS NOT NULL AND (@CreditNoteDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId */
			   END
			END

			FETCH NEXT FROM db_cursor INTO @LedgerId, @JobId, @CostCenterId, @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
			END
			CLOSE db_cursor   
		    DEALLOCATE db_cursor

			SELECT @TotalAmount =SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
		 
		    INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
			 VALUES
				(@VoucherId, @VendorLedgerId, NULL, 2,  @TotalAmount)

			Update Accounts_Vouchers SET [Description] = @AllRemarks WHERE ID = @VoucherId
		    Update ImEx_CreditNote SET VoucherId=@VoucherId WHERE Id = @CreditNoteId
			EXEC [Acounting_ValidateVoucher] @Voucherid	
			SET @EexecutionMessage = ''
			IF @trancount = 0
					COMMIT;
		END TRY
		BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK TRANSACTION ImEx_CreateCreditNote;
			CLOSE db_cursor   
		    DEALLOCATE db_cursor
			RAISERROR ('[ImEx_CreateCreditNote]: %s %d: %s', 16, 1, '', @error, @message) ;
		END CATCH
    END
END
GO
/****** Object:  StoredProcedure [dbo].[ImEx_CreateDebitNote]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[ImEx_CreateDebitNote]
( 
  @DebitNoteId INT
  
)
AS
BEGIN
     DECLARE @trancount INT;
	 DECLARE @DebitNoteNo VARCHAR(50)=NULL;
	 DECLARE @DebitNoteDate DATE=NULL;
	 DECLARE @InsertById INT=NULL
     DECLARE @UserBranchId INT=NULL
	 DECLARE @FinancialYearId INT = NULL
	 DECLARE @ClientLedgerId INT = NULL
	 DECLARE @Narration VARCHAR(2000)=''
	 DECLARE @VoucherStatus INT = 2
	 DECLARE @LedgerId INT = NULL
	 DECLARE @Amount DECIMAL(18,2)=0.00
	 DECLARE @CostCenterId INT = NULL
	 DECLARE @JobId INT = NULL
	 DECLARE @TotalAmount DECIMAL(18,2) = NULL
	 DECLARE @GST BIT=0 -- default set local gst
	 DECLARE @BranchStateCode INT=0
	 DECLARE @ClientStateCode INT=0
	 DECLARE @IsTaxApplicable BIT=0
	 DECLARE @IsTaxPayableByParty BIT=0
	 DECLARE @CGST DECIMAL(18,2)=0.0
	 DECLARE @SGST DECIMAL(18,2)=0.0
	 DECLARE @IGST DECIMAL(18,2)=0.0

	 SET @trancount = @@trancount;

	 SELECT @DebitNoteDate = D.DebitNoteDate , @DebitNoteNo = D.DebitNoteNo,
	        @Narration = D.Narration, @BranchStateCode = S.StateCode, @ClientStateCode = SC.StateCode,
			@InsertById = (CASE WHEN D.UpdateUserId IS NULL THEN D.InsertUserId ELSE D.UpdateUserId END),
			@UserBranchId = U.BranchId,
			@JobId = D.JobId, @ClientLedgerId = C.LedgerId
	 FROM ImEx_DebitNote D
	 LEFT OUTER JOIN
	 ImEx_Job J ON J.Id = D.JobId
	 LEFT OUTER JOIN
	 Common_Branch B ON B.Id = J.BranchId
	 LEFT OUTER JOIN
	 Accounts_Ledgers L ON L.Id = B.LedgerId
	 LEFT OUTER JOIN
	 [State] S ON S.Id = L.[State]
	 LEFT OUTER JOIN
	 Common_Client C ON C.Id = J.ClientId
	 LEFT OUTER JOIN
	 Accounts_Ledgers LC ON LC.Id = C.LedgerId
	 LEFT OUTER JOIN
	 [State] SC ON SC.Id = LC.[State]
	 LEFT OUTER JOIN Users U On U.Id = D.InsertUserId

	 WHERE D.Id = @DebitNoteId

	 SELECT @FinancialYearId = Id FROM Accounts_FinancialYear WHERE @DebitNoteDate Between StartDate And EndDate;
	 
	 IF(@BranchStateCode = @ClientStateCode)
			SET @GST=1

	 --IF(1=1)
	 --  THROW 50000, @GST,  1

BEGIN
   DECLARE @VoucherId INT = 0
   DECLARE @VoucherType INT = 4   -- Jounral Voucher of Debit Note
   DECLARE @VoucherRefType INT = 15
   DECLARE @EexecutionMessage VARCHAR(5000) = ''

   BEGIN TRY
   		IF @trancount = 0
   				BEGIN TRANSACTION
   			ELSE
   				SAVE TRANSACTION ImEx_CreateDebitNote;
   	
   	SELECT @VoucherId = Id 
   		FROM [Accounts_Vouchers] 
   		WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @DebitNoteId
			
			IF(@VoucherId = 0)
			BEGIN
				INSERT INTO [Accounts_Vouchers]
					(VoucherName
					,VoucherDate
					,VoucherType
					,[Status]
					,InsertUserId
					,InsertDate
					,[Description]
					,BranchId
					,FinancialYear
					,RefType
					,ReferenceNo
					,ReferenceId)
				VALUES
					(NULL,
					@DebitNoteDate,
					@VoucherType,
					@VoucherStatus, -- Submitted 
					@InsertById,
					GETDATE(),
					@Narration,
					@UserBranchId,
					@FinancialYearId,
					@VoucherRefType, 
					@DebitNoteNo,
					@DebitNoteId)
				SET @VoucherId=SCOPE_IDENTITY()
			END
			ELSE
			BEGIN
				UPDATE Accounts_Vouchers SET 
					VoucherDate = @DebitNoteDate,
					VoucherType = @VoucherType,
					[Description] = @Narration,
					UpdateUserId = @InsertById,
					UpdateDate = GETDATE(),
					[Status] = @VoucherStatus,
					ReferenceNo = @DebitNoteNo,
					FinancialYear = @FinancialYearId
				WHERE Id = @VoucherId
			END
			
			DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
			
			DECLARE @BranchId INT=NULL
			SELECT @BranchId=BranchId FROM ImEx_Job WHERE Id=(SELECT TOP 1 JobId FROM ImEx_DebitNote WHERE Id=@DebitNoteId)

		    DECLARE db_cursor CURSOR FOR 
				SELECT P.LedgerId, ((D.Quantity * D.Rate)  +  D.NonTaxAmount), D.IsTaxApplicable AS Amount, G.CGST, G.SGST, G.IGST 
				FROM ImEx_DebitNoteDetails D
				LEFT OUTER JOIN
				ImEx_Particulars P ON P.Id = D.ParticularId
				LEFT OUTER JOIN
				GST_SACCode G ON G.Id=P.SACCodeId
				WHERE D.DebitNoteId = @DebitNoteId
			OPEN db_cursor
			FETCH NEXT FROM db_cursor INTO @LedgerId, @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
		    WHILE @@FETCH_STATUS = 0 
			BEGIN
			  IF @LedgerId IS NULL
					THROW 50000, 'Ledger not Found ???', 16
              
			  INSERT INTO  Accounts_VoucherTransaction 
		    	(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate, FYId, Narration )
		      VALUES
		    	(@VoucherId, @LedgerId, @CostCenterId, 1 , @Amount, NULL, @FinancialYearId, Null)
			 
			  IF(@IsTaxApplicable = 1)
			  BEGIN
				IF(@GST = 1 ) -- LGST 
				BEGIN
					DECLARE @CGSTLedgerId INT=NULL
					DECLARE @SGSTLedgerId INT=NULL
					SELECT @SGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=1 AND TaxRate=@SGST AND LedgerId IS NOT NULL
					SELECT @CGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=2 AND TaxRate=@CGST AND LedgerId IS NOT NULL
					
					IF @SGSTLedgerId IS NULL
							THROW 50000, 'SGST Ledger not setup in Branch GST Setup', 16
						IF @CGSTLedgerId IS NULL
							THROW 50000, 'CGST Ledger not setup in Branch GST Setup', 16
								
				   	INSERT INTO  Accounts_VoucherTransaction 
								(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
					VALUES
							(@VoucherId, @SGSTLedgerId, NULL, 1, ROUND(@Amount*@SGST*(0.01), 0), @SGST, @FinancialYearId),
							(@VoucherId, @CGSTLedgerId, NULL, 1, ROUND(@Amount*@CGST*(0.01), 0), @CGST, @FinancialYearId)

							/*	SELECT @VoucherId, S.InputLedgerId, NULL, 1,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
									LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.IGSTId
								WHERE L.IGSTId IS NOT NULL AND (@DebitNoteDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId */
							
				END
				ELSE  -- I GST
				BEGIN
					DECLARE @IGSTLedgerId INT=NULL
					SELECT @IGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=3 AND TaxRate=@IGST AND LedgerId IS NOT NULL
						
					IF @IGSTLedgerId IS NULL
						THROW 50000, 'IGST Ledger not setup in Branch GST Setup', 16

				   INSERT INTO  Accounts_VoucherTransaction 
						(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate,  FYId )
					VALUES
						(@VoucherId, @IGSTLedgerId, NULL, 1, ROUND(@Amount*@IGST*(0.01), 0), @IGST, @FinancialYearId)
/*
								SELECT @VoucherId, S.InputLedgerId, NULL, 1,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
									LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.LGSTId
								WHERE L.IGSTId IS NOT NULL AND (@DebitNoteDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId*/
				END
			  END
			FETCH NEXT FROM db_cursor INTO @LedgerId, @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
			END
			CLOSE db_cursor   
		    DEALLOCATE db_cursor

			SELECT @TotalAmount = SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId = @VoucherId
		 
		    INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
			 VALUES
				(@VoucherId, @ClientLedgerId, NULL, 2,  @TotalAmount)

		    Update ImEx_DebitNote SET VoucherId = @VoucherId WHERE Id = @DebitNoteId
			EXEC [Acounting_ValidateVoucher] @Voucherid	
			SET @EexecutionMessage = ''
			IF @trancount = 0
					COMMIT;
		END TRY
		BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK TRANSACTION ImEx_CreateCreditNote;
			CLOSE db_cursor   
		    DEALLOCATE db_cursor
			RAISERROR ('[ImEx_CreateDebitNote]: %s %d: %s', 16, 1, '', @error, @message) ;
		END CATCH
    END
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_CreateInvoicePaymentVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ImEx_CreateInvoicePaymentVoucher] (
@InvoicePaymentId INT = NULL,
@BulkInvoiceId INT = NULL
)
AS
BEGIN
DECLARE @trancount int;
DECLARE @FinancialYearId INT = NULL
DECLARE @ClientLedger INT=NULL
DECLARE @ReceivedLedger INT=NULL
DECLARE @ReceivedAmount DECIMAL(18,2)=NULL
DECLARE @ShortageLedger INT=NULL
DECLARE @ShortageCostCenter INT=NULL
DECLARE @ShortageAmount DECIMAL(18,2)=NULL
DECLARE @MoistureLedger INT=NULL
DECLARE @MoistureCostCenter INT=NULL
DECLARE @MoistureAmount DECIMAL(18,2)=NULL
DECLARE @TDSLedger INT=NULL
DECLARE @TDSCostCenter INT=NULL
DECLARE @TDSAmount DECIMAL(18,2)=NULL
DECLARE @OtherLedger INT=NULL
DECLARE @OtherCostCenter INT=NULL
DECLARE @OtherAmount DECIMAL(18,2)=NULL
DECLARE @OtherAmountRemark VARCHAR(5000)=NULL
DECLARE @ReceivedDate DATE=NULL
DECLARE @InsertById INT=NULL
DECLARE @UserBranchId INT=NULL
DECLARE @VoucherStatus INT = NULL
DECLARE @VoucherRefNo VARCHAR(50) = NULL
DECLARE @VoucherRefId INT = NULL
DECLARE @VoucherRefType INT = NULL
DECLARE @PaymentMode INT = NULL
DECLARE @ChkNeftRefNo VARCHAR(50)  = NULL
DECLARE @VoucherNarration VARCHAR(5000)  = NULL

IF @BulkInvoiceId IS NULL AND @InvoicePaymentId IS NULL
	THROW 50000, 'One parameter from @BulkInvoiceId or @InvoiceId is required.',1
IF @BulkInvoiceId IS NOT NULL AND @InvoicePaymentId IS NOT NULL
	THROW 50000, 'Only One parameter from @BulkInvoiceId or @InvoiceId is allowed.',1

CREATE TABLE #TransactionTempTable(
	JobCostCenterId int, 
	ReceivedAmount Decimal(18,2),  
	ShortageAmount Decimal(18,2),  
	MoistureAmount Decimal(18,2),  
	TDSAmount Decimal(18,2),
	OtherAmount Decimal(18,2),
	Remark VARCHAR(5000)
	)

IF @InvoicePaymentId IS NOT NULL
BEGIN
	SELECT 
		@VoucherRefType = 10, -- Invoice
		@VoucherRefId = @InvoicePaymentId, -- Invoice
		@VoucherRefNo = I.InvoiceNo,
		@ReceivedDate = P.ReceivedOn,
		@InsertById = IsNull(P.UpdateUserId, P.InsertUserId),
		@ClientLedger = Common_Client.LedgerId,
		@ReceivedLedger = P.ReceivedLedgerId,
		@PaymentMode = P.PaymentModeId,
		@ChkNeftRefNo = P.ChkNEFTRefNo
	FROM ImEx_Payment P
	Left Join ImEx_ManageInvoice I On I.Id = P.InvoiceId
	LEFT JOIN ImEx_Job On ImEx_Job.Id = I.JobId
	LEFT JOIN Common_Client On Common_Client.Id = ImEx_Job.ClientId
	WHERE P.Id = @InvoicePaymentId
	
	INSERT INTO #TransactionTempTable
	SELECT 
		IsNull(CostCenterId,-1) As JobCostCenterId,
		ISNULL(P.ReceivedAmount,0.0) As ReceivedAmount,
		ISNULL(P.ShoratageAmount,0.0) As ShortageAmount,
		ISNULL(P.MoistureAmount,0.0) As MoistureAmount,
		ISNULL(P.TSDAmount,0) As TDSAmount,
		ISNULL(P.OtherDeduction,0.0) As OtherAmount,
		'' AS Remark
	FROM ImEx_Payment P 
	Left Join ImEx_ManageInvoice I On I.Id = P.InvoiceId
	LEFT JOIN ImEx_InvoiceAmount On ImEx_InvoiceAmount.InvoiceId = I.Id
	LEFT JOIN ImEx_Job On ImEx_Job.Id = I.JobId
	WHERE P.Id = @InvoicePaymentId

END
ELSE 
BEGIN
	SELECT 
		@VoucherRefType = 11, -- ImEx Bulk INvoice
		@VoucherRefId = @BulkInvoiceId, -- INvoice
		@VoucherRefNo = Convert(varchar,BP.BulkRefNo),
		@ReceivedDate = ReceivedDate,
		@InsertById = ISNULL(BP.UpdateUserId,BP.InsertUserId),
		@ClientLedger = Common_Client.LedgerId,
		@ReceivedLedger = BP.ReceivedLedgerId,
		@PaymentMode = BP.PaymentMode,
		@ChkNeftRefNo = BP.ChkNeftrefNo,
		@VoucherNarration = BP.Remarks
	FROM ImEx_InvoiceBulkPayment BP
	LEFT JOIN Common_Client On Common_Client.Id = BP.ClientId
	WHERE BP.Id = @BulkInvoiceId
	INSERT INTO #TransactionTempTable
	SELECT 
		ISNULL(CostCenterId,-1) AS JobCostCenterId,
		SUM(ISNULL(P.ReceivedAmount,0.0)) As ReceivedAmount,
		SUM(ISNULL(P.ShoratageAmount,0.0)) As ShortageAmount,
		SUM(ISNULL(P.MoistureAmount,0.0)) As MoistureAmount,
		SUM(ISNULL(P.TSDAmount,0)) As TDSAmount,
		SUM(ISNULL(P.OtherDeduction,0.0)) As OtherAmount,
		BP.Remarks As OtherAmountRemark
	FROM ImEx_InvoiceBulkPaymentId BI 
	LEFT JOIN ImEx_InvoiceBulkPayment BP On BP.Id = BI.PaymentId 
	LEFT JOIN ImEx_Payment P On P.Id = BI.InvoicePaymentId
	Left Join ImEx_ManageInvoice I On I.Id = P.InvoiceId
	LEFT JOIN ImEx_Job On ImEx_Job.Id = I.JobId
	WHERE BP.Id = @BulkInvoiceId
	GROUP BY CostCenterId, BP.Remarks
END

IF @ReceivedLedger IS NULL
	THROW 50000, 'Received payment ledger is not defined', 1

Select @UserBranchId = BranchId From Users Where Id = @InsertById
SET @trancount = @@trancount;
SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'INVOICEPAYMENT'
SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @ReceivedDate Between StartDate And EndDate;
BEGIN
	DECLARE @VoucherId INT = 0
	DECLARE @VoucherType INT = 3 -- Receipt Voucher(Do not chnage it to 5 becasue it will conflict with the voucher of invoice submisstion)
	DECLARE @EexecutionMessage VARCHAR(5000) = ''
	DECLARE @CurrentVoucherStatus INT = 0
	DECLARE @TempDefaultJobCostCenterId INT = -999999
	SELECT @VoucherId = Id, @CurrentVoucherStatus = [Status]
	FROM [Accounts_Vouchers] 
	WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @VoucherRefId
	IF @CurrentVoucherStatus = 4 -- Approved
		THROW 50000, 'Voucher for this request has been approved. Modifications are not allwoed.', 1
	SELECT 
		@ShortageLedger = LedgerId, 
		@ShortageCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE SHORTAGE DEDUCTION'
	SELECT 
		@MoistureLedger = LedgerId, 
		@MoistureCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE MOISTURE DEDUCTION'
	SELECT 
		@TDSLedger = LedgerId, 
		@TDSCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE TDS DEDUCTION'
	SELECT 
		@OtherLedger = LedgerId, 
		@OtherCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE OTHER DEDUCTION'
	BEGIN TRY
		IF @trancount = 0
			BEGIN TRANSACTION
		ELSE
			SAVE TRANSACTION [ImEx_CreateInvoicePaymentVoucher]; 
		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo)
			VALUES
				(NULL,
				@ReceivedDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				@VoucherNarration,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate = @ReceivedDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @VoucherRefNo,
				ReferenceId=@VoucherRefId,
				FinancialYear=@FinancialYearId,
				PaymentMode = @PaymentMode,
				ChkNeftRefNo = @ChkNeftRefNo,
				[Description] = @VoucherNarration
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
	
		DECLARE @TotalInvoiceAmount DECIMAL(18,2)=0.0
		DECLARE @TotalReceivedAmount DECIMAL(18,2)=0.0
		DECLARE @TotalShortageAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalMoistureAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalTDSAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalOtherAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalOtherAmountRemarks   VARCHAR(5000) = ''
		DECLARE transactionCur CURSOR FOR 
		SELECT Distinct JobCostCenterId FROM #TransactionTempTable 
		OPEN transactionCur
		DECLARE @JobCostCenterId INT = NULL
		FETCH NEXT FROM transactionCur INTO @JobCostCenterId
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT 
				@ReceivedAmount = (ReceivedAmount),
				@ShortageAmount = ShortageAmount,
				@MoistureAmount = MoistureAmount,
				@TDSAmount = TDSAmount,
				@OtherAmount = OtherAmount,
				@OtherAmountRemark = Remark
			FROM #TransactionTempTable
			WHERE JobCostCenterId = @JobCostCenterId
			SET @TotalReceivedAmount = @TotalReceivedAmount + @ReceivedAmount
			SET @TotalInvoiceAmount = @TotalInvoiceAmount + @ReceivedAmount + @ShortageAmount + @MoistureAmount + @TDSAmount + @OtherAmount
			IF @ShortageAmount <> 0.0
			BEGIN
				IF @ShortageCostCenter = @TempDefaultJobCostCenterId
					SET @ShortageCostCenter = @JobCostCenterId
				IF @ShortageCostCenter IS NULL
					SET @TotalShortageAmount = @TotalShortageAmount + @ShortageAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@ShortageLedger.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@ShortageLedger,@ShortageCostCenter,2, @ShortageAmount)
				END
			END
			IF @MoistureAmount <> 0.0
			BEGIN
				IF @MoistureCostCenter = @TempDefaultJobCostCenterId
					SET @MoistureCostCenter = @JobCostCenterId
				IF @MoistureCostCenter IS NULL
					SET @TotalMoistureAmount = @TotalMoistureAmount + @MoistureAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@Moisture.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@MoistureLedger,@MoistureCostCenter,2, @MoistureAmount)
				END
			END
			IF @TDSAmount <> 0.0
			BEGIN
				IF @TDSCostCenter = @TempDefaultJobCostCenterId
					SET @TDSCostCenter = @JobCostCenterId
				IF @TDSCostCenter IS NULL
					SET @TotalTDSAmount = @TotalTDSAmount + @TDSAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@TDS.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@TDSLedger,@TDSCostCenter,2, @TDSAmount)
				END
			END
		
			IF @OtherAmount <> 0.0
			BEGIN
				IF @OtherCostCenter = @TempDefaultJobCostCenterId
					SET @OtherCostCenter = @JobCostCenterId
				IF @OtherCostCenter IS NULL
				BEGIN
					SET @TotalOtherAmount = @TotalOtherAmount + @OtherAmount
					SET @TotalOtherAmountRemarks = @TotalOtherAmountRemarks + '' + @OtherAmountRemark
				END
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@OtherLedger.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration)
					VALUES
						(@VoucherId,@OtherLedger,@OtherCostCenter,2, @OtherAmount, @OtherAmountRemark)
				END
			END	
		FETCH NEXT FROM transactionCur INTO @JobCostCenterId
		END
		CLOSE transactionCur
		DEALLOCATE transactionCur
		SET @EexecutionMessage = @EexecutionMessage + '@ClientLedger.'
		SET @TotalInvoiceAmount= @TotalInvoiceAmount
		IF @TotalInvoiceAmount <> 0.0
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@ClientLedger,NULL,1, @TotalInvoiceAmount)
		IF @TotalShortageAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@ShortageLedger1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@ShortageLedger,@ShortageCostCenter,2, @TotalShortageAmount)
		END
		IF @TotalMoistureAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@Moisture1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@MoistureLedger,@MoistureCostCenter,2, @TotalMoistureAmount)
		END
		IF @TotalTDSAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@TDS1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@TDSLedger,@TDSCostCenter,2, @TotalTDSAmount)
		END
		IF @TotalOtherAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@OtherLedger1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration)
			VALUES
				(@VoucherId,@OtherLedger,@OtherCostCenter,2, @TotalOtherAmount, @TotalOtherAmountRemarks)
		END 
		SET @EexecutionMessage = @EexecutionMessage + '@ReceivedLedger.'
		SELECT @TotalReceivedAmount=ReceivedAmount FROM ImEx_InvoiceBulkPayment WHERE Id=@BulkInvoiceId
		
		IF @TotalReceivedAmount <> 0.0
		BEGIN
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@ReceivedLedger,NULL,2, @TotalReceivedAmount)
		END
		ELSE 
		BEGIN
			UPDATE Accounts_Vouchers SET VoucherType=4 WHERE Id=@VoucherId
			UPDATE Accounts_Vouchers
				SET VTypeNo  = 
					(
					SELECT (ISNULL(MAX(VTypeNo),0))+ 1 FROM Accounts_Vouchers
					WHERE Accounts_Vouchers.VoucherType = 4 and FinancialYear = @FinancialYearId
					)
				WHERE Id = @VoucherId
		END
		IF @InvoicePaymentId IS NOT NULL
			UPDATE ImEx_Payment SET VoucherId = @VoucherId Where Id = @InvoicePaymentId
		ELSE IF @BulkInvoiceId IS NOT NULL
			UPDATE ImEx_InvoiceBulkPayment SET VoucherId = @VoucherId Where Id = @BulkInvoiceId
		Exec [Acounting_ValidateVoucher] @Voucherid	
		SET @EexecutionMessage = ''
		if @trancount = 0
			commit;
		END TRY
	 begin catch
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction [ImEx_CreateInvoicePaymentVoucher];
			raiserror ('Validation Error: %s %s', 16, 1, @EexecutionMessage, @message) ;
	end catch
END
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_CreateJobExpenseVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC  [dbo].[ImEx_CreateJobExpenseVoucher]
(
 @JobExpenseId INT, 
 @GST INT = 0 -- default set local gst

)
AS
BEGIN
	DECLARE @trancount INT;
	DECLARE @InvoiceNo VARCHAR(50)=NULL
	DECLARE @InvoiceDate DATE = NULL
	DECLARE @InsertById INT=NULL
	DECLARE @UserBranchId INT=NULL
	DECLARE @FinancialYearId INT = NULL
	DECLARE @VoucherStatus INT = NULL
	DECLARE @LedgerId INT = NULL
	DECLARE @CostCenterId INT = NULL
	DECLARE @Amount DECIMAL(18,2)=0.0
	DECLARE @AllRemarks VARCHAR(2000)=''
	DECLARE @VendorLedgerId INT = NULL
	DECLARE @TotalAmount DECIMAL(18,2)=0.0
	DECLARE @TDSTaxLedgerId INT = NULL
	DECLARE @TaxAmount DECIMAL(18,2)=0.0
	DECLARE @VendorTDSType INT = NULL
	DECLARE @CGST DECIMAL(18,2)=0.0
	DECLARE @SGST DECIMAL(18,2)=0.0
	DECLARE @IGST DECIMAL(18,2)=0.0
	DECLARE @IsTaxApplicable BIT=0

   SET @trancount = @@trancount;
   SELECT 
		@InvoiceDate=JE.InvoiceDate,
		@InvoiceNo=JE.InvoiceNo,
		@AllRemarks=JE.Narration,
		@InsertById = (CASE WHEN JE.UpdateUserId IS NULL THEN JE.InsertUserId ELSE JE.UpdateUserId END),
		@UserBranchId=U.BranchId,
		@VendorLedgerId=V.LedgerId,
		@AllRemarks=JE.Narration,
		@VendorTDSType=V.TDSType
	FROM ImEx_JobExpense JE 
	LEFT OUTER JOIN Common_Vendor V ON V.Id=JE.VendorId
	LEFT OUTER JOIN Users U On U.Id = JE.InsertUserId WHERE JE.Id= @JobExpenseId

	SELECT  @TDSTaxLedgerId = TC.LedgerId, @TaxAmount = SUM(JT.Amount)  
	FROM ImEx_JobExpenseTax JT  with (nolock)
	LEFT OUTER JOIN
	Accounts_TaxMaster TM ON TM.Id = JT.TaxId 
	LEFT OUTER JOIN
	Accounts_TaxMasterContent TC ON TC.TaxMasterId=TM.Id AND TC.TDSTypeId = @VendorTDSType
	WHERE JT.JobExpenseId=@JobExpenseId GROUP BY TaxId, TC.LedgerId

	IF(@VendorLedgerId IS NULL OR @VendorLedgerId=0)
	   THROW 50000, 'Please Define ledger of vendor in  Vendor master ???', 1

    SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @InvoiceDate Between StartDate And EndDate;
    SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'INVOICESUBMISSTION'

	

BEGIN
   DECLARE @VoucherId INT = 0
   DECLARE @VoucherType INT = 4   -- Jounral Voucher of Job Expense
   DECLARE @VoucherRefType INT = 12 -- BILL
   DECLARE @EexecutionMessage VARCHAR(5000) = ''

   BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_CreateJobExpenseVoucher;

		SELECT @VoucherId = Id 
		FROM [Accounts_Vouchers] 
		WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @JobExpenseId


		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId)
			VALUES
				(NULL,
				@InvoiceDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				'IMEX',
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@InvoiceNo,
				@JobExpenseId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@InvoiceDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @InvoiceNo,
				FinancialYear=@FinancialYearId
			WHERE Id = @VoucherId
		END

		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
		
		DECLARE @BranchId INT=NULL
		SELECT @BranchId=BranchId FROM ImEx_Job WHERE Id=(SELECT TOP 1 JobId  FROM ImEx_JobExpense WHERE Id = @JobExpenseId)

		DECLARE db_cursor CURSOR FOR  
			SELECT   P.LedgerId AS FromLedgerId, J.CostCenterId,
			         JEI.Amount, P.IsTaxApplicable, G.CGST, G.SGST, G.IGST --, CONVERT(DECIMAL(10,2),(JEI.Amount*G.CGST)/100) AS CGSTA
	 		        --,CONVERT(DECIMAL(10,2), (JEI.Amount*G.SGST)/100) AS SGSTA
	 		        -- ,CONVERT(DECIMAL(10,2), (JEI.Amount * G.IGST)/100) AS IGSTA  
	 		 FROM ImEx_JobExpense JE
	 		 LEFT OUTER JOIN
	 		 ImEx_Job J ON J.Id = JE.JobId
	 		 LEFT OUTER JOIN
	 		 ImEx_JobExpenseId JEI ON JEI.JobExpenseId=JE.Id 
	 		 LEFT OUTER JOIN
	 		 ImEx_ExpenseParticular P ON P.Id=JEI.ParticularId
			 LEFT OUTER JOIN
				GST_SACCode G ON G.Id=P.SACCodeId
	 		 WHERE JE.Id = @JobExpenseId
		 OPEN db_cursor 
		 FETCH NEXT FROM db_cursor INTO @LedgerId, @CostCenterId,  @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
		 WHILE @@FETCH_STATUS = 0   
		 BEGIN  
		   IF @CostCenterId IS NULL
				THROW 50000, 'Cost center is not create of this job please save again job ???', 16

		   IF @LedgerId IS NULL
				THROW 50000, 'Ledger not Found ???', 16

		    INSERT INTO  Accounts_VoucherTransaction 
		    		(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId, Narration )
		    	VALUES
		    		(@VoucherId, @LedgerId, @CostCenterId, 2 , @Amount, NULL, @FinancialYearId, @AllRemarks) 
		   
		   IF(@IsTaxApplicable = 1)
			BEGIN
			IF(@GST = 0) -- Local GST 
				BEGIN
					DECLARE @CGSTLedgerId INT=NULL
					DECLARE @SGSTLedgerId INT=NULL
					SELECT @SGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=1 AND TaxRate=@SGST AND LedgerId IS NOT NULL
					SELECT @CGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=2 AND TaxRate=@CGST AND LedgerId IS NOT NULL
					
					IF @SGSTLedgerId IS NULL
							THROW 50000, 'SGST Ledger not setup in Branch GST Setup', 16
					IF @CGSTLedgerId IS NULL
						THROW 50000, 'CGST Ledger not setup in Branch GST Setup', 16

					INSERT INTO  Accounts_VoucherTransaction 
			   				(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
					VALUES
							(@VoucherId, @SGSTLedgerId, NULL, 2, ROUND(@Amount*@SGST*(0.01), 0), @SGST, @FinancialYearId),
							(@VoucherId, @CGSTLedgerId, NULL, 2, ROUND(@Amount*@CGST*(0.01), 0), @CGST, @FinancialYearId)
				END
			ELSE  -- I GST
			   BEGIN
					DECLARE @IGSTLedgerId INT=NULL
					SELECT @IGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=3 AND TaxRate=@IGST AND LedgerId IS NOT NULL
						
					IF @IGSTLedgerId IS NULL
						THROW 50000, 'IGST Ledger not setup in Branch GST Setup', 16

					INSERT INTO  Accounts_VoucherTransaction 
			   			(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate,  FYId )
					VALUES
						(@VoucherId, @IGSTLedgerId, NULL, 2, ROUND(@Amount*@IGST*(0.01), 0), @IGST, @FinancialYearId)
			   	END
			END

		   /*IF(@GST = 1) -- IGST 
		   BEGIN
		      	INSERT INTO  Accounts_VoucherTransaction 
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
						SELECT @VoucherId, S.InputLedgerId, NULL, 2,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
							LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.IGSTId
						WHERE L.IGSTId IS NOT NULL AND (@InvoiceDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId
					
		   END
		   ELSE  -- Local GST
		   BEGIN
		      INSERT INTO  Accounts_VoucherTransaction 
						(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate,  FYId )
						SELECT @VoucherId, S.InputLedgerId, NULL, 2,  @Amount*S.TaxRate*(0.01), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
							LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.LGSTId
						WHERE L.IGSTId IS NOT NULL AND (@InvoiceDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId
		   END */

		   FETCH NEXT FROM db_cursor INTO @LedgerId, @CostCenterId,  @Amount, @IsTaxApplicable, @CGST, @SGST, @IGST
		 END
		 CLOSE db_cursor   
		 DEALLOCATE db_cursor
		 SELECT @TotalAmount =SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
		 
		 IF(@TaxAmount > 0.0)
		 BEGIN
		   SET @TotalAmount = @TotalAmount - @TaxAmount
		 END
		  INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			 VALUES
				(@VoucherId, @VendorLedgerId, NULL, 1,  @TotalAmount)
		 IF(@TaxAmount > 0.0)
		 BEGIN
			INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		  VALUES
			(@VoucherId, @TDSTaxLedgerId, NULL, 1,  @TaxAmount)
          END

        Update Accounts_Vouchers SET [Description] = @AllRemarks WHERE ID = @VoucherId
		Update ImEx_JobExpense SET VoucherId=@VoucherId WHERE Id=@JobExpenseId
		SET @EexecutionMessage = ''
		EXEC [Acounting_ValidateVoucher] @Voucherid	
		IF @trancount = 0
			COMMIT;
	END TRY

    BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK TRANSACTION ImEx_CreateJobExpenseVoucher;
			RAISERROR ('[ImEx_CreateJobExpenseVoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	    END CATCH
	END
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteCreditNote]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[ImEx_DeleteCreditNote] 
(
 @VoucherId INT
)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @RefType INT = NULL
	DECLARE @trancount INT;
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated, @RefType=RefType FROM Accounts_Vouchers WHERE Id = @VoucherId

	IF(@RefType != 14)
	  THROW 5000, 'Please contact admin', 1

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus IS NOT NULL AND @IsAutoGenerated=1)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteCreditNote; 
	
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteCreditNote;
			RAISERROR ('[ImEx_DeleteCreditNote]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteDebitNote]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[ImEx_DeleteDebitNote] 
(
 @VoucherId INT
)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @RefType INT = NULL
	DECLARE @trancount INT;
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated, @RefType=RefType FROM Accounts_Vouchers WHERE Id = @VoucherId

	IF(@RefType != 15)
	  THROW 5000, 'Please contact admin', 1

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus IS NOT NULL AND @IsAutoGenerated=1)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteDebitNote; 
	
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteDebitNote;
			RAISERROR ('[ImEx_DeleteDebitNote]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteExpenseReceiveVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[ImEx_DeleteExpenseReceiveVoucher] 
(
 @VoucherId INT

)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @RefType INT = NULL
	DECLARE @trancount INT;
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated, @RefType=RefType 
	FROM Accounts_Vouchers WHERE Id = @VoucherId

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus IS NOT NULL AND @IsAutoGenerated=1)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteExpenseReceiveVoucher; 
	
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteExpenseReceiveVoucher;
			RAISERROR ('[ImEx_DeleteExpenseReceiveVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteExpenseVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [dbo].[ImEx_DeleteExpenseVoucher] 
(
 @VoucherId INT
)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @trancount INT;
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated FROM Accounts_Vouchers WHERE Id = @VoucherId

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus is not null)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteExpenseVoucher; 
	
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteExpenseVoucher;
			
			CLOSE db_cursor   
			DEALLOCATE db_cursor
			RAISERROR ('[ImEx_DeleteExpenseVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteInvoiceVouchers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ImEx_DeleteInvoiceVouchers] (
@InvoiceId INT

)
AS
BEGIN
	DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @VoucherId INT = 0
	DECLARE @trancount int;
	SELECT @VoucherId = VoucherId FROM ImEx_ManageInvoice WHERE Id=@InvoiceId
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated From Accounts_Vouchers Where Id = @VoucherId

    IF (@VoucherStatus IS NOT NULL And ((@IsAutoGenerated  = 0 AND @VoucherStatus NOT IN (1,5)) OR (@IsAutoGenerated  = 1 AND @VoucherStatus NOT IN (1,5))))
		THROW 50000, 'Voucher has been created, Can not be deleted. Please reject the voucher to delete it.', 1

	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_InvoiceVouchers; 
	
			UPDATE ImEx_Invoice SET InvoiceId=NULL, VoucherId=NULL WHERE InvoiceId=@InvoiceId
			DELETE FROM ImEx_InvoiceCharges WHERE InvoiceId=@InvoiceId
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		if @trancount = 0
			commit;
		END TRY
	 begin catch
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction ImEx_InvoiceVouchers;
			
			CLOSE db_cursor   
			DEALLOCATE db_cursor
			raiserror ('[ImEx_DeleteInvoiceVouchers]: %s %d: %s', 16, 1, '', @error, @message) ;
	end catch
END
GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteJobExpenseVouchers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROC [dbo].[ImEx_DeleteJobExpenseVouchers] 
(
 @JobExpenseId INT ,
 @VoucherId INT
)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @trancount INT;
	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated FROM Accounts_Vouchers WHERE Id = @VoucherId

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus is not null)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteJobExpenseVouchers; 
	
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteJobExpenseVouchers;
			
			CLOSE db_cursor   
			DEALLOCATE db_cursor
			RAISERROR ('[ImEx_DeleteJobExpenseVouchers]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[ImEx_DeleteRetainerInvoice]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [dbo].[ImEx_DeleteRetainerInvoice] 
(
 @RetainerInvoiceId INT,
 @VoucherId INT
)
AS
BEGIN
    DECLARE @VoucherStatus INT = NULL
	DECLARE @IsAutoGenerated INT = NULL
	DECLARE @trancount INT;

	SET @trancount = @@trancount;

	SELECT @VoucherStatus = [Status], @IsAutoGenerated = IsAutoGenerated FROM Accounts_Vouchers WHERE Id = @VoucherId

    IF (@VoucherStatus NOT IN (1,5) AND @VoucherStatus is not null AND @IsAutoGenerated = 1)
   		THROW 50000, 'Voucher has been created, can not be deleted. Please reject the voucher to delete it.', 1
	
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_DeleteRetainerInvoice; 
	        --UPDATE ImEx_RetainerInvoice SET VoucherId=NULL WHERE Id = @RetainerInvoiceId 
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId
			DELETE FROM Accounts_Vouchers WHERE Id=@VoucherId
	
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_DeleteRetainerInvoice;
			
			RAISERROR ('[ImEx_DeleteRetainerInvoice]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_ExpenseReceiveVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[ImEx_ExpenseReceiveVoucher]
(
  @ExpenseReceiveId INT,
  @VoucherId INT=0
)

AS
BEGIN
  DECLARE @trancount INT;
  DECLARE @ReceiveDate DATE;
  DECLARE @TotalAmount DECIMAL(18,2)=0.0;
  DECLARE @ReceivedLedgerId INT;
  DECLARE @PLedgerId INT;
  DECLARE @PaymentModeId INT;
  DECLARE @Narration VARCHAR(2000) = NULL;
  DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
  DECLARE @FinancialYearId INT;
  DECLARE @LedgerId INT = NULL
  DECLARE @CostCenterId INT = NULL
  DECLARE @Amount DECIMAL(18,2)=0.0
  DECLARE @InsertById INT=NULL;
  DECLARE @VoucherStatus INT = 2;
  DECLARE @UserBranchId INT=NULL;
  DECLARE @CurrentVoucherStatus INT=0;

  SET @trancount = @@trancount;
  
  SELECT  @ReceiveDate = ER.ReceivedDate, @Narration = ER.Narration, @ReceivedLedgerId = EP.ReceivedLedgerId,
          @PaymentModeId = EP.PaymentMode
		 ,@InsertById = (CASE WHEN ER.UpdateUserId IS NULL THEN ER.InsertUserId ELSE ER.UpdateUserId END)
		 ,@UserBranchId=U.BranchId
  FROM ImEx_ExpenseReceive ER 
  LEFT OUTER JOIN
  ImEx_ExpensePayment EP ON EP.Id = ER.ExpensePaymentId
  LEFT OUTER JOIN Users U On U.Id = ER.InsertUserId 
  WHERE ER.Id = @ExpenseReceiveId
  
  SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @ReceiveDate Between StartDate And EndDate;
  
  IF(@VoucherId != 0) 
  BEGIN
        SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
  END

  IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
     THROW 50000, 'Please Reject Vouchers ???. ' , 1


 BEGIN
     DECLARE @VoucherType INT = 3   -- Receipt Voucher 
	 DECLARE @VoucherRefType INT = NULL -- Job Expense
     DECLARE @EexecutionMessage VARCHAR(5000) = ''
     
	 BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_ExpenseReceiveVoucher;

		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId)
			VALUES
				(NULL,
				@ReceiveDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				@Narration,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				NULL,
				@ExpenseReceiveId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@ReceiveDate,
				VoucherType=@VoucherType,
				[Description]=@Narration,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = Null,
				FinancialYear=@FinancialYearId
			WHERE Id = @VoucherId
		END

	    DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId

		DECLARE db_cursor CURSOR FOR  
			SELECT Z2.LedgerId, Z1.Amount, Z3.CostCenterId FROM ImEx_ExpenseReceiveList Z1 
			LEFT OUTER JOIN
			ImEx_ExpenseParticular Z2 ON Z2.Id=z1.ExpenseParticularId
			LEFT OUTER JOIN
			ImEx_Job Z3 ON Z3.Id =Z1.JobId WHERE Z1.ExpenseReceiveId = @ExpenseReceiveId
		 OPEN db_cursor 
		 FETCH NEXT FROM db_cursor INTO @LedgerId, @Amount, @CostCenterId
		 WHILE @@FETCH_STATUS = 0   
		 BEGIN 
		     IF @CostCenterId IS NULL
				THROW 50000, 'Cost center is not create of this job please save again job ???', 16

		     IF @LedgerId IS NULL
				THROW 50000, 'Ledger not Found ???', 16

		    INSERT INTO  Accounts_VoucherTransaction 
		    		(VoucherId, LedgerId, CostCenter, TransactionType, Amount, STRate, FYId, Narration )
		    	VALUES
		    		(@VoucherId, @LedgerId, @CostCenterId, 1 , @Amount, NULL, @FinancialYearId, NULL) 

			FETCH NEXT FROM db_cursor INTO @LedgerId,   @Amount,  @CostCenterId
		 END
		 CLOSE db_cursor   
		 DEALLOCATE db_cursor

		 SELECT @TotalAmount = SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId = @VoucherId

		 INSERT INTO Accounts_VoucherTransaction
		 	(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		  VALUES
		 	(@VoucherId, @ReceivedLedgerId, NULL, 2,  @TotalAmount)
		  
		  UPDATE ImEx_ExpenseReceive SET VoucherId=@VoucherId WHERE Id=@ExpenseReceiveId
          SET @EexecutionMessage = ''
		  EXEC [Acounting_ValidateVoucher] @VoucherId	

		 IF @trancount = 0
			COMMIT;
     END TRY
	 BEGIN CATCH
		DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
		SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		IF @xstate = -1
			ROLLBACK;
		IF @xstate = 1 and @trancount = 0
			ROLLBACK
		IF @xstate = 1 and @trancount > 0
			ROLLBACK TRANSACTION ImEx_ExpenseReceiveVoucher;
	    CLOSE db_cursor   
		DEALLOCATE db_cursor
		RAISERROR ('[ImEx_ExpenseReceiveVoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	  END CATCH
   END

END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_GSTReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[ImEx_GSTReport]
( 
  @BranchId INT=NULL,
  @PeriodFrom DATE=NULL,
  @PeriodTo DATE=NULL
)
AS
BEGIN
  DECLARE @FYId INT=0
  DECLARE @FYStartDate DATE=NULL
  DECLARE @FYEndDate DATE=NULL

  SELECT @FYId=Id, @FYStartDate=StartDate, @FYEndDate=EndDate FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

  SELECT CONVERT(VARCHAR(10),M.InvoiceDate,103) InvoiceDate, M.InvoiceNo, C.Name ClientName, M.BranchId, SS.StateName, SC.StateName PlaceOfSupply, C.GSTNo
  , G.DisplayName CategoryOfService, SACCode
  , Quantity*Rate+NonTaxAmount TaxableAmount, NonTaxAmount ZeroValue
  , CONVERT(DECIMAL(18,2),CASE WHEN SS.StateName<> SC.StateName AND P.IsTaxApplicable=1 THEN Quantity*Rate*G.IGST*(0.01) ELSE 0 END) IGSTAmount
  , CONVERT(DECIMAL(18,2),CASE WHEN SS.StateName=SC.StateName AND P.IsTaxApplicable=1  THEN Quantity*Rate*G.SGST*(0.01) ELSE 0 END) SGSTAmount
  , CONVERT(DECIMAL(18,2),CASE WHEN SS.StateName=SC.StateName AND P.IsTaxApplicable=1  THEN Quantity*Rate*G.CGST*(0.01) ELSE 0 END) CGSTAmount
  FROM ImEx_InvoiceCharges CH
  LEFT OUTER JOIN ImEx_ManageInvoice M ON M.Id=CH.InvoiceId
  LEFT OUTER JOIN ImEx_Invoice I ON I.Id=CH.ChargesId
  LEFT OUTER JOIN ImEx_Particulars P ON P.Id=I.ParticularId
  LEFT OUTER JOIN GST_SACCode G ON G.Id=P.SACCodeId

  LEFT OUTER JOIN Common_Client C ON M.ClientId=C.Id
  LEFT OUTER JOIN Accounts_Ledgers LC ON LC.Id=C.LedgerId
  LEFT OUTER JOIN [State] SC ON SC.Id=LC.[State]

  LEFT OUTER JOIN Common_Branch B ON B.Id=M.BranchId
  LEFT OUTER JOIN Accounts_Ledgers LS ON LS.Id=B.LedgerId
  LEFT OUTER JOIN [State] SS ON SS.Id=LS.[State]

  WHERE 
    (CONVERT(DATE,M.InvoiceDate,102) BETWEEN CONVERT(DATE,@FYStartDate,102) AND CONVERT(DATE,@FYEndDate,102))
	AND (@PeriodFrom IS NULL OR (CONVERT(DATE,@PeriodFrom,102) <=CONVERT(DATE,M.InvoiceDate,102)))
	AND (@PeriodTo IS NULL OR (CONVERT(DATE,@PeriodTo,102) >=CONVERT(DATE,M.InvoiceDate,102)))
	AND (@BranchId IS NULL OR @BranchId=M.BranchId)
	--AND 
	--M.InvoiceNo='EL/SM/C/01/1819'
 END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_InsertInvoiceCharges]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ImEx_InsertInvoiceCharges]
	@InvoiceId INT,
	@ChargesList VARCHAR(MAX),
	@OnlyValidate INT

AS
BEGIN
 -- Do not add begin and end transaction becasue this SP already execute in transaction inside Invoice Repository
	
	SELECT * INTO #temp_ImExInvoiceCharges FROM (
	SELECT	@InvoiceId as InvoiceId,  
			Split.a.value('.', 'VARCHAR(100)') AS ChargesId
	FROM	
		(
			SELECT CAST ('<M>' + REPLACE(REPLACE(@ChargesList, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS ChargesId  
		) AS A CROSS APPLY ChargesId.nodes ('/M') AS Split(a)
	) XX

	IF @OnlyValidate = 0
	BEGIN
		INSERT INTO ImEx_InvoiceCharges (InvoiceId,ChargesId) SELECT InvoiceId, ChargesId FROM  #temp_ImExInvoiceCharges
	END
	

	-- select * from ImEx_InvoiceCharges
	-- select * from #temp_ImExInvoiceCharges

END	

GO
/****** Object:  StoredProcedure [dbo].[ImEx_InvoiceVouchers]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ImEx_InvoiceVouchers] (
@InvoiceId INT,
@ClientId INT,
@BranchId INT
)
AS
BEGIN
DECLARE @trancount int;
DECLARE @FinancialYearId INT = NULL
DECLARE @InvoiceNo VARCHAR(500)=NULL
DECLARE @InvoiceDate DATE=NULL
DECLARE @InsertById INT=NULL
DECLARE @ClientLedger INT=NULL
DECLARE @JobId INT=NULL
DECLARE @UserBranchId INT=NULL
DECLARE @VoucherStatus INT = NULL
DECLARE @TotalAmount DECIMAL(18,2)=0.0
DECLARE @Amount DECIMAL(18,2)=0.0
DECLARE @LedgerId INT=NULL
DECLARE	@IsTaxApplicable BIT=0
DECLARE	@ParticularDescription VARCHAR(500)=''
DECLARE	@AllRemarks VARCHAR(2000)=''
DECLARE	@TempRemarks VARCHAR(2000)=''
DECLARE @GST BIT=0 
DECLARE @CurrentVoucherStatus INT =NULL

DECLARE @CGST DECIMAL(18,2)=0.0
DECLARE @SGST DECIMAL(18,2)=0.0
DECLARE @IGST DECIMAL(18,2)=0.0

SET @trancount = @@trancount;
SELECT 
	@InvoiceDate=InvoiceDate,
	@InvoiceNo=InvoiceNo,
	@JobId = JobId,
	@InsertById = (CASE WHEN I.UpdateUserId IS NULL THEN I.InsertUserId ELSE I.UpdateUserId END),
	@UserBranchId=U.BranchId,
	@TempRemarks = I.Narration
FROM ImEx_ManageInvoice I 
LEFT OUTER JOIN Users U On U.Id = I.InsertUserId WHERE I.Id=@InvoiceId


IF((SELECT [State] from  Accounts_Ledgers where id in(SELECT LedgerId from Common_Branch where Id=@BranchId))=
       (SELECT [State] from  Accounts_Ledgers where id in(SELECT LedgerId from Common_Client where Id=@ClientId)))
	       SET @GST = 1  /* Local GST */

SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @InvoiceDate Between StartDate And EndDate;
SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'INVOICESUBMISSTION'

SELECT @CurrentVoucherStatus = V.[Status] FROM ImEx_ManageInvoice MI
INNER JOIN 
Accounts_Vouchers V ON V.Id = MI.VoucherId
WHERE MI.Id = @InvoiceId

IF(@CurrentVoucherStatus = 4)
      THROW 50000, 'Voucher for this request has been approved. Modifications are not allwoed.' ,  1

BEGIN
	DECLARE @VoucherId INT = 0
	DECLARE @VoucherType INT = 5 -- Sale Voucher
	DECLARE @VoucherRefType INT = 10 -- Invoice
	DECLARE @InvoiceTaxes DECIMAL(18,2)= 0.0
	DECLARE @EexecutionMessage VARCHAR(5000) = ''
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_InvoiceVouchers; 
		SELECT @VoucherId = Id 
		FROM [Accounts_Vouchers] 
		WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @InvoiceId
		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId)
			VALUES
				(NULL,
				@InvoiceDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				'IMEX',
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@InvoiceNo,
				@InvoiceId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@InvoiceDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @InvoiceNo,
				FinancialYear=@FinancialYearId
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
	
		DECLARE db_cursor CURSOR FOR  
			SELECT P.LedgerId
			, (CASE WHEN IsNull(I.NonTaxAmount,0)=0 THEN (CASE WHEN I.AssessableValue=0 THEN I.Quantity ELSE (I.AssessableValue/100) END)*I.Rate ELSE I.NonTaxAmount END) Amount 
			, P.IsTaxApplicable, I.Description, G.CGST, G.SGST, G.IGST
			FROM ImEx_InvoiceCharges C
			LEFT OUTER JOIN ImEx_Invoice I ON I.Id=C.ChargesId
			LEFT OUTER JOIN ImEx_Particulars P ON P.Id=I.ParticularId
			LEFT OUTER JOIN GST_SACCode G ON G.Id=P.SACCodeId
			WHERE C.InvoiceId=@InvoiceId
		OPEN db_cursor   
		FETCH NEXT FROM db_cursor INTO @LedgerId,  @Amount, @IsTaxApplicable, @ParticularDescription, @CGST, @SGST, @IGST
		WHILE @@FETCH_STATUS = 0   
		BEGIN   
			IF @LedgerId IS NULL
				THROW 50000, 'Ledger not defined in particulars', 16
			IF @Amount=0
				THROW 50000, 'Transaction for zero amount not allowed', 16
				SET @AllRemarks = @AllRemarks + ' ' + @ParticularDescription
			     
			   INSERT INTO  Accounts_VoucherTransaction 
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId, Narration )
					VALUES
						(@VoucherId,@LedgerId,NULL,1, @Amount, NULL, @FinancialYearId, @ParticularDescription) 
				IF @IsTaxApplicable=1 
				BEGIN
					IF @GST=1
					BEGIN
						DECLARE @CGSTLedgerId INT=NULL
						DECLARE @SGSTLedgerId INT=NULL
						SELECT @SGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=1 AND TaxRate=@SGST AND LedgerId IS NOT NULL
						SELECT @CGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=2 AND TaxRate=@CGST AND LedgerId IS NOT NULL
						
						IF @SGSTLedgerId IS NULL
							THROW 50000, 'SGST Ledger not setup in Branch GST Setup', 16
						IF @CGSTLedgerId IS NULL
							THROW 50000, 'CGST Ledger not setup in Branch GST Setup', 16

						INSERT INTO  Accounts_VoucherTransaction 
							(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
						VALUES
							(@VoucherId, @SGSTLedgerId, NULL, 1, ROUND(@Amount*@SGST*(0.01), 0), @SGST, @FinancialYearId),
							(@VoucherId, @CGSTLedgerId, NULL, 1, ROUND(@Amount*@CGST*(0.01), 0), @CGST, @FinancialYearId)

						/*SELECT @VoucherId, S.InputLedgerId, NULL, 1, ROUND(@Amount*S.TaxRate*(0.01),  0), S.TaxRate, @FinancialYearId FROM Accounts_Ledgers L 
							LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.LGSTId
						WHERE L.IGSTId IS NOT NULL AND (@InvoiceDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId*/
					END
					ELSE
					BEGIN
						DECLARE @IGSTLedgerId INT=NULL
						SELECT @IGSTLedgerId=LedgerId  FROM BranchGSTSetup WHERE BranchId=@BranchId AND TaxType=3 AND TaxRate=@IGST AND LedgerId IS NOT NULL
						
						IF @IGSTLedgerId IS NULL
							THROW 50000, 'IGST Ledger not setup in Branch GST Setup', 16

						INSERT INTO  Accounts_VoucherTransaction 
							(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId )
						VALUES
							(@VoucherId, @IGSTLedgerId, NULL, 1, ROUND(@Amount*@IGST*(0.01), 0), @IGST, @FinancialYearId)
						/*SELECT @VoucherId, @IGSTLedgerId, NULL, 1, ROUND(@Amount*@IGST*(0.01), 0), @IGST, @FinancialYearId FROM Accounts_Ledgers L 
							LEFT OUTER JOIN vw_ServiceTax S ON S.STId=L.IGSTId
						WHERE L.IGSTId IS NOT NULL AND (@InvoiceDate BETWEEN S.DateFrom AND ISNULL(S.DateTo, CONVERT(DATETIME, '2999-01-01', 102))) AND L.Id=@LedgerId*/
					END
				END 
			   FETCH NEXT FROM db_cursor INTO @LedgerId,  @Amount, @IsTaxApplicable, @ParticularDescription, @CGST, @SGST, @IGST
		END   
		CLOSE db_cursor   
		DEALLOCATE db_cursor
		SELECT @ClientLedger=L.Id FROM ImEx_Job J 
			LEFT OUTER JOIN Common_Client C ON C.Id=J.ClientId
			LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=C.LedgerId
			WHERE J.Id=@JobId
		SELECT @TotalAmount =SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId=@VoucherId

		Update Accounts_Vouchers SET [Description] = @TempRemarks WHERE Id=@VoucherId
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@ClientLedger,NULL,2, @TotalAmount)

		Update ImEx_Invoice Set VoucherId = @VoucherId
				Where InvoiceId = @InvoiceId
		Update ImEx_ManageInvoice Set VoucherId = @VoucherId
				Where Id = @InvoiceId

		SET @EexecutionMessage = ''
		Exec [Acounting_ValidateVoucher] @Voucherid	
		if @trancount = 0
			commit;
		END TRY
	 begin catch
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction ImEx_InvoiceVouchers;
			
			CLOSE db_cursor   
			DEALLOCATE db_cursor
			raiserror ('[ImEx_InvoiceVouchers]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	end catch
END
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_JobExpenseReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[ImEx_JobExpenseReport]
(
 @JobId INT=NULL,
 @ClientId INT = NULL,
 @PaymentStartDate DATE=NULL,
 @PaymentEndDate DATE=NULL

)
AS
BEGIN
	 SELECT J.Id, J.JobNo, ISNULL(JE.JobExpense, 0) AS ExpenseBook, ISNULL(CH.Amount, 0) AS CashChequAMT
             ,ISNULL(D.TotalAmount, 0) AS DebitAmt, ISNULL(C.TotalAmount, 0) AS CreditAmt
		FROM ImEx_Job J 
		LEFT OUTER JOIN
		vw_ImEx_JobExpense JE ON JE.JobId = J.Id
		LEFT OUTER JOIN
		vw_ImEx_JobExpenseCashOrCheque CH ON CH.JobId = J.Id 
		LEFT OUTER JOIN
		vw_ImEx_DebitNotes D ON D.JobId = J.Id
		LEFT OUTER JOIN
		vw_ImEx_CreditNotes C ON C.JobId =J.Id
	 WHERE 1=1    
		AND (@JobId IS NULL OR J.Id = @JobId)
		AND (@ClientId IS NULL OR J.ClientId = @ClientId)


END


GO
/****** Object:  StoredProcedure [dbo].[ImEx_JobReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ImEx_JobReport]
@JobId INT = NULL,
@ClientId INT = NULL

AS
BEGIN
	 
	SET NOCOUNT ON;
	WITH InvCharges AS (
		SELECT JobId, G.GroupName, SUM((CASE WHEN NonTaxAmount=0 THEN (CASE WHEN Rate*Quantity=0 THEN ((AssessableValue*Rate)/100) ELSE Rate*Quantity END) ELSE NonTaxAmount END)) Amount from ImEx_Invoice I
			LEFT OUTER JOIN ImEx_Particulars C ON C.Id=I.ParticularId 
			LEFT OUTER JOIN ImEx_Group G ON G.Id=C.GroupId
			GROUP BY JobId, G.GroupName
	) SELECT JobId, IsNull([DOCUMENTATION CHARGES-INCOME], 0) Documentation ,
					IsNull([STEVEDORING CHARGES-INCOME], 0) Stevedoring ,
					IsNull([CUSTOM HOUSE AGENT-CHA INCOME], 0) Custome ,
					IsNull([FREIGHT AND TRANSPORTATION CHARGES-INCOME], 0) Transportation ,
	                IsNull([Reimbursement],0) Reimbursement, 
					IsNull([Reimbursable Customs Duty],0)  RCustomeDuty,
					IsNull([REMBURSE CFS CHARGES],0)  RCFS
					INTO #TempData
		FROM InvCharges 
			PIVOT (Max(Amount) FOR GroupName IN (
			  [DOCUMENTATION CHARGES-INCOME], 
			  [STEVEDORING CHARGES-INCOME],
			  [CUSTOM HOUSE AGENT-CHA INCOME], 
			  [FREIGHT AND TRANSPORTATION CHARGES-INCOME], 
			  [Reimbursement],
			  [Reimbursable Customs Duty],
			  [REMBURSE CFS CHARGES]

			  )) P;

	
	WITH InvExpense AS (
		SELECT JobId, G.GroupName, SUM(BuyingCost) Amount, SUM(BuyingTax) BuyingTax from ImEx_Invoice I
			LEFT OUTER JOIN ImEx_Particulars C ON C.Id=I.ParticularId 
			LEFT OUTER JOIN ImEx_Group G ON G.Id=C.GroupId
			GROUP BY JobId, G.GroupName
	) SELECT JobId, IsNull([DOCUMENTATION CHARGES-INCOME], 0) Documentation ,
					IsNull([STEVEDORING CHARGES-INCOME], 0) Stevedoring ,
					IsNull([CUSTOM HOUSE AGENT-CHA INCOME], 0) Custome ,
					IsNull([FREIGHT AND TRANSPORTATION CHARGES-INCOME], 0) Transportation ,
	                IsNull([Reimbursement],0) Reimbursement, 
					IsNull([Reimbursable Customs Duty],0)  RCustomeDuty,
					IsNull([REMBURSE CFS CHARGES],0)  RCFS
				    INTO #TempData1
		FROM InvExpense 
			PIVOT (Max(Amount) FOR GroupName IN (
			  [DOCUMENTATION CHARGES-INCOME], 
			  [STEVEDORING CHARGES-INCOME],
			  [CUSTOM HOUSE AGENT-CHA INCOME], 
			  [FREIGHT AND TRANSPORTATION CHARGES-INCOME], 
			  [Reimbursement],
			  [Reimbursable Customs Duty],
			  [REMBURSE CFS CHARGES]

			  )) P;


  SELECT J.JobNo, C.Name AS ClientName, B.Name AS BranchName, ISNULL(J.BENo, 'NA') AS BENo, 
         ISNULL(J.SBNo, 'NA') AS SBNo, ISNULL(T.Documentation, 0) AS Documentation, ISNULL(T.Stevedoring, 0) AS Stevedoring,
		 ISNULL(T.Custome, 0) AS Custome, ISNULL(T.Transportation, 0) AS Transportation, ISNULL(T.Reimbursement, 0) AS Reimbursement
         ,ISNULL(T.RCustomeDuty, 0) AS RCustomeDuty, ISNULL(T.RCFS, 0) AS RCFS,  ISNULL(ET.Documentation, 0) AS EDocumentation
		 ,ISNULL(ET.Stevedoring, 0) AS EStevedoring, ISNULL(ET.Custome, 0) AS ECustome, 
		  ISNULL(ET.Transportation, 0) AS ETransportation, ISNULL(ET.Reimbursement, 0) AS EReimbursement
		 ,ISNULL(ET.RCustomeDuty, 0) AS ERCustomeDuty, ISNULL(ET.RCFS, 0) AS ERCFS

  FROM ImEx_Job J
  LEFT OUTER JOIN
  #TempData T ON T.JobId = J.Id  
  LEFT OUTER JOIN
  #TempData1 ET ON ET.JobId = J.Id
  LEFT OUTER JOIN
  Common_Branch B ON B.Id = J.BranchId
  LEFT OUTER JOIN
  Common_Client C ON C.Id = J.ClientId
  WHERE 1=1
  AND (@JobId IS NULL OR J.Id = @JobId)
  AND (@ClientId IS NULL OR J.ClientId = @ClientId)

END
GO
/****** Object:  StoredProcedure [dbo].[ImEx_PaymentCashORChequeVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC  [dbo].[ImEx_PaymentCashORChequeVoucher]
(
 @ExpensePaymentId INT
 
)
AS
BEGIN
   DECLARE @trancount INT;
   DECLARE @PaymentDate DATE = NULL
   DECLARE @PaymentMode INT = NULL
   DECLARE @ReceivedLedgerId INT = NULL
   DECLARE @InsertById INT=NULL
   DECLARE @UserBranchId INT=NULL
   DECLARE @FinancialYearId INT = NULL
   DECLARE @VoucherStatus INT = 2 -- Voucher Status submit by defalut
   DECLARE @LedgerId INT = NULL
   DECLARE @CostCenterId INT = NULL
   DECLARE @Amount DECIMAL(18,2)=0.0
   DECLARE @TotalAmount DECIMAL(18,2)=0.0
   DECLARE @AllRemarks VARCHAR(2000)=''
   
   SET @trancount = @@trancount;

   SELECT  @PaymentDate = PaymentDate, @PaymentMode = PaymentMode, @ReceivedLedgerId = ReceivedLedgerId 
          ,@InsertById = (CASE WHEN A.UpdateUserId IS NULL THEN A.InsertUserId ELSE A.UpdateUserId END)
		  ,@UserBranchId=U.BranchId
		  ,@AllRemarks = A.Narration
   FROM ImEx_ExpensePayment A
   LEFT OUTER JOIN Users U On U.Id = A.InsertUserId 
   WHERE A.Id = @ExpensePaymentId
   
   SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @PaymentDate Between StartDate And EndDate;

  BEGIN
     DECLARE @VoucherId INT = 0
     DECLARE @VoucherType INT = 2   -- Payment Voucher of Job Expense
	 DECLARE @VoucherRefType INT = 13 -- Job Expense
	 DECLARE @CurrentVoucherStatus INT =NULL
     DECLARE @EexecutionMessage VARCHAR(5000) = ''
     
	 BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_PaymentCashORChequeVoucher;
            
			SELECT @VoucherId = Id , @CurrentVoucherStatus = [Status]
			FROM [Accounts_Vouchers] 
			WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @ExpensePaymentId

			IF(@CurrentVoucherStatus != 5)
			   THROW 50000, 'Please Reject Voucher', 1

		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId)
			VALUES
				(NULL,
				@PaymentDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				'IMEX',
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				NULL,
				@ExpensePaymentId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@PaymentDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = Null,
				FinancialYear=@FinancialYearId
			WHERE Id = @VoucherId
		END

	    DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId

		DECLARE db_cursor CURSOR FOR  
			SELECT P.LedgerId, EPL.Amount, J.CostCenterId FROM ImEx_ExpensePayment EP
				 LEFT OUTER JOIN
				 ImEx_ExpensePaymentList EPL ON EPL.ExpensePaymentId = EP.Id 
				 LEFT OUTER JOIN
				 ImEx_ExpenseParticular P ON P.Id=EPL.ExpenseParticularId
				 LEFT OUTER JOIN
				 ImEx_Job J ON J.Id = EPL.JobId
				 WHERE EP.Id = @ExpensePaymentId
		 OPEN db_cursor 
		 FETCH NEXT FROM db_cursor INTO @LedgerId, @Amount, @CostCenterId
		 WHILE @@FETCH_STATUS = 0   
		 BEGIN 
		     IF @CostCenterId IS NULL
				THROW 50000, 'Cost center is not create of this job please save again job ???', 16

		     IF @LedgerId IS NULL
				THROW 50000, 'Ledger not Found ???', 16

		    INSERT INTO  Accounts_VoucherTransaction 
		    		(VoucherId, LedgerId,CostCenter,TransactionType,Amount, STRate, FYId, Narration )
		    	VALUES
		    		(@VoucherId, @LedgerId, @CostCenterId, 2 , @Amount, NULL, @FinancialYearId, @AllRemarks) 

			FETCH NEXT FROM db_cursor INTO @LedgerId,   @Amount,  @CostCenterId
		 END
		 CLOSE db_cursor   
		 DEALLOCATE db_cursor


		 SELECT @TotalAmount = SUM(Amount) FROM Accounts_VoucherTransaction WHERE VoucherId = @VoucherId


		   INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
			 VALUES
				(@VoucherId, @ReceivedLedgerId, NULL, 1,  @TotalAmount)

		  UPDATE Accounts_Vouchers SET [Description]=@AllRemarks WHERE Id = @VoucherId
		  UPDATE ImEx_ExpensePayment SET VoucherId=@VoucherId WHERE Id=@ExpensePaymentId
          SET @EexecutionMessage = ''
		  EXEC [Acounting_ValidateVoucher] @VoucherId	

		 IF @trancount = 0
			COMMIT;
     END TRY
	 BEGIN CATCH
		DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
		SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		IF @xstate = -1
			ROLLBACK;
		IF @xstate = 1 and @trancount = 0
			ROLLBACK
		IF @xstate = 1 and @trancount > 0
			ROLLBACK TRANSACTION ImEx_PaymentCashORChequeVoucher;
		RAISERROR ('[ImEx_PaymentCashORChequeVoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	  END CATCH
   END
END

GO
/****** Object:  StoredProcedure [dbo].[ImEx_RetainerInvoiceVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[ImEx_RetainerInvoiceVoucher]
(
  @RetainerInvoiceId INT
)

AS
BEGIN
  DECLARE @trancount INT;
  DECLARE @RetainerDate DATE;
  DECLARE @ClientLedgerId INT;
  DECLARE @ReceivedLedgerId INT;
  DECLARE @PaymentModeId INT;
  DECLARE @TotalAmount DECIMAL(18,2)=0.0;
  DECLARE @Narration VARCHAR(2000) = NULL;
  DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
  DECLARE @FinancialYearId INT;
  DECLARE @InsertById INT=NULL;
  DECLARE @VoucherStatus INT = 2;
  DECLARE @UserBranchId INT=NULL;
  DECLARE @VoucherId INT=0;
  DECLARE @CurrentVoucherStatus INT=0;

  SET @trancount = @@trancount;

  SELECT  @RetainerDate = R.RetainerDate, @ClientLedgerId = C.LedgerId, @PaymentModeId = R.PaymentModeId
         ,@ChkNeftRefNo = R.ChkNEFTRefNo  
		 ,@InsertById = (CASE WHEN R.UpdateUserId IS NULL THEN R.InsertUserId ELSE R.UpdateUserId END)
		 ,@UserBranchId = U.BranchId
         ,@ReceivedLedgerId = R.LedgerId, @TotalAmount = R.Amount, @VoucherId = R.VoucherId, @Narration= R.Narration
  FROM ImEx_RetainerInvoice R
  LEFT OUTER JOIN
  Common_Client C ON C.Id = R.ClientId
  LEFT OUTER JOIN Users U ON U.Id = R.InsertUserId
  WHERE R.Id = @RetainerInvoiceId

  SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @RetainerDate Between StartDate And EndDate;
  
  IF(@VoucherId IS NOT NULL) 
  BEGIN
        SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
  END

  IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
    THROW 50000, 'Please Reject Vouchers ???. ' , 1

  IF(@TotalAmount=0.0)
      THROW 50000, 'Voucher cannot be create of zero Amount ???.', 1

BEGIN
  BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION ImEx_RetainerInvoiceVoucher;
				
			IF(@VoucherId = 0 OR @VoucherId IS NULL)
				BEGIN
					INSERT INTO [Accounts_Vouchers]
						(VoucherName
						,VoucherDate
						,VoucherType
						,[Status]
						,InsertUserId
						,InsertDate
						,[Description]
						,BranchId
						,FinancialYear
						,RefType
						,ReferenceNo
						,ReferenceId
						,PaymentMode
						,ChkNeftRefNo)
					VALUES
						(NULL,
						@RetainerDate,
						3,            -- Receipt Voucher
						@VoucherStatus, -- Submitted 
						@InsertById,
						GETDATE(),
						@Narration,
						@UserBranchId,
						@FinancialYearId,
						NULL, 
						NULL,
						@RetainerInvoiceId,
						@PaymentModeId,
						@ChkNeftRefNo)
					SET @VoucherId=SCOPE_IDENTITY()
				END
				ELSE
				BEGIN
					UPDATE Accounts_Vouchers SET 
						VoucherDate = @RetainerDate,
						UpdateUserId= @InsertById,
						UpdateDate = GETDATE(),
						[Status] = @VoucherStatus,
						ReferenceId=@RetainerInvoiceId,
						FinancialYear=@FinancialYearId
					WHERE Id = @VoucherId
				END
			
			DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId

			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
			 VALUES
				(@VoucherId, @ClientLedgerId, NULL, 1,  @TotalAmount)

			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId, CostCenter, TransactionType, Amount)
			 VALUES
				(@VoucherId, @ReceivedLedgerId, NULL, 2,  @TotalAmount)

			UPDATE ImEx_RetainerInvoice SET VoucherId = @VoucherId WHERE Id = @RetainerInvoiceId
			EXEC [Acounting_ValidateVoucher] @VoucherId	
			
			IF @trancount = 0
				COMMIT;
	END TRY
	BEGIN CATCH
			DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
			SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			IF @xstate = -1
				ROLLBACK;
			IF @xstate = 1 and @trancount = 0
				ROLLBACK
			IF @xstate = 1 and @trancount > 0
				ROLLBACK transaction ImEx_RetainerInvoiceVoucher;
		
			RAISERROR ('[ImEx_RetainerInvoiceVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
	END CATCH
  END
END
GO
/****** Object:  StoredProcedure [dbo].[KAPL_ClientTDSReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[KAPL_ClientTDSReport]
(
@InvoicDateFrom DATE = NULL,
@InvoicDateTo DATE = NULL,
@ClientId INT = NULL


) 
AS
 BEGIN
DECLARE @ClientLedgerId INT=0
SELECT @ClientLedgerId=LedgerId FROM Common_Client WHERE Id=@ClientId  

SELECT  C.Name ClientName,C.PANNo,V.Id, V.VoucherNo,Convert (varchar(10),V.VoucherDate,103) VoucherDate,V.ReferenceNo, T.Amount   FROM Accounts_Vouchers  V
INNER JOIN Accounts_VoucherTransaction T ON T.VoucherId=V.ID  AND T.LedgerId=1625
INNER JOIN Accounts_VoucherTransaction T1 ON T1.VoucherId=V.ID 
INNER JOIN Common_Client C ON C.LedgerId=T1.LedgerId
WHERE V.VoucherDate  >= @InvoicDateFrom And V.VoucherDate <= @InvoicDateTo 
AND (@ClientId IS NULL OR C.Id= @ClientId)
AND V.Status IN(2,4)

order By C.Name


END
GO
/****** Object:  StoredProcedure [dbo].[OfficeAdvVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE Procedure [dbo].[OfficeAdvVoucher] (@LoadingId INT)
As
Begin
	DECLARE @OwnerId INT
	DECLARE @ChallanNo INT
	DECLARE @BranchId INT 
	DECLARE @EexecutionMessage Varchar(2000)
	DECLARE @trancount int = 0
	DECLARE @VoucherDate DATETIME
	DECLARE @VoucherType INT=4
	DECLARE @Narration varchar(2000)='' 
	DECLARE @CreatedBy int=0 
	DECLARE @FinancialYearId int= NULL 
	DECLARE @CostCenterId INT=NULL 
	DECLARE @JobId INT=NULL 
	DECLARE @CashLedgerId INT=NULL
	DECLARE @TotalFreight Decimal(18,2) = 0.0
	DECLARE @FreightTransport INT=NULL
	DECLARE @FreightPayable INT=NULL
	DECLARE @DeductionType Varchar(50) = NULL
	DECLARE @HSDAdvance Decimal(18,2) = 0.0
	DECLARE @LoadDetention Decimal(18,2) = 0.0
	DECLARE @PumpRateId INT
	DECLARE @Amount DECIMAL(18,2) = null


	SELECT @ChallanNo = A.ChallanNo, @VoucherDate = AdvanceDate, @Amount = A.Amount, @Narration = L.Remarks, @CreatedBy = IsNull(UpdateUserId, InsertUserId), @JobId = JobId, 
	@OwnerId = OwnerId
	From LoadingChallan
	L Left outer Join OfficeAdvance A On A.ChallanNo = L.ChallanNo Where A.LoadingId = @LoadingId

 SELECT @Narration = 'Being Office adv of '+CONVERT(VARCHAR,NetWt)+' MT@ '+CONVERT(VARCHAR,FreightRate)+'/MT fm '+Sector+' Under CH No-'+CONVERT(VARCHAR,ChallanNo)+',Job No '+JobNo+',Truck No '+TruckNumber+',Loading date '+CONVERT(VARCHAR(10),LoadDate, 103)+'. PAN No '+OwnerPan FROM 
	vw_ReportLoadingChallanReport L
	WHERE L.Id=@LoadingId

	--select * from Accounts_
	SELECT @BranchId=ExecutingBranch, @CostCenterId=CostCenterId, @CashLedgerId=LedgerId FROM _Job WHERE Id=@JobId
	DECLARE @IsAssoLedger BIT=0

 SELECT @FreightPayable=LedgerId FROM SystemLedger WHERE Description='FREIGHTPAYABLE'
	SELECT @FreightTransport=LedgerId FROM SystemLedger WHERE Description='FREIGHTTRANSPORT'

	DECLARE @TruckOwnerAdvance INT=NULL
	SELECT @TruckOwnerAdvance=LedgerId FROM SystemLedger WHERE Description='TRANSPORTATION ADV TRUCK OWNERS'
	DECLARE @FuelAdvance INT=NULL
	SELECT @FuelAdvance=LedgerId FROM SystemLedger WHERE Description='FUEL ADV TRUCK OWNERS'
	IF @TruckOwnerAdvance IS NULL
	THROW 50000, 'Please set Truck Owner Advance Ledger', 10


	Select @DeductionType = FieldValue From Common_Settings Where Id = 5 -- TDS Deduction
	SET @trancount = @@TRANCOUNT 
	BEGIN TRY
	if @trancount = 0
	begin transaction
	else
	save transaction [OfficeAdvVoucher]; 
 DECLARE @VoucherId INT=0
	DECLARE @ReferenceNo VARCHAR(200)=CAST(@ChallanNo AS VARCHAR)
	DECLARE @VoucherName VARCHAR(200)=NULL 
	DECLARE @TotalAdvance Decimal(18,2) = 0.00
	SELECT @TotalAdvance=SUM(Amount) FROM OfficeAdvance WHERE LoadingId=@LoadingId 
	SET @TotalAdvance=IsNULL(@TotalAdvance,0)
	SELECT @ChallanNo=ChallanNo FROM LoadingChallan WHERE Id=@LoadingId


	SELECT @VoucherId=Id FROM Accounts_Vouchers 
	WHERE RefType = 1 And ReferenceId=@ChallanNo And VoucherType = @VoucherType AND ReferenceNo=@ReferenceNo
	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
	IF(@VoucherId IS NULL OR @VoucherId=0)


	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
	IF(@VoucherId IS NULL OR @VoucherId=0)
	BEGIN
	SET @VoucherName='6107'
	INSERT INTO [Accounts_Vouchers]
	(VoucherName
	,VoucherDate
	,VoucherType
	,[Status]
	,InsertUserId
	,InsertDate
	,[Description]
	,BranchId
	,FinancialYear
	,RefType
	,ReferenceNo
	,ReferenceId)
	VALUES
	(@VoucherName,
	@VoucherDate,
	@VoucherType, 
	2, -- Submitted 
	@CreatedBy,
	GETDATE(),
	@Narration,
	@BranchId,
	@FinancialYearId,
	1, -- Reference Type = Challan
	@ReferenceNo,
	@ChallanNo)
	SET @VoucherId=SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
	DECLARE @VoucherTempStatus INT = 0
	SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
	IF @VoucherTempStatus IS NOT NULL AND @VoucherTempStatus = 4 -- Approved
	THROW 50000, 'Loading voucher has been approved. Can not modify loading challan. Please reject the voucher.', 16
	SET @EexecutionMessage = @EexecutionMessage + ' Updating Voucher Row.'
	UPDATE Accounts_Vouchers SET 
	VoucherDate=@VoucherDate,
	UpdateUserId=@CreatedBy,
	UpdateDate=GETDATE(),
	[Status] = 2,
	[Description]=@Narration,
	BranchId=@BranchId,
	FinancialYear=@FinancialYearId
	,RefType = 1
	,ReferenceNo = @ReferenceNo
	,ReferenceId = @ChallanNo
	WHERE Id = @VoucherId
	END

	DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
	SET @EexecutionMessage = @EexecutionMessage + ' DR FreightIncome.'

	IF @CashLedgerId IS NULL
	THROW 50000, 'Cash Ledger not found' , 16

	INSERT INTO Accounts_VoucherTransaction
	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
	VALUES
	(@VoucherId, @CashLedgerId ,NULL,1,@TotalAdvance) 

	INSERT INTO Accounts_VoucherTransaction
	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
	VALUES
	(@VoucherId, @TruckOwnerAdvance ,NULL,2,@TotalAdvance) 

	Update OfficeAdvance Set Amount = @Amount Where LoadingId = @LoadingId

	Exec [Acounting_ValidateVoucher] @Voucherid
	IF @trancount = 0
	COMMIT;
	END TRY
	BEGIN CATCH
	declare @error int, @message varchar(4000), @xstate int;
	select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
	if @xstate = -1
	rollback;
	if @xstate = 1 and @trancount = 0
	rollback
	if @xstate = 1 and @trancount > 0
	rollback transaction [OfficeAdvVoucher];
	raiserror ('[OfficeAdvVoucher]: %s, %s', 16, 1, @EexecutionMessage, @message) ;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[PANApi_GetUnVerifiedPanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PANApi_GetUnVerifiedPanDetails] (@PriorityPans INT)
As
Begin
	IF (@PriorityPans = 1)
		Select Distinct Top 200 PANNumber From Common_Parties P Where NeedToVerifyPan = 1 And Len(IsNull(P.PANNumber,''))  > 0 AND P.PANNumber Not In (Select PANNo From DB_PANInfo)
	ELSE
		Select TOP 100 PANNumber From (
		Select DISTINCT  P.PANNumber, (CASE WHEN PANNumber IS NULL OR LEN(PANNumber) = 0 THEN 1 WHEN PANNumber LIKE '[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN  (Case WHEN jPANInfo.NameInPan IS NULL THEN 3 When IsNull(jPANInfo.PANStatus, 'E') <> 'E' Then 6 When RTrim(LTrim(P.PartyName)) = RTrim(LTrim(jPANInfo.NameInPan)) THEN 4 ELSE 5 End) ELSE 2 END) as PanStatus
		FROM  Common_Parties P
		Left Join DB_PANInfo jPANInfo On jPANInfo.PANNo = P.PANNumber
		Where Len(IsNull(P.PANNumber,''))  > 0  AND P.PANNumber Not In (Select PANNo From DB_PANInfo)) XX
		Where XX.PanStatus = 3
ENd


GO
/****** Object:  StoredProcedure [dbo].[PANApi_SyncPanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PANApi_SyncPanDetails]
As
Begin
	Update Common_Parties Set NeedToVerifyPan = 0
	From Common_Parties P
	Inner Join DB_PANInfo PAN On P.PANNumber = PAN.PANNo
	Where PAN.PANNo Is NOt NULL
	Select 'S'
ENd

GO
/****** Object:  StoredProcedure [dbo].[PaymentSummaryByBank]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PaymentSummaryByBank](@LoadFromDate DATE, @LoadToDate DATE)
AS
BEGIN

select top 1000 T.ChkNeftRefNo, T.Amount, P.PartyName, A.Name Bank, T.Remarks, TotalFreight, TollGate, TdsAmount, HSDCost, Advance, Penalty, Other, cash, ISNULL(cheque,0) cheque, [bulk transfer],B.ChkDate as PaymentDate from _Token T
LEFT OUTER JOIN _TokenChallans TC ON TC.TokenId=T.Id
LEFT OUTER JOIN _TokenBulkPaymentId D ON D.TokenId=T.Id
LEFT OUTER JOIN _TokenBulkPayment B ON B.Id=D.BulkPaymentId
LEFT OUTER JOIN Common_Parties P ON P.Id=T.PartyId
LEFT OUTER JOIN Common_BankNames A ON A.Id=B.BankNameId
LEFT OUTER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
LEFT OUTER JOIN Payment Y ON Y.LoadingId=L.Id
LEFT OUTER JOIN (select * from ( select LoadingID, Amount, M.Name from LoadingAdvance A INNER JOIN Accounts_PaymentMode M ON M.Id=A.PaymentMode) src pivot ( sum(Amount) for Name in (CASH, CHEQUE, [BULK TRANSFER]) ) piv) AD ON AD.LoadingId=L.Id
--WHERE B.PaymentDate BETWEEN @FromDate AND @ToDate

END



select * from _TokenBulkPayment
GO
/****** Object:  StoredProcedure [dbo].[Report_AdvanceDetailReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_AdvanceDetailReport]
(
@FinancialYearId INT,
@BranchId INT = NULL,
@ClientId INT = NULL

)
AS
BEGIN
		DECLARE @StartDateFrom DATE
		DECLARE @StartDateTo DATE
		SELECT @StartDateFrom = StartDate, @StartDateTo = EndDate  FROM Accounts_FinancialYear WHERE Id = @FinancialYearId
		SELECT     
		       YEAR = YEAR(L.LoadDate), 
		       MONTH = MONTH(L.LoadDate),
			   MonthName = UPPER(LEFT(DATENAME(MONTH, L.LoadDate), 3)),
			   TotalNetWT =  SUM(L.NetWT), 
		       --TotalNetWT = CONVERT(VARCHAR, FLOOR(SUM(NetWT)), 1), 
		       TotalChallan = COUNT(L.ChallanNo), 
			   PendingInvoiceChallan = COUNT(L.ChallanNo) - COUNT(IC.ChallanNo),
			   TotalFreight = SUM ( CASE WHEN ISNULL(L.GuaranteeWT, 0) > 0 THEN L.GuaranteeWT * L.Freight ELSE  L.Freight * L.NetWT END),
			   TotalBillAmount = SUM(
		                     CASE	WHEN I.ClaimQtyType = 3 THEN L.NetWT * IC.BillingRate -- NetLoad
									WHEN I.ClaimQtyType = 4 THEN U.UnloadedNetWt * IC.BillingRate -- NetUnload
									WHEN I.ClaimQtyType = 5 THEN L.GuaranteeWT * IC.BillingRate -- Guarantee Weight
									WHEN I.ClaimQtyType = 1 THEN  (CASE WHEN L.NetWT > U.UnloadedNetWt THEN L.NetWT * IC.BillingRate ELSE U.UnloadedNetWt * IC.BillingRate END) /*H*/
								  	WHEN I.ClaimQtyType = 2 THEN  (CASE WHEN L.NetWT < U.UnloadedNetWt THEN L.NetWT * IC.BillingRate ELSE U.UnloadedNetWt * IC.BillingRate END) /*L*/
								  
								  ELSE
								    0
								 END
								)
		FROM LoadingChallan L
		LEFT OUTER JOIN
		_InvoiceChallan IC ON IC.ChallanNo = L.ChallanNo
		LEFT OUTER JOIN
		vw_ReportJobDetails J ON J.JobId = L.JobId
		LEFT OUTER JOIN
		_Invoice I ON I.Id =IC.InvoiceId
		LEFT OUTER JOIN
		UnloadingChallan U ON U.LoadingChallanId = L.Id
		WHERE 1 = 1
		AND CONVERT(SMALLDATETIME, L.LoadDate, 103) >= @StartDateFrom
		AND CONVERT(SMALLDATETIME, L.LoadDate, 103) <= @StartDateTo
		AND (@BranchId IS NULL OR J.JobBranchId = @BranchId)
		AND (@ClientId IS NULL OR J.ClientId = @ClientId)
		GROUP BY YEAR(L.LoadDate), 
		         MONTH(L.LoadDate), 
		         DATENAME(MONTH, L.LoadDate) 
		ORDER BY YEAR, 
	         MONTH

END
GO
/****** Object:  StoredProcedure [dbo].[Report_BillChallanNo]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_BillChallanNo]
( 
 @BranchId INT = NULL,
 @ClientId INT = NULL,
 @JobId INT = NULL,
 @LoadDateFrom DATE = NULL,
 @LoadDateTo DATE = NULL,
 @LoadingPointId INT = NULL,
 @UnloadingPointId INT = NULL,
 @RefName VARCHAR(500) = NULL,
 @IsBilled INT=NULL,
 @ChallanNo INT=0,
 @InvoiceNo INT=0

)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @RefName

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN

	SELECT  TOP 5000 * , 
	            CONVERT(Decimal(18,2), (ISNULL(X.ClaimWt, 0) * ISNULL(X.BillingRate,0))) AS ChallanAmount
	            ,CONVERT(Decimal(18,2), (ISNULL(X.ClaimWt, 0) * ISNULL(X.HandlingRate, 0))) as HandlingAmount
				,CONVERT(Decimal(18,2), ((ISNULL(X.ClaimWt, 0) * ISNULL(X.BillingRate,0)) + ISNULL(X.StaticalCharge, 0) + (ISNULL(X.ClaimWt, 0) * ISNULL(X.HandlingRate, 0)) + ISNULL(X.ChallanDetention, 0)) - ISNULL(X.COtherDeduction, 0))  AS BillingAmount
			    
			   
	FROM (
			SELECT
			 J.JobNo, J.Sector, CONVERT(VARCHAR(10), L.LoadDate ,103 ) AS LoadDate, L.Freight AS FreightRate, L.NetWT, ISNULL(L.GuaranteeWT, 0) AS GuaranteeWT, ISNULL(U.UnloadedNetWt, 0) AS UnloadWT, 
			  ISNULL(CW.ClaimLoad, 0) AS ClaimLoad, ISNULL(CW.ClaimUnload, 0) AS ClaimUnload, 
			  ISNULL(L.Moisture, 0) AS LoadMoisture, ISNULL(U.UnloadedMoisture, 0) AS UnloadMoisture, CASE WHEN IC.ChallanNo IS NOT NULL THEN ISNULL(IC.BillingRate, 0) ELSE ISNULL(L.InvoiceClientRate, 0) END AS BillingRate, I.InvoiceNo, C.[Type] AS ClaimType, 
			  CONVERT(Decimal(18,2), CASE WHEN ISNULL(L.GuaranteeWT, 0) > 0 THEN ISNULL(L.GuaranteeWT, 0) * ISNULL(L.Freight, 0) ELSE  ISNULL(L.Freight,0 ) * ISNULL(L.NetWT, 0) END ) AS TotalFreight,
			  
			  
			  CASE 
					WHEN I.ClaimQtyType = 1 /*H*/ THEN  (CASE WHEN CW.ClaimLoad > CW.ClaimUnload THEN CW.ClaimLoad ELSE CW.ClaimUnload END)
					WHEN I.ClaimQtyType = 2 /*L*/ THEN  (CASE WHEN CW.ClaimLoad < CW.ClaimUnload THEN CW.ClaimLoad ELSE CW.ClaimUnload END)
					WHEN I.ClaimQtyType = 3 /*NL*/ THEN  NetWt
					WHEN I.ClaimQtyType = 4 /*NU*/ THEN  UnloadedNetWt
					WHEN I.ClaimQtyType = 5 /*GW*/ THEN  GuaranteeWT
					ELSE L.NetWt
			  END As ClaimWt,
			  ISNULL(IC.COtherDeduction, 0) AS COtherDeduction, ISNULL(IC.StaticalCharge, 0) AS StaticalCharge, 
			  ISNULL(IC.CDetention,0) AS ChallanDetention, J.RefName, L.ChallanNo, ISNULL(IC.HandlingRate, 0) AS HandlingRate,
			  J.WOSectorId

	FROM LoadingChallan L WITH (NOLOCK) 
	LEFT OUTER JOIN
	UnloadingChallan U WITH (NOLOCK) ON U.LoadingChallanId = L.Id
	LEFT OUTER JOIN
	_InvoiceChallan IC WITH (NOLOCK) ON IC.ChallanNo = L.ChallanNo
	LEFT OUTER JOIN
	_Invoice I WITH (NOLOCK) ON I.Id = IC.InvoiceId
	LEFT OUTER JOIN
	_ClaimQtyType C WITH (NOLOCK) ON C.Id = I.ClaimQtyType
	LEFT OUTER JOIN
	vw_ReportClaimWT CW WITH (NOLOCK) ON CW.Id = L.Id
	LEFT OUTER JOIN
	vw_ReportJobDetails J WITH (NOLOCK) ON  J.JobId = L.JobId
	WHERE 1 = 1  
	AND (@BranchId IS NULL OR J.JobBranchId = @BranchId)
	AND (@ClientId IS NULL OR J.ClientId = @ClientId)
	AND (@JobId IS NULL OR L.JobId = @JobId)  
    --AND (@ChallanNo IS NULL OR L.ChallanNo like '%'+ @ChallanNo + '%'  )
	--AND (@ChallanNo IS NULL OR L.ChallanNo = @ChallanNo)  
	AND (@InvoiceNo=0 OR I.InvoiceNo=@InvoiceNo) 
	AND (@ChallanNo=0 OR L.ChallanNo=@ChallanNo) 
	AND (@LoadDateFrom IS NULL OR CONVERT(SMALLDATETIME, loaddate, 103)>= @LoadDateFrom)
	AND (@LoadDateTo IS NULL OR CONVERT(SMALLDATETIME, loaddate, 103) <= @LoadDateTo)
	AND (@LoadingPointId IS NULL OR J.LoadingPointId = @LoadingPointId)
	AND (@UnloadingPointId IS NULL OR J.UnLoadingPointId = @UnloadingPointId)
	AND (@RefName IS NULL OR J.RefName like '%'+ @RefName + '%'  ) 
	AND (@IsBilled IS NULL OR (@IsBilled=1 AND IC.ChallanNo IS NOT NULL) OR (@IsBilled=0 AND IC.ChallanNo IS NULL))
	
	) X
	 

	ORDER BY X.LoadDate ASC
   

END


GO
/****** Object:  StoredProcedure [dbo].[Report_LoadingChallanDetail]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[Report_LoadingChallanDetail]
(
 @BranchId INT = NULL,
 @ClientId INT = NULL,
 @JobId INT = NULL,
 @LoadDateFrom DATE = NULL,
 @LoadDateTo DATE = NULL,
 @LoadingPointId INT = NULL,
 @UnloadingPointId INT = NULL,
 @TruckId INT = NULL,
 @OwnerId INT = NULL,
 @BrokerId INT = NULL,
 @AssociationId INT = NULL,
 @ChallanNo VARCHAR(500) = NULL

)
AS
BEGIN
   
   --IF(1 = 1)
   --   THROW 50000, 'Working on under Process ' , 1


   SELECT T.TokenNo, CONVERT(VARCHAR(10), T.ReceivedOn , 103) AS ReceivedOn, T.OtherDeduction, T.Remarks FROM _token T

   WHERE 1=1
   AND T.OtherDeduction > 0
   AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, T.ReceivedOn, 103)>= @LoadDateFrom)
   AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, T.ReceivedOn, 103) <= @LoadDateTo)

   ORDER BY T.ReceivedOn DESC
END   

GO
/****** Object:  StoredProcedure [dbo].[Report_OilChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[Report_OilChallan]
@PumpId INT = NULL,
@JobId INT = NULL,
@LoadDateFrom DATE = NULL,
@LoadDateTo DATE = NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@ChallanNo VARCHAR(500)=NULL,
@BillNo VARCHAR(500)=NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @ChallanNo

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	IF(@PumpId IS NULL AND @JobId IS NULL AND @LoadDateFrom IS NULL AND @LoadDateTo IS NULL AND @LoadingPointId IS NULL AND @UnloadingPointId IS NULL AND @ChallanNo IS NULL)
	BEGIN
	  IF(1=1)
	     THROW 50000, 'PLEASE SELECT FILTER', 1
	END
	ELSE
	BEGIN
	  SELECT * INTO #temp_ChallanList FROM (  
		SELECT Split.a.value('.', 'VARCHAR(100)') AS ChallanNo
			FROM	
				(
					SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanNo, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS ChallanNo  
				) AS A CROSS APPLY ChallanNo.nodes ('/M') AS Split(a)
		
		) XX

		DECLARE @RowCount INT=0
		IF(@RowCount=0)
		BEGIN
		   		SELECT @RowCount=COUNT(Id) from  vw_ReportOilChallans
				WHERE 1=1
				AND (@PumpId IS NULL OR PumpId= @PumpId)
				AND (@JobId IS NULL OR JobId= @JobId)
				AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, LoadDate, 103)>= @LoadDateFrom)
				AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, LoadDate, 103) <= @LoadDateTo)
				AND (@LoadingPointId IS NULL OR LoadingPointId= @LoadingPointId)
				AND (@UnloadingPointId IS NULL OR UnloadingPointId= @UnloadingPointId)
				AND (@ChallanNo IS NULL OR ChallanNo IN (Select ChallanNo from #temp_ChallanList))

			    IF(@RowCount>5000)
		              THROW 50000, '5000 Above Records cannot show Please Apply another filter .', 1

			    ELSE
				BEGIN
				  SELECT Sector, OC.JobNo, IsNull(j.CHallanSerialNo,'')+CAST(IsNull(OC.ChallanNo,0) AS VARCHAR) ChallanKey, VehicleNo, LoadDate, NetWT, OC.Amount,C.Name as ClientName,j.ChallanSerialNo, OC.ChallanNo,
				  L.LedgerName as PumpName, OC.MemoNo,CONVERT(varchar, OD.MemoDate, 103) MemoDate,
   L.[Address] as ClientAddress,L.State as ClientState,L.PinCode as ClientPin ,o.BillNo
				   from  vw_ReportOilChallans OC
				  	LEFT OUTER JOIN Common_Client  C ON C.Id= OC.ClientId
					 Left Outer Join Accounts_Ledgers L ON OC.LedgerId=L.Id  
					 left outer join _OilFillingData OD ON OC.ChallanNo = OD.ChallanNo
					 left outer join _OilFilling O ON O.Id = OD.FillingId
					 left outer join _Job J ON J.Id = OC.JobId
					WHERE 1=1
					AND (@PumpId IS NULL OR OC.PumpId= @PumpId)
					AND (@JobId IS NULL OR JobId= @JobId)
					AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, OC.MemoDate, 103)>= @LoadDateFrom)
					AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, OC.MemoDate, 103) <= @LoadDateTo)
					AND (@LoadingPointId IS NULL OR LoadingPointId= @LoadingPointId)
					AND (@UnloadingPointId IS NULL OR UnloadingPointId= @UnloadingPointId)
					AND (@ChallanNo IS NULL OR OC.ChallanNo IN (Select ChallanNo from #temp_ChallanList))
					AND (@BillNo IS NULL OR o.BillNo= @BillNo)
				END
		END
   END
END


GO
/****** Object:  StoredProcedure [dbo].[Report_PaymentStop]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Report_PaymentStop](
 @OwnerId INT=NULL,
 @TruckId INT=NULL,
 @BrokerId INT=NULL
 
 
)
AS
BEGIN
SELECT VehicleNo, P.PartyName OwnerName, P.ContactNo OwnerNo, B.PartyName BrokenName, B.ContactNo BrokenOwnerNo, F.Remarks Reason
FROM LoadingCHallan L
INNER JOIN Fleet_Vehicle F ON F.Id=L.TruckId
INNER JOIN Common_Parties P ON P.Id=L.OwnerId
INNER JOIN Common_Parties B ON B.Id=L.BrokerId
where IsBlocked=1
AND (@OwnerId IS NULL OR @OwnerId=P.Id)
AND (@TruckId IS NULL OR @TruckId=F.Id)
AND (@BrokerId IS NULL OR @BrokerId=B.Id)


UNION
SELECT VehicleNo, P.PartyName OwnerName, P.ContactNo OwnerNo, B.PartyName BrokenName, B.ContactNo BrokenOwnerNo, F.Remarks Reason
FROM LoadingCHallan L
INNER JOIN Fleet_Vehicle F ON F.Id=L.TruckId
INNER JOIN Common_Parties P ON P.Id=L.OwnerId
INNER JOIN Common_Parties B ON B.Id=L.BrokerId
INNER JOIN RegisteredChallans R ON R.ChallanNo=L.ChallanNo AND Status='L'
where (@OwnerId IS NULL OR @OwnerId=P.Id)
AND (@TruckId IS NULL OR @TruckId=F.Id)
AND (@BrokerId IS NULL OR @BrokerId=B.Id)


END
GO
/****** Object:  StoredProcedure [dbo].[Report_TransitVehicle]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Report_TransitVehicle]
@BranchId INT = NULL,
@ClientId INT = NULL,
@JobId INT = NULL,
@TruckId INT = NULL,
@LoadDateFrom DATE = NULL,
@LoadDateTo DATE = NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@ChallanNo VARCHAR(500)=NULL,
@ExpireDate DATE = NULL

AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @ChallanNo	
DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
       DECLARE @Flage INT = 1
	   IF(@BranchId IS NULL AND @ClientId IS NULL AND @JobId IS NULL AND @TruckId IS NULL AND @LoadDateFrom IS NULL AND
	      @LoadDateTo IS NULL AND @LoadingPointId IS NULL AND @UnloadingPointId IS NULL AND @ChallanNo IS NULL 
	   )
	    SET @Flage=2


	   SELECT BranchName, ClientName , Sector, JobNo, ChallanNo, TruckSource , TruckNo, OwnerName , OwnerNo ,LoadDate, NetWT
	          ,WayBillNo, ValidityDate, Distance
	   FROM  vw_ReportTransitVechile
		WHERE 1= @Flage
		AND (@BranchId IS NULL OR BranchId= @BranchId)
		AND (@ClientId IS NULL OR ClientId= @ClientId)
		AND (@TruckId IS NULL OR TruckId= @TruckId)
		AND (@JobId IS NULL OR JobId= @JobId)
		AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, LoadDate, 103)>= @LoadDateFrom)
		AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, LoadDate, 103) <= @LoadDateTo)
		AND (@LoadingPointId IS NULL OR LoadingPointId= @LoadingPointId)
		AND (@UnloadingPointId IS NULL OR UnloadingPointId= @UnloadingPointId)
		AND (@ChallanNo IS NULL OR ChallanNo = @ChallanNo)
		AND (@ExpireDate IS NULL OR CONVERT(DATE, ValidityDate, 103)<= @ExpireDate)
		ORDER BY CONVERT(smalldatetime, LoadDate, 103) ASC
END

GO
/****** Object:  StoredProcedure [dbo].[Report_TruckReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_TruckReport]
@TruckId INT = NULL,
@OwnerId INT = NULL,
@DriverId INT = NULL,
@AssociationId INT = NULL


AS
BEGIN
	   DECLARE @Flage INT = 1  
	   IF @TruckId IS NULL AND @OwnerId IS NULL AND @DriverId IS NULL AND @AssociationId IS NULL
	     SET @Flage = 2

	   SELECT TruckId , VehicleNo, TotalTyers, OwnerName + ' : ' + OwnerContactNo + ' : ' + OwnerPan AS OwnerName, 
	          DriverName + ':' + DriverContactNo  + ':' + DriverPan AS DriverName,
			  AssociationName
	   FROM  vw_ReportTruckDetails
	   WHERE 1= @Flage 
		AND (@TruckId IS NULL OR TruckId= @TruckId)
		AND (@OwnerId IS NULL OR OwnerId= @OwnerId)
		AND (@DriverId IS NULL OR DriverId= @DriverId)
		AND (@AssociationId IS NULL OR AssociationId= @AssociationId)
		
END



GO
/****** Object:  StoredProcedure [dbo].[sp_AdvanceConsolidationReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_AdvanceConsolidationReport]
(@DateFrom DATE = NULL,
 @DateTo DATE = NULL,
 @BranchId INT = NULL)
AS
BEGIN

IF @DateFrom IS NULL AND @DateTo IS NULL
SELECT @DateFrom = StartDate, @DateTo = EndDate From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;

SELECT XX.*, (XX.CashAdvance + OtherAdvance) As TotalAdvance FROM (
	Select 
		 B.Id as BranchId
		,B.Name as BranchName
		,A.LoadDate
		,Sum(CASE WHEN AD.TruckSource = 'MARKET' THEN ISNULL(AD.Trucks,0) ELSE 0 END) AS BrokerTruck
		,Sum(CASE WHEN AD.TruckSource = 'OWN' THEN ISNULL(AD.Trucks,0) ELSE 0 END) AS OwnTruck
		,Sum(CASE WHEN AD.TruckSource = 'ASSOCIATION' THEN ISNULL(AD.Trucks,0) ELSE 0 END) AS AssociationTruck
		,IsNull(Sum(AD.Quantity),0) As Quantity
		,ISNULL(Sum(ISNULL(AD.PerTruckAdvance,0) * ISNULL(AD.Trucks,0)),0) As CashAdvance
		,ISNULL(Sum(ISNULL(AD.OtherAmount,0)),0) As OtherAdvance
	from _Advance A
	Left Join _AdvanceDetails AD ON AD.AdvanceId = A.Id
	Left Join JobDetails J ON J.Id = AD.JobId
	Left Join Common_Branch B ON B.Id = J.BranchId
	WHERE B.Id IS NOT NULL AND (@BranchId IS NULL OR @BranchId = B.Id) AND LoadDate >= @DateFrom AND LoadDate<= @DateTo
	Group BY B.Id , B.Name, A.LoadDate) XX
	Order BY BranchId, BranchName, LoadDate 
END
GO
/****** Object:  StoredProcedure [dbo].[sp_association]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_association](
@Type int = 0, 
@Id int =0,
@Association varchar(100) = '', 
@Ttype varchar (50) = '', 
@Source varchar(50)='',
@Destination varchar(50) = '', 
@Fromdate DateTime = '', 
@Todate  DateTime = '', 
@Ratepkm DECIMAL(18,2)=0.00, 
@Ratepmt DECIMAL(18,2)=0.00, 
@Fixedrate DECIMAL(18,2)=0.00,
@vehicletype varchar(50)='',
@Deleted bit  = '',
@Search varchar(50)='', 
@Createdby int =0,
@AssociationDetailsId int=0,
@Createdon smalldatetime=''

) 
AS 



DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Search + @Association + @Ttype + @Source + @Destination + @vehicletype

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type = 1)
BEGIN
      SELECT Id id, PartyName  association from Common_Parties
	    WHERE PartyType=5 AND PartyName LIKE '%'+ @Search+'%' ORDER BY Association ASC;
END
ELSE IF(@Type = 2)
BEGIN
	    SELECT  AssociationDetails.source+' - '+Destination Sector ,AssociationDetails.source,AssociationDetails.destination,(Convert(VARCHAR(10),AssociationDetails.fromdate,103)+' - '+ Convert(VARCHAR(10),AssociationDetails.todate,103)) Date,AssociationDetails.ratepkm,AssociationDetails.todate todate,AssociationDetails.fromdate fromdate,AssociationDetails.vehicletype type,AssociationDetails.ratepmt,AssociationDetails.fixedrate,Association.Id id,Association.association association from AssociationDetails
	   left outer join  Association on AssociationDetails.AssociationId=Association.Id 
	   WHERE  AssociationId=@Id ORDER BY fromdate,todate,type ASC; 
     END
ELSE IF(@Type = 3)
BEGIN
	--IF EXISTS(SELECT 1 FROM AssociationDetails WHERE Id=@AssociationDetailsId)
	--BEGIN
	--	UPDATE AssociationDetails SET 
	--			source=@Source,
	--			vehicletype=@vehicletype,
	--			Destination=@Destination,
	--			FromDate=@Fromdate,
	--			ToDate=@Todate,
	--			RatePKM=@Ratepkm,
	--			RatePMT=@Ratepmt,
	--			FixedRate=@Fixedrate,
	--			CreatedBy=@Createdby,
	--			CreatedOn = GETDATE()
	--		WHERE Id=@AssociationDetailsId
	--		SELECT @@IdENTITY
	--	SELECT 'S'
	--END
	--ELSE
	BEGIN
		SELECT 'E'
	END
END
ELSE IF(@Type = 4)
BEGIN
	DECLARE @AssoId INT=0;
	SELECT @AssoId = Id FROM Association WHERE Association=@Association
	IF (@AssoId=0)
	BEGIN
		--INSERT INTO Association(Association) VALUES(@Association)
		--SELECT @AssoId = @@IDENTITY
		--SELECT @@IdENTITY
		--INSERT INTO [whdoo_demo].[AssociationDetails](AssociationId, source,vehicletype,Destination,FromDate,ToDate,RatePKM,RatePMT,FixedRate,CreatedBy,CreatedOn)
		--		VALUES(@AssoId, @Source,@vehicletype,@Destination,Convert(datetime, @Fromdate, 103),Convert(datetime, @Todate, 103),@Ratepkm,@Ratepmt,@Fixedrate, @Createdby,GETDATE())
		--		SELECT @@IdENTITY
		SELECT 'E'
   END
	ELSE
	   BEGIN
	   DECLARE @AsoId INT=0;
	   SELECT @AsoId = Id FROM Association WHERE Association=@Association
		--INSERT INTO [whdoo_demo].[AssociationDetails](AssociationId, source,vehicletype,Destination,FromDate,ToDate,RatePKM,RatePMT,FixedRate,CreatedBy,CreatedOn)
		--VALUES(@AsoId, @Source,@vehicletype,@Destination,Convert(datetime, @Fromdate, 103),Convert(datetime, @Todate, 103),@Ratepkm,@Ratepmt,@Fixedrate, @Createdby,GETDATE())
		--SELECT @@IdENTITY
			SELECT 'E'
	END
END
ELSE IF(@Type = 5)
BEGIN
	IF EXISTS(SELECT 1 FROM Association WHERE Id=@Id)
	BEGIN
		--UPDATE Association SET 
		--		Association=@Association,
		--		CreatedBy=@Createdby,
		--		CreatedOn = GETDATE()
		--	WHERE Id=@AssociationDetailsId
		--	SELECT @@IdENTITY
		SELECT 'E'
	END
	ELSE
	BEGIN
		SELECT 'E'
	END
END
ELSE IF(@Type = 6)
     BEGIN
		Select * from associationdetails where Id=@Id  
END


ELSE IF(@Type =8)
BEGIN
	    UPDATE Association 
		SET Association=@Association
		WHERE Id=@Id  
END

ELSE IF(@Type = 7)
BEGIN
	   SELECT  AssociationDetails.source+' - '+Destination Sector ,AssociationDetails.source,AssociationDetails.destination,(Convert(VARCHAR(10),AssociationDetails.fromdate,103)+' - '+ Convert(VARCHAR(10),AssociationDetails.todate,103)) Date,AssociationDetails.ratepkm,AssociationDetails.todate todate,AssociationDetails.fromdate fromdate,AssociationDetails.vehicletype type,AssociationDetails.ratepmt,AssociationDetails.fixedrate,Association.Id id,Association.association association from AssociationDetails
	   left outer join  Association on AssociationDetails.AssociationId=Association.Id 
	   WHERE  AssociationDetails.AssociationId=@Id 
END
ELSE IF(@Type = 9)
BEGIN
	DECLARE @AsId INT=0;
	SELECT @AsId = Id FROM Association WHERE Association=@Association
	SELECT 'E'
		--INSERT INTO [whdoo_demo].[AssociationDetails](AssociationId, source,vehicletype,Destination,FromDate,ToDate,RatePKM,RatePMT,FixedRate,CreatedBy,CreatedOn)
		--VALUES(@AsId, @Source,@vehicletype,@Destination,Convert(datetime, @Fromdate, 103),Convert(datetime, @Todate, 103),@Ratepkm,@Ratepmt,@Fixedrate, @Createdby,GETDATE())
END
ELSE IF(@Type = 10)
BEGIN
	SELECT * FROM Association WHERE Association = @Association
END

	  
	

	 
GO
/****** Object:  StoredProcedure [dbo].[sp_branch]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_branch](
@Type int = 0, 
@Id int =0,
@Name varchar(50) = '', 
@Code varchar(50) = '', 
@Address varchar(50) = '', 
@Email varchar(50) = '', 
@Contact varchar(50) = '', 
@StateId varchar(50) = '', 
@Deleted bit = '',
@Search varchar(50)='', 
@Createdon smalldatetime='',
@Createdby int =0,
@BranchId int='',
@BranchCode varchar(50)=''

) 
AS 


DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Name + @Code + @Address + @Email + @Email + @Contact + @StateId + @Search + @BranchCode

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type = 1)
BEGIN
	SELECT Branch.Id id, Branch.Name name,Branch.Code code,Branch.Address,Branch.Email email,Branch.Deleted,Branch.Contact contact,State.StateName State,Branch.BranchCode branchcode from Branch
	 left outer join State ON Branch.StateId=State.Id
	 WHERE Branch.Name LIKE '%'+ @Search+'%'
END
ELSE IF(@Type = 2)
BEGIN
SELECT Branch.Id id, Branch.Name name,Branch.Code code,Branch.Address,Branch.Email email,Branch.Deleted,Branch.Contact contact,Branch.BranchCode branchcode,State.StateName State from Branch
	 left outer join State ON Branch.StateId=State.Id
	 
	  WHERE Branch.Id=@Id
END
 ELSE IF(@Type = 3)
BEGIN
	 RAISERROR('Use new module to create branch.', 1, 16)
	--DECLARE @LedgerId INT = 0
	--DECLARE @IsExist INT = NULL;
	--DECLARE @LedgerName VARCHAR(200) = NULL;
	--IF (@Id IS NOT NULL AND @Id > 0 )
	--	SELECT @IsExist = 1, @LedgerId = LedgerId FROM Branch WHERE Id=@Id
	--ELSE 
	--	SELECT @IsExist = 1, @LedgerId = LedgerId FROM Branch WHERE Code=@Code
	--SET @LedgerName = 'CASH ' + @Name + ' (' + @BranchCode + ')'
	--EXEC @LedgerId= [SP_CreateLedger] 
	--				 @LedgerId
	--				,@LedgerName	
	--				,7 -- Branch				
	--				,NULL				
	--				,@Contact					
	--				,@Email						
	--				,@Address					
	--				,NULL						
	--				,NULL					
	--				,NULL					
					
 --    IF @IsExist IS NULL OR @IsExist = 0 
	--	BEGIN
	--		INSERT INTO  Branch (Name,Code,Address,Email,Contact,StateId,Deleted,CreatedBy,CreateOn,BranchCode, LedgerId)
	--			 VALUES(@Name,@Code,@Address,@Email,@Contact,@StateId,@Deleted,@Createdby,GETDATE(),@BranchCode, @LedgerId)
	--			 SELECT @@IDENTITY
	--	 END	
	--  ELSE IF(@Id<>0)
	--	BEGIN
	--		 UPDATE branch
	--		   SET Name=@Name,
	--			   Code=@Code,
	--			   Address=@Address,
	--			   Email=@Email,
	--			   Contact=@Contact,
	--			   StateId=@StateId,
	--			   CreatedBy=@Createdby,
	--			   BranchCode=@BranchCode,
	--			   LedgerId=@LedgerId 
	--			   where Branch.Id=@Id
	--			    SELECT @Id
	--	END
	--	ELSE
	--	SELECT Id FROM Branch WHERE Code=@Code
END

ELSE IF(@Type = 5)
BEGIN
    RAISERROR('Use new module to create branch.', 1, 16)
	-- DELETE from Branch where Branch.Id=@Id 
END

ELSE IF(@Type = 6)
BEGIN
	SELECT Id,Name,BranchCode From  Branch
END
GO
/****** Object:  StoredProcedure [dbo].[sp_BranchAdvanceBalance]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_BranchAdvanceBalance](
@BalanceAtDate DATE,
@BranchId int = NULL
) 
AS 
BEGIN
	DECLARE @FYStartDate DATE
	DECLARE @FinancialYearId INT = NULL
	IF @FinancialYearId IS NULL
		SELECT @FinancialYearId = Id From Accounts_FinancialYear Where @BalanceAtDate >= StartDate AND @BalanceAtDate <= EndDate
	SELECT @FYStartDate = StartDate FROM Accounts_FinancialYear WHERE Id = @FinancialYearId
	SELECT BranchId, BranchName, FYOpeningBalance, AdvanceIssued, Disbrushed, (FYOpeningBalance + AdvanceIssued - Disbrushed) As Balance
	FROM (
		Select 
			Id As BranchId, 
			Name As BranchName, 
			(dbo.[FN_Accounts_GetLedgerOpeningBalance](Common_Branch.LedgerId, 0, @FinancialYearId)) As FYOpeningBalance,
			(SELECT ISNULL(Sum(ISNULL(AD.PerTruckAdvance,0) * ISNULL(AD.Trucks,0)),0)
				from _Advance A
				Left Join _AdvanceDetails AD ON AD.AdvanceId = A.Id
				Left Join JobDetails J On J.Id = AD.JobId
				Left Join Common_Branch B ON B.Id = A.BranchId
				WHERE B.Id = Common_Branch.Id And LoadDate < @BalanceAtDate And LoadDate >= @FYStartDate) As AdvanceIssued,
			(SELECT IsNull(SUM(IsNull(Advance,0)),0) 
				From LoadingChallan L1
				Left Join JobDetails J1 On J1.Id = L1.JobId
				Left Join Common_Branch B1 ON B1.Id = J1.BranchId
				Where B1.Id = Common_Branch.Id AND L1.LoadDate < @BalanceAtDate And LoadDate >= @FYStartDate) As Disbrushed
		From Common_Branch ) XX
	WHERE  (@BranchId IS NULL OR XX.BranchId = @BranchId)
	Order BY BranchName
END
-- Exec [sp_BranchAdvanceBalance] @BalanceAtDate = '2016-06-30'
GO
/****** Object:  StoredProcedure [dbo].[sp_BulkIdUpdate]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create proc [dbo].[sp_BulkIdUpdate]
@BulkId int,
@ChallanList varchar(max)
AS BEGIN
SELECT value   into #temp FROM     STRING_SPLIT(@ChallanList, ',');
update LoadingChallan set BulkLoadId= @BulkId where ChallanNo in(select value from #temp )

drop table #temp
END


GO
/****** Object:  StoredProcedure [dbo].[sp_BulkLoadingChallanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--exec [sp_GetLoadingInstantDetails] @ChallanNo=N'14758'

CREATE Procedure [dbo].[sp_BulkLoadingChallanDetails](
 @InstanceDetailId INT				 = NULL
 ,@JobId             INT				 = 0
,@TruckNo VARCHAR(50)				 = NULL
,@TruckSource VARCHAR(50)			 = NULL
,@ChallanNo INT						 = NULL
,@TPNo VARCHAR(50)					 = NULL
,@LRNo VARCHAR(50)					 = NULL
,@GrossWT DECIMAL(18,3)				 = NULL
,@TareWT DECIMAL(18,3)				 = NULL
,@LoadType VARCHAR(50)='' 
,@NetWT DECIMAL(18,3)				 = NULL
,@CashAdvance DECIMAL(18,3)			 = NULL
,@HSD DECIMAL(18,3)	                 =Null
,@Welfare	DECIMAL(18,2)			 = NULL
,@PumpName	 VARCHAR(50)='' 			
,@AssociationId INT					 = NULL
,@UnloadDate DateTime				 = NULL
,@LoadDate      DateTime			 = NULL
,@UnloadWt Decimal(18,3)			 = NULL
,@UnloadRemarks Varchar(1000)		 = NULL,
@STONo VARCHAR(50)='',
@STOId INT=0,
@DelNo VARCHAR(50)='',
@TP VARCHAR(50)='',
@CostPerMT DECIMAL(18,2)=0.00,
@Freight DECIMAL(18,2)=0.00, 
@Fixed bit=0, 
@Transhipment INT=0,
@GuaranteeWT DECIMAL(18,3)=0.000, 
@LoadDMT DECIMAL(18,3)=0.000, 
@Moisture DECIMAL(18,3)=0.000,
@MoistureUnit VARCHAR(50)='',
@TotalBags INT=0,
@MaterialValue DECIMAL(18,2)=0.00, 
--@PumpId  INT=NULL,
@HSDRate DECIMAL(18,2)=0.00 ,
@HSDCost DECIMAL(18,2)=0.00,
@Seals VARCHAR(50)=NULL,
@AssociationCharge DECIMAL(18,2)=0.00,
@Labor INT=0,
@Detention DECIMAL(18,2)=0.00, 
@Collection DECIMAL(18,2)=0.00,
@Other DECIMAL(18,2)=0.00,
@Remarks VARCHAR(2000)='',
@LoadedBy INT=0,
@Search VARCHAR(50)='',
@truckOwnerName VARCHAR(2000)='',
@truckDriverName VARCHAR(2000)='',
@truckBrokerName VARCHAR(2000)='',
@truckAssociationName VARCHAR(2000)='',
@GateEntryNo VARCHAR(50)='',
@SapNo VARCHAR(50)=null,
@TPBookNo VARCHAR(50)='',
@WayBillNo VARCHAR(50)=null,
@LRNumber VARCHAR(50)='',
@JobNo VARCHAR(100)='',
@PermitNo VARCHAR(100)='',
@LoadTime INT=0
)
As
DECLARE @data VARCHAR(8000)=''
SET @data =@TruckNo+@TPNo+@LRNo+@UnloadRemarks
DECLARE @flag bit=0
SELECT @flag=dbo.FN_EscapeSQLInjection(@data)
IF @flag=0
 THROW 50000, 'SQL Server encountered exception', 1 
Begin
	--DECLARE @JobId INT=0
	--DECLARE @LoadDate SMALLDATETIME=null
	DECLARE @FreightRate DECIMAL(18,2)=0.00 
	DECLARE @TotalAdvance DECIMAL(18,2)=@CashAdvance+@HSD
	--DECLARE @TotalFreight DECIMAL(18,2)=@FreightRate*@NetWT
	DECLARE @TruckId INT
	DECLARE @PumpId INT
	DECLARE @DriverId INT
	DECLARE @LoadingId INT
	DECLARE @JobStartDate DATETIME  = NULL
	DECLARE @JobEndDate DATETIME  = NULL
	DECLARE @JobStatus INT=NULL
	DECLARE @TruckOwnerId INT = NULL
	DECLARE @Tyre INT = NULL
	DECLARE @JobLedgerId INT=NULL
	DECLARE @CliamQtyType INT = NULL
	DECLARE @ErrorMsg VARCHAR(5000) = NULL
	DECLARE @IsDuplcate INT = 0
	Declare @PaymentLedger INT = NULL
	DECLARE @ClientRate DECIMAL(18,2)=0.00
	DECLARE @GPSAmount DECIMAL(18,2)=0.00
	DECLARE @OnlineReg DECIMAL(18,2)=0.00

	--IF @ErrorMsg IS NULL AND @ChallanNo IS NULL
		--SET @ErrorMsg = 'Challan No is mandetory.'
	IF @ErrorMsg IS NULL AND LEN(ISNULL(@TruckSource,'')) = 0 
	SET @ErrorMsg = 'Truck Source is mandetory.'
	IF  @ErrorMsg IS NULL AND LEN(ISNULL(@TruckNo,'')) = 0
		SET @ErrorMsg = 'TruckNo is mandetory.'
	IF  @ErrorMsg IS NULL AND (@NetWT IS NULL OR @NetWT = 0)
		SET @ErrorMsg =  'NetWT is mandetory.'
	--IF  @ErrorMsg IS NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
	--0SET @ErrorMsg = 'ChallanNo is mandetory.'

	 SELECT @PumpId=Id FROM PumpName WHERE PumpName=@PumpName
	 IF  @ErrorMsg IS NULL AND @HSD > 0.0 AND @PumpId IS NULL
		SET @ErrorMsg = ' Pump Name Not Match from the list.'


	--IF  @ErrorMsg IS NULL AND @TruckId IS NULL AND IsNull(@TareWT, 0.0) = 0.0
	--	SET @ErrorMsg =  'Truck No does not exist. Provide TareWt or create truck manually.'
	--IF  @ErrorMsg IS NULL AND @GrossWT IS NOT NULL AND @TareWT IS NOT NULL AND (@GrossWT - @TareWT) <> @NetWT
	--	SET @ErrorMsg =  'Subtraction of Gross Wt and Tare Wt is not equal to NetWt.'
	--IF  @ErrorMsg IS NULL AND @TruckSource = 'ASSOCIATION'  AND @AssociationId IS NULL 
		--SET @ErrorMsg =  'Select Association Name for Association Truck.'
	
	--IF  @ErrorMsg IS NULL 
	--	Select @ErrorMsg = 'Duplicate TP No. ' + Convert(Varchar(50), @ChallanNo) + ',  JobNo - ' + Concat(J.JobNo, ', ', Convert(Varchar(50), LoadDate, 103)) 
	--	from LoadingChallan L
	--	Inner Join vw_jobdetails J On J.JobId = L.JobId
	--	WHERE (@LoadingId IS NULL OR L.Id <> @LoadingId) And TP = @TPNo
		
		SELECT @JobId=JobId, @JobStatus=JobStatus, @JobLedgerId = LedgerId, 
		@JobStartDate=Job_StartDate, @JobEndDate=Job_EndDate, @CliamQtyType = ClaimQtyType 
		FROM vw_jobdetails WHERE PermitNo=@PermitNo AND PermitNo<>''

		--IF ISNULL(@JobStatus,1)<>4
		--THROW 50000, 'Selected job is not approved. Failed to create loading challan.', 1
		
		IF  @ErrorMsg IS NULL AND  @LoadDate IS NULL
		SET @ErrorMsg = 'Load date is required.'

		IF  @ErrorMsg IS NULL AND @LoadDate IS NOT NULL AND (@LoadDate < @JobStartDate OR @LoadDate > @JobEndDate)
		SET @ErrorMsg = 'Load date must be with in job period.' 

		IF  @ErrorMsg IS NULL 
		Select @ErrorMsg = 'Duplicate Challan No. ' + Convert(Varchar(50), @ChallanNo) + ',  JobNo - ' + Concat(J.JobNo, ', ', Convert(Varchar(50), LoadDate, 103)) 
		from LoadingChallan L
		Inner Join vw_jobdetails J On J.JobId = L.JobId
		WHERE  (@LoadingId IS NULL OR L.Id <> @LoadingId) And ChallanNo = @ChallanNo
	
		IF  @ErrorMsg IS NOT NULL
		BEGIN
		--if (@ChallanNo IS NOT NULL)
		--BEGIN
		--	SET @ErrorMsg = 'Challan No ' + Convert(Varchar(50),@ChallanNo ) + ': ' + @ErrorMsg;
		--END
		IF 1=1
			THROW 50000, @ErrorMsg, 1
		END

		IF  @TruckSource = 'MARKET' 
		SET @AssociationId = NULL 
		IF @HSD = 0.0
		SET @PumpId = NULL
	
	SELECT @TruckId = Id, @TruckOwnerId = IsNull(V.[Owner],1) ,@GPSAmount = ISnull(V.GPSAmount,0) ,@OnlineReg = IsNull(V.OnlineRegAmount,0) From Fleet_Vehicle V Where VehicleNo = @TruckNo
	IF @TruckId IS NULL
	BEGIN
		Set @TruckOwnerId = 6931
		--SELECT @Tyre = Max(Id) From Fleet_TyreNos Where @TareWT >= MinTareWt And @TareWT <= MaxTareWt
		--IF @Tyre IS NULL
		--	THROW 50000, 'Could not find Total Tyres in truck. Update TareWt in Tyre Master of Feet Module.', 1
		Insert Into Fleet_Vehicle (VehicleNo, TotalTyers, [Owner], InsertUserId, InsertDate, Remarks ,MaxLoadLimit  ,IsApprove) Values (@TruckNo, 12, @TruckOwnerId, 3105, GETDATE(), 'Auto Created by system in bulk entry.' ,50 ,1)
		SELECT @TruckId = Id, @TruckOwnerId = V.[Owner] From Fleet_Vehicle V Where VehicleNo = @TruckNo
	END
	Select @JobId = J.Id,  @LoadDate = I.LoadDate, @PaymentLedger = I.PaymentLedger
	From _InstantLoading I
	Left Join   _InstantLoadingDetails ID    On I.Id = Id.InstantId
	Left Join _Job J On J.Id = I.JobId
	Where ID.Id = @InstanceDetailId

	--select @JobId= I.JobId,  @LoadDate=I.LoadDate, @PaymentLedger=I.PaymentLedger from _InstantLoading I Left outer join _InstantLoadingDetails ID on I.Id = ID.InstantId
	--where ID.InstantId = @InstanceDetailId


	IF @FreightRate = 0.0 AND @TruckId IS NOT NULL
		Select @FreightRate = IsNull(FreightRate, 0.0) From _JobFrieghtSpecialRules JS
		INNER JOIN _JobFreightSpecialTruck  ST On ST.JobSpecialFreightId = JS.Id
		Where JS.JobId = @JobId And JS.LoadDate = @LoadDate AND ST.TruckId = @TruckId
	IF @FreightRate = 0.0 AND @TruckOwnerId IS NOT NULL
		Select @FreightRate = IsNull(FreightRate, 0.0) From _JobFrieghtSpecialRules JS
		INNER JOIN _JobFreightSpecialParty  SP On SP.JobSpecialFreightId = JS.Id
		Where JS.JobId = @JobId And JS.LoadDate = @LoadDate AND SP.PartyId = @TruckOwnerId
	IF @FreightRate = 0.0 AND @TruckSource = 'MARKET'
		--Select @FreightRate = FreightRate From _JobFreightMktRules Where JobId = @JobId And @LoadDate >= DateFrom And @LoadDate <= IsNull(DateTo,'2555-01-01')  AND @LoadTime >= RateTime 
	Select @FreightRate =  DBO.FN_GetJobFreightRate(@JobId,@LoadDate, @TruckSource, @TruckId,@LoadTime)
	IF @FreightRate = 0.0 AND @TruckSource = 'ASSOCIATION'
		--Select @FreightRate = FreightRate From _JobFrieghtAssRules Where JobId = @JobId And @LoadDate >= DateFrom And @LoadDate <= IsNull(DateTo,'2555-01-01') AND @LoadTime >= RateTime
		Select @FreightRate =  DBO.FN_GetJobFreightRate(@JobId,@LoadDate, @TruckSource, @TruckId,@LoadTime)
		

		Declare @ClientId int = 0 
	Select @ClientId = ClientId from _WorkOrder W
		Inner Join _WorkOrderItems I On I.OrderId = W.Id
		Inner Join _Job J On J.WOSectorId = I.Id
		ANd J.Id= @JobId

	select @ClientRate=DBO.[FN_GetClientRateForChallan](@JobId, @TruckId, @LoadDate ,@LoadTime)

	DECLARE @Permit int = 0
	SELECT @Permit = TPD.Id from _TPDetails TPD where TPD.TPNo = @PermitNo

	Select @JobId as JobId, @LoadDate as LoadDate, @PaymentLedger as PaymentLedger, @TruckId as TruckId, @FreightRate as FreightRate, 
	@TruckOwnerId as TruckOwnerId, @ClientRate as InvoiceClientRate, @ClientId as ClientId, @Permit as STOId 
	
	--Declare @NoTp varchar (50) = ''
	--select @NoTp=IsNull(TpNo, '') from offers where TpNo = @TPNo
	--select @GPSAmount = ISNULL(GPSAmount,0.0) ,@OnlineReg = ISNULL(OnlineRegAmount,0.0)  from LoadingChallan where ChallanNo = @ChallanNo 

	--IF @TPNo <>@NoTp
	--Begin
	 --Insert Into Offers (TpNo) Values (@TPNo) 
--	End
	--Declare @TPDId int = 0
	--select  @TPDId = Id from Offers where TpNo = @TPNo

	DECLARE @TotalFreight DECIMAL(18,2)=@FreightRate*@NetWT
	--IF select @ChallanNo = ChallanNo from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
	INSERT INTO LoadingChallan
			   (ChallanNo
			   ,JobId
			   ,STOId
			   ,DELNo
			   ,TP
			   ,CostPerMT
			   ,LoadDate
			   ,Freight
			   ,Fixed
			   ,Transhipment
			   ,LoadType
			   ,GrossWt
			   ,TareWT
			   ,NetWT
			   ,GuaranteeWT
			   ,LoadDMT
			   ,Moisture
			   ,MoistureUnit
			   ,TotalBags
			   ,MaterialValue
			   ,TruckId
			   ,HSD
			   ,PumpId
			   ,HSDRate
			   ,HSDCost
			   ,Seals
			   ,AssociationCharge
			   ,Labor
			   ,Detention
			   ,Collection
			   ,Welfare
			   ,Other
			   ,Advance
			   ,TotalAdvance
			   ,Remarks
			   ,LoadedBy
			   ,InsertUserId, InsertDate
			   ,LoadedOn
			   ,TotalFreight
			   ,DriverId
			   ,OwnerId
			   ,BrokerId
			   ,AssociationId
			   ,GateEntryNo
			   ,SAPNo
			   ,TPBookNo
			   ,WayBillNo
			   ,LRNumber
			   ,TruckSource
			   ,InvoiceClientRate
			   ,ClientId
			   ,GPSAmount
			   ,OnlineRegAmount
			   ,RateTime
			   ,BulkLoadId
			   )
		 VALUES
			   (@ChallanNo
			   ,@JobId
			   ,@Permit
			   ,@DELNo
			   ,@TPNo
			   ,@CostPerMT
			   ,@LoadDate
			   ,@FreightRate
			   ,@Fixed
			   ,@Transhipment
			   ,@LoadType
			   ,@GrossWt
			   ,@TareWT
			   ,@NetWT
			   ,@GuaranteeWT
			   ,@LoadDMT
			   ,@Moisture
			   ,@MoistureUnit
			   ,@TotalBags
			   ,@MaterialValue
			   ,@TruckId
			   ,@HSD
			   ,@PumpId
			   ,@HSDRate
			   ,@HSD
			   ,@Seals
			   ,@AssociationCharge
			   ,@Labor
			   ,@Detention
			   ,@Collection
			   ,@Welfare
			   ,@Other
			   ,@CashAdvance
			   ,@TotalAdvance
			   ,'BulkLoading'
			   ,3346
			   ,3346,GETDATE()
			   ,GETDATE()
			   ,@TotalFreight
			   ,Null
			   ,@TruckOwnerId
			   ,6931
			   ,Null
			   ,@GateEntryNo
			   ,@SapNo
			   ,@TPBookNo
			   ,@WayBillNo
			   ,@LRNo
			   ,@TruckSource
			   ,@ClientRate
			   ,@ClientId
			   ,@GPSAmount
			   ,@OnlineReg
			   ,@LoadTime
			   ,@InstanceDetailId
			   )
			INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
			SELECT @LoadingId=Id From LoadingChallan where ChallanNo=@ChallanNo
			
			IF @CashAdvance>0  --CashADVANCE
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @CashAdvance, 1, 0, NULL, 0, @LoadDate,  3346, 1)

			IF @HSD>0    --HSDCos Advance
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @HSD, 2, @PumpId,0, NULL, 0, @LoadDate,  3346, 1)
               

            IF @Welfare>0
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
      VALUES(@LoadingId, @Welfare, 4, 0, NULL, 0, @LoadDate,  3346, 1)

	  IF @GPSAmount>0    --HSDCos Advance
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @GPSAmount, 6, @PumpId,0, NULL, 0, @LoadDate,  3346, 1)

			update Fleet_Vehicle set GPSAmount = 0 where Id = @TruckId
           
		    IF @OnlineReg>0    --HSDCos Advance
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @OnlineReg, 7, @PumpId,0, NULL, 0, @LoadDate,  3346, 1)

			update Fleet_Vehicle set OnlineRegAmount = 0 where Id = @TruckId
     

			Exec sp_loadingvouchernew @LoadingId=@LoadingId
			SELECT @@IDENTITY

		


				--Declare @TPD varchar(20) = ''
	  		
END




GO
/****** Object:  StoredProcedure [dbo].[sp_CementProfitibilityReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_CementProfitibilityReport]
@JobId INT=NULL,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartDate AS varchar) + CAST(@EndDate AS varchar) 

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate varchar(10)=''
	DECLARE @FYEndDate varchar(10)=''
	SEleCT @FYStartDate=convert(varchar(10),Startdate,102), @FYEndDate=convert(varchar(10),EndDate,102) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartDate<>''
	BEGIN
		SET @FYStartDate=@StartDate
	END
	IF @EndDate<>''
	BEGIN
		SET @FYEndDate=@EndDate
	END

	SELECT L.* INTO #LoadAdvance FROM LoadingAdvance L
		INNER JOIN LoadingChallan C ON C.Id=L.LoadingId
		WHERE	CONVERT(DATE,LoadDate,102) BetWEEN CONVERT(DATE,@FYStartDate,102) AND CONVERT(DATE,@FYEndDate,102)
	;WITH LoadingAdv AS (
		SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM #LoadAdvance L
			LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
		UNION 
		SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM #LoadAdvance L GROUP BY L.LoadingId
	) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv1
		FROM LoadingAdv 
			PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

		SELECT DISTINCT A.LoadingId, B.PumpName PumpNameAdvance INTO #adv3 From #LoadAdvance A 
			LEFT OUTER JOIN PumpName B ON B.Id=A.PumpId
		WHERE PumpId IS NOT NULL 

		SELECT loadingid, PumpNameAdvance = STUFF((SELECT ', ' + PumpNameAdvance  FROM #adv3 b   WHERE b.LoadingId = a.LoadingId  FOR XML PATH('')), 1, 2, '')
			 INTO #adv2 FROM #adv3 a GROUP BY LoadingId

		SELECT TOP 5000 u.LoadDate,u.NetWt, u.UnloadedDate, u.UnloadedNetWt	,U.JobNo
		    ,CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END as LowestWt , Freight as FreightRate			  
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END),1),0) GrossPayable
			, (NetPayable+Penalty) NetPayable, u.ChallanNo,u.DestinationId
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-TotalAdvance),0) LoadingBalance
			,CASE WHEN  IsNull(IC.BillingRate,u.ClientRate) = 0.00 THEN Freight ELSE IsNull(IC.BillingRate,u.ClientRate) END as ClientRate
			,Round(CONVERT(DECIMAL(18,2),VI.TotalInvoiceAmount),0) as BillAmount
			,Cash+Cheque+BulkTransfer+FuelCost as LoadingAdvance 
			, CASE WHEN IC.Id IS NULL THEN '#03fc90' ELSE '#FFFFFF' END IsInvoiced
			,u.TruckNumber
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN vw_InvoiceChallanDetails VI ON VI.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=u.ChallanNO
		--LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN #adv1 A ON A.LoadingId=u.LoadingId
		LEFT OUTER JOIN #adv2 B ON B.LoadingId=u.LoadingId
		WHERE (@JobId IS NULL OR U.JobId=@JobId) AND
		p.PaidDate IS NOT NULL AND
		 IC.Id IS NOT NULL AND
		 --u.LoadingId IN (SELECT LoadingId from Payment) AND
		(@StartDate IS NULL OR CONVERT(date, u.loaddate, 103)>=CONVERT(date, @StartDate,102)) AND
		(@EndDate IS NULL  OR CONVERT(date, u.loaddate, 103)<=CONVERT(date, @EndDate,102))
		 ORDER BY CONVERT(SMALLDATETIME,u.loaddate,103) asc 
END


GO
/****** Object:  StoredProcedure [dbo].[sp_challanbook]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_challanbook](
	@Type int = 0, 
	@BranchId INT=0,
	@BranchName varchar(50)='',
	@ChallanCase  varchar(10)='',
	@Id int =0,
	@ChallanStart INT=0, 
	@ChallanEnd INT=0,
	@StartDate VARCHAR(10) = NULL,
	@EndDate VARCHAR(10) = NULL,
	@BookCount INT=1,
	@ChallaNo INT=0,
	@ChallanType varchar(10)='',
	@Deleted bit = 0,
	@Search varchar(50)='', 
	@CreatedBy INT=0,
	@CreatedDate VARCHAR(50)=NULL,
	@Supervisor VARCHAR(100)=NULL
) 
AS 


DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @BranchName + @ChallanCase + @StartDate + @EndDate + @ChallanType + @Search + @CreatedDate + @Supervisor

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	DECLARE @Counter INT=1;
	DECLARE @SupervisorId INT=NULL;
	DECLARE @pCreatedDate DATETIME=GETDATE();
	IF(@ChallanStart > @ChallanEnd)
	BEGIN
		SET @ChallanStart = @ChallanStart+@ChallanEnd
		SET @ChallanEnd = @ChallanStart-@ChallanEnd
		SET @ChallanStart = @ChallanStart-@ChallanEnd
	END
	IF(@pCreatedDate IS NULL)
		SET @pCreatedDate=GETDATE()
	IF(@Supervisor<>'' AND @Supervisor IS NOT NULL)
		SELECT @SupervisorID=Id FROM Users WHERE Username=@Supervisor
		
	IF(@Type = 1)
		BEGIN
			IF EXISTS (SELECT 1 FROM ChallanBook WHERE ChallanStart<=@Search AND ChallanEnd>=@Search)
			BEGIN
				SELECT ChallanBook.Id id,ChallanBook.ChallanStart,ChallanBook.ChallanEnd,ChallanBook.ChallanType,ChallanBook.ChallanCase,Branch.Name BranchName FROM ChallanBook
					LEFT OUTER JOIN  Branch ON  ChallanBook.BranchId=Branch.Id
					WHERE ChallanStart<=@Search AND ChallanEnd>=@Search
					order by challanbook.id desc
			END
			ELSE IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo=@Search)
			BEGIN
				SELECT 0 id, @Search ChallanStart,@Search ChallanEnd, '' ChallanType, CASE WHEN Status='I' THEN 'Issue' ELSE Status END ChallanCase,Branch.Name BranchName FROM RegisteredChallans
				left outer join  Branch ON  RegisteredChallans.BranchId=Branch.Id
				WHERE ChallanNo=@Search
				
			END
			ELSE
				SELECT TOP 5 ChallanBook.Id id,ChallanBook.ChallanStart,ChallanBook.ChallanEnd,ChallanBook.ChallanType,ChallanBook.ChallanCase,Branch.Name BranchName FROM ChallanBook
					LEFT OUTER JOIN  Branch ON  ChallanBook.BranchId=Branch.Id
					order by challanbook.id desc
		END
	ELSE IF(@Type = 2)
		BEGIN
			SELECT    ChallanBook.Id Id,ChallanBook.ChallanStart,ChallanBook.ChallanEnd,ChallanBook.ChallanType,ChallanBook.ChallanCase,Branch.Name BranchName FROM ChallanBook
				left outer join  Branch ON  ChallanBook.BranchId=Branch.Id
				WHERE ChallanBook.Id=@Id
		END
	ELSE IF(@Type = 3)
		BEGIN -- select top 1 * from vw_challanbookdetails
			IF (@ChallanCase='Stock')
				BEGIN
					IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo>=@ChallanStart AND	ChallanNo<=@ChallanEnd)
					BEGIN
						SET NOCOUNT ON
							WHILE @ChallanStart <= @ChallanEnd
							BEGIN
								UPDATE RegisteredChallans SET Status='I', BranchId=@BranchId WHERE ChallanNo=@ChallanStart;
									SELECT @ChallanStart = @ChallanStart + 1;
							END;
						SET NOCOUNT OFF
						SELECT 'E';
					END
					ELSE
					BEGIN
						SET NOCOUNT ON
							SET @Counter=1
							WHILE @BookCount>=@Counter
							BEGIN
								SET @ChallanEnd=@ChallanStart+49
								INSERT INTO  ChallanBook (ChallanStart,ChallanEnd, BranchId, ChallanType, ChallanCase,CreatedBy,CreatedOn, Deleted, SupervisorId)
								VALUES(@ChallanStart,@ChallanEnd, @BranchId, @ChallanType, @ChallanCase,@CreatedBy ,@pCreatedDate, 0, @SupervisorId)
							
								WHILE @ChallanStart <= @ChallanEnd
								BEGIN
									INSERT INTO RegisteredChallans(ChallanNo, Status, BranchId) VALUES (@ChallanStart, 'I', @BranchId);
									SELECT @ChallanStart = @ChallanStart + 1;
								END;
								--SET @ChallanStart=@ChallanStart+1
								SET @Counter=@Counter+1
							END
							SET NOCOUNT OFF
						SELECT 'S';
					END
				END
			ELSE IF (@ChallanCase='Issue')
			   BEGIN
				IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo>=@ChallanStart AND	ChallanNo<=@ChallanEnd)
					BEGIN
						SET NOCOUNT ON
						SET @Counter=1
						WHILE @BookCount>=@Counter
						BEGIN
							SET @ChallanEnd=@ChallanStart+49

							IF NOT EXISTS (SELECT 1 FROM ChallanBook WHERE ChallanStart=@ChallanStart AND ChallanEnd = @ChallanEnd And ChallanCase =@ChallanCase)
								INSERT INTO  ChallanBook (ChallanStart,ChallanEnd, BranchId, ChallanType, ChallanCase,CreatedBy,CreatedOn, Deleted, SupervisorId)
								VALUES(@ChallanStart,@ChallanEnd, @BranchId,@ChallanType, @ChallanCase,@CreatedBy , GETDATE(), 0, @SupervisorId)
							ELSE
								UPDATE ChallanBook SET  BranchId=@BranchId, ChallanType = @ChallanType,
								CreatedBy=@CreatedBy,CreatedOn=GetDate(),SupervisorId = @SupervisorId 
								WHERE ChallanStart=@ChallanStart AND ChallanEnd = @ChallanEnd AND ChallanCase =@ChallanCase

							WHILE @ChallanStart <= @ChallanEnd
							BEGIN
								IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo=@ChallanStart)
									UPDATE RegisteredChallans SET Status='I', BranchId=@BranchId WHERE ChallanNo=@ChallanStart;
								ELSE
									INSERT INTO RegisteredChallans(ChallanNo, Status, BranchId) VALUES (@ChallanStart, 'I', @BranchId);
								
								SELECT @ChallanStart = @ChallanStart + 1;
							END;
							--SET @ChallanStart=@ChallanStart+1
								SET @Counter=@Counter+1
						END
							SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo>=@ChallanStart AND	ChallanNo<=@ChallanEnd AND Status='I')
					BEGIN
							SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END

			ELSE IF (@ChallanCase='Return')
				BEGIN
					IF EXISTS (SELECT 1 FROM RegisteredChallans WHERE ChallanNo>=@ChallanStart AND	ChallanNo<=@ChallanEnd AND Status='I')
					BEGIN
						INSERT INTO  ChallanBook (ChallanStart,ChallanEnd, BranchId,ChallanCase,ChallanType, CreatedBy,CreatedOn, Deleted, SupervisorId)
							VALUES(@ChallanStart,@ChallanEnd, @BranchId,'Stock', 'Return',@CreatedBy ,@pCreatedDate, 0, @SupervisorId)
						SET NOCOUNT ON
						WHILE @ChallanStart <= @ChallanEnd
						BEGIN
							UPDATE RegisteredChallans SET Status='I', BranchId=@BranchId WHERE ChallanNo=@ChallanStart;
								SELECT @ChallanStart = @ChallanStart + 1;
						END;
						SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END
		END
ELSE IF(@Type = 4)
	BEGIN
	SELECT @ChallanStart=ChallanStart, @ChallanEnd=ChallanEnd From ChallanBook WHERE Id=@Id 
	
	IF NOT EXISTS (SELECT 1 FROM ChallanBook WHERE
				ChallanStart=@ChallanStart AND ChallanEnd=@ChallanEnd AND ChallanCase='Issue')
	BEGIN
		DELETE FROM ChallanBook WHERE Id=@Id
		DELETE FROM RegisteredChallans WHERE ChallanNo BETWEEN @ChallanStart AND @ChallanEnd
		SELECT 'S';
	END
	ELSE
	BEGIN
		SELECT 'E';
	END
END
ELSE IF(@Type = 5) -- Issue
BEGIN
	DECLARE @MySQL VARCHAR(8000)=''
	SET @ChallanCase='Issue'
	SET @MySQL=N'SELECT DISTINCT '''+@ChallanCase+''' ChallanCase, ChallanType, ChallanStart, ChallanEnd, BranchName,UserName, COUNT(IssuedChallan) IssuedChallans, COUNT(UsedChallan) UsedChallans, CONVERT(VARCHAR(10), CreatedOn, 103) CreatedOn  from vw_challanbookdetails
				WHERE 1=1 '
				IF(@BranchName<>'' AND @BranchName IS NOT NULL)
					SET @MySQL=@MySQL+' AND BranchName='''+@BranchName+'''' 

				IF(@BranchId>0 AND @BranchId IS NOT NULL)
					SET @MySQL=@MySQL+' AND BranchId='+CONVERT(VARCHAR(10),@BranchId)

				IF(@ChallanCase<>'' AND @ChallanCase IS NOT NULL)
					SET @MySQL=@MySQL+' AND (ChallanCase IS NULL OR ChallanCase='''+@ChallanCase+''')' 

				IF(@ChallanStart>0 AND @ChallanStart IS NOT NULL)
					SET @MySQL=@MySQL+' AND IssuedChallan>='+CONVERT(VARCHAR(10),@ChallanStart)
				IF(@ChallanEnd>0 AND @ChallanEnd IS NOT NULL)
					SET @MySQL=@MySQL+' AND IssuedChallan<='+CONVERT(VARCHAR(10),@ChallanEnd)
				IF(@ChallanType<>'' AND @ChallanType IS NOT NULL)
					SET @MySQL=@MySQL+' AND ChallanType='''+@ChallanType+'''' 

				IF(@StartDate IS NOT NULL AND @StartDate<>'')
	        		SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, createdon, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
		        IF(@EndDate IS NOT NULL AND @EndDate<>'')
			        SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, createdon, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'
    			IF(@Supervisor<>'' AND @Supervisor IS NOT NULL)
					SET @MySQL=@MySQL+' AND UserName='''+@Supervisor+'''' 

				SET @MySQL=@MySQL+' GROUP BY CreatedOn, ChallanType, ChallanCase, ChallanStart, ChallanEnd, BranchName,UserName ORDER BY ChallanStart'
--PRINT @MySQL
EXECUTE(@MySQL)
END  
ELSE IF(@Type = 6) -- Stock
BEGIN
	DECLARE @MySQLStock VARCHAR(8000)=''
	SET @ChallanCase='Stock'
	SET @MySQLStock=N'SELECT DISTINCT '''+@ChallanCase+''' ChallanCase, ChallanStart, ChallanType, ChallanEnd, BranchName, COUNT(IssuedChallan) IssuedChallans, COUNT(UsedChallan) UsedChallans, CONVERT(VARCHAR(10), CreatedOn, 103) CreatedOn  from vw_challanbookdetails
				WHERE 1=1 '
				IF(@BranchName<>'' AND @BranchName IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND BranchName='''+@BranchName+'''' 

				IF(@BranchId>0 AND @BranchId IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND BranchId='+CONVERT(VARCHAR(10),@BranchId)

				IF(@ChallanCase<>'' AND @ChallanCase IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanCase='''+@ChallanCase+'''' 

				IF(@ChallanStart>0 AND @ChallanStart IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND IssuedChallan>='+CONVERT(VARCHAR(10),@ChallanStart)
				IF(@ChallanEnd>0 AND @ChallanEnd IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND IssuedChallan<='+CONVERT(VARCHAR(10),@ChallanEnd)
				IF(@ChallanType<>'' AND @ChallanType IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanType='''+@ChallanType+'''' 

				IF(@StartDate IS NOT NULL AND @StartDate<>'')
			        SET @MySQLStock=@MySQLStock+' AND CONVERT(smalldatetime, createdon, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
				IF(@EndDate IS NOT NULL AND @EndDate<>'')
					SET @MySQLStock=@MySQLStock+' AND CONVERT(smalldatetime, createdon, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'
				
				
				SET @MySQLStock=@MySQLStock+' GROUP BY CreatedOn, ChallanType, ChallanCase, ChallanStart, ChallanEnd, BranchName ORDER BY ChallanStart'
--PRINT @MySQLStock
EXECUTE(@MySQLStock)
END
ELSE IF(@Type = 7) -- Pending Stock
BEGIN
	DECLARE @MyPendingStock VARCHAR(8000)=''
	SET @ChallanCase='Stock'
	SET @MyPendingStock=N'SELECT DISTINCT '''+@ChallanCase+''' ChallanCase, ChallanStart, ChallanType, ChallanEnd, BranchName,UserName, COUNT(IssuedChallan) IssuedChallans, COUNT(UsedChallan) UsedChallans, CONVERT(VARCHAR(10), CreatedOn, 103) CreatedOn  from vw_challanbookdetails
				WHERE UsedChallan IS NULL  '
				
				IF(@BranchName<>'' AND @BranchName IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND BranchName='''+@BranchName+'''' 

				IF(@BranchId>0 AND @BranchId IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND BranchId='+CONVERT(VARCHAR(10),@BranchId)

				IF(@ChallanCase<>'' AND @ChallanCase IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND ChallanCase='''+@ChallanCase+'''' 

				IF(@ChallanStart>0 AND @ChallanStart IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND IssuedChallan>='+CONVERT(VARCHAR(10),@ChallanStart)
				IF(@ChallanEnd>0 AND @ChallanEnd IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND IssuedChallan<='+CONVERT(VARCHAR(10),@ChallanEnd)
				IF(@ChallanType<>'' AND @ChallanType IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND ChallanType='''+@ChallanType+'''' 

				IF(@StartDate IS NOT NULL AND @StartDate<>'')
					SET @MyPendingStock=@MyPendingStock+' AND CONVERT(smalldatetime, createdon, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
				IF(@EndDate IS NOT NULL AND @EndDate<>'')
					SET @MyPendingStock=@MyPendingStock+' AND CONVERT(smalldatetime, createdon, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'
    			IF(@Supervisor<>'' AND @Supervisor IS NOT NULL)
					SET @MyPendingStock=@MyPendingStock+' AND UserName='''+@Supervisor+'''' 

				SET @MyPendingStock=@MyPendingStock+' GROUP BY CreatedOn, ChallanType, ChallanCase, ChallanStart, ChallanEnd, BranchName,UserName HAVING ((ChallanEnd-ChallanStart+1)=Count(IssuedChallan)) ORDER BY ChallanStart'
				
   -- PRINT @MyPendingStock
 EXECUTE(@MyPendingStock)
END

ELSE IF(@Type=8)
	BEGIN
		Select Id,Name From Common_Branch Where IsHeadOffice = 1
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_challanbookCheck]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_challanbookCheck](
	 @Type int = 0, 
	 @ChallanStart INT=NULL,
     @ChallanEnd INT=NULL	
) 
AS 


  BEGIN

  IF(@Type = 1)
  BEGIN
        IF  EXISTS (SELECT ChallanStart,ChallanEnd FROM ChallanBook WHERE ChallanStart  between  @ChallanStart AND @ChallanEnd or ChallanEnd  between  @ChallanStart AND @ChallanEnd )
              THROW 50000, 'ChallanNo is all ready save  between ChallanStart and ChallanEnd', 1
        ELSE IF EXISTS (SELECT ChallanStart,ChallanEnd FROM ChallanBook WHERE @ChallanStart  between  ChallanStart AND ChallanEnd or @ChallanEnd  between  ChallanStart AND ChallanEnd )
               THROW 50000, 'ChallanNo is already save  between ChallanStart and ChallanEnd', 1
   END

  ELSE IF(@Type = 2)
  BEGIN
         IF  EXISTS (SELECT ChallanStart,ChallanEnd FROM ChallanStatus WHERE ChallanStart  between  @ChallanStart AND @ChallanEnd or ChallanEnd  between  @ChallanStart AND @ChallanEnd )
               THROW 50000, 'ChallanNo is all ready save  between ChallanStart and ChallanEnd', 1
         ELSE IF EXISTS (SELECT ChallanStart,ChallanEnd FROM ChallanStatus WHERE @ChallanStart  between  ChallanStart AND ChallanEnd or @ChallanEnd  between  ChallanStart AND ChallanEnd )
              THROW 50000, 'ChallanNo is already save  between ChallanStart and ChallanEnd', 1
 END

 END
GO
/****** Object:  StoredProcedure [dbo].[sp_challanstatus]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_challanstatus](
	@Type int = 0, 
	@Id int =0,
	@BranchId INT=0,
	@BranchName varchar(50)='',
	@ChallanStart INT=0, 
	@ChallanEnd INT=0,
	@StartDate VARCHAR(10) = NULL,
	@EndDate VARCHAR(10) = NULL,
	@Status varchar(1)='',
	@ChallanCase  varchar(10)='',
	@ChallanType varchar(10)='',
	@Remarks varchar (1000)='',
	@Deleted bit = 0,
	@RegisteredChallansId INT=0,
	@Search varchar(50)='', 
	@Createddby INT=0
	
) 
AS 

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @BranchName + @StartDate + @EndDate + @Status + @ChallanCase +@ChallanType + @Remarks + @Search

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	IF(@ChallanStart > @ChallanEnd)
	BEGIN
		SET @ChallanStart = @ChallanStart+@ChallanEnd
		SET @ChallanEnd = @ChallanStart-@ChallanEnd
		SET @ChallanStart = @ChallanStart-@ChallanEnd
	END

	IF(@Type = 1)
		BEGIN
			SELECT   ChallanStatus.Id id,ChallanStatus.ChallanStart,Remarks,ChallanStatus.ChallanEnd,ChallanStatus.ChallanType,ChallanStatus.ChallanCase FROM ChallanStatus

			WHERE ChallanStatus.ChallanStart LIKE '%'+ @Search+'%'
		END
	ELSE IF(@Type = 2)
		BEGIN
			SELECT    ChallanStatus.Id id,ChallanStatus.ChallanStart,Remarks,ChallanStatus.ChallanEnd,ChallanStatus.ChallanType,ChallanStatus.ChallanCase FROM ChallanStatus
				WHERE ChallanStatus.Id=@Id
		END
	ELSE IF(@Type = 3)
		BEGIN
			IF (@ChallanCase='UNLOCK')
				BEGIN
					IF NOT EXISTS (SELECT 1 FROM ChallanStatus WHERE
								((@ChallanStart BETWEEN ChallanStart AND ChallanEnd) OR 
								(@ChallanEnd BETWEEN ChallanStart AND ChallanEnd) OR
								(ChallanStart BETWEEN @ChallanStart AND @ChallanEnd) OR 
								(ChallanEnd BETWEEN @ChallanStart AND @ChallanEnd)) AND ChallanCase='Lock'
								)
					BEGIN 
						SELECT 'E';
					END
					ELSE
					BEGIN
						INSERT INTO  ChallanStatus (ChallanStart,ChallanEnd,ChallanCase,Remarks,CreatedBy,CreatedOn, Deleted)
							VALUES(@ChallanStart,@ChallanEnd,@ChallanCase,@Remarks,@Createddby ,GETDATE(), 0)
							SET NOCOUNT ON
							WHILE @ChallanStart <= @ChallanEnd
							BEGIN
								UPDATE RegisteredChallans SET Status='U' WHERE ChallanNo=@ChallanStart;
								SELECT @ChallanStart = @ChallanStart + 1;
							END;
							SET NOCOUNT OFF
						SELECT 'U';
					END
				END
				--select * from challanstatus select top 1 * from registeredchallans where challanno=600
			ELSE IF (@ChallanCase='LOCK')
				BEGIN
					IF EXISTS (SELECT 1 FROM ChallanBook WHERE
								(@ChallanStart BETWEEN ChallanStart AND ChallanEnd) AND 
								(@ChallanEnd BETWEEN ChallanStart AND ChallanEnd)) 
					BEGIN
						INSERT INTO  ChallanStatus (ChallanStart,ChallanEnd,ChallanCase,Remarks,CreatedBy,CreatedOn, Deleted)
							VALUES(@ChallanStart,@ChallanEnd,@ChallanCase,@Remarks,@Createddby ,GETDATE(), 0)
							SET NOCOUNT ON
							WHILE @ChallanStart <= @ChallanEnd
							BEGIN
								UPDATE RegisteredChallans SET Status='L' WHERE ChallanNo=@ChallanStart;
								SELECT @ChallanStart = @ChallanStart + 1;
							END;
							SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END
			ELSE IF (@ChallanCase='CANCEL')
				BEGIN
					IF NOT EXISTS (SELECT 1 FROM LoadingChallan WHERE
						ChallanNo BETWEEN @ChallanStart AND @ChallanEnd) AND
						EXISTS (SELECT 1 FROM ChallanBook WHERE
								(@ChallanStart BETWEEN ChallanStart AND ChallanEnd) AND 
								(@ChallanEnd BETWEEN ChallanStart AND ChallanEnd))
					BEGIN
						INSERT INTO  ChallanStatus (ChallanStart,ChallanEnd,ChallanCase,ChallanType,Remarks, CreatedBy,CreatedOn, Deleted)
							VALUES(@ChallanStart,@ChallanEnd,'LOCK', 'CANCEL',@Remarks,@Createddby ,GETDATE(), 0)
						SET NOCOUNT ON
						WHILE @ChallanStart <= @ChallanEnd
						BEGIN
							UPDATE RegisteredChallans SET Status='C' WHERE ChallanNo=@ChallanStart;
							SELECT @ChallanStart = @ChallanStart + 1;
						END;
						SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END
		END
ELSE IF(@Type = 4)
	BEGIN
	SELECT @ChallanStart=ChallanStart, @ChallanEnd=ChallanEnd From ChallanStatus WHERE Id=@Id
	IF NOT EXISTS (SELECT 1 FROM RegisteredChallans WHERE
				(ChallanNo BETWEEN @ChallanStart AND @ChallanEnd) AND Status<>'U')
	BEGIN
		DELETE FROM ChallanStatus WHERE Id=@Id
		SELECT 'U';
	END
	ELSE
	BEGIN
		SELECT 'E';
	END
END
ELSE IF(@Type = 5) 
BEGIN
	DECLARE @MySQLStock VARCHAR(8000)=''
	SET @MySQLStock=N'SELECT DISTINCT Remarks, FullName, ChallanCase, ChallanNo, ChallanStart, ChallanType, ChallanEnd, BranchName, CONVERT(VARCHAR(10), CreatedOn, 103) CreatedOn  from vw_challanstatusdetails
				WHERE 1=1 '
				IF(@BranchName<>'' AND @BranchName IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND BranchName='''+@BranchName+'''' 

				IF(@BranchId>0 AND @BranchId IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND BranchId='+CONVERT(VARCHAR(10),@BranchId)

				IF(@ChallanCase<>'' AND @ChallanCase IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanCase='''+@ChallanCase+'''' 

				IF(@ChallanStart>0 AND @ChallanStart IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanNo='+CONVERT(VARCHAR(10),@ChallanStart)
				IF(@ChallanEnd>0 AND @ChallanEnd IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanNo='+CONVERT(VARCHAR(10),@ChallanEnd)
				IF(@ChallanType<>'' AND @ChallanType IS NOT NULL)
					SET @MySQLStock=@MySQLStock+' AND ChallanType='''+@ChallanType+'''' 

				IF(@StartDate IS NOT NULL AND @StartDate<>'')
					SET @MySQLStock=@MySQLStock+' AND CONVERT(smalldatetime, createdon, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
				IF(@EndDate IS NOT NULL AND @EndDate<>'')
					SET @MySQLStock=@MySQLStock+' AND CONVERT(smalldatetime, createdon, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'
				--SET @MySQLStock=@MySQLStock+' GROUP BY CreatedOn, ChallanType, ChallanCase, ChallanStart, ChallanEnd, BranchName ORDER BY ChallanStart'
				SET @MySQLStock=@MySQLStock+'  ORDER BY ChallanStart'
--PRINT @MySQLStock
EXECUTE(@MySQLStock)
END/*
ELSE IF(@Type = 6)
	BEGIN
		SELECT l.ChallanNo a, l.ChallanNo b, NULL c, NULL d, NULL e, 'LOCK' f, 1 g, GETDATE() h,0 i INTO #lock FROM LoadingChallan l
			LEFT OUTER JOIN UnloadingChallan u ON l.Id=u.LoadingChallanId
			LEFT OUTER JOIN Payment p ON p.LoadingId=l.Id
			LEFT OUTER JOIN RegisteredChallans r ON r.ChallanNo=l.ChallanNo
		WHERE
			p.UnloadingId is NOT NULL AND p.Id IS NULL AND DATEADD(DAY,30,u.UnloadedDate)>=GETDATE()
			AND r.Status<>'L'
		INSERT INTO ChallanStatus
			SELECT * FROM #lock
		
		UPDATE RegisteredChallans SET Status='L' WHERE ChallanNo IN (SELECT a FROM #lock)
	END */
END
GO
/****** Object:  StoredProcedure [dbo].[sp_checkaccess]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_checkaccess] (
@UserId INT=0,
@UserName VARCHAR(100)='',
@GroupId INT=0,
@GroupName VARCHAR(50)=''
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @UserName + @GroupName

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT OFF
	IF(@GroupName<>'')
		SELECT @GroupId=Id from Groups WHERE GroupName=@GroupName
	IF(@GroupID=0)
	BEGIN
		IF(@UserName<>'')
			SELECT @GroupId=GroupId from Users WHERE UserName=@UserName
		ELSE
			SELECT @GroupId=GroupId from Users WHERE Id=@UserId
	END

	SELECT ModuleId, Module ModuleName, GroupId, GroupName, 
		[View], [Edit], [Add], [Delete], LOWER(FileName) FileName,
		CASE WHEN [View]=1 THEN 'V' ELSE '' END+CASE WHEN [Add]=1 THEN 'A' ELSE '' END+CASE WHEN [EDIT]=1 THEN 'E' ELSE '' END+CASE WHEN [DELETE]=1 THEN 'D' ELSE '' END Permit
		 FROM Access
	LEFT OUTER JOIN Modules ON Modules.Id=Access.ModuleId
	LEFT OUTER JOIN Groups ON Groups.Id=Access.GroupId
	WHERE GroupId=@GroupId
END
GO
/****** Object:  StoredProcedure [dbo].[sp_company]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  CREATE PROCEDURE [dbo].[sp_company](
@Type int = 0
,@CompanyName varchar(100)=''
,@Director1 varchar(100)=''
,@Director2 varchar(100)=''
,@Address1 varchar(100)=''
,@Address2 varchar(200)=''
,@PinCode varchar(10)=''
,@Phone varchar(50)=''
,@Fax varchar(50)=''
,@Email varchar(50)=''
,@Mobile varchar(50)=''
,@ServiceTax varchar(50)=''
,@VAT varchar(50)=''
,@PAN varchar(50)=''
,@TIN varchar(50)=''
,@YearSetup smalldatetime=NULL

) 
AS 
IF(@Type = 1)
BEGIN
 THROW 50000, 'Use new  ERP to update Company Information',  1
END
ELSE IF(@Type = 2)
BEGIN
     SELECT * from Company
END
GO
/****** Object:  StoredProcedure [dbo].[SP_CopyQuotationMasterDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/* Create procedure */


CREATE PROCEDURE [dbo].[SP_CopyQuotationMasterDetails] 
	@QuotationId INT,
	@QuotationTypeId INT
AS
BEGIN
	Declare @ExistCount INT;
	Select @ExistCount = Count(Id)  From ImEx_QuotationDetails Where QuotationID = @QuotationId;
	IF (@ExistCount = 0)
	BEGIN
		INSERT INTO ImEx_QuotationDetails (QuotationID, FieldName, FieldValue, OrderNo) 
		SELECT @QuotationId as Id, FieldName, FieldValue, OrderNo From ImEx_QuotationMaster Where QuotationTypeId = @QuotationTypeId;
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_CreateCostCenter]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_CreateCostCenter]
	 @CostCenterId		INT = NULL
	,@CostCenterName	VARCHAR(50)
    ,@CostCenterType	INT
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
	 SET @SQLInjectdata = @CostCenterName
	
DECLARE @flag bit=0
	 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN

	DECLARE @tempCostCenterId INT = NULL;
	SELECT  @tempCostCenterId = Id FROM Accounts_CostCenters WHERE ID = @CostCenterId OR (@CostCenterId IS NULL AND Name = @CostCenterName);
	IF @tempCostCenterId IS NULL OR @tempCostCenterId = 0
	BEGIN
		INSERT INTO [dbo].[Accounts_CostCenters]
				   ([Name], [CostCenterType])
			 VALUES
				   (@CostCenterName,@CostCenterType)
		SET @tempCostCenterId=SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE [dbo].[Accounts_CostCenters]
		   SET [Name] = @CostCenterName
			  ,[CostCenterType] = @CostCenterType
		 WHERE Id = @tempCostCenterId;
	END 
	RETURN @tempCostCenterId;
END





GO
/****** Object:  StoredProcedure [dbo].[sp_CreateInvoicePaymentVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[sp_CreateInvoicePaymentVoucher]
(
   @InvoicePaymentId INT
)
AS
BEGIN
	DECLARE @Shortage DECIMAL(18,2)=0.0
	DECLARE @TDSAmount DECIMAL(18,2)=0.0
	DECLARE @Moisture DECIMAL(18,2)=0.0
	DECLARE @Other DECIMAL(18,2)=0.0

	DECLARE @ShortageLedger INT=NULL
	DECLARE @TDSAmountLedger INT=NULL
	DECLARE @MoistureLedger INT=NULL
	DECLARE @OtherLedger INT=NULL
	DECLARE @ClientLedger INT=NULL
	DECLARE @BranchId INT=NULL

	DECLARE @RealizationDate DATE=NULL
	DECLARE @ReceivedAmount DECIMAL(18,2)=0.0
	DECLARE @InvoiceNo VARCHAR(50)=''
	DECLARE @InvoiceId INT=NULL
	DECLARE	@InsertById INT=NULL
	DECLARE @EexecutionMessage VARCHAR(50)=''
	DECLARE @trancount int;
	
	SELECT	 @Shortage = ShortageDeduction,
			 @TDSAmount = TDSAmount,
			 @Moisture= P.MoistureDeduction,
			 @Other=P.OtherDeduction,
			 @RealizationDate=P.RealizationOn,
			 @ReceivedAmount=P.ReceivedAmount,
			 @InvoiceNo=InvoiceNo,
			 @InvoiceId=P.InvoiceId,
			 @InsertById = P.InsertUserId,
			 @ClientLedger = C.LedgerId,
			 @BranchId = U.BranchId
	FROM _InvoicePayment P 
		INNER JOIN vw_InvoiceDetails I ON I.InvoiceId=P.InvoiceId
		INNER JOIN Common_Client C ON C.Id=I.ClientId
		INNER JOIN Users U ON U.Id=P.InsertUserId
	WHERE P.Id=@InvoicePaymentId
	
	SELECT  @ShortageLedger = LedgerId FROM SystemLedger WHERE [Description]='INVOICE SHORTAGE DEDUCTION'
	SELECT  @TDSAmountLedger = LedgerId FROM SystemLedger WHERE [Description]='INVOICE TDS DEDUCTION'
	SELECT  @MoistureLedger = LedgerId FROM SystemLedger WHERE [Description]='INVOICE MOISTURE DEDUCTION'
	SELECT  @OtherLedger = LedgerId FROM SystemLedger WHERE [Description]='INVOICE OTHER DEDUCTION'

	DECLARE @VoucherType INT=4
	DECLARE @VoucherStatus INT=2 -- Submitted 
	DECLARE @VoucherNarration VARCHAR(250)='Received amount '+CAST(@ReceivedAmount AS VARCHAR)+' against InvoiceNo: '+@InvoiceNo
	DECLARE @FinancialYearId INT=NULL
	SELECT  @FinancialYearId=Id FROM Accounts_FinancialYear WHERE @RealizationDate BETWEEN StartDate AND EndDate
	DECLARE @VoucherRefType INT=17
	DECLARE @VoucherRefNo VARCHAR(50)=@InvoiceNo
	DECLARE @VoucherRefId INT=@InvoicePaymentId
	DECLARE @PaymentMode INT=NULL
	DECLARE @ChkNeftRefNo VARCHAR=''
	DECLARE @VoucherId INT=0
    DECLARE @CurrentVoucherStatus INT=0;

	SELECT @VoucherId=Id FROM Accounts_Vouchers WHERE RefType=17 AND ReferenceId=@InvoicePaymentId
	
	IF(@VoucherId IS NOT NULL) 
    BEGIN
       SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
    END
	IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
          THROW 50000, 'Please Reject Vouchers ???. ' , 1

	SET @trancount = @@trancount;
	BEGIN TRY
		IF @trancount = 0
			BEGIN TRANSACTION
		ELSE
			SAVE TRANSACTION [sp_CreateInvoicePaymentVoucher];
	IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo
				,BranchId)
			VALUES
				(NULL,
				@RealizationDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				@VoucherNarration,
				@FinancialYearId,
				@VoucherRefType, 
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo,
				@BranchId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate = @RealizationDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @VoucherRefNo,
				ReferenceId=@VoucherRefId,
				FinancialYear=@FinancialYearId,
				PaymentMode = @PaymentMode,
				ChkNeftRefNo = @ChkNeftRefNo,
				[Description] = @VoucherNarration
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
		
		DECLARE @TotalDeductions DECIMAL(18,2)=0.0
		SET @TotalDeductions=@Shortage+@TDSAmount+@Moisture+@Other

		SET @EexecutionMessage = 'TotalDeductions Amount: '+CAST(@TotalDeductions AS VARCHAR)+' LedgerId: '+CAST(@ClientLedger AS VARCHAR)
		IF @TotalDeductions>0
		BEGIN
			IF @ClientLedger IS NULL 
				THROW 50000, 'Client Ledger not defined', 1

			INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount, FYId )
			VALUES(@VoucherId, @ClientLedger, NULL, 1 , @TotalDeductions, @FinancialYearId)
		END

		SET @EexecutionMessage = 'Shortage Amount: '+CAST(@Shortage AS VARCHAR)+' LedgerId: '+CAST(@ShortageLedger AS VARCHAR)
		IF @Shortage>0
		BEGIN
			IF @ShortageLedger IS NULL 
				THROW 50000, 'Shortage Ledger not defined', 1

			INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount, FYId )
			VALUES(@VoucherId, @ShortageLedger, NULL, 2 , @Shortage, @FinancialYearId)
		END 
		SET @EexecutionMessage = 'TDS Amount: '+CAST(@TDSAmount AS VARCHAR)+' LedgerId: '+CAST(@TDSAmountLedger AS VARCHAR)
		IF @TDSAmount>0
		BEGIN
			IF @TDSAmountLedger IS NULL 
				THROW 50000, 'TDS Ledger not defined', 1

			INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount, FYId )
			VALUES(@VoucherId, @TDSAmountLedger, NULL, 2 , @TDSAmount, @FinancialYearId)
		END 
		SET @EexecutionMessage = 'Moisture Amount: '+CAST(@Moisture AS VARCHAR)+' LedgerId: '+CAST(@MoistureLedger AS VARCHAR)
		IF @Moisture>0
		BEGIN
			IF @MoistureLedger IS NULL 
				THROW 50000, 'Moisture Ledger not defined', 1

			INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount, FYId )
			VALUES(@VoucherId, @MoistureLedger, NULL, 2 , @Moisture, @FinancialYearId)
		END 
		SET @EexecutionMessage = 'Other Amount: '+CAST(@Other AS VARCHAR)+' LedgerId: '+CAST(@OtherLedger AS VARCHAR)
		IF @Other>0
		BEGIN
			IF @OtherLedger IS NULL 
				THROW 50000, 'Other Ledger not defined', 1

			INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount, FYId )
			VALUES(@VoucherId, @OtherLedger, NULL, 2 , @Other, @FinancialYearId)
		END 
		

	Exec [Acounting_ValidateVoucher] @Voucherid	

	UPDATE _InvoicePayment SET VoucherId=@VoucherId WHERE Id=@InvoicePaymentId

	SET @EexecutionMessage = ''
	IF @trancount = 0
		COMMIT;
	END TRY
	BEGIN CATCH
		DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
		SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [sp_CreateInvoicePaymentVoucher];
		
		raiserror ('Validation Error: %s %s', 16, 1, @EexecutionMessage, @message) ;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_CreateLedger]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_CreateLedger]
  @UserId   INT
 ,@LedgerId  INT = NULL
 ,@LedgerName VARCHAR(1000)
    ,@LedgerType INT
 ,@LedgerGroup INT = NULL
    ,@ContactName VARCHAR(500) = NULL
    ,@MobileNo  VARCHAR(50) = NULL
    ,@Email   VARCHAR(500) = NULL
    ,@Address  VARCHAR(5000) = NULL
    ,@State   VARCHAR(50) = NULL
    ,@Country  VARCHAR(50) = NULL
    ,@PinCode  VARCHAR(50) = NULL
 ,@RecordBranchId  INT
 ,@RecordFYId      INT
AS
DECLARE @SQLInjectdata VARCHAR(8000)=''
  SET @SQLInjectdata = @LedgerName + @ContactName + @MobileNo + @Email + @Address + @State + @Country + @PinCode
 
 DECLARE @flag bit=0
  SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
 
 IF @flag=0
  THROW 50000, 'SQL Server encountered exception', 1


BEGIN
 DECLARE @AllowNegativeBalance INT = 1;
 DECLARE @AllowBackDateEntry INT = 10;
 DECLARE @GroupHirerchy Varchar(2000) = NULL
 IF @LedgerGroup IS NULL
  SELECT @LedgerGroup = AssociatedGroupId FROM Accounts_LedgerType WHERE Id = @LedgerType;
 
 IF @LedgerType = 7
  SET @AllowBackDateEntry = 0;
 --IF @LedgerType = 9 --Job
 -- SET @AllowNegativeBalance = 0
 -- SELECT  @tempLedgerId = Id FROM Accounts_Ledgers WHERE ID = @LedgerId OR (@LedgerId IS NULL AND LedgerName = @LedgerName);
 -- IF @tempLedgerId IS NULL OR @tempLedgerId = 0
 IF @LedgerId IS NULL
 BEGIN
  INSERT INTO [dbo].[Accounts_Ledgers]
       ([LedgerName],[LedgerType],[Group],[Remarks],[IsCostCenter],
     [ContactName],[MobileNo],[Email],[Address],[State],[Country],[PinCode], AllowNegativeBalance, AllowBackDateEntry, InsertUserId, InsertDate,RecordBranchId,RecordFYId)
    VALUES
       (@LedgerName, @LedgerType, @LedgerGroup, NULL,  0, 
     @ContactName,@MobileNo,@Email,@Address,@State,@Country,@PinCode,@AllowNegativeBalance, @AllowBackDateEntry, @UserId, GetDate(),@RecordBranchId,@RecordFYId);
  SET @LedgerId=SCOPE_IDENTITY()
  INSERT INTO [Accounts_LedgerBalance]
       ([LedgerId]
       ,[Year]
       ,[OpeningBalance]
       ,[OpeningTransactionType])
    VALUES
       (@LedgerId
       ,dbo.[FN_Accounts_GetFinancialYearId](GETDATE())
       ,0
       ,2)
 END
 ELSE
 BEGIN 
  UPDATE [dbo].[Accounts_Ledgers]
     SET [LedgerName] = @LedgerName
     ,[ContactName] = @ContactName
     ,[MobileNo] = @MobileNo
     ,[Email] = @Email
     ,[Address] = @Address
     ,[State] = @State
     ,[Country] = @Country
     ,[PinCode] = @PinCode
     ,[LedgerType] = @LedgerType
     ,[Group] = @LedgerGroup
     ,AllowNegativeBalance = @AllowNegativeBalance
     ,AllowBackDateEntry = @AllowBackDateEntry
   WHERE (Id = @LedgerId);
 END 
  -- RAISERROR ('More than one ledger found', 1, 16)
 RETURN @LedgerId;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_CreateNewClientAfterApproval]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_CreateNewClientAfterApproval](@Id INT)
AS BEGIN
 DECLARE @Name VARCHAR(50)=''
 SELECT @Name = Name FROM Common_PreClient WHERE Id=@Id
 IF EXISTS (SELECT 1 FROM Common_Client WHERE Name=@Name)
  throw 50000, 'Client already exists', 1
 IF EXISTS (SELECT 1 FROM Accounts_Ledgers WHERE LedgerName=@Name)
  throw 50000, 'Client ledger already exists', 1

 INSERT INTO Accounts_Ledgers( LedgerName,LedgerType,[Group],Remarks,IsCostCenter,ContactName,MobileNo,Email,Address
  ,State,Country,PinCode,TaxType,TaxPercentage,STApplicable,STCategory,IsReconciliation,PANNo,TDSCategory
  ,AllowNegativeBalance,InsertUserId,InsertDate,UpdateUserId,UpdateDate,AllowBackDateEntry,AllowBackDayEntry
  ,LGSTId,IGSTId,RecordBranchId,RecordFYId) 
 SELECT Name, 2, 28, NULL, 0, OName, OMobileNo, OEmail, OAddress
  ,StateId, 1, NULL, NULL, 0, 0, NULL, 0, NULL, NULL
  ,1, InsertUserId,GETDATE(), NULL, NULL, 1, 30, NULL, NULL,RecordBranchId,RecordFYId FROM Common_PreClient
  WHERE Id=@Id
 DECLARE @LedgerId INT
 SET @LedgerId=IDENT_CURRENT('Accounts_Ledgers')

INSERT INTO Common_Client (Name,GroupId,ClientCode,LedgerId,PANNo,VATNo,TINNo,ServiceTaxNo,BranchName,Remarks
 ,InsertUserId,InsertDate,UpdateUserId,UpdateDate,IsActive,MaxInvoiceAge,GSTNo,GSTDate,CINNO,IECNo,Attachments
 ,OName,ODept,ODesignation,OMobileNo,OEmail,OAddress,InvoiceFormat,RecordBranchId,RecordFYId,CompanyName,CAddressWithPinCode
 ,AlternateName,MobileNo1,MobileNo2,PhoneNo,FaxNo,Email,GSTReturnFile,GSTLastMonthFile,CINDateIncorporation,TypeOfOrganization
 ,SSINumber,QualitySystemDetails,QualityCertificationDetails,QSEndDate,Commodity
 ,SACCode,RatingAgencyName,RatingAgencyRatting,ROCSearchReport,Authorized,PaidCapital,LoanAmount,LastABSDate,SPLastOneYear,NCLTReport
 ,PaymentTerms,CPAForPayment,ExceptedProfitabilityRatio,EPOutstandingVolume,ABVolumePerMonth,EMDBGSubmitted,AlternateOname
 ,OAccounts,OPhotoNo,OFax,BizOnlineOffline,CPRequestedByClients,ContractPeriod,BusinessByMarketingGuy)
 SELECT Name, GroupId, ClientCode, @LedgerId, PANNo, VATNo, TINNo, ServiceTaxNo, BranchName, Remarks
 , InsertUserId, GETDATE(), NULL, NULL, 1, 30, GSTNo, GSTDate, CINNO, IECNo, Attachments
 ,OName, ODept, ODesignation, OMobileNo, OEmail, OAddress, NULL,RecordBranchId,RecordFYId
 ,CompanyName,CAddressWithPinCode
 ,AlternateName,MobileNo1,MobileNo2,PhoneNo,FaxNo,Email,GSTReturnFile,GSTLastMonthFile,CINDateIncorporation,TypeOfOrganization
 ,SSINumber,QualitySystemDetails,QualityCertificationDetails,QSEndDate,Commodity
 ,SACCode,RatingAgencyName,RatingAgencyRatting,ROCSearchReport,Authorized,PaidCapital,LoanAmount,LastABSDate,SPLastOneYear,NCLTReport
 ,PaymentTerms,CPAForPayment,ExceptedProfitabilityRatio,EPOutstandingVolume,ABVolumePerMonth,EMDBGSubmitted,AlternateOname
 ,OAccounts,OPhotoNo,OFax,BizOnlineOffline,CPRequestedByClients,ContractPeriod,BusinessByMarketingGuy  FROM Common_PreClient
 WHERE Id=@Id
END
GO
/****** Object:  StoredProcedure [dbo].[sp_CreateNewVendorAfterApproval]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_CreateNewVendorAfterApproval](@Id INT)
AS BEGIN
 DECLARE @VendorName VARCHAR(50)=''
 SELECT @VendorName = VendorName FROM Common_PreVendor WHERE Id=@Id
 IF EXISTS (SELECT 1 FROM Common_Vendor WHERE VendorName=@VendorName)
  throw 50000, 'Client already exists', 1
 

INSERT INTO Common_Vendor (CompanyName,CAddressWithPinCode, VendorName,VendorCode,AlternateVName,MobileNo1,MobileNo2,PhoneNo,FaxNo
   ,Email,Address,StateCodeNo,BankName,BranchName,BankAddress,BankAccountNo,TypeOfAccount,IFSCCode,RTGSNo,LedgerId,PANNo,VATNo
   ,TINNo,ServiceTaxNo,GSTNo,RecordBranchId,RecordFYId,TDSType 
   ,SSINumber,QualitySystemDetails,QualityCertificationDetails,QSEndDate,Commodity,HSNCode)
 SELECT CompanyName,CAddressWithPinCode, VendorName,VendorCode,AlternateVName,MobileNo1,MobileNo2,PhoneNo,FaxNo
   ,Email,Address,StateCodeNo,BankName,BranchName,BankAddress,BankAccountNo,TypeOfAccount,IFSCCode,RTGSNo,LedgerId,PANNo,VATNo
   ,TINNo,ServiceTaxNo,GSTNo,RecordBranchId,RecordFYId ,TDSType
   ,SSINumber,QualitySystemDetails,QualityCertificationDetails,QSEndDate,Commodity,HSNCode
 FROM Common_PreVendor
 WHERE Id=@Id
END
GO
/****** Object:  StoredProcedure [dbo].[sp_DashbordChat]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROC [dbo].[sp_DashbordChat]
(
@Type INT
)
AS

BEGIN
 SELECT D.Message,D.UserId,D.InsertDate,U.Username,convert(char(5), D.InsertDate, 108) [MessageTime]  FROM DashbordChat D LEFT OUTER JOIN Users U ON U.UserId=D.UserId
  Order By D.InsertDate
		END
--exec sp_ToDoList @type=1
GO
/****** Object:  StoredProcedure [dbo].[sp_DeletePartyAccounts]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_DeletePartyAccounts](@PartyAccountId INT)
As
BEGIN

	DECLARE @ExistingACCount1 INT=0
	DECLARE @ExistingACCount2 INT=0
	
	SELECT @ExistingACCount1=COUNT(Id) from LoadingAdvanceBulkPaymentId WHERE LTRIM(RTRIM(BankACNo)) in(
	SELECT LTRIM(RTRIM(BankACNo)) FROM Common_PartyAccount
	WHERE Id=@PartyAccountId)

	SELECT @ExistingACCount2=COUNT(Id) from _TokenBulkPaymentId WHERE LTRIM(RTRIM(BankACNo)) in(
	SELECT LTRIM(RTRIM(BankACNo)) FROM Common_PartyAccount
	WHERE Id=@PartyAccountId)

	--DECLARE @ErrorInfo VARCHAR(100)
	--IF @ExistingACCount1 > 0
	--		THROW 50000, 'Cannot Be Delete or Update this accounts Number', 1
	--IF @ExistingACCount2 > 0
	--		THROW 50000, 'Cannot Be Delete or Update this accounts Number', 1
END
GO
/****** Object:  StoredProcedure [dbo].[sp_DeleteVoucherOfficeAdv]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[sp_DeleteVoucherOfficeAdv] 
@LoadingId int
AS BEGIN

DELETE FROM Accounts_VoucherTransaction WHERE 
VoucherId IN (SELECT V.Id FROM Accounts_Vouchers V 
INNER JOIN OfficeAdvance T ON CAST(T.ChallanNo as varchar(50))=V.ReferenceNo WHERE LoadingId=@LoadingId )

DELETE FROM Accounts_Vouchers where Id IN (SELECT V.Id FROM Accounts_Vouchers V 
INNER JOIN OfficeAdvance T ON CAST(T.ChallanNo as varchar(50))=V.ReferenceNo WHERE LoadingId=@LoadingId )

END
GO
/****** Object:  StoredProcedure [dbo].[sp_DeleteVoucherWithToken]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[sp_DeleteVoucherWithToken] 
@TokenId int
AS BEGIN

--IF EXISTS 
--(SELECT V.Id FROM Accounts_Vouchers V 
--INNER JOIN _TokenChallans T ON  CAST(T.ChallanNo as varchar(50))= V.ReferenceNo WHERE RefType=1 AND TokenId=@TokenId )
--THROW 50000, 'Please reject voucher associated' , 10

DELETE FROM Accounts_VoucherTransaction WHERE 
VoucherId IN (SELECT V.Id FROM Accounts_Vouchers V 
INNER JOIN _TokenChallans T ON  CAST(T.ChallanNo as varchar(50))=V.ReferenceNo WHERE RefType=1 AND TokenId=@TokenId )

DELETE FROM Accounts_Vouchers where Id IN (SELECT V.Id FROM Accounts_Vouchers V 
INNER JOIN _TokenChallans T ON  CAST(T.ChallanNo as varchar(50))=V.ReferenceNo WHERE RefType=1 AND TokenId=@TokenId )

END
GO
/****** Object:  StoredProcedure [dbo].[sp_detailreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_detailreport] 
@Type int = 0,
@WOId INT=NULL,
@JobId INT=NULL,
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckId INT = NULL,
@LoadingPoint  INT=NULL,
@UnloadingPoint INT=NULL,
@BrokerId INT = NULL,
@PAN varchar(20) = '',
@BranchId INT = NULL,
@ClientId INT = NULL,
@PumpId INT= NULL,
 @IsBilled INT=NULL,
 @PermitNo VARCHAR(10) = NULL,
@UnloadDateFrom VARCHAR(10)=NULL,
@UnloadDateTo VARCHAR(10)=NULL,
@PartyId INT=NULL,
@TruckSource INT=NULL,
@InvoiceId INT=NULL


--@TokenPaid INT = 0,
--@InvoiceBill INT = 0
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartDate AS varchar) + CAST(@EndDate AS varchar) + CAST(@TruckId AS varchar) + CAST(@LoadingPoint AS varchar) + CAST(@UnloadingPoint AS varchar) + CAST(@BrokerId AS varchar) + CAST(@PAN AS varchar)
 + CAST(@BranchId AS varchar) +CAST(@ClientId AS varchar)

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate varchar(10)=''
	DECLARE @FYEndDate varchar(10)=''
	SEleCT @FYStartDate=convert(varchar(10),Startdate,102), @FYEndDate=convert(varchar(10),EndDate,102) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartDate<>''
	BEGIN
		SET @FYStartDate=@StartDate
	END
	IF @EndDate<>''
	BEGIN
		SET @FYEndDate=@EndDate
	END

	--L.TotalFreight

		SELECT TOP 5000 L.Advance Cash, Case when LC.TotalHSD Is Null then L.HSDcost Else LC.TotalHSD end   HSDAmount,L.ChallanNoKey ,L.OwnerName,L.OwnerContact,L.OwnerPan,L.TruckNumber,
		      CONVERT(VARCHAR(10),L.LoadDate,103) LoadDate,L.NetWT,L.UnloadedNetWt,L.ClaimLoad,L.FreightRate,
			 -- CASE WHEN (L.NetWT< ISNULL(L.UnloadedNetWt,0)) THEN (L.NetWt *L.FreightRate)  ELSE (ISNULL(L.UnloadedNetWt,0) *L.FreightRate) END 
			 LC.TotalFreight ,CONVERT(VARCHAR(10),L.UnloadedDate, 103) UnloadedDate,u.Sector,y.EffectiveWt GuaranteeWT ,u.TotalAdvance, US.UserName UserName,
			 --,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
			--,p.PaymentMode,ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			--,IsSubmitted, IsApproved, BranchId PaidBranchId, FullName PaidByName
			ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN L.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN L.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END)-(COALESCE(L.TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-L.TotalAdvance),0) LoadingBalance,L.FreightRate Freight,L.Advance Cash,L.HSDcost HSDAmount,L.ChallanNoKey 
		      ,u.PumpName PumpNameAdvance,u.ClientName,LC.Tp as TP,0 as MemoNo,y.ChallanDeduction as Deduction
			, L.LoadDate LoadDateInDTFormat, L.ClaimLoad,CONVERT(VARCHAR(10),Y.PaidDate,103) PaidDate ,US1.UserName UserApproval ,AL.Address as ClientAddress,AL.State as ClientState,AL.PinCode as PinCode,
			LC.OtherExpenses OfficeAmount, TP.TPNo as PermitNo, TB.ChkNeftRefNo as ChequeNo ,Y.TdsAmount ,Y.ShortageWt ,Y.Penalty AS Shortage ,LC.CommAmount,CP.PartyName as BrokerName ,LC.GPSAmount ,LC.OnlineRegAmount ,Y.NetPayable ,Y.PaidAmount ,T.ReceivedOn
			,L.TruckSource, ISNULL(I.InvoiceNo,'') InvoiceNo
		 FROM vw_ReportLoadingChallanReport L
		LEFT OUTER JOIN vw_unloadingchallandetails u ON L.Id=u.LoadingId 
		--LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		--LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails US ON US.UserId=L.InsertUserId
		LEFT OUTER JOIN LoadingChallan LC ON LC.ChallanNo = L.ChallanNo
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=LC.ChallanNO
		Left Outer Join _invoice I ON I.Id = IC.InvoiceId
	LEFT OUTER JOIN _TPDetails TP ON TP.Id = LC.StoId
		LEFT OUTER JOIN vw_userdetails US1 ON US1.UserId=L.UpdateUserId
		LEFT OUTER JOIN Payment Y ON Y.LoadingId=LC.Id
		 Left Outer Join Common_Client C ON C.Id= L.ClientId
         Left Outer Join Accounts_Ledgers AL ON C.LedgerId=AL.Id
		 Left outer Join _TokenChallans TC on L.ChallanNo = TC.ChallanNo 
		  Left outer Join _Token T on T.Id = TC.TokenId
		   Left outer Join _TokenBulkPaymentId TBP on T.Id = TBP.TokenId
		    Left outer Join _TokenBulkPayment TB on TB.Id = TBP.BulkPaymentId
			Left outer join Common_Parties CP ON CP.Id = LC.BrokerId 
		--LEFT OUTER JOIN (Select  MemoNo, LoadingId from LoadingAdvance  Where AdvanceType = 2) AS A ON LC.Id =A.LoadingId		
		
		--LEFT OUTER JOIN DB_PANInfo PAN ON PAN.PANNo=u.OwnerPAN
		--LEFT OUTER JOIN LoadingPoints LP ON LP.Loading=u.loadingpoint
		--LEFT OUTER JOIN UnloadingPoints ULP ON ULP.Unloading=u.unloadingpoint
		WHERE -- u.LoadingId IN (SELECT Id from LoadingChallan where LoadDate BetWEEN @FYStartDate AND @FYEndDate) AND
		(@WOId IS NULL OR U.WOId=@WOId) AND
		(@JobId IS NULL OR U.JobId=@JobId) AND
		(@ChallanNo=0 OR u.ChallanNo=@ChallanNo) AND
		(@TruckId IS NULL  OR U.TruckId=@TruckId) AND
		(@LoadingPoint IS NULL  OR L.LoadingPointId=@LoadingPoint) AND
		(@UnloadingPoint IS NULL  OR  L.UnLoadingPointId=@UnloadingPoint) AND
		(@BrokerId IS NULL  OR u.LBrokerId=@BrokerId) AND
		(@ClientId IS NULL  OR U.JobClientId=@ClientId) AND
		(@BranchId IS NULL  OR u.JobExecutingBranchId=@BranchId) AND
		(@StartDate IS NULL OR CONVERT(date, L.loaddate, 103)>=CONVERT(date, @StartDate,102)) AND
		(@EndDate IS NULL  OR CONVERT(date, L.loaddate, 103)<=CONVERT(date, @EndDate,102)) And
	    (@PartyId IS NULL OR LC.BrokerId = @PartyId)  AND
		(@InvoiceId IS NULL OR I.Id = @InvoiceId) AND
		--(@UnloadDateFrom IS NULL OR CONVERT(date, T.ReceivedOn, 102)>=CONVERT(date, @UnloadDateFrom,102)) AND
		--(@UnloadDateTo IS NULL  OR CONVERT(date, T.ReceivedOn, 102)<=CONVERT(date, @UnloadDateTo,102)) And
		--ReceivedOn >= @UnloadDateFrom AND ReceivedOn<= @UnloadDateTo AND
	    (@PumpId IS NULL OR u.PumpId = @PumpId) AND
		(@PermitNo IS NULL  OR TP.TPNo=@PermitNo)
		AND (@IsBilled IS NULL OR (@IsBilled=1 AND IC.ChallanNo IS NOT NULL) OR (@IsBilled=0 AND IC.ChallanNo IS NULL))
			 AND (@TruckSource IS NULL OR (@TruckSource=1 AND L.TruckSource='MARKET') OR (@TruckSource=0 AND L.TruckSource='ASSOCIATION'))
	   -- AND (@UnloadDateFrom IS NULL OR CONVERT(date, L.UnloadedDate, 103)>= @UnloadDateFrom)
       -- AND (@UnloadDateTo IS NULL OR CONVERT(date, L.UnloadedDate, 102) <= @UnloadDateTo)
		--A.AdvanceType =2
		--((@TokenPaid=0) OR (@TokenPaid=1 AND p.id IS NOT NULL) OR (@TokenPaid=2 AND p.Id IS NULL)) AND 
		--((@InvoiceBill=0) OR (@InvoiceBill=1 AND IC.id IS NOT NULL) OR (@InvoiceBill=2 AND IC.Id IS NULL)) 
		ORDER BY CONVERT(SMALLDATETIME,L.loaddate,103) asc
		
END



GO
/****** Object:  StoredProcedure [dbo].[sp_detailreport1]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--exec sp_detailreport1 @UnloadFrom = '2021-04-01' ,@UnloadTo = '2021-05-01' ,@IsPayment =1


CREATE PROCEDURE [dbo].[sp_detailreport1] 
@Type int = 0,
@WOId INT=NULL,
@JobId INT=NULL,
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckId INT = NULL,
@LoadingPoint  INT=NULL,
@UnloadingPoint INT=NULL,
@BrokerId INT = NULL,
@PAN varchar(20) = '',
@BranchId INT = NULL,
@ClientId INT = NULL,
@PumpId INT= NULL,
 @IsBilled INT=NULL,
 @PermitNo VARCHAR(10) = NULL,
@UnloadDateFrom VARCHAR(10)=NULL,
@UnloadDateTo VARCHAR(10)=NULL,
@TokenNo VARCHAR(25) =NULL,
@UnloadFrom VARCHAR(10)=NULL,
@UnloadTo VARCHAR(10)=NULL,
@IsPayment INT=NULL,
@PartyId INT=NULL

AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartDate AS varchar) + CAST(@EndDate AS varchar) + CAST(@TruckId AS varchar) + CAST(@LoadingPoint AS varchar) + CAST(@UnloadingPoint AS varchar) + CAST(@BrokerId AS varchar) + CAST(@PAN AS varchar)
 + CAST(@BranchId AS varchar) +CAST(@ClientId AS varchar)

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate varchar(10)=''
	DECLARE @FYEndDate varchar(10)=''
	SEleCT @FYStartDate=convert(varchar(10),Startdate,102), @FYEndDate=convert(varchar(10),EndDate,102) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartDate<>''
	BEGIN
		SET @FYStartDate=@StartDate
	END
	IF @EndDate<>''
	BEGIN
		SET @FYEndDate=@EndDate
	END

	--L.TotalFreight

		SELECT TOP 5000 L.Advance Cash, Case when LC.TotalHSD Is Null then L.HSDcost Else LC.TotalHSD end   HSDAmount,L.ChallanNoKey ,L.OwnerName,L.OwnerContact,L.OwnerPan,L.TruckNumber,
		      CONVERT(VARCHAR(10),L.LoadDate,103) LoadDate,L.NetWT,L.UnloadedNetWt,L.ClaimLoad,L.FreightRate,
			  CASE WHEN (L.NetWT< ISNULL(L.UnloadedNetWt,0)) THEN (L.NetWt *L.FreightRate)  ELSE (ISNULL(L.UnloadedNetWt,0) *L.FreightRate) END TotalFreight ,CONVERT(VARCHAR(10),L.UnloadedDate, 103) UnloadedDate,u.Sector,y.EffectiveWt GuaranteeWT ,u.TotalAdvance, US.UserName UserName,
			ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN L.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN L.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END)-(COALESCE(L.TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-L.TotalAdvance),0) LoadingBalance,L.FreightRate Freight,L.Advance Cash,L.HSDcost HSDAmount,L.ChallanNoKey 
		      ,u.PumpName PumpNameAdvance,u.ClientName,LC.Tp as TP,0 as MemoNo,y.ChallanDeduction as Deduction
			, L.LoadDate LoadDateInDTFormat, L.ClaimLoad,CONVERT(VARCHAR(10),Y.PaidDate,103) PaidDate ,US1.UserName UserApproval ,AL.Address as ClientAddress,AL.State as ClientState,AL.PinCode as PinCode,
			LC.OtherExpenses OfficeAmount, TP.TPNo as PermitNo, TB.ChkNeftRefNo as ChequeNo ,Y.TdsAmount ,Y.ShortageWt ,Y.Penalty AS Shortage ,LC.CommAmount ,LC.GPSAmount ,LC.OnlineRegAmount ,Y.NetPayable ,Y.PaidAmount ,T.ReceivedOn ,T.OtherDeduction,
			ISNULL(X.Amount,0) AS Bank ,ISNULL(Z.Amount,0) AS SecondHSD ,convert(VARCHAR(10),T.ReceivedOn ,103)  TokenDate
			, (ISNULL(LC.OtherExpenses,0) + ISNULL(LC.CommAmount,0) + ISNULL(LC.GPSAmount,0) + ISNULL(LC.OnlineRegAmount,0) + ISNULL(L.Advance,0) + ISNULL(L.HSDcost,0) + ISNULL(X.Amount,0) + ISNULL(Z.Amount,0) + ISNULL(Y.TdsAmount,0) + ISNULL(Y.Penalty,0)) as TotalDeductions ,Y.PaidOn
			,T.TokenNo ,convert(int, Y.PaidDate) PaidDate--,PD.LoadingId 
		 FROM vw_ReportLoadingChallanReport L
		LEFT OUTER JOIN vw_unloadingchallandetails u ON L.Id=u.LoadingId 
		LEFT OUTER JOIN vw_userdetails US ON US.UserId=L.InsertUserId
		LEFT OUTER JOIN LoadingChallan LC ON LC.ChallanNo = L.ChallanNo
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=LC.ChallanNO
	    LEFT OUTER JOIN _TPDetails TP ON TP.Id = LC.STOId
		LEFT OUTER JOIN vw_userdetails US1 ON US1.UserId=L.UpdateUserId
		LEFT OUTER JOIN Payment Y ON Y.LoadingId=LC.Id
		Left Outer Join Common_Client C ON C.Id= L.ClientId
        Left Outer Join Accounts_Ledgers AL ON C.LedgerId=AL.Id
	    Left outer Join _TokenChallans TC on L.ChallanNo = TC.ChallanNo 
		Left outer Join _Token T on T.Id = TC.TokenId
		Left outer Join _TokenBulkPaymentId TBP on T.Id = TBP.TokenId
		Left outer Join _TokenBulkPayment TB on TB.Id = TBP.BulkPaymentId
		LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount from LoadingAdvance  Where AdvanceType = 1 and PaymentMode = 3) AS X ON LC.Id =X.LoadingId
        LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount ,A.PumpId from LoadingAdvance A
        LEFT OUTER JOIN LoadingChallan L On L.Id = A.LoadingId Where AdvanceType = 2 and L.PumpId<>A.PumpId) AS Z ON LC.Id =Z.LoadingId
	   -- LEFT OUTER JOIN (Select LoadingId, ISNULL(PaidOn,0) Amount from Payment  Where PaidDate is Not Null) AS PD ON LC.Id =PD.LoadingId

		WHERE 
		(@WOId IS NULL OR U.WOId=@WOId) AND
		(@JobId IS NULL OR U.JobId=@JobId) AND
		(@ChallanNo=0 OR u.ChallanNo=@ChallanNo) AND
		(@TruckId IS NULL  OR U.TruckId=@TruckId) AND
		(@LoadingPoint IS NULL  OR L.LoadingPointId=@LoadingPoint) AND
		(@UnloadingPoint IS NULL  OR  L.UnLoadingPointId=@UnloadingPoint) AND
		(@BrokerId IS NULL  OR u.LBrokerId=@BrokerId) AND
		(@ClientId IS NULL  OR U.JobClientId=@ClientId) AND
		(@BranchId IS NULL  OR u.JobExecutingBranchId=@BranchId) AND
		(@StartDate IS NULL OR CONVERT(date, T.ReceivedOn, 103)>=CONVERT(date, @StartDate,102)) AND
		(@EndDate IS NULL  OR CONVERT(date, T.ReceivedOn, 103)<=CONVERT(date, @EndDate,102)) And
		(@UnloadDateFrom IS NULL OR CONVERT(date, Y.PaidDate, 103)>=CONVERT(date, @UnloadDateFrom,102)) AND
		(@UnloadDateTo IS NULL  OR CONVERT(date, Y.PaidDate, 103)<=CONVERT(date, @UnloadDateTo,102)) And
		(@UnloadFrom IS NULL OR CONVERT(date, u.UnloadedDate, 103)>=CONVERT(date, @UnloadFrom,102)) AND
		(@UnloadTo IS NULL  OR CONVERT(date, u.UnloadedDate, 103)<=CONVERT(date, @UnloadTo,102)) And
	    (@PumpId IS NULL OR u.PumpId = @PumpId) AND
		(@TokenNo  IS NULL  OR T.TokenNo=@TokenNo)  AND 
		(@PermitNo IS NULL  OR TP.TPNo=@PermitNo)
		AND (@IsBilled IS NULL OR (@IsBilled=1 AND IC.ChallanNo IS NOT NULL) OR (@IsBilled=0 AND IC.ChallanNo IS NULL))
		 AND (@IsPayment IS NULL OR (@IsPayment=1 AND PaidDate IS NOT NULL) OR (@IsPayment=0 AND PaidDate IS NULL))
		 AND (@PartyId IS NULL OR LC.OwnerId = @PartyId) 
		order by T.TokenNo asc
END



GO
/****** Object:  StoredProcedure [dbo].[sp_detailreportnew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- exec [sp_detailreportnew] @TruckNo='OD05AC7721'

CREATE PROCEDURE [dbo].[sp_detailreportnew]
@Type int = 0,
@JobNo varchar(50) = '',
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = '',
@EndDate VARCHAR(10) = '',
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = '',
@BrokerName varchar(100) = '',
@PAN varchar(20) = '',
@BranchName varchar(100) = '',
@ClientName varchar(100) = ''
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @JobNo + @StartDate + @EndDate + @TruckNo + @LoadingPoint + @UnloadingPoint + @BrokerName + @PAN
 + @BranchName + @ClientName

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate varchar(10)
	DECLARE @FYEndDate varchar(10)
	SEleCT @FYStartDate=convert(varchar(10),Startdate,103), @FYEndDate=convert(varchar(10),EndDate,103) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartDate<>''
	BEGIN
		SET @FYStartDate=@StartDate
	END
	IF @EndDate<>''
	BEGIN
		SET @FYEndDate=@EndDate
	END

	SELECT L.* INTO #LoadAdvance FROM LoadingAdvance L
		INNER JOIN LoadingChallan C ON C.Id=L.LoadingId
		WHERE	CONVERT(DATE,LoadDate,103) BetWEEN CONVERT(DATE,@FYStartDate,103) AND CONVERT(DATE,@FYEndDate,103)
	;WITH LoadingAdv AS (
		SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM #LoadAdvance L
			LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
		UNION 
		SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM #LoadAdvance L GROUP BY L.LoadingId
	) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv1
		FROM LoadingAdv 
			PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

		SELECT A.LoadingId, B.PumpName PumpNameAdvance INTO #adv2 From #LoadAdvance A 
			LEFT OUTER JOIN PumpName B ON B.Id=A.PumpId
		WHERE PumpId IS NOT NULL 

		SELECT TOP 5000 u.*, t.InvoiceNo as Invoice, t.billstatus as billstatus, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId
				,ChallanDeduction,TollGate,EffectiveWt,ShortageWt
			,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
			,p.PaymentMode,ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE '0.00' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-TotalAdvance),0) LoadingBalance
			,IsNull(IC.BillingRate,u.ClientRate) as ClientRate, CONVERT(VARCHAR(10),t.InvoiceDate,103) InvoiceDate
			,Round(CONVERT(DECIMAL(18,2),NetWt * IsNull(IC.BillingRate,u.ClientRate)),0) as BillAmount
			,Cash, Cheque, BulkTransfer, Cash+Cheque+BulkTransfer+FuelCost as LoadingAdvance, FuelCost, PumpNameAdvance
			,CASE WHEN PAN.PANNo IS NULL THEN 'NOTCHK- '+u.OwnerPAN WHEN u.OwnerName=PAN.NameInPAN AND PAN.PANStatus='E' THEN 'CORRECT-'+u.OwnerPAN ELSE 'ERROR - '+u.OwnerPAN END PanCardStatus
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN #adv1 A ON A.LoadingId=u.LoadingId
		LEFT OUTER JOIN #adv2 B ON B.LoadingId=u.LoadingId
		LEFT OUTER JOIN DB_PANInfo PAN ON PAN.PANNo=u.OwnerPAN
		WHERE -- u.LoadingId IN (SELECT Id from LoadingChallan where LoadDate BetWEEN @FYStartDate AND @FYEndDate) AND
		(@JobNo='' OR JobNo=@JobNo) AND
		(@ChallanNo=0 OR u.ChallanNo=@ChallanNo) AND
		(@TruckNo='' OR TruckNumber=@TruckNo) AND
		(@LoadingPoint='' OR LoadingPoint=@LoadingPoint) AND
		(@UnloadingPoint='' OR UnloadingPoint=@UnloadingPoint) AND
		(@BrokerName='' OR BrokerName=@BrokerName) AND
		(@ClientName='' OR ClientName=@ClientName) AND
		(@BranchName='' OR ExecutingBranchName=@BranchName) AND
		(@StartDate ='' OR CONVERT(date, loaddate, 103)>=CONVERT(date, @StartDate,103)) AND
		(@EndDate =''  OR CONVERT(date, loaddate, 103)<=CONVERT(date, @EndDate,103))
		 
		ORDER BY CONVERT(SMALLDATETIME,loaddate,103) asc
		
END


--EXEC sp_detailreportnew  @TruckNo='OD14A6287'
GO
/****** Object:  StoredProcedure [dbo].[sp_freightrules]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_freightrules] (
@Type INT=0,
@Id INT=0,
@JobId INT =0,
@LoadDate VARCHAR(15)=null,
@FromDate SMALLDATETIME=null,
@ToDate SMALLDATETIME=null,
@AssociationFreight DECIMAL(18,2)=0.00,
@MarketFreight DECIMAL(18,2)=0.00,
@FuelRate DECIMAL(18,2)=0.00,
@CreatedBy INT=0,
@TruckId INT=0,
@OwnerId INT=0

)
AS
BEGIN
	IF(@Type=1)
	BEGIN
		SELECT 'E'
	END
	IF(@Type=2)
		THROW 50000, 'Showing all Frieght Rules in [sp_freightrules]',1

	IF(@Type=3)
		THROW 50000, 'Delete not allowed in [sp_freightrules]',1

	IF(@Type=4)
	BEGIN 
        SELECT Top 1 CONCAT(IsNULL(R.FreightRate,0),'#$#', IsNULL(R.FreightRate,0))  FROM _JobFrieghtAssRules R 
		WHERE JobId=@JobId AND (CONVERT(SMALLDATETIME, @LoadDate,103) BETWEEN DateFrom AND  IsNull(DateTo,'2555-01-01'))
	END
	IF(@Type=5)
	BEGIN 
        SELECT Top 1 CONCAT(IsNULL(R.FreightRate,0),'#$#',CASE WHEN R.AllowToOverride=0 THEN IsNULL(R.FreightRate,0) ELSE IsNULL(R.FreightRate,0)+IsNULL(R.FreightTolerance,0) END) FROM _JobFreightMktRules R 
		WHERE JobId=@JobId AND (CONVERT(SMALLDATETIME, @LoadDate,103) BETWEEN DateFrom AND  IsNull(DateTo,'2555-01-01'))
	END
	IF(@Type=6) -- PartyId
	BEGIN
		
       	Select Min(FreightRate) as SpecialRate
		  from _JobFrieghtSpecialRules sr
		  LEFT OUTER JOIN
		  _JobFreightSpecialParty sp ON sp.JobSpecialFreightId=sr.Id
		  LEFT OUTER JOIN
		  _JobFreightSpecialTruck st ON st.JobSpecialFreightId=sr.Id
				Where sr.JobId=@JobId AND sr.LoadDate=CONVERT(SMALLDATETIME, @LoadDate,103) 
		  AND (sp.PartyId=@OwnerId OR st.TruckId = @TruckId)
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetInvoiceBalance]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[sp_GetInvoiceBalance]
(

@ClientId INT = 0	

) 
AS
BEGIN
	
	
SELECT InvoiceId ,SUM(ReceivedAmount) + SUM(ISNULL(TDSAmount, 0)) + SUM(ISNULL(ShortageDeduction, 0)) + SUM(ISNULL(MoistureDeduction, 0))
	                        + SUM(ISNULL(OtherDeduction, 0)) + SUM(ISNULL(HandlingReceived, 0)) as RcvAmount
	INTO #adv25  FROM _InvoicePayment 
	WHERE InvoiceId IN (select I.Id AS InvoiceId from _Invoice I inner join vw_jobdetails V on I.JobId=V.JobId where I.ClientId=@ClientId)
	GROUP BY InvoiceId
	
	
	  SELECT I.Id, (SUM(I.TotalInvoiceAmount) + IsNull(Sum(H.TaxAmount),0.0)  + IsNull(Sum(D.InvoiceTaxAmount * D.AddTaxInAmount), 0.0))  as TotalInvoiceAmount
     INTO #adv26    FROM vw_InvoiceAmount  I
        LEFT OUTER JOIN
        (SELECT InvoiceId, SUM(TaxAmount) TaxAmount FROM vw_InvoiceTaxHandlingDetails GROUP BY InvoiceId) H ON H.InvoiceId = I.Id
        LEFT OUTER JOIN 
        vw_InvoiceDetails D ON D.InvoiceId = I.Id
        where I.Id In(select I.Id AS InvoiceId from _Invoice I inner join vw_jobdetails V on I.JobId=V.JobId where I.ClientId=@ClientId)
        GROUP BY  I.Id	

		Select (ISNULL(B.TotalInvoiceAmount,0)-ISNULL(A.RcvAmount,0)) Balance,B.Id into #AB27 From #adv25  A
		right Outer JOin #adv26 B On  B.Id=A.InvoiceId
	
	Select D.Id InvoiceId  From #AB27  D where D.Balance <>0

	
END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetLoadingInstantDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[sp_GetLoadingInstantDetails](
 @InstanceDetailId INT				 = NULL
,@LoadingId INT						 = NULL
,@TruckNo VARCHAR(50)				 = NULL
,@TruckSource VARCHAR(50)			 = NULL
,@ChallanNo INT						 = NULL
,@TP VARCHAR(50)					 = NULL
,@LRNo VARCHAR(50)					 = NULL
,@GrossWT DECIMAL(18,3)				 = NULL
,@TareWT DECIMAL(18,3)				 = NULL
,@NetWT DECIMAL(18,3)				 = NULL
,@HSD DECIMAL(18,3)					 = NULL
,@PumpNameId  INT					 = NULL
,@AssociationId INT					 = NULL
,@Welfare DECIMAL(18,2)				 = NULL
,@UnloadDate DateTime				 = NULL
,@UnloadWt Decimal(18,3)			 = NULL
,@UnloadRemarks Varchar(1000)		 = NULL
,@WheelerId INT                      = NULL
)
As
Begin
	DECLARE @JobId INT=0
	DECLARE @LoadDate SMALLDATETIME=null
	DECLARE @FreightRate DECIMAL(18,2)=0.00 
	DECLARE @LoadType VARCHAR(50)='' 
	DECLARE @TruckId INT
	DECLARE @DriverId INT
	DECLARE @TruckOwnerId INT = NULL
	DECLARE @Tyre INT = 0
	DECLARE @ErrorMsg VARCHAR(5000) = NULL
	DECLARE @IsDuplcate INT = 0
	Declare @PaymentLedger INT = NULL
	Declare @RateAllowToModify Bit = 0
	Declare @PaymentLoadingId INT = 0
	--IF @ErrorMsg IS NULL AND @ChallanNo IS NULL
		--SET @ErrorMsg = 'Challan No is mandetory.'
	IF @ErrorMsg IS NULL AND LEN(ISNULL(@TruckSource,'')) = 0 
		SET @ErrorMsg = 'Truck Source is mandetory.'
	IF  @ErrorMsg IS NULL AND LEN(ISNULL(@TruckNo,'')) = 0
		SET @ErrorMsg = 'TruckNo is mandetory.'
	IF  @ErrorMsg IS NULL AND (@NetWT IS NULL OR @NetWT = 0)
		SET @ErrorMsg =  'NetWT is mandetory.'
	--IF  @ErrorMsg IS NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
		--SET @ErrorMsg = 'ChallanNo is mandetory.'
	IF  @ErrorMsg IS NULL AND @HSD > 0.0 AND @PumpNameId IS NULL
		SET @ErrorMsg = 'Select Pump from the list.'
	--IF  @ErrorMsg IS NULL AND @TruckId IS NULL AND IsNull(@TareWT, 0.0) = 0.0
	--	SET @ErrorMsg =  'Truck No does not exist. Provide TareWt or create truck manually.'
	IF  @ErrorMsg IS NULL AND @GrossWT IS NOT NULL AND @TareWT IS NOT NULL AND (@GrossWT - @TareWT) <> @NetWT
		SET @ErrorMsg =  'Subtraction of Gross Wt and Tare Wt is not equal to NetWt.'
	IF  @ErrorMsg IS NULL AND @TruckSource = 'ASSOCIATION'  AND @AssociationId IS NULL 
		SET @ErrorMsg =  'Select Association Name for Association Truck.'

		SELECT @PaymentLoadingId=LoadingId FROM Payment WHERE LoadingId=@LoadingId
	IF  @PaymentLoadingId<>0
	   THROW 50000, 'Can Not Change, Token is Created for This Challan', 1

	IF  @ErrorMsg IS NULL 
		Select @ErrorMsg = 'Duplicate TP No. ' + Convert(Varchar(50), @TP) + ',  JobNo - ' + Concat(J.JobNo, ', ', Convert(Varchar(50), LoadDate, 103)) 
		from LoadingChallan L
		Inner Join vw_jobdetails J On J.JobId = L.JobId
		WHERE (@LoadingId IS NULL OR L.Id <> @LoadingId) And TP = @TP
	IF  @ErrorMsg IS NULL 
		Select @ErrorMsg = 'Duplicate Challan No. ' + Convert(Varchar(50), @ChallanNo) + ',  JobNo - ' + Concat(J.JobNo, ', ', Convert(Varchar(50), LoadDate, 103)) 
		from LoadingChallan L
		Inner Join vw_jobdetails J On J.JobId = L.JobId
		WHERE  (@LoadingId IS NULL OR L.Id <> @LoadingId) And ChallanNo = @ChallanNo
	IF  @ErrorMsg IS NOT NULL
	BEGIN
		if (@ChallanNo IS NOT NULL)
		BEGIN
			SET @ErrorMsg = 'Challan No ' + Convert(Varchar(50),@ChallanNo ) + ': ' + @ErrorMsg;
		END
		IF 1=1
			THROW 50000, @ErrorMsg, 1
	END
	IF  @TruckSource = 'MARKET' 
		SET @AssociationId = NULL 
	IF @HSD = 0.0
		SET @PumpNameId = NULL
	
	SELECT @TruckId = Id, @TruckOwnerId = IsNull(V.[Owner],1) From Fleet_Vehicle V Where VehicleNo = @TruckNo
	IF @TruckId IS NULL
	BEGIN
		Set @TruckOwnerId = 1
		SELECT @Tyre = Min(Id) From Fleet_TyreNos Where @NetWT between MinTareWt AND MaxTareWt
		--SELECT @Tyre = Max(Id) From Fleet_TyreNos Where @TareWT >= MinTareWt And @TareWT <= MaxTareWt
		--IF @Tyre IS NULL
		--	THROW 50000, 'Could not find Total Tyres in truck. Update TareWt in Tyre Master of Feet Module.', 1
		Insert Into Fleet_Vehicle (VehicleNo, TotalTyers, [Owner], InsertUserId, InsertDate, Remarks) Values (@TruckNo, @Tyre, @TruckOwnerId, 3105, GETDATE(), 'Auto Created by system in bulk entry.')
		SELECT @TruckId = Id, @TruckOwnerId = V.[Owner] From Fleet_Vehicle V Where VehicleNo = @TruckNo

		
		--Declare @TPD varchar(20) = ''
	  Insert Into Offers (TpNo) Values (@Tp) 


		DECLARE @PermitId INT = NULL


		SELECT @PermitId = V.Id From _TPDetails V  Left outer join LoadingChallan L ON L.JobId = V.JobId Where ChallanNo = @ChallanNo
		--if(1=1)
		--   throw 50000, @TruckId ,1


	END
	Select @JobId = J.Id,  @LoadDate = I.LoadDate, @PaymentLedger = I.PaymentLedger
	From _InstantLoadingDetails ID 
	Left Join _InstantLoading I On I.Id = Id.InstantId
	Left Join _Job J On J.Id = I.JobId
	Where ID.Id = @InstanceDetailId
	IF @FreightRate = 0.0 AND @TruckId IS NOT NULL
		Select @FreightRate = IsNull(FreightRate, 0.0) From _JobFrieghtSpecialRules JS
		INNER JOIN _JobFreightSpecialTruck  ST On ST.JobSpecialFreightId = JS.Id
		Where JS.JobId = @JobId And JS.LoadDate = @LoadDate AND ST.TruckId = @TruckId
	IF @FreightRate = 0.0 AND @TruckOwnerId IS NOT NULL
		Select @FreightRate = IsNull(FreightRate, 0.0) From _JobFrieghtSpecialRules JS
		INNER JOIN _JobFreightSpecialParty  SP On SP.JobSpecialFreightId = JS.Id
		Where JS.JobId = @JobId And JS.LoadDate = @LoadDate AND SP.PartyId = @TruckOwnerId
	IF @FreightRate = 0.0 AND @TruckSource = 'MARKET'
		Select @FreightRate = FreightRate, @RateAllowToModify=AllowToOverride From _JobFreightMktRules Where JobId = @JobId And @LoadDate >= DateFrom And @LoadDate <= IsNull(DateTo,'2555-01-01') 
	
	IF @FreightRate = 0.0 AND @TruckSource = 'ASSOCIATION'
		Select @FreightRate = FreightRate From _JobFrieghtAssRules Where JobId = @JobId And @LoadDate >= DateFrom And @LoadDate <= IsNull(DateTo,'2555-01-01') 
	
	Select @JobId as JobId, @LoadDate as LoadDate, @PaymentLedger as PaymentLedger, @TruckId as TruckId, @FreightRate as FreightRate, 
	@TruckOwnerId as TruckOwnerId, @RateAllowToModify as RateAllowToModify, @PermitId



END
GO
/****** Object:  StoredProcedure [dbo].[Sp_GetOnAccPayment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Sp_GetOnAccPayment](
@FromDate DATE,
@ToDate DATE,
@ClientId INT  = NULL,
@BranchId INT  = NULL
)
As
Begin
	Select AC.ClientId, AC.BranchId, B.Name as BranchName, C.Name as ClientName, SUM(Amount)  as OnAccAmount
	From [Accounts_OnAccPayment] AC 
	Inner Join Accounts_Vouchers V On V.Id = AC.VoucherId
	Left Join Common_Client C On C.Id = AC.ClientId
	Left Join Common_Branch B On B.Id = AC.BranchId
	Where 
		(@ClientId IS NULL OR AC.ClientId = @ClientId)
	AND (@BranchId IS NULL OR AC.BranchId = @BranchId)
	AND V.VoucherDate >= @FromDate 
	And VoucherDate <= @ToDate
	AND V.[Status] in(2,4)
	AND AC.Id Not in (Select OnAccId From _InvoiceBulkPaymentOnAcc)
	GROUP BY AC.ClientId, AC.BranchId,  B.Name, C.Name
End

GO
/****** Object:  StoredProcedure [dbo].[sp_GetShoratgeWaiverChallanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[sp_GetShoratgeWaiverChallanDetails](@ChallanNo INT, @RequestDate Date)
AS
Begin 
	Declare @PaymentId INT
	Declare @OwnerId INT
	Declare @TotalWaiver INT
	Declare @WaiverRequestId INT

	Select @PaymentId = PaymentId, @OwnerId = P.LOwnerId from vw_paymentchallandetails P Where ChallanNo = @ChallanNo
	Select @WaiverRequestId = Id From _ShoratgeWaiver Where PaymentId = @PaymentId
	IF @WaiverRequestId IS NOT NULL
		THROW 50000, 'Waiver request for this challan already exist.', 16

	Select @TotalWaiver = Sum(RequestWaiverWt) From _ShoratgeWaiver W
	Inner Join vw_paymentchallandetails P On P.PaymentId = W.PaymentId
	Where W.[Status] Not in (5) And P.LOwnerId = @OwnerId



	Select PaymentId, JobNo, JobId, TruckNumber, OwnerName, OwnerPAN, Sector, Convert(Date, LoadDate, 103) as LoadingDate,  
	NetWT as LoadWt, Convert(Date, UnloadedDate, 103) as UnloadingDate, UnloadedNetWt as UnloadWt, IsNull(PenaltyRate,0.0) as PenaltyRate,
	ShortageWt as TotalShortage, (IsNull(ShortageWt,0.0) - IsNull(ShortagePenaltyWt, 0.0)) as ShortagePassingWt, 
	IsNull(ShortagePenaltyWt, 0.0) as ShortagePenaltyWt, Penalty, @TotalWaiver as TotalWaiver
	from vw_paymentchallandetails Where PaymentId = @PaymentId
End

GO
/****** Object:  StoredProcedure [dbo].[sp_i3MSGetLoadingCount]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_i3MSGetLoadingCount] (@DateFrom Date, @DateTo Date)
As
Begin
	Select TranspoterName, CONVERT(date,DeparatureDate) as LoadDate,  Count(*) Total
	,Sum(IsNull(Convert(Decimal(18,2), MineralWtinMT), 0.0)) as LoadWt from vw_i3MSAllData
	Where Len(IsNull(TranspoterName,'')) > 0 ANd DeparatureDate >= @DateFrom AND DeparatureDate <= DateAdd(Day, 1, @DateTo)
	Group BY TranspoterName, CONVERT(date,DeparatureDate)
	Order By TranspoterName, CONVERT(date,DeparatureDate)
END

GO
/****** Object:  StoredProcedure [dbo].[sp_i3MSMiningreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_i3MSMiningreport]

@StartPaidDate DATE = NULL,
@EndPaidDate DATE = NULL

AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@StartPaidDate AS varchar) + CAST(@EndPaidDate AS varchar) 

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	CREATE TABLE #MonthDate(dateinfo date)

	DECLARE @monthId INT =MONTH(CONVERT(DATE, @StartPaidDate,102))
	DECLARE @year INT =Year(CONVERT(DATE, @StartPaidDate,102)) 

	DECLARE @StartDate DATE=CAST(@year AS VARCHAR)+'-'+CAST(@MonthId AS VARCHAR)+'-01'
	DECLARE @newmonthid int=@monthid

	WHILE(@monthId=@newmonthid)
	BEGIN
		INSERT INTO #MonthDate(dateinfo)
			SELECT @StartDate

		Set @StartDate=DATEADD(day,1,@StartDate)
		SET @newmonthid=Month(@StartDate)
	END
	
	SELECT 
	C.Name,  FORMAT(DM.dateinfo,'dd') LoadDate, ISNULL(CL.LoadingPointName,'--Nill--') Source, ISNULL(C.Name +CHAR(10)+(CL.UnloadingPointName),'--N/A--')AS Destination, SUM(L.NEtWt) ReceivedMineral, ISNULL(M.MaterialName,'--Nill	--') MaterialName,MAX(L.TP) TP,FORMAT(DM.dateinfo,'MMMM yyyy') Month  FROM #MonthDate DM
	LEFT OUTER JOIN vw_LoadingCHallan L ON CONVERT(DATE,L.LoadDate,103)=CONVERT(DATE,DM.dateinfo,102)
	LEFT OUTER JOIN _WorkOrderItems S on S.Id=L.JobId 
	LEFT OUTER JOIN _WorkOrder WO on WO.Id=S.OrderId 
	LEFT OUTER JOIN vw_ReportLoadingChallanReport CL ON CL.ChallanNo = L.ChallanNo
	LEFT OUTER JOIN Materials M on M.Id=S.Material
	LEFT OUTER JOIN Common_Client C ON C.Id = CL.ClientId
	--Where -- WO.MiningReturn = 1 AND 
	--(@StartPaidDate IS NULL OR CONVERT(date, L.loaddate, 103)>=CONVERT(date, @StartPaidDate,102)) AND
	--(@EndPaidDate IS NULL  OR CONVERT(date, L.loaddate, 103)<=CONVERT(date, @EndPaidDate,102))
	group by  DM.dateinfo, CL.LoadingPointName, CL.UnloadingPointName,m.MaterialName,C.name
	ORDER BY CONVERT(SMALLDATETIME, DM.dateinfo,102) asc

END



GO
/****** Object:  StoredProcedure [dbo].[sp_IndividaulchallanReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_IndividaulchallanReport](
	@Type int, -- 0: For Used Challan, 1: For UnUsed challan
	@ChallanStart INT, 
	@ChallanEnd INT
)
AS 
BEGIN
      
  --      if(@Type=0)
		--begin
		--	select R.Challanno, L.Sector, L.JobNo from registeredchallans R
		--	LEFT Join vw_loadingchallandetails L On L.ChallanNo = R.ChallanNo
		--	where R.Challanno between @ChallanStart and @ChallanEnd
		--	AND ((@Type = 0 AND L.JobNo IS NOT NULL)) 
	 --   end

		select R.Challanno, L.Sector, L.JobNo from registeredchallans R
		LEFT Join vw_loadingchallandetails L On L.ChallanNo = R.ChallanNo
		where R.Challanno between @ChallanStart and @ChallanEnd
		AND ((@Type = 0 AND L.JobNo IS NOT NULL) OR (@Type = 1 AND L.JobNo IS NULL))
		
	-- EXEC [sp_IndividaulchallanReport] 1, 119651, 119700
END













GO
/****** Object:  StoredProcedure [dbo].[sp_jobdetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--exec sp_jobdetails 4, '', 1
CREATE PROCEDURE [dbo].[sp_jobdetails] (
@Type INT=0,
@Search VARCHAR(100)='',
@Id INT =0,
@BranchName VARCHAR(100)='',
@JobNo VARCHAR(50)='',
@WO VARCHAR(50)='',
@LoadingPoint VARCHAR(100)='',
@UnloadingPoint VARCHAR(100)='',
@Client VARCHAR(100)='',
@Consignee VARCHAR(100)='',
@Consigner VARCHAR(100)='',
@Material VARCHAR(100)='',
@Quantity  DECIMAL(18,3)=0.000,
@Tolerance  DECIMAL(18,2)=0.00,
@ClientRate DECIMAL(18,2)=0.00,
@StartDate SMALLDATETIME=NULL,
@EndDate  SMALLDATETIME=NULL,
@Active BIT=0,
@CreatedBy  INT=0,
@Rules VARCHAR(15)='',
@AuthorizeUserId INT=NULL,
@ShowClientRate BIT=0,
@NextAdvanceDay INT=0
)

AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Search + @BranchName + @JobNo + @WO + @LoadingPoint + @UnloadingPoint + @Client+ @Consignee+ @Consigner+ @Material+ @Rules
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	DECLARE @JobLedgerId INT = NULL
	DECLARE @LedgerName VARCHAR(200) = NULL
	DECLARE @CostCenterId INT = NULL
	DECLARE @trancount INT = 0

	IF(@Type=1)
		BEGIN
		SELECT * from vw_JobDetails
			WHERE JobNo LIKE '%'+ @Search+'%' 
		END 
	ELSE IF(@Type = 2)
	BEGIN
			SELECT * from vw_JobDetails
			WHERE JobNo Like '%'+@Search+'%'
			ORDER BY WO
	END
	ELSE IF(@Type = 3)
	BEGIN
			SELECT * from vw_JobDetails
			ORDER BY WO
	END
	ELSE IF(@Type = 4)
	BEGIN
			SELECT * from vw_JobDetails
				WHERE JobId=@Id
	END
	-- Add Job Details
	ELSE IF(@Type = 5)
	BEGIN
		
		Select 'S'
	END
	-- Delete Job Details
	ELSE IF(@Type = 6)
	BEGIN
		--BEGIN TRY
		--	IF @trancount = 0
		--		BEGIN TRANSACTION
		--	ELSE
		--		SAVE TRANSACTION [sp_loadingvoucher];
		--	DELETE FROM JobDetails WHERE Id = @Id
		--	DELETE FROM Accounts_Ledgers WHERE Id = (Select LedgerId From JobDetails WHERE Id = @Id)
		--	DELETE FROM Accounts_CostCenters WHERE Id = (Select CostCenterId From JobDetails WHERE Id = @Id)
		--	if @trancount = 0
		--		COMMIT;
		--	SELECT 'S'
		--END TRY
		--BEGIN CATCH
		--	DECLARE @error int, @message varchar(4000), @xstate int;
		--	select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		--	if @xstate = -1
		--		rollback;
		--	if @xstate = 1 and @trancount = 0
		--		rollback
		--	if @xstate = 1 and @trancount > 0
		--		rollback transaction [sp_loadingvoucher];
		--	raiserror ('[sp_loadingvoucher]:%d: %s', 16, 1, @error, @message) ;
		--END CATCH
		SELECT 'S'
	END
	-- Copy Updated Shortage
	ELSE IF(@Type = 7)
	BEGIN
		DECLARE @CShortageID INT=0
		DECLARE @TShortageID INT=0
		DECLARE @ClientId INT=0
		DECLARE @Loading INT=0
		DECLARE @Unloading INT=0
		SELECT @ClientId=ClientId, @Loading = LoadingPointId, @Unloading=UnloadingPointId FROM JobDetails WHERE Id=@Id

		IF EXISTS (SELECT 1 FROM ClientShortage WHERE JobId=@Id) OR EXISTS (SELECT 1 FROM TransporterShortage WHERE JobId=@Id)
		BEGIN
			SELECT 'E'
		END
		ELSE
		BEGIN
			--SELECT TOP 1 * INTO #ClientShortage FROM ClientShortage 
			--WHERE JobId IN (SELECT Id From JobDetails WHERE ClientId=@ClientId AND LoadingPointId=@Loading AND UnloadingPointId=@Unloading)
			--ORDER BY CreatedOn DESC
		
			--INSERT INTO ClientShortage(JobId,Wheels, Limit, LimitUnit, Deduction, PenaltyRate, LoadType, CreatedBy, CreatedOn)
			--	SELECT @Id,Wheels, Limit, LimitUnit, Deduction, PenaltyRate, LoadType, @CreatedBy, GETDATE() FROM #ClientShortage

			--SELECT TOP 1 * INTO #TransporterShortage FROM TransporterShortage
			--	WHERE JobId IN (SELECT Id From JobDetails WHERE ClientId=@ClientId AND LoadingPointId=@Loading AND UnloadingPointId=@Unloading)
			--	ORDER BY CreatedOn DESC

			--INSERT INTO TransporterShortage(JobId, Transporter, Wheels, Limit, LimitUnit, Deduction, PenaltyRate, LoadType, CreatedBy, CreatedOn)
			--	SELECT @Id, Transporter, Wheels, Limit, LimitUnit, Deduction, PenaltyRate, LoadType, @CreatedBy, GETDATE() FROM #TransporterShortage	

			SELECT 'S'
		END
	END
    ELSE IF(@Type = 8)
	BEGIN
		DECLARE @IsHasBranchAccess INT = 0
		DECLARE @JobBranchId INT = NULL
		Select @JobBranchId = BranchId From JobDetails Where Id = @Id
		IF @JobBranchId IS NOT NULL
		BEGIN
			SELECT @IsHasBranchAccess = Count(Id) From UserBranchAccess Where UserId = @CreatedBy And BranchId = @JobBranchId
			IF @IsHasBranchAccess = 0 
				THROW 50000, 'Unauthorized access for Job Details. User does not have accesss to the related Branch.',1
		END
		SELECT * from vw_accountjobdetails  WHERE vw_accountjobdetails.JobId=@Id 
		
	END
	ELSE IF(@Type = 9)
	BEGIN
			SET NOCOUNT ON
			DECLARE @JobId INT =NULL
			SELECT @JobId=Id FROM _Job WHERE JobNo=@JobNo
			IF OBJECT_ID (N'temp121121', N'U') IS NOT NULL
				DROP TABLE temp121121
			
			SELECT '"'+ className+'"' className, '"'+cast(show as varchar)+'"' show  INTO temp121121 from _JobLoadingFeilds unpivot (  show    for className in (TruckNo,ChallanNo,InvoiceTPNo,LRNo,NetWet,Cash,Diesel,Pump,Welfare,TruckSource,Association,UnloadWt,UnloadDate,UnloadRemarks,JobNo,STONo,Owner,Driver,Broker,MaterialValue,TP,GateEntryNo,SAPNo,TPBookNo,WayBillNo,LoadDate,FreightRate,LoadType,BAGWtKg,GrossWt,TareWt,Moisture,TotalBags,LoadDMT,DELNo,HSDRate,Seals,MaterialValueMT,AssociationCharges,Labor,Detention,[Collection],Other,CashAdvance1,HSDAdvance,TotalAdvance,Remarks,HSD,TotalFreight,GuaranteeWt,Transhipment, DestinationId, LedgerId, InvoiceClaimQty)  )   up WHERE JobId=@JobId 
			DECLARE @FieldSettings VARCHAR(MAX)=''
			exec dbo.GetJSON temp121121, null, @FieldSettings OUTPUT
			SELECT *, @FieldSettings FieldSettings from vw_accountjobdetails WHERE vw_accountjobdetails.JobNo=@JobNo
			DROP TABLE temp121121
	END
	ELSE IF(@Type = 10)
	BEGIN
			SELECT * from vw_accountjobdetails WHERE vw_accountjobdetails.JobNo Like '%'+@JobNo+'%' AND Active=1
	END
	ELSE IF(@Type=11)
	BEGIN
		DECLARE @SubmitStatus INT = 0
		DECLARE @VerifyStatus INT = 0
		IF @AuthorizeUserId = 3105 -- Admin User
		BEGIN
			SET @SubmitStatus = 2
			SET @VerifyStatus = 3
		END
		IF @SubmitStatus = 0
			SELECT @SubmitStatus = 2 from UserPermissions Where UserId = @AuthorizeUserId AND [Grant] = 1 And PermissionKey = 'Menu:Jobs:VerifyJob'
		IF @SubmitStatus = 0
			SELECT @SubmitStatus = 2 From RolePermissions Where PermissionKey = 'Menu:Jobs:VerifyJob' and RoleId in (Select RoleId From UserRoles Where UserId = @AuthorizeUserId)
		
		IF @VerifyStatus = 0
			SELECT @VerifyStatus = 3 from UserPermissions Where UserId = @AuthorizeUserId AND [Grant] = 1 And PermissionKey = 'Menu:Jobs:ApproveJob'
		IF @VerifyStatus = 0
			SELECT @VerifyStatus = 3 From RolePermissions Where PermissionKey = 'Menu:Jobs:ApproveJob' and RoleId in (Select RoleId From UserRoles Where UserId = @AuthorizeUserId)
		SELECT * from vw_JobDetails WHERE JobStatus IN (@SubmitStatus,@VerifyStatus)
	END 
END
GO
/****** Object:  StoredProcedure [dbo].[sp_jobprofitreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_jobprofitreport]
@JobId INT=NULL,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@IsBilled INT=NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartDate AS varchar) + CAST(@EndDate AS varchar) 

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate varchar(10)=''
	DECLARE @FYEndDate varchar(10)=''
	SElECT @FYStartDate=convert(varchar(10),Startdate,102), @FYEndDate=convert(varchar(10),EndDate,102) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartDate<>''
	BEGIN
		SET @FYStartDate=@StartDate
	END
	IF @EndDate<>''
	BEGIN
		SET @FYEndDate=@EndDate
	END

	SELECT *
			, CASE WHEN GrossIncome=0 THEN 0 ELSE GrossIncome-NetPaid END GrossProfit
			, CASE WHEN GrossIncome=0 THEN 0 ELSE ((GrossIncome-NetPaid)/NetPaid)*100 END GrossProfitPercentage
			, AdvInterest+PaidInterest Interest
			, CASE WHEN GrossIncome=0 THEN 0 ELSE ((GrossIncome-AdvInterest-PaidInterest-NetPaid)) END NetProfit
			, CASE WHEN GrossIncome=0 THEN 0 ELSE ((GrossIncome-AdvInterest-PaidInterest-NetPaid)/NetPaid)*100 END NetProfitPercentage
			FROM (
			select CONVERT(VARCHAR(10),L.LoadDate, 103) LoadDate, Freight, COUNT(L.Id) TotalChallans, SUM(TotalAdvance) TotalAdvance, SUM(TotalAdvance+PaidAmount+Penalty) NetPaid, SUM(L.TotalFreight) GrossPayable
			, SUM(L.NetWt) TotalWt, SUM(U.UnloadedNetWt) UnloadWt 
			, SUM(CASE WHEN L.NetWt<U.UnloadedNetWt THEN L.NetWt ELSE U.UnloadedNetWt END) LowestWt 
			, AVG(CASE WHEN V.BillingRate IS NULL THEN 0 ELSE V.BillingRate END) BillingRate
			, SUM(CASE WHEN TotalInvoiceAmount IS NULL THEN 0 ELSE TotalInvoiceAmount END) GrossIncome
			, CASE WHEN SUM(TotalInvoiceAmount) is null THEN '#03fc90' ELSE '#FFFFFF' END Unbilled
			, SUM((DATEDIFF(DAY, L.LoadDate, (CASE WHEN IP.RealizationOn IS NULL THEN GETDATE() ELSE IP.RealizationOn END))*0.1*L.TotalAdvance)/365) AdvInterest
			, SUM((DATEDIFF(DAY, P.PaidDate, (CASE WHEN IP.RealizationOn IS NULL THEN GETDATE() ELSE IP.RealizationOn END))*0.1*P.PaidAmount)/365) PaidInterest
			from LoadingChallan L
			INNER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
			INNER JOIN Payment P ON P.LoadingId=L.Id
			LEFT OUTER JOIN vw_InvoiceChallanDetails V ON V.ChallanNo=L.ChallanNo
			LEFT OUTER JOIN _InvoicePayment IP ON IP.InvoiceId=V.InvoiceId
			WHERE  (@JobId IS NULL OR L.JobId=@JobId) AND
				P.PaidDate IS NOT NULL AND
				(@StartDate IS NULL OR CONVERT(date, L.loaddate, 103)>=CONVERT(date, @StartDate,102)) AND
				(@EndDate IS NULL  OR CONVERT(date, L.loaddate, 103)<=CONVERT(date, @EndDate,102))
				AND (@IsBilled IS NULL OR (@IsBilled=1 AND TotalInvoiceAmount IS NOT NULL) OR (@IsBilled=0 AND TotalInvoiceAmount IS NULL))
			GROUP BY Freight, L.LoadDate
			) X
			ORDER BY CONVERT(SMALLDATETIME, LoadDate,103) asc			
      END
GO
/****** Object:  StoredProcedure [dbo].[sp_JobProfitSingleReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_JobProfitSingleReport]
@JobId INT=NULL,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@paymentRate Decimal(18,2)=null,
@JobNo VARCHAR(20) = NULL
AS
BEGIN

SELECT TOP 5000 u.*, t.InvoiceNo as Invoice, t.billstatus as billstatus, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId
                ,CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END as LowestWt , Freight as FreightRate
				,ChallanDeduction,TollGate,EffectiveWt,ShortageWt,IC.ChallanNo,VI.TotalFreight
			,ChallanLost,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
			,p.PaymentMode,ChequeNo,PaidAmount, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE '0.00' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN u.NetWt<u.UnloadedNetWt THEN u.NetWt ELSE u.UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-TotalAdvance),0) LoadingBalance,VI.TotalInvoiceAmount
			,IsNull(IC.BillingRate,u.ClientRate) as ClientRate, CONVERT(VARCHAR(10),t.InvoiceDate,103) InvoiceDate
			,Round(CONVERT(DECIMAL(18,2),u.NetWt * IsNull(IC.BillingRate,u.ClientRate)),0) as BillAmount
			,CASE WHEN PAN.PANNo IS NULL THEN 'NOTCHK- '+u.OwnerPAN WHEN u.OwnerName=PAN.NameInPAN AND PAN.PANStatus='E' THEN 'CORRECT-'+u.OwnerPAN ELSE 'ERROR - '+u.OwnerPAN END PanCardStatus
			, CASE WHEN IC.Id IS NULL THEN '#03fc90' ELSE '#FFFFFF' END IsInvoiced
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN vw_InvoiceChallanDetails VI ON VI.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN DB_PANInfo PAN ON PAN.PANNo=u.OwnerPAN
		LEFT OUTER JOIN LoadingPoints LP ON LP.Loading=u.loadingpoint
		LEFT OUTER JOIN UnloadingPoints ULP ON ULP.Unloading=u.unloadingpoint
		WHERE -- u.LoadingId IN (SELECT Id from LoadingChallan where LoadDate BetWEEN @FYStartDate AND @FYEndDate) AND
		p.PaidDate IS NOT NULL AND
		(@StartDate IS NULL OR CONVERT(date, u.loaddate, 103)>=CONVERT(date, @StartDate,102)) AND
		(@EndDate IS NULL  OR CONVERT(date, u.loaddate, 103)<=CONVERT(date, @EndDate,102)) AND
		(@paymentRate IS NULL OR @paymentRate=Freight) 
		--(@JobNo IS NULL OR @JobNo=u.JobNo)
		--((@TokenPaid=0) OR (@TokenPaid=1 AND p.id IS NOT NULL) OR (@TokenPaid=2 AND p.Id IS NULL)) AND 
		--((@InvoiceBill=0) OR (@InvoiceBill=1 AND IC.id IS NOT NULL) OR (@InvoiceBill=2 AND IC.Id IS NULL)) 
   ORDER BY CONVERT(SMALLDATETIME,u.loaddate,103) asc
END

GO
/****** Object:  StoredProcedure [dbo].[sp_jobreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_jobreport] 
(
@Type INT=0,
@Id INT =0,
@JobNo VARCHAR(50)='',
@Loading VARCHAR(100)='',
@Unloading VARCHAR(100)='',
@Material VARCHAR(100)='',
@Client VARCHAR(100)='',
@BranchName VARCHAR(100)='',
@Active VARCHAR(1)='',
@JobStartDate VARCHAR(100)='',
@JobEndDate VARCHAR(100)=''
)
As 

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @JobNo + @Loading + @Unloading + @Material + @Client + @BranchName + @Active + @JobStartDate + @JobEndDate
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1



BEGIN

 IF(@Type=1)
	BEGIN
		WITH LoadingAdv AS (
		SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM LoadingAdvance L
			LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
		UNION 
		SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM LoadingAdvance L  GROUP BY L.LoadingId
	) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv2
		FROM LoadingAdv 
			PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

		Select j.JobNo JobNo,j.WO WO,j.JobStartDate JobStartDate,j.JobEndDate JobEndDate
		     ,j.ClientRate ClientRate,j.JobQuantity JobQuantity,COUNT(j.ChallanNo) TotalTruck,SUM(j.NetWT) liftqty
			 ,j.ClientName ClientName,j.ConsigneeName ConsigneeName,j.ConsignerName ConsignerName
			 ,j.MaterialName MaterialName,j.Sector Sector,SUM(j.EffectiveAmount) EffectiveAmount
		     ,SUM(j.Advance) Advance,SUM(j.HSDCost) HSDCost,SUM(j.TotalAdvance) TotalAdvance
			 ,SUM(j.Welfare+j.Detention+j.UnloadDetention+j.TollGate+j.Adjustment) as Expenses
			 ,SUM(j.ChallanDeduction+j.ChallanLost+j.Penalty) as Recoverable		 
			 ,SUM(
		            CASE when (j.PaidToLedger is null AND j.TokenVoucher IS NULL) then  j.NetPayable
					   else 0 end) as NetPaidss
				,SUM(CASE WHEN UnLoadingId IS NULL THEN TotalFreight-TotalAdvance ELSE 0 END) LoadedPayable
				,SUM(CASE WHEN TokenReference IS NULL AND UnLoadingId IS NOT NULL AND PaidDate IS NULL THEN TotalFreight-TotalAdvance ELSE 0 END) UnloadedPayable
				,SUM(CASE WHEN TokenReference IS NOT NULL AND VoucherId IS NULL THEN PaidAmount ELSE 0 END) NotPaidChallan
				,SUM(CASE WHEN TokenReference IS NOT NULL AND VoucherId IS NOT NULL THEN PaidAmount ELSE 0 END)+
				SUM(CASE WHEN TokenReference IS  NULL AND PaidAmount IS NOT NULL THEN PaidAmount ELSE 0 END) NetPaid
				,
				SUM(CASE WHEN UnLoadingId IS NULL THEN TotalFreight-TotalAdvance ELSE 0 END) +
				SUM(CASE WHEN TokenReference IS NULL AND UnLoadingId IS NOT NULL AND PaidDate IS NULL THEN TotalFreight-TotalAdvance ELSE 0 END) +
				SUM(CASE WHEN TokenReference IS NOT NULL AND VoucherId IS NULL THEN PaidAmount ELSE 0 END) NetPayable
				,SUM(Cash) Cash, SUM(Cheque) Cheque, SUM(BulkTransfer) BulkTransfer, SUM(FuelCost) FuelCost, SUM(Cash+Cheque+BulkTransfer+FuelCost) as LoadingAdvance
		    from vw_paymentchallwithpendingwithnotunloading j 
			LEFT OUTER JOIN Token t ON t.Challan=J.ChallanNo
			LEFT OUTER JOIN _Token tt ON tt.TokenNo=t.TokenReference
			LEFT OUTER JOIN #adv2 A ON A.LoadingId=j.LoadingId
			WHERE 1=1 AND
			(@JobNo='' OR JobNo=@JobNo) AND
			(@Material='' OR j.MaterialName=@Material) AND
			(@Loading='' OR LoadingPoint=@Loading) AND
			(@Unloading='' OR UnloadingPoint=@Unloading) AND
			(@Client='' OR ClientName=@Client) AND
			(@BranchName='' OR ExecutingBranchName=@BranchName) AND
			(@JobStartDate ='' OR CONVERT(smalldatetime, j.JobStartDate, 103)>=CONVERT(smalldatetime, @JobStartDate,103)) AND
			(@JobEndDate =''  OR CONVERT(smalldatetime, j.JobEndDate, 103)<=CONVERT(smalldatetime, @JobEndDate,103)) AND
			(@Id='' OR j.JobId=@Id)
		group by JobNo,j.WO ,j.JobStartDate ,j.JobEndDate 
		     ,j.ClientRate ,j.JobQuantity,j.ClientName ,j.ConsigneeName ,j.ConsignerName
			 ,j.MaterialName ,j.Sector
	END


	IF(@Type=4)
	BEGIN
			WITH LoadingAdv AS (
				SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM LoadingAdvance L
					LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
				UNION 
				SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM LoadingAdvance L  GROUP BY L.LoadingId
			) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv1
				FROM LoadingAdv 
					PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

			SELECT jd.JobId Id, jd.JobNo, jd.WO, jd.JobStartDate, jd.JobEndDate, 
						jd.JobQuantity,jd.Tolerance,jd.ClientRate, COALESCE(jd.Active,0) Active
						, jd.MaterialName ,jd.ClientName , jd.ConsigneeName ,
						jd.ConsignerName , jd.LoadingPoint, jd.UnloadingPoint,jd.ExecutingBranchName
						,b.TotalFreight as TotalFreight,b.TotalAdvance as TotalAdvance,b.HSDCost as HSDCost, b.totaltruck as TotalTruck
						,b.liftqty as liftqty,b.Advance as Advance
						, p.NetPayable as NetPaid
						, d.NetPayable
						, (Select SUM(PaidAmount)  FROm vw_paymentchallandetails P
							Left Join _TokenChallans TC On TC.ChallanNo = P.ChallanNo
							Left Join _Token T On T.Id = TC.TokenId
							Where P.LoadingVoucherId > 0 And T.VoucherId IS NULL AND P.PaymentVoucherId IS NULL
							And JobId = jd.JobId) as NotPaidChallan
							,Cash, Cheque, BulkTransfer, FuelCost
					from 
					vw_JobDetails as jd
					left outer join  
					(
						select jobno,sum(netwt) as liftqty, sum(TotalFreight) as TotalFreight,SUM(TotalAdvance)as TotalAdvance 
						,SUM(HSDCost) as HSDCost,sum(Advance) as Advance,count(TruckNumber) as totaltruck 
						,SUM(Cash) Cash, SUM(Cheque) Cheque, SUM(BulkTransfer) BulkTransfer, SUM(FuelCost) FuelCost
						from vw_loadingchallandetails VL
						LEFT OUTER JOIN #adv1 A ON A.LoadingId=VL.LoadingId
						group by JobNo
					)b
					on b.JobNo =jd.JobNo
					left outer join 
					(
						Select	JobNo
								,Sum(0)  NetPaid
								,SUM(TotalFreight-TotalAdvance) NetPayable  
						FROm vw_loadingchallandetails 
						Where ChallanNo Not In (SELECT ChallanNo FROM vw_paymentchallandetails)
						group by JobNo
					)d on d.JobNo =jd.JobNo
					left outer join
					(
						select jobno, sum(NetPayable) as NetPayable ,SUM(PaidAmount) as PaidAmount  from vw_paymentchallandetails 
						group by JobNo 
					)p
					on p.JobNo=jd.JobNo
  
			WHERE 1=1 AND
			(@JobNo='' OR jd.JobNo=@JobNo) AND
			(@Material='' OR jd.MaterialName=@Material) AND
			(@Loading='' OR LoadingPoint=@Loading) AND
			(@Unloading='' OR UnloadingPoint=@Unloading) AND
			(@Client='' OR ClientName=@Client) AND
			(@BranchName='' OR ExecutingBranchName=@BranchName) AND
			(@JobStartDate ='' OR CONVERT(smalldatetime, jd.JobStartDate, 103)>=CONVERT(smalldatetime, @JobStartDate,103)) AND
			(@JobEndDate =''  OR CONVERT(smalldatetime, jd.JobEndDate, 103)<=CONVERT(smalldatetime, @JobEndDate,103)) AND
			(@Id='' OR jd.JobId=@Id)

	END
	
END
IF(@Type=3)
	BEGIN
		SELECT JobId Id, JobNo, WO, JobStartDate, JobEndDate, 
						JobQuantity,Tolerance,ClientRate, COALESCE(Active,0),Active, MaterialName ,ClientName , ConsigneeName ,
						ConsignerName , LoadingPoint, UnloadingPoint
		FROM vw_JobDetails 
		
	END
	IF(@Type=5)
	BEGIN
		SELECT LoadingPoints.Id, LoadingPoints.Loading from LoadingPoints
	END
	IF(@Type=6)
	BEGIN
		SELECT UnloadingPoints.Id, UnloadingPoints.Unloading from UnloadingPoints
	END
	IF(@Type=7)
	BEGIN
		SELECT Materials.Id, Materials.MaterialName from Materials
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_Ledger]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Ledger](@Type INT=0, @LedgerName VARCHAR(300)=NULL)
AS
BEGIN

	IF @Type=1
		SELECT Id FROM Accounts_Ledgers
		WHERE LedgerName=@LedgerName
END
GO
/****** Object:  StoredProcedure [dbo].[sp_loadingchallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_loadingchallan] (
@Type INT=0,
@ChallanNo INT=0,
@JobNo VARCHAR(50)='',
@JobId INT=0,
@STONo VARCHAR(50)='',
@STOId INT=0,
@DelNo VARCHAR(50)='',
@TP VARCHAR(50)='',
@CostPerMT DECIMAL(18,2)=0.00,
@LoadDate SMALLDATETIME=null,
@Freight DECIMAL(18,2)=0.00, 
@Fixed bit=0, 
@Transhipment INT=0,
@LoadType VARCHAR(50)='', 
@GrossWT DECIMAL(18,3)=0.000, 
@TareWT DECIMAL(18,3)=0.000, 
@NetWT DECIMAL(18,3)=0.000, 
@GuaranteeWT DECIMAL(18,3)=0.000, 
@LoadDMT DECIMAL(18,3)=0.000, 
@Moisture DECIMAL(18,3)=0.000,
@MoistureUnit VARCHAR(50)='',
@TotalBags INT=0,
@MaterialValue DECIMAL(18,2)=0.00, 
@TruckNo VARCHAR(50)='', 
@TruckId INT=0,
@HSD DECIMAL(18,3)=0.000,  
@PumpId  INT=NULL,
@PumpName VARCHAR(50)=NULL,
@HSDRate DECIMAL(18,2)=0.00 ,
@HSDCost DECIMAL(18,2)=0.00,
@Seals VARCHAR(50)=NULL,
@AssociationCharge DECIMAL(18,2)=0.00,
@Labor INT=0,
@Detention DECIMAL(18,2)=0.00, 
@Collection DECIMAL(18,2)=0.00,
@Welfare DECIMAL(18,2)=0.00,
@Other DECIMAL(18,2)=0.00,
@Advance DECIMAL(18,2)=0.00,
@TotalAdvance DECIMAL(18,2)=0.00,
@TotalFreight DECIMAL(18,2)=0.00,
@Remarks VARCHAR(2000)='',
@LoadedBy INT=0,
@Search VARCHAR(50)='',
@truckOwnerName VARCHAR(2000)='',
@truckDriverName VARCHAR(2000)='',
@truckBrokerName VARCHAR(2000)='',
@truckAssociationName VARCHAR(2000)='',
@GateEntryNo VARCHAR(50)='',
@SapNo VARCHAR(50)='',
@TPBookNo VARCHAR(50)='',
@WayBillNo VARCHAR(50)='',
@LRNumber VARCHAR(50)='',
@Destination VARCHAR(150)='',
@TruckSource VARCHAR(50)='',
@LedgerId INT=0,
@InvoiceClaimQty DECIMAL(18,2)=0.000 
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @JobNo + @STONo + @DelNo + @TP + @LoadType + @MoistureUnit + @TruckNo + @PumpName + @Seals + @Remarks + @Search + @truckOwnerName
  + @truckDriverName + @truckBrokerName + @truckAssociationName + @GateEntryNo + @SapNo + @TPBookNo + @WayBillNo + @TruckSource
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	 DECLARE @LoadId INT=NULL
			
IF(@Type=1)
BEGIN
		DECLARE @InvoiceNo VARCHAR(50) = NULL
		DECLARE @ErrorMsg VARCHAR(5000) = NULL
		DECLARE @TruckDriverId INT = NULL
		DECLARE @TruckOwnerId INT = NULL
		DECLARE @TruckAssociationId INT = NULL
		DECLARE @TruckBrokerId INT = NULL
		DECLARE @JobStatus INT=NULL
		DECLARE @JobLedgerId INT=NULL
		DECLARE @JobLedgerBalance DECIMAL(18,2) = 0.0
		DECLARE @MaxFreightRate DECIMAL(18,2) = 0.0
		DECLARE @MaxSpecialFreightRate DECIMAL(18,2) = 0.0
		DECLARE @JobStartDate DATETIME  = NULL
		DECLARE @JobEndDate DATETIME  = NULL
		DECLARE @CliamQtyType INT = NULL
		DECLARE @ValidChallanCount INT = 0
        IF(@PumpId=0)
	      SET @PumpId=NULL
		IF @ChallanNo IS NULL
			THROW 50000, 'Challan No is not passed in LoadingChallan for Type = 1', 1
		--IF @LedgerId=0
		--	THROW 50000, 'Select correct ledger Name', 1
		IF @LoadDate > GETDATE()
			THROW 50000, 'LoadDate should be less then Current Date.', 1
		SELECT @ValidChallanCount = Count(*) from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
		SET @ErrorMsg = 'Challn is not registerd or not issued. Challn No - ' + Convert(Varchar(50), @ChallanNo)
		IF @ValidChallanCount = 0
			THROW 50000, @ErrorMsg, 1
		IF (LEN(ISNULL(@TruckSource,'')) = 0)
			THROW 50000, 'Truck Source is mandetory for loading challan.', 1
		SET @TruckSource = UPPER(@TruckSource)
		SET @ErrorMsg = 'Invalid Truck Source <'+ @TruckSource + '>. Truck Source should be either MARKET or ASSOCIATION.'
		IF @TruckSource <> 'MARKET' AND @TruckSource <> 'ASSOCIATION'
			THROW 50000, @ErrorMsg, 1
		SET @ErrorMsg = NULL
		SELECT @STOId=Id FROM STODetails WHERE STONo=@STONo AND STONo<>''
		SELECT @TruckId=Id FROM Truck WHERE TruckNumber=@TruckNo AND TruckNumber<>''
		SELECT @JobId=JobId, @JobStatus=JobStatus, @JobLedgerId = LedgerId, 
		@JobStartDate=Job_StartDate, @JobEndDate=Job_EndDate, @CliamQtyType = ClaimQtyType 
		FROM vw_jobdetails WHERE JobNo=@JobNo AND JobNo<>''
		IF ISNULL(@JobStatus,1)<>4
			THROW 50000, 'Selected job is not approved. Failed to create loading challan.', 1
		IF @LoadDate IS NULL
			THROW 50000, 'Load date is required.', 1
		IF @LoadDate IS NOT NULL AND (@LoadDate < @JobStartDate OR @LoadDate > @JobEndDate)
			THROW 50000, 'Load date must be with in job period.', 1
		IF (IsNull(@GuaranteeWT,0.0) > 0 AND (@CliamQtyType IS NULL OR @CliamQtyType <> 5)) 
			THROW 50000, 'Claim Type in work order of selected job is not Guarantee WT. So Guarantee WT is not allowed.', 1
		SET @TotalFreight=ROUND(COALESCE(@TotalFreight,0),0)
		
		SET @MaxFreightRate = 0.0
		IF Len(IsNull(@truckAssociationName,'')) = 0
				 SELECT @MaxFreightRate = Min(IsNull(R.FreightRate,0))+Min(IsNull(R.FreightTolerance,0)) FROM _JobFreightMktRules R 
			 WHERE JobId=@JobId AND CONVERT(DATE, @LoadDate,102) >=  CONVERT(DATE, DateFrom,102) AND CONVERT(DATE, @LoadDate,102)  <= CONVERT(DATE,IsNull(DateTo, '2555-01-01'),102)
		ELSE 
			 SELECT @MaxFreightRate = Min(IsNull(R.FreightRate,0)) FROM _JobFrieghtAssRules R 
			 WHERE JobId=@JobId AND CONVERT(DATE, @LoadDate,102) >=  CONVERT(DATE, DateFrom,102) AND CONVERT(DATE, @LoadDate,102)  <= CONVERT(DATE,IsNull(DateTo, '2555-01-01'),102)

		SELECT @TruckDriverId = Id From Driver Where Code = @truckDriverName
		SELECT @TruckOwnerId = Id From [Owner] Where Code = @truckOwnerName
		SELECT @TruckBrokerId = Id From [Broker] Where Code = @truckBrokerName
		SELECT @TruckAssociationId = Id From Association Where Association = @truckAssociationName
		Select @MaxSpecialFreightRate = Min(FreightRate)
		  from _JobFrieghtSpecialRules sr
		  LEFT OUTER JOIN
		  _JobFreightSpecialParty sp ON sp.JobSpecialFreightId=sr.Id
		  LEFT OUTER JOIN
		  _JobFreightSpecialTruck st ON st.JobSpecialFreightId=sr.Id
				Where sr.JobId=@JobId AND sr.LoadDate=CONVERT(SMALLDATETIME, @LoadDate,103) 
		  AND (sp.PartyId=@TruckOwnerId OR st.TruckId = @TruckId)
		if (@MaxSpecialFreightRate > @MaxFreightRate)
			SET @MaxFreightRate = @MaxSpecialFreightRate
		if (@MaxFreightRate is null)
			THROW 50000, 'Freight rules are not defined in selected Job.', 1
		if (IsNull(@Freight,0.0) > IsNull(@MaxFreightRate,0.0))
			THROW 50000, 'Freight rate can not be more then defined in Job.', 1
		DECLARE @Active INT=0
		SELECT @Active=COALESCE(Active,0) FROM JobDetails WHERE JobNo=@JobNo
		IF @STOId = 0 OR @STONo = '0'
		BEGIN
			SET @STOId = NULL
		END
		Select @InvoiceNo = InvoiceNo from vw_InvoiceChallanDetails Where ChallanNo = @ChallanNo
		SET @ErrorMsg = 'Invoice No ' + @InvoiceNo + ' has been created for this challan. This JOB and NetWt can not be modify.'
		IF @InvoiceNo IS NOT NULL
		BEGIN
			DECLARE @OldNetWT DECIMAL(18,3) 
			DECLARE @OldJobID INT 
			SELECT @OldJobID = JobId, @OldNetWT = NetWT From LoadingChallan Where ChallanNo = @ChallanNo
			IF ((@OldJobID <> @JobId) OR (@OldNetWT <> @NetWT))
				THROW 50000, @ErrorMsg, 16
		END
		
		--IF @TruckDriverId IS NULL
		--	THROW 50000, 'Truck Driver is required', 16
		IF @TruckOwnerId IS NULL
			THROW 50000, 'Truck Owner is required', 16
		IF @truckBrokerName IS NOT NULL AND LEN(@truckBrokerName) > 0 AND @TruckBrokerId IS NULL
			THROW 50000, 'Invalid broker name, Please select fromt he list.', 16
		IF @truckAssociationName IS NOT NULL AND LEN(@truckAssociationName) > 0 AND @TruckAssociationId IS NULL
			THROW 50000, 'Invalid association name, Please select fromt he list.', 16
		IF @HSDCost IS NOT NULL AND @HSDCost > 0.0 AND @PumpId IS NULL
			THROW 50000, 'Please select pump becasue HSD Advnace is provided.', 16
		-- SET @TotalAdvance = @Advance + @HSDCost
		declare @trancount int;
		set @trancount = @@trancount;
		if @trancount = 0
            begin transaction
        else
            save transaction [sp_loadingchallan];
		BEGIN TRY

		IF EXISTS (SELECT 1 FROM _TokenChallans C INNER JOIN _Token T ON T.Id=C.TokenId WHERE ChallanNo=@ChallanNo AND TokenStatus IN (2,3,4,5))
		BEGIN
			UPDATE LoadingChallan
					SET    Detention = @Detention
						  ,Remarks = @Remarks
						  ,UpdateUSerId = @LoadedBy
						  ,UpdateDate = GetDate()
						  ,GateEntryNo=@GateEntryNo
						  ,SAPNo=@SapNo
						  ,LRNumber=@LRNumber
						  ,DestinationId=@Destination
						  ,InvoiceClaimQty=@InvoiceClaimQty
					WHERE ChallanNo = @ChallanNo 
		END
		ELSE IF EXISTS (select * from LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo) AND ISNULL(@TruckId,0) <> 0 AND IsNull(@JobId,0) <>0 AND @Active=1
		BEGIN
				DECLARE @VoucherStatus INT = NULL
				DECLARE @TokenStatus INT = NULL
				
				DECLARE @IsInfoFieldOnly INT = 0
				DECLARE @ONetWT DECIMAL(18,3) 
				DECLARE @OJobID INT 
				DECLARE @OFreightRate DECIMAL(18,3) 
				DECLARE @OGrossWT DECIMAL(18,3) 
				DECLARE @OTareWT DECIMAL(18,3) 
				DECLARE @OHSD DECIMAL(18,3) 
				DECLARE @OCashAdvance DECIMAL(18,3) 
				DECLARE @Olabor DECIMAL(18,3) 
				DECLARE @ODetention DECIMAL(18,3) 
				DECLARE @OWelfare DECIMAL(18,3) 
				DECLARE @OOther DECIMAL(18,3) 
				DECLARE @OPumpID INT 
				DECLARE @OTruckID INT 
				--SELECT @ONetWT = JobId, @OJobID = NetWT ,@OFreightRate = freight,@OGrossWT = GrossWt,@OTareWT = TareWT,
				--@HSD=HSD, @OCashAdvance = Advance , @Olabor = Labor , @ODetention = Detention,@OWelfare = Welfare , @Other = Other
				--, @OPumpID=PumpId , @OTruckID=TruckId From LoadingChallan Where ChallanNo = @ChallanNo
				--IF((@OJobID <> @JobId) OR (@ONetWT <> @NetWT) OR (@OFreightRate <> @Freight) OR (@OGrossWT <> @GrossWT) OR (@OTareWT<>@TareWT) OR (@OHSD <> @HSD) OR (@OPumpID <> @PumpId)
				--	OR (@OCashAdvance = @Advance) OR (@Olabor <> @Labor) OR (@ODetention <> @Detention) OR (@OWelfare <> @Welfare)
				--)
				--	THROW 50000, 'PumpName is not equal',16
				--IF ((@OJobID <> @JobId) OR (@ONetWT <> @NetWT) OR (@OFreightRate <> @Freight) OR (@OGrossWT <> @GrossWT) OR (@OTareWT<>@TareWT) OR (@OHSD <> @HSD) 
				--OR (@OCashAdvance = @Advance) OR (@Olabor <> @Labor) OR (@ODetention <> @Detention) OR (@OWelfare <> @Welfare) OR (@Other<> @Other))
				--	 SET @IsInfoFieldOnly = 1
				--IF ((@OPumpID <> @PumpId) OR (@OTruckID <> @TruckId))
				--    SET @IsInfoFieldOnly = 0
				Select @TokenStatus=TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)
				SELECT @VoucherStatus = DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL)
				IF (@IsInfoFieldOnly = 1)  OR ((@VoucherStatus IS NOT NULL AND @VoucherStatus <> 5) OR (@TokenStatus IS NOT NULL AND @TokenStatus <> 1 AND @TokenStatus <> 5))
				BEGIN
					-- Only allow some of detials which does not have impact on the calculation.
					UPDATE LoadingChallan
					SET   STOId = @STOId
						  ,DELNo = @DELNo
						  ,TP = @TP
						  ,CostPerMT = @CostPerMT
						  ,Freight = @Freight
						  ,NetWT = @NetWT
						  ,Fixed = @Fixed
						  ,Transhipment = @Transhipment
						  ,LoadType = @LoadType
						  ,GuaranteeWT = @GuaranteeWT
						  ,LoadDMT=@LoadDMT
						  ,Moisture = @Moisture
						  ,MoistureUnit = @MoistureUnit
						  ,TotalBags = @TotalBags
						  ,MaterialValue = @MaterialValue
						  ,TruckId = @TruckId
						  ,Seals = @Seals
						  ,AssociationCharge = @AssociationCharge
						  ,Labor = @Labor
						  ,Detention = @Detention
						  ,Collection = @Collection
						  ,Welfare = @Welfare
						  ,Other = @Other						  
						  ,Advance = @Advance
						  ,TotalAdvance = @TotalAdvance
						  ,Remarks = @Remarks
						  ,LoadedBy = @LoadedBy
						  ,UpdateUSerId = @LoadedBy
							,UpdateDate = GetDate()
						  ,DriverId = @TruckDriverId
						  ,OwnerId = @TruckOwnerId
						  ,BrokerId = @TruckBrokerId
						  ,AssociationId = @TruckAssociationId
						  ,GateEntryNo=@GateEntryNo
						  ,SAPNo=@SapNo
						  ,TPBookNo=@TPBookNo
						  ,WayBillNo=@WayBillNo
						  ,LRNumber=@LRNumber
						  ,DestinationId=@Destination
						  ,TruckSource=@TruckSource
						  ,InvoiceClaimQty=@InvoiceClaimQty
					WHERE ChallanNo = @ChallanNo 
					 
					INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
					 SELECT @LoadId=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo
					 
					 DELETE FROM LoadingAdvance WHERE LoadingId=@LoadId

					IF @Advance>0
						INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Advance, 1, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)

					IF @HSDCost>0
					INSERT INTO LoadingAdvance 
					(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @HSDCost, 2, @PumpId,0, NULL, 0, @LoadDate,  @LoadedBy, 1)
                   
				   IF @Detention>0
						INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Detention, 5, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)

                    IF @Welfare>0
						INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Welfare, 4, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)
						Exec sp_loadingvouchernew @LoadingId=@LoadId
					SELECT 'S'
				END
				ELSE
				BEGIN
					IF (@Transhipment = 1)
					BEGIN 
						Declare @IsDuplicateTras INT = NULL
						SELECT @IsDuplicateTras = Count(TruckId) From TLoadingChallan Where ChallanNo=@ChallanNo And TruckId = @TruckId
						If (@IsDuplicateTras > 0)
							THROW 50000, 'Transhipment for same truck is already done. Transhipment for this truck is not allwoed', 1
						INSERT INTO TLoadingChallan
							SELECT * FROM LoadingChallan WHERE LoadingChallan.ChallanNo=@ChallanNo
					END
					UPDATE LoadingChallan
					   SET ChallanNo = @ChallanNo
						  ,JobId = @JobId
						  ,STOId = @STOId
						  ,DELNo = @DELNo
						  ,TP = @TP
						  ,CostPerMT = @CostPerMT
						  ,LoadDate = @LoadDate
						  ,Freight = @Freight
						  ,Fixed = @Fixed
						  ,Transhipment = @Transhipment
						  ,LoadType = @LoadType
						  ,GrossWt = @GrossWt
						  ,TareWT = @TareWT
						  ,NetWT = @NetWT
						  ,GuaranteeWT = @GuaranteeWT
						  ,LoadDMT=@LoadDMT
						  ,Moisture = @Moisture
						  ,MoistureUnit = @MoistureUnit
						  ,TotalBags = @TotalBags
						  ,MaterialValue = @MaterialValue
						  ,TruckId = @TruckId
						  ,HSD = @HSD
						  ,PumpId = @PumpId
						  ,HSDRate = @HSDRate
						  ,HSDCost = @HSDCost
						  ,Seals = @Seals
						  ,AssociationCharge = @AssociationCharge
						  ,Labor = @Labor
						  ,Detention = @Detention
						  ,Collection = @Collection
						  ,Welfare = @Welfare
						  ,Other = @Other
						  ,Advance = @Advance
						  ,TotalAdvance = @TotalAdvance
						  ,Remarks = @Remarks
						  ,LoadedBy = @LoadedBy
						  ,UpdateUSerId = @LoadedBy
							,UpdateDate = GetDate()
						  ,LoadedOn = GETDATE()
						  ,TotalFreight = @TotalFreight
						  ,DriverId = @TruckDriverId
						  ,OwnerId = @TruckOwnerId
						  ,BrokerId = @TruckBrokerId
						  ,AssociationId = @TruckAssociationId
						  ,GateEntryNo=@GateEntryNo
						  ,SAPNo=@SapNo
						  ,TPBookNo=@TPBookNo
						  ,WayBillNo=@WayBillNo
						  ,LRNumber=@LRNumber
						  ,DestinationId=@Destination
						  ,TruckSource=@TruckSource
						  ,LedgerId=@LedgerId
						  ,InvoiceClaimQty=@InvoiceClaimQty
					 WHERE ChallanNo = @ChallanNo  
					 INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo

					 SELECT @LoadId=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo
					 
					 DELETE FROM LoadingAdvance WHERE LoadingId=@LoadId
					 IF @Advance>0
					 INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
							VALUES(@LoadId, @Advance, 1, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)
					 IF @HSDCost>0
					 INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
							VALUES(@LoadId, @HSDCost, 2, @PumpId,0, NULL, 0, @LoadDate,  @LoadedBy, 1)
                     
				   IF @Detention>0
						INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Detention, 5, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)

                    IF @Welfare>0
						INSERT INTO LoadingAdvance 
						(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Welfare, 4, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)
					 Exec sp_loadingvoucherNew @LoadingId=@LoadId
					 SELECT 'S'
				END
		END
		ELSE IF (@TruckId<>0 AND @JobId<>0 AND @Active=1)
		BEGIN
			INSERT INTO LoadingChallan
			   (ChallanNo
			   ,JobId
			   ,STOId
			   ,DELNo
			   ,TP
			   ,CostPerMT
			   ,LoadDate
			   ,Freight
			   ,Fixed
			   ,Transhipment
			   ,LoadType
			   ,GrossWt
			   ,TareWT
			   ,NetWT
			   ,GuaranteeWT
			   ,LoadDMT
			   ,Moisture
			   ,MoistureUnit
			   ,TotalBags
			   ,MaterialValue
			   ,TruckId
			   ,HSD
			   ,PumpId
			   ,HSDRate
			   ,HSDCost
			   ,Seals
			   ,AssociationCharge
			   ,Labor
			   ,Detention
			   ,Collection
			   ,Welfare
			   ,Other
			   ,Advance
			   ,TotalAdvance
			   ,Remarks
			   ,LoadedBy
			   ,InsertUserId, InsertDate
			   ,LoadedOn
			   ,TotalFreight
			   ,DriverId
			   ,OwnerId
			   ,BrokerId
			   ,AssociationId
			   ,GateEntryNo
			   ,SAPNo
			   ,TPBookNo
			   ,WayBillNo
			   ,LRNumber
			   ,DestinationId
			   ,TruckSource
			   ,LedgerId
			   ,InvoiceClaimQty)
		 VALUES
			   (@ChallanNo
			   ,@JobId
			   ,@STOId
			   ,@DELNo
			   ,@TP
			   ,@CostPerMT
			   ,@LoadDate
			   ,@Freight
			   ,@Fixed
			   ,@Transhipment
			   ,@LoadType
			   ,@GrossWt
			   ,@TareWT
			   ,@NetWT
			   ,@GuaranteeWT
			   ,@LoadDMT
			   ,@Moisture
			   ,@MoistureUnit
			   ,@TotalBags
			   ,@MaterialValue
			   ,@TruckId
			   ,@HSD
			   ,@PumpId
			   ,@HSDRate
			   ,@HSDCost
			   ,@Seals
			   ,@AssociationCharge
			   ,@Labor
			   ,@Detention
			   ,@Collection
			   ,@Welfare
			   ,@Other
			   ,@Advance
			   ,@TotalAdvance
			   ,@Remarks
			   ,@LoadedBy
			   ,@LoadedBy,GETDATE()
			   ,GETDATE()
			   ,@TotalFreight
			   ,@TruckDriverId
			   ,@TruckOwnerId
			   ,@TruckBrokerId
			   ,@TruckAssociationId
			   ,@GateEntryNo
			   ,@SapNo
			   ,@TPBookNo
			   ,@WayBillNo
			   ,@LRNumber
			   ,@Destination
			   ,@TruckSource
			   ,@LedgerId
			   ,@InvoiceClaimQty)
			INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
					 SELECT @LoadId=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo
			 
				IF @Advance>0
					INSERT INTO LoadingAdvance 
					(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Advance, 1, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)

			   IF @HSDCost>0
				 INSERT INTO LoadingAdvance 
					(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @HSDCost, 2, @PumpId,0, NULL, 0, @LoadDate,  @LoadedBy, 1)
               
			   IF @Detention>0
				INSERT INTO LoadingAdvance 
					(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
					VALUES(@LoadId, @Detention, 5, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)

                IF @Welfare>0
					INSERT INTO LoadingAdvance 
					(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
						VALUES(@LoadId, @Welfare, 4, 0, NULL, 0, @LoadDate,  @LoadedBy, 1)
			Exec sp_loadingvouchernew @LoadingId=@LoadId
			SELECT @@IDENTITY
		END
	ELSE
		SELECT '0'
	if @trancount = 0
        commit;
	END TRY
 begin catch
        declare @error int, @message varchar(4000), @xstate int;
        select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
        if @xstate = -1
            rollback;
        if @xstate = 1 and @trancount = 0
            rollback
        if @xstate = 1 and @trancount > 0
            rollback transaction [sp_loadingchallan];
        raiserror ('[sp_loadingchallan-1]:%s %d: %s', 16, 1,'', @error, @message) ;
    end catch
END
ELSE IF(@Type=2)
BEGIN
	SELECT * from vw_loadingchallandetails v
		WHERE v.ChallanNo LIKE '%'+ @Search+'%'
		ORDER BY LoadDate desc
END
ELSE IF(@Type=30)
BEGIN
			If   EXISTS(select 1 from LoadingChallan WHERE LoadingChallan.ChallanNo= @ChallanNo)
			BEGIN
					--SELECT LoadingChallan.Id Id,LoadingChallan.TruckId TruckId,LoadingChallan.ChallanNo,CONVERT(VARCHAR(10),JobDetails.StartDate,103) StartDate,CONVERT(VARCHAR(10),JobDetails.EndDate,103) EndDate,JobDetails.JobNo,LoadingChallan.JobId,STONo,LoadingChallan.STOId STOId,LoadingChallan.DelNo DelNo,LoadingChallan.TP,LoadingChallan.CostPerMT,CONVERT(VARCHAR(10),LoadingChallan.LoadDate,103) LoadDate,LoadingChallan.Freight,LoadingChallan.Fixed,ISNULL(Transhipment.Transhipment, 0 ) Transhipment,TranshipmentId,LoadingChallan.LoadType,LoadingChallan.GrossWT,LoadingChallan.TareWT,LoadingChallan.NetWT,LoadingChallan.Moisture
					--  ,LoadingChallan.MoistureUnit,LoadingChallan.TotalBags,LoadingChallan.MaterialValue,Truck.TruckNumber TruckNumber,LoadingChallan.HSD,LoadingChallan.PumpID,PumpName.PumpName PumpName,LoadingChallan.HSDRate,LoadingChallan.HSDCost,LoadingChallan.Seals,LoadingChallan.AssociationCharge,LoadingChallan.Labor,LoadingChallan.Detention,LoadingChallan.Collection,LoadingChallan.Welfare
					--  ,LoadingChallan.Other,LoadingChallan.Advance,LoadingChallan.TotalAdvance,LoadingChallan.Remarks,LoadingChallan.LoadedBy,LoadingChallan.LoadedOn  FROM LoadingChallan
					--  LEFT OUTER JOIN PumpName ON PumpName.id=LoadingChallan.PumpID
					--  LEFT OUTER JOIN JobDetails ON JobDetails.id=LoadingChallan.JobId
					--  LEFT OUTER JOIN Truck ON Truck.id=LoadingChallan.TruckId
					--  LEFT OUTER JOIN STODetails ON STODetails.id=LoadingChallan.STOId
					--  LEFT OUTER JOIN Transhipment ON Transhipment.id=LoadingChallan.TranshipmentId
					--  WHERE LoadingChallan.ChallanNo=@ChallanNo
		
					SELECT *,(((CASE WHEN IsNull(GuaranteeWT, 0) > 0.0 THEN GuaranteeWT WHEN UnloadedNetWt is null THEN NetWt ELSE (CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt end) end))*(COALESCE(Freight,0))-(COALESCE(TotalAdvance,0))) NetPayable
						INTO #t2 FROM vw_LoadingChallan
					SELECT * FROM #t2 WHERE ChallanNo=@ChallanNo
		
			END
			ELSE
			BEGIN
				SELECT ChallanNo from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I')
			END
END
ELSE IF(@Type = 4)
BEGIN 
	If NOT EXISTS(select 1 from UnloadingChallan LEFT OUTER JOIN LoadingChallan ON LoadingChallanId=LoadingChallan.Id 
				WHERE LoadingChallan.ChallanNo= @ChallanNo)
	BEGIN
		declare @trancount1 int;
		set @trancount1 = @@trancount;
		if @trancount1 = 0
            begin transaction
        else
            save transaction [sp_loadingchallan1];
		BEGIN TRY
			SELECT @LoadId=Id FROM LoadingCHallan where challanno=@Challanno
			
			IF (@LoadId IS NOT NULL)
				EXEC [sp_LoadingVoucherNew] @LoadingId=@LoadId, @Type=1

			DELETE FROM LoadingChallan WHERE ChallanNo=@ChallanNo
			DELETE FROM TLoadingChallan WHERE ChallanNo=@ChallanNo
			-- Update _InstantLoadingDetails SET ChallanNo = NULL Where ChallanNo = @ChallanNo
			if @trancount1 = 0
				commit;
			SELECT 'S'
		END TRY
		 BEGIN CATCH
				declare @error1 int, @message1 varchar(4000), @xstate1 int;
				select @error1 = ERROR_NUMBER(), @message1 = ERROR_MESSAGE(), @xstate1 = XACT_STATE();
				if @xstate1 = -1
					rollback;
				if @xstate1 = 1 and @trancount1 = 0
					rollback
				if @xstate1 = 1 and @trancount1 > 0
					rollback transaction [sp_loadingchallan1];
				raiserror ('Error:%s %d: %s', 16, 1,'', @error1, @message1) ;
		END CATCH
	END
	ELSE
	BEGIN
		IF 1 = 1
			THROW 50000, 'Unloading details available. Failed to delete this challan.', 1
	END
END
ELSE IF(@Type=5)
BEGIN
	DECLARE @ChallanBranchId INT=0
	DECLARE @IsBranchAccess INT=0
	SELECT @ChallanBranchId=BranchId FROM RegisteredChallans WHERE Status IN ('I', 'U','L') AND ChallanNo=@ChallanNo
	SELECT @IsBranchAccess = Count(BranchId) FROM UserBranchAccess WHERE UserId=@LoadedBy AND BranchId = @ChallanBranchId
	IF @IsBranchAccess = 0
		SELECT @IsBranchAccess = (CASE WHEN BranchId = @ChallanBranchId THEN 1 ELSE 0 END)  FROM Users WHERE Id=@LoadedBy
	IF((@ChallanBranchId>0 AND (@LoadedBy = 3105 OR @IsBranchAccess >= 1)) OR @LoadedBy=0)
	BEGIN
		If EXISTS(select 1 from LoadingChallan WHERE LoadingChallan.ChallanNo= @ChallanNo)
		BEGIN
			SELECT top 1 lv.*, D.Code as DriverCode, O.Code as OwnerCode, B.Code as BrokerCode, A.Association as AssCode,
			DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL) as VoucherStatus,
			(Select TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)) as TokenStatus
			, AL.LedgerName, l.InvoiceClaimQty
			FROM 
			vw_loadingchallandetails lv
			Inner Join LoadingChallan l On L.id = lv.LoadingId
			LEFT OUTER JOIN Driver D ON D.Id=l.DriverId
			LEFT OUTER JOIN [Owner] O ON O.Id=l.OwnerId
			LEFT OUTER JOIN [Broker] B ON B.Id=l.BrokerId
			LEFT OUTER JOIN [Association] A ON A.Id=l.AssociationId
			LEFT OUTER JOIN [Accounts_Ledgers] AL ON AL.Id=l.LedgerId
			WHERE lv.ChallanNo=@ChallanNo
			-- AND TruckId IS NOT NULL AND JobId IS NOT NULL
		END
		ELSE
		BEGIN
			SELECT ChallanNo from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
		END
	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_LoadingChallan_Modify]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_LoadingChallan_Modify] 
@ChallanNo INT=0,
@DelNo VARCHAR(50)='',
@Transhipment INT=0,
@GateEntryNo VARCHAR(50)='',
@SapNo VARCHAR(50)='',
@TPBookNo VARCHAR(50)='',
@WayBillNo VARCHAR(50)='',
@LRNumber VARCHAR(50)='',
@TP VARCHAR(50)='',
@Destination VARCHAR(150)='',
@InvoiceClaimQty DECIMAL(18,2)=0.000 
AS begin
if exists(select * from LoadingChallan where ChallanNo=@ChallanNo)
update LoadingChallan 
set ChallanNo=@ChallanNo,
    DELNo=@DelNo,
	Transhipment =@Transhipment,
	GateEntryNo=@GateEntryNo,
	SAPNo=@SapNo,
	TPBookNo=@TPBookNo,
	WayBillNo=@WayBillNo,
	LRNumber=@LRNumber,
	TP=@TP,
	DestinationId=@Destination,
	InvoiceClaimQty=@InvoiceClaimQty
	where ChallanNo=@ChallanNo

	select 'S'
 End

GO
/****** Object:  StoredProcedure [dbo].[sp_loadingchallan_NotUsed]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_loadingchallan_NotUsed] (
@Type INT=0,
@ChallanNo INT=0,
@JobNo VARCHAR(50)='',
@JobId INT=0,
@STONo VARCHAR(50)='',
@STOId INT=0,
@DelNo VARCHAR(50)='',
@TP VARCHAR(50)='',
@CostPerMT DECIMAL(18,2)=0.00,
@LoadDate SMALLDATETIME=null,
@Freight DECIMAL(18,2)=0.00, 
@Fixed bit=0, 
@Transhipment INT=0,
@LoadType VARCHAR(50)='', 
@GrossWT DECIMAL(18,3)=0.000, 
@TareWT DECIMAL(18,3)=0.000, 
@NetWT DECIMAL(18,3)=0.000, 
@GuaranteeWT DECIMAL(18,3)=0.000, 
@LoadDMT DECIMAL(18,3)=0.000, 
@Moisture DECIMAL(18,3)=0.000,
@MoistureUnit VARCHAR(50)='',
@TotalBags INT=0,
@MaterialValue DECIMAL(18,2)=0.00, 
@TruckNo VARCHAR(50)='', 
@TruckId INT=0,
@HSD DECIMAL(18,3)=0.000,  
@PumpId  INT=NULL,
@PumpName VARCHAR(50)=NULL,
@HSDRate DECIMAL(18,2)=0.00 ,
@HSDCost DECIMAL(18,2)=0.00,
@Seals VARCHAR(50)=NULL,
@AssociationCharge DECIMAL(18,2)=0.00,
@Labor INT=0,
@Detention DECIMAL(18,2)=0.00, 
@Collection DECIMAL(18,2)=0.00,
@Welfare DECIMAL(18,2)=0.00,
@Other DECIMAL(18,2)=0.00,
@Advance DECIMAL(18,2)=0.00,
@TotalAdvance DECIMAL(18,2)=0.00,
@TotalFreight DECIMAL(18,2)=0.00,
@Remarks VARCHAR(2000)='',
@LoadedBy INT=0,
@Search VARCHAR(50)='',
@truckOwnerName VARCHAR(2000)='',
@truckDriverName VARCHAR(2000)='',
@truckBrokerName VARCHAR(2000)='',
@truckAssociationName VARCHAR(2000)='',
@GateEntryNo VARCHAR(50)='',
@SapNo VARCHAR(50)='',
@TPBookNo VARCHAR(50)='',
@WayBillNo VARCHAR(50)='',
@LRNumber VARCHAR(50)='',
@TruckSource VARCHAR(50)=''
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @JobNo + @STONo + @DelNo + @TP + @LoadType + @MoistureUnit + @TruckNo + @PumpName + @Seals + @Remarks + @Search + @truckOwnerName
  + @truckDriverName + @truckBrokerName + @truckAssociationName + @GateEntryNo + @SapNo + @TPBookNo + @WayBillNo + @TruckSource
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type=1)
BEGIN
		DECLARE @InvoiceNo VARCHAR(50) = NULL
		DECLARE @ErrorMsg VARCHAR(5000) = NULL
		DECLARE @TruckDriverId INT = NULL
		DECLARE @TruckOwnerId INT = NULL
		DECLARE @TruckAssociationId INT = NULL
		DECLARE @TruckBrokerId INT = NULL
		DECLARE @JobStatus INT=NULL
		DECLARE @JobLedgerId INT=NULL
		DECLARE @JobLedgerBalance DECIMAL(18,2) = 0.0
		DECLARE @MaxFreightRate DECIMAL(18,2) = 0.0
		DECLARE @MaxSpecialFreightRate DECIMAL(18,2) = 0.0
		DECLARE @JobStartDate DATETIME  = NULL
		DECLARE @JobEndDate DATETIME  = NULL
		DECLARE @CliamQtyType INT = NULL
		DECLARE @ValidChallanCount INT = 0
        IF(@PumpId=0)
	      SET @PumpId=NULL
		IF @ChallanNo IS NULL
			THROW 50000, 'Challan No is not passed in LoadingChallan for Type = 1', 1
		IF @LoadDate > GETDATE()
			THROW 50000, 'LoadDate should be less then Current Date.', 1
		SELECT @ValidChallanCount = Count(*) from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
		SET @ErrorMsg = 'Challn is not registerd or not issued. Challn No - ' + Convert(Varchar(50), @ChallanNo)
		IF @ValidChallanCount = 0
			THROW 50000, @ErrorMsg, 1
		IF (LEN(ISNULL(@TruckSource,'')) = 0)
			THROW 50000, 'Truck Source is mandetory for loading challan.', 1
		SET @TruckSource = UPPER(@TruckSource)
		SET @ErrorMsg = 'Invalid Truck Source <'+ @TruckSource + '>. Truck Source should be either MARKET or ASSOCIATION.'
		IF @TruckSource <> 'MARKET' AND @TruckSource <> 'ASSOCIATION'
			THROW 50000, @ErrorMsg, 1
		SET @ErrorMsg = NULL
		SELECT @STOId=Id FROM STODetails WHERE STONo=@STONo AND STONo<>''
		SELECT @TruckId=Id FROM Truck WHERE TruckNumber=@TruckNo AND TruckNumber<>''
		SELECT @JobId=JobId, @JobStatus=JobStatus, @JobLedgerId = LedgerId, 
		@JobStartDate=Job_StartDate, @JobEndDate=Job_EndDate, @CliamQtyType = ClaimQtyType 
		FROM vw_jobdetails WHERE JobNo=@JobNo AND JobNo<>''
		IF ISNULL(@JobStatus,1)<>4
			THROW 50000, 'Selected job is not approved. Failed to create loading challan.', 1
		IF @LoadDate IS NULL
			THROW 50000, 'Load date is required.', 1
		IF @LoadDate IS NOT NULL AND (@LoadDate < @JobStartDate OR @LoadDate > @JobEndDate)
			THROW 50000, 'Load date must be with in job period.', 1
		IF (IsNull(@GuaranteeWT,0.0) > 0 AND (@CliamQtyType IS NULL OR @CliamQtyType <> 5)) 
			THROW 50000, 'Claim Type in work order of selected job is not Guarantee WT. So Guarantee WT is not allowed.', 1
		SET @TotalFreight=ROUND(COALESCE(@TotalFreight,0),0)
		
		SET @MaxFreightRate = 0.0
		IF Len(IsNull(@truckAssociationName,'')) = 0
			 SELECT @MaxFreightRate = Min(R.FreightRate) FROM _JobFreightMktRules R 
			 WHERE JobId=@JobId AND CONVERT(SMALLDATETIME, @LoadDate,103) >=  DateFrom AND CONVERT(SMALLDATETIME, @LoadDate,103)  <= IsNull(DateTo, '2555-01-01')
		ELSE 
			 SELECT @MaxFreightRate = Min(R.FreightRate) FROM _JobFrieghtAssRules R 
			 WHERE JobId=@JobId AND CONVERT(SMALLDATETIME, @LoadDate,103) >=  DateFrom AND CONVERT(SMALLDATETIME, @LoadDate,103)  <= IsNull(DateTo, '2555-01-01')
		SELECT @TruckDriverId = Id From Driver Where Code = @truckDriverName
		SELECT @TruckOwnerId = Id From [Owner] Where Code = @truckOwnerName
		SELECT @TruckBrokerId = Id From [Broker] Where Code = @truckBrokerName
		SELECT @TruckAssociationId = Id From Association Where Association = @truckAssociationName
		Select @MaxSpecialFreightRate = Min(FreightRate)
		  from _JobFrieghtSpecialRules sr
		  LEFT OUTER JOIN
		  _JobFreightSpecialParty sp ON sp.JobSpecialFreightId=sr.Id
		  LEFT OUTER JOIN
		  _JobFreightSpecialTruck st ON st.JobSpecialFreightId=sr.Id
				Where sr.JobId=@JobId AND sr.LoadDate=CONVERT(SMALLDATETIME, @LoadDate,103) 
		  AND (sp.PartyId=@TruckOwnerId OR st.TruckId = @TruckId)
		if (@MaxSpecialFreightRate > @MaxFreightRate)
			SET @MaxFreightRate = @MaxSpecialFreightRate
		if (@MaxFreightRate is null)
			THROW 50000, 'Freight rules are not defined in selected Job.', 1
		if (IsNull(@Freight,0.0) > IsNull(@MaxFreightRate,0.0))
			THROW 50000, 'Freight rate can not be more then defined in Job.', 1
		DECLARE @Active INT=0
		SELECT @Active=COALESCE(Active,0) FROM JobDetails WHERE JobNo=@JobNo
		IF @STOId = 0 OR @STONo = '0'
		BEGIN
			SET @STOId = NULL
		END
		Select @InvoiceNo = InvoiceNo from vw_InvoiceChallanDetails Where ChallanNo = @ChallanNo
		SET @ErrorMsg = 'Invoice No ' + @InvoiceNo + ' has been created for this challan. This JOB and NetWt can not be modify.'
		IF @InvoiceNo IS NOT NULL
		BEGIN
			DECLARE @OldNetWT DECIMAL(18,3) 
			DECLARE @OldJobID INT 
			SELECT @OldJobID = JobId, @OldNetWT = NetWT From LoadingChallan Where ChallanNo = @ChallanNo
			IF ((@OldJobID <> @JobId) OR (@OldNetWT <> @NetWT))
				THROW 50000, @ErrorMsg, 16
		END
		
		--IF @TruckDriverId IS NULL
		--	THROW 50000, 'Truck Driver is required', 16
		IF @TruckOwnerId IS NULL
			THROW 50000, 'Truck Owner is required', 16
		IF @truckBrokerName IS NOT NULL AND LEN(@truckBrokerName) > 0 AND @TruckBrokerId IS NULL
			THROW 50000, 'Invalid broker name, Please select fromt he list.', 16
		IF @truckAssociationName IS NOT NULL AND LEN(@truckAssociationName) > 0 AND @TruckAssociationId IS NULL
			THROW 50000, 'Invalid association name, Please select fromt he list.', 16
		IF @HSDCost IS NOT NULL AND @HSDCost > 0.0 AND @PumpId IS NULL
			THROW 50000, 'Please select pump becasue HSD Advnace is provided.', 16
		-- SET @TotalAdvance = @Advance + @HSDCost
		declare @trancount int;
		set @trancount = @@trancount;
		if @trancount = 0
            begin transaction
        else
            save transaction [sp_loadingchallan];
		BEGIN TRY
		IF EXISTS (select * from LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo) AND ISNULL(@TruckId,0) <> 0 AND IsNull(@JobId,0) <>0 AND @Active=1
		BEGIN
				DECLARE @VoucherStatus INT = NULL
				DECLARE @TokenStatus INT = NULL
				
				DECLARE @IsInfoFieldOnly INT = 0
				DECLARE @ONetWT DECIMAL(18,3) 
				DECLARE @OJobID INT 
				DECLARE @OFreightRate DECIMAL(18,3) 
				DECLARE @OGrossWT DECIMAL(18,3) 
				DECLARE @OTareWT DECIMAL(18,3) 
				DECLARE @OHSD DECIMAL(18,3) 
				DECLARE @OCashAdvance DECIMAL(18,3) 
				DECLARE @Olabor DECIMAL(18,3) 
				DECLARE @ODetention DECIMAL(18,3) 
				DECLARE @OWelfare DECIMAL(18,3) 
				DECLARE @OOther DECIMAL(18,3) 
				DECLARE @OPumpID INT 
				DECLARE @OTruckID INT 
				--SELECT @ONetWT = JobId, @OJobID = NetWT ,@OFreightRate = freight,@OGrossWT = GrossWt,@OTareWT = TareWT,
				--@HSD=HSD, @OCashAdvance = Advance , @Olabor = Labor , @ODetention = Detention,@OWelfare = Welfare , @Other = Other
				--, @OPumpID=PumpId , @OTruckID=TruckId From LoadingChallan Where ChallanNo = @ChallanNo
				--IF((@OJobID <> @JobId) OR (@ONetWT <> @NetWT) OR (@OFreightRate <> @Freight) OR (@OGrossWT <> @GrossWT) OR (@OTareWT<>@TareWT) OR (@OHSD <> @HSD) OR (@OPumpID <> @PumpId)
				--	OR (@OCashAdvance = @Advance) OR (@Olabor <> @Labor) OR (@ODetention <> @Detention) OR (@OWelfare <> @Welfare)
				--)
				--	THROW 50000, 'PumpName is not equal',16
				--IF ((@OJobID <> @JobId) OR (@ONetWT <> @NetWT) OR (@OFreightRate <> @Freight) OR (@OGrossWT <> @GrossWT) OR (@OTareWT<>@TareWT) OR (@OHSD <> @HSD) 
				--OR (@OCashAdvance = @Advance) OR (@Olabor <> @Labor) OR (@ODetention <> @Detention) OR (@OWelfare <> @Welfare) OR (@Other<> @Other))
				--	 SET @IsInfoFieldOnly = 1
				--IF ((@OPumpID <> @PumpId) OR (@OTruckID <> @TruckId))
				--    SET @IsInfoFieldOnly = 0
				Select @TokenStatus=TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)
				SELECT @VoucherStatus = DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL)
				IF (@IsInfoFieldOnly = 1)  OR ((@VoucherStatus IS NOT NULL AND @VoucherStatus <> 5) OR (@TokenStatus IS NOT NULL AND @TokenStatus <> 1 AND @TokenStatus <> 5))
				BEGIN
					-- Only allow some of detials which does not have impact on the calculation.
					UPDATE LoadingChallan
					SET STOId = @STOId
					,DELNo = @DELNo
					,Moisture = @Moisture
					,MoistureUnit = @MoistureUnit
					,LoadDMT = @LoadDMT
					-- ,TP = @TP
					,GateEntryNo=@GateEntryNo
					,SAPNo=@SapNo
					,TPBookNo=@TPBookNo
					,WayBillNo=@WayBillNo
					,LRNumber=@LRNumber
					,Remarks=@Remarks
					,UpdateUSerId = @LoadedBy
					,UpdateDate = GetDate()
					WHERE ChallanNo = @ChallanNo  
					INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
					SELECT 'S'
				END
				ELSE
				BEGIN
					IF (@Transhipment = 1)
					BEGIN 
						Declare @IsDuplicateTras INT = NULL
						SELECT @IsDuplicateTras = Count(TruckId) From TLoadingChallan Where ChallanNo=@ChallanNo And TruckId = @TruckId
						If (@IsDuplicateTras > 0)
							THROW 50000, 'Transhipment for same truck is already done. Transhipment for this truck is not allwoed', 1
						INSERT INTO TLoadingChallan
							SELECT * FROM LoadingChallan WHERE LoadingChallan.ChallanNo=@ChallanNo
					END
					UPDATE LoadingChallan
					   SET ChallanNo = @ChallanNo
						  ,JobId = @JobId
						  ,STOId = @STOId
						  ,DELNo = @DELNo
						  ,TP = @TP
						  ,CostPerMT = @CostPerMT
						  ,LoadDate = @LoadDate
						  ,Freight = @Freight
						  ,Fixed = @Fixed
						  ,Transhipment = @Transhipment
						  ,LoadType = @LoadType
						  ,GrossWt = @GrossWt
						  ,TareWT = @TareWT
						  ,NetWT = @NetWT
						  ,GuaranteeWT = @GuaranteeWT
						  ,LoadDMT=@LoadDMT
						  ,Moisture = @Moisture
						  ,MoistureUnit = @MoistureUnit
						  ,TotalBags = @TotalBags
						  ,MaterialValue = @MaterialValue
						  ,TruckId = @TruckId
						  ,HSD = @HSD
						  ,PumpId = @PumpId
						  ,HSDRate = @HSDRate
						  ,HSDCost = @HSDCost
						  ,Seals = @Seals
						  ,AssociationCharge = @AssociationCharge
						  ,Labor = @Labor
						  ,Detention = @Detention
						  ,Collection = @Collection
						  ,Welfare = @Welfare
						  ,Other = @Other
						  ,Advance = @Advance
						  ,TotalAdvance = @TotalAdvance
						  ,Remarks = @Remarks
						  ,LoadedBy = @LoadedBy
						  ,UpdateUSerId = @LoadedBy
							,UpdateDate = GetDate()
						  ,LoadedOn = GETDATE()
						  ,TotalFreight = @TotalFreight
						  ,DriverId = @TruckDriverId
						  ,OwnerId = @TruckOwnerId
						  ,BrokerId = @TruckBrokerId
						  ,AssociationId = @TruckAssociationId
						  ,GateEntryNo=@GateEntryNo
						  ,SAPNo=@SapNo
						  ,TPBookNo=@TPBookNo
						  ,WayBillNo=@WayBillNo
						  ,LRNumber=@LRNumber
						  ,TruckSource=@TruckSource
					 WHERE ChallanNo = @ChallanNo  
					 INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
					 Exec sp_loadingvoucher 1, @ChallanNo, null
					 SELECT 'S'
				END
		END
		ELSE IF (@TruckId<>0 AND @JobId<>0 AND @Active=1)
		BEGIN
			INSERT INTO LoadingChallan
			   (ChallanNo
			   ,JobId
			   ,STOId
			   ,DELNo
			   ,TP
			   ,CostPerMT
			   ,LoadDate
			   ,Freight
			   ,Fixed
			   ,Transhipment
			   ,LoadType
			   ,GrossWt
			   ,TareWT
			   ,NetWT
			   ,GuaranteeWT
			   ,LoadDMT
			   ,Moisture
			   ,MoistureUnit
			   ,TotalBags
			   ,MaterialValue
			   ,TruckId
			   ,HSD
			   ,PumpId
			   ,HSDRate
			   ,HSDCost
			   ,Seals
			   ,AssociationCharge
			   ,Labor
			   ,Detention
			   ,Collection
			   ,Welfare
			   ,Other
			   ,Advance
			   ,TotalAdvance
			   ,Remarks
			   ,LoadedBy
			   ,InsertUserId, InsertDate
			   ,LoadedOn
			   ,TotalFreight
			   ,DriverId
			   ,OwnerId
			   ,BrokerId
			   ,AssociationId
			   ,GateEntryNo
			   ,SAPNo
			   ,TPBookNo
			   ,WayBillNo
			   ,LRNumber
			   ,TruckSource)
		 VALUES
			   (@ChallanNo
			   ,@JobId
			   ,@STOId
			   ,@DELNo
			   ,@TP
			   ,@CostPerMT
			   ,@LoadDate
			   ,@Freight
			   ,@Fixed
			   ,@Transhipment
			   ,@LoadType
			   ,@GrossWt
			   ,@TareWT
			   ,@NetWT
			   ,@GuaranteeWT
			   ,@LoadDMT
			   ,@Moisture
			   ,@MoistureUnit
			   ,@TotalBags
			   ,@MaterialValue
			   ,@TruckId
			   ,@HSD
			   ,@PumpId
			   ,@HSDRate
			   ,@HSDCost
			   ,@Seals
			   ,@AssociationCharge
			   ,@Labor
			   ,@Detention
			   ,@Collection
			   ,@Welfare
			   ,@Other
			   ,@Advance
			   ,@TotalAdvance
			   ,@Remarks
			   ,@LoadedBy
			   ,@LoadedBy,GETDATE()
			   ,GETDATE()
			   ,@TotalFreight
			   ,@TruckDriverId
			   ,@TruckOwnerId
			   ,@TruckBrokerId
			   ,@TruckAssociationId
			   ,@GateEntryNo
			   ,@SapNo
			   ,@TPBookNo
			   ,@WayBillNo
			   ,@LRNumber
			   ,@TruckSource)
			INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo
			Exec sp_loadingvoucher 1, @ChallanNo, null
			SELECT @@IDENTITY
		END
	ELSE
		SELECT '0'
	if @trancount = 0
        commit;
	END TRY
 begin catch
        declare @error int, @message varchar(4000), @xstate int;
        select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
        if @xstate = -1
            rollback;
        if @xstate = 1 and @trancount = 0
            rollback
        if @xstate = 1 and @trancount > 0
            rollback transaction [sp_loadingchallan];
        raiserror ('[sp_loadingchallan-1]:%s %d: %s', 16, 1,'', @error, @message) ;
    end catch
END
ELSE IF(@Type=2)
BEGIN
	SELECT * from vw_loadingchallandetails v
		WHERE v.ChallanNo LIKE '%'+ @Search+'%'
		ORDER BY ChallanNo
END
ELSE IF(@Type=30)
BEGIN
			If   EXISTS(select 1 from LoadingChallan WHERE LoadingChallan.ChallanNo= @ChallanNo)
			BEGIN
					--SELECT LoadingChallan.Id Id,LoadingChallan.TruckId TruckId,LoadingChallan.ChallanNo,CONVERT(VARCHAR(10),JobDetails.StartDate,103) StartDate,CONVERT(VARCHAR(10),JobDetails.EndDate,103) EndDate,JobDetails.JobNo,LoadingChallan.JobId,STONo,LoadingChallan.STOId STOId,LoadingChallan.DelNo DelNo,LoadingChallan.TP,LoadingChallan.CostPerMT,CONVERT(VARCHAR(10),LoadingChallan.LoadDate,103) LoadDate,LoadingChallan.Freight,LoadingChallan.Fixed,ISNULL(Transhipment.Transhipment, 0 ) Transhipment,TranshipmentId,LoadingChallan.LoadType,LoadingChallan.GrossWT,LoadingChallan.TareWT,LoadingChallan.NetWT,LoadingChallan.Moisture
					--  ,LoadingChallan.MoistureUnit,LoadingChallan.TotalBags,LoadingChallan.MaterialValue,Truck.TruckNumber TruckNumber,LoadingChallan.HSD,LoadingChallan.PumpID,PumpName.PumpName PumpName,LoadingChallan.HSDRate,LoadingChallan.HSDCost,LoadingChallan.Seals,LoadingChallan.AssociationCharge,LoadingChallan.Labor,LoadingChallan.Detention,LoadingChallan.Collection,LoadingChallan.Welfare
					--  ,LoadingChallan.Other,LoadingChallan.Advance,LoadingChallan.TotalAdvance,LoadingChallan.Remarks,LoadingChallan.LoadedBy,LoadingChallan.LoadedOn  FROM LoadingChallan
					--  LEFT OUTER JOIN PumpName ON PumpName.id=LoadingChallan.PumpID
					--  LEFT OUTER JOIN JobDetails ON JobDetails.id=LoadingChallan.JobId
					--  LEFT OUTER JOIN Truck ON Truck.id=LoadingChallan.TruckId
					--  LEFT OUTER JOIN STODetails ON STODetails.id=LoadingChallan.STOId
					--  LEFT OUTER JOIN Transhipment ON Transhipment.id=LoadingChallan.TranshipmentId
					--  WHERE LoadingChallan.ChallanNo=@ChallanNo
		
					SELECT *,(((CASE WHEN IsNull(GuaranteeWT, 0) > 0.0 THEN GuaranteeWT WHEN UnloadedNetWt is null THEN NetWt ELSE (CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt end) end))*(COALESCE(Freight,0))-(COALESCE(TotalAdvance,0))) NetPayable
						INTO #t2 FROM vw_LoadingChallan
					SELECT * FROM #t2 WHERE ChallanNo=@ChallanNo
		
			END
			ELSE
			BEGIN
				SELECT ChallanNo from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I')
			END
END
ELSE IF(@Type = 4)
BEGIN 
	If NOT EXISTS(select 1 from UnloadingChallan LEFT OUTER JOIN LoadingChallan ON LoadingChallanId=LoadingChallan.Id 
				WHERE LoadingChallan.ChallanNo= @ChallanNo)
	BEGIN
		declare @trancount1 int;
		set @trancount1 = @@trancount;
		if @trancount1 = 0
            begin transaction
        else
            save transaction [sp_loadingchallan1];
		BEGIN TRY
			DECLARE @VoucherId INT  = NULL
			SELECT @VoucherId=Id FROM Accounts_Vouchers 
			WHERE RefType = 1 And ReferenceId=@ChallanNo And VoucherType = 4 /*Journal*/;
			IF (@VoucherId IS NOT NULL)
				Exec [Acounting_DeleteVoucherById] @VoucherId
			DELETE FROM LoadingChallan WHERE ChallanNo=@ChallanNo
			DELETE FROM TLoadingChallan WHERE ChallanNo=@ChallanNo
			-- Update _InstantLoadingDetails SET ChallanNo = NULL Where ChallanNo = @ChallanNo
			if @trancount1 = 0
				commit;
			SELECT 'S'
		END TRY
		 BEGIN CATCH
				declare @error1 int, @message1 varchar(4000), @xstate1 int;
				select @error1 = ERROR_NUMBER(), @message1 = ERROR_MESSAGE(), @xstate1 = XACT_STATE();
				if @xstate1 = -1
					rollback;
				if @xstate1 = 1 and @trancount1 = 0
					rollback
				if @xstate1 = 1 and @trancount1 > 0
					rollback transaction [sp_loadingchallan1];
				raiserror ('Error:%s %d: %s', 16, 1,'', @error1, @message1) ;
		END CATCH
	END
	ELSE
	BEGIN
		IF 1 = 1
			THROW 50000, 'Unloading details available. Failed to delete this challan.', 1
	END
END
ELSE IF(@Type=5)
BEGIN
	DECLARE @ChallanBranchId INT=0
	DECLARE @IsBranchAccess INT=0
	SELECT @ChallanBranchId=BranchId FROM RegisteredChallans WHERE Status IN ('I', 'U','L') AND ChallanNo=@ChallanNo
	SELECT @IsBranchAccess = Count(BranchId) FROM UserBranchAccess WHERE UserId=@LoadedBy AND BranchId = @ChallanBranchId
	IF @IsBranchAccess = 0
		SELECT @IsBranchAccess = (CASE WHEN BranchId = @ChallanBranchId THEN 1 ELSE 0 END)  FROM Users WHERE Id=@LoadedBy
	IF((@ChallanBranchId>0 AND (@LoadedBy = 3105 OR @IsBranchAccess >= 1)) OR @LoadedBy=0)
	BEGIN
		If EXISTS(select 1 from LoadingChallan WHERE LoadingChallan.ChallanNo= @ChallanNo)
		BEGIN
			SELECT top 1 lv.*, D.Code as DriverCode, O.Code as OwnerCode, B.Code as BrokerCode, A.Association as AssCode,
			DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL) as VoucherStatus,
			(Select TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)) as TokenStatus
			FROM 
			vw_loadingchallandetails lv
			Inner Join LoadingChallan l On L.id = lv.LoadingId
			LEFT OUTER JOIN Driver D ON D.Id=l.DriverId
			LEFT OUTER JOIN [Owner] O ON O.Id=l.OwnerId
			LEFT OUTER JOIN [Broker] B ON B.Id=l.BrokerId
			LEFT OUTER JOIN [Association] A ON A.Id=l.AssociationId
			WHERE lv.ChallanNo=@ChallanNo
			-- AND TruckId IS NOT NULL AND JobId IS NOT NULL
		END
		ELSE
		BEGIN
			SELECT ChallanNo from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
		END
	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_LoadingChallanNew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_LoadingChallanNew] (@Type INT, @LoadingId INT)
AS
BEGIN
	IF(@Type = 1) -- Validate
	BEGIN
		DECLARE @InvoiceNo VARCHAR(50) = NULL
		DECLARE @ErrorMsg VARCHAR(5000) = NULL
		DECLARE @TruckDriverId INT = NULL
		DECLARE @TruckOwnerId INT = NULL
		DECLARE @TruckAssociationId INT = NULL
		DECLARE @TruckBrokerId INT = NULL
		DECLARE @JobStatus INT=NULL
		DECLARE @JobLedgerId INT=NULL
		DECLARE @JobLedgerBalance DECIMAL(18,2) = 0.0
		DECLARE @MaxFreightRate DECIMAL(18,2) = 0.0
		DECLARE @MaxSpecialFreightRate DECIMAL(18,2) = 0.0
		DECLARE @JobStartDate DATETIME  = NULL
		DECLARE @JobEndDate DATETIME  = NULL
		DECLARE @CliamQtyType INT = NULL
		DECLARE @ValidChallanCount INT = 0
		DECLARE @ChallanNo INT = 0
		DECLARE @LoadDate DATE = NULL
		DECLARE @TruckSource VARCHAR(50) = NULL
		DECLARE @JobId INT = 0
		DECLARE @GuaranteeWT DECIMAL(18,3) = NULL
		DECLARE @TotalFreight DECIMAL(18,3) = NULL
		DECLARE @TruckId INT = NULL
		DECLARE @Freight DECIMAL(18,2) = 0.0
		DECLARE @Active INT=0
		DECLARE @HSDCost DECIMAL(18,2) = 0.0
		DECLARE @PumpId INT=0
		DECLARE @TotalTyers INT=0
		DECLARE @Transhipment INT = 0
		DECLARE @IsMiningReturn INT = 0
		DECLARE @TripCount INT =0
		DECLARE @TPInvNo Varchar(50) = ''
		DECLARE @IsMultiple BIT=0
		DECLARE @ClientRate DECIMAL(18,2)=0.00
		DECLARE @paymentGuaranteeWT  BIT=0
		DECLARE @LoadTime INT=0
		DECLARE @RateId INT=0
		DECLARE @MaxLoadTime INT=0
		--Declare @CashAdvance decimal(18,2) =0.0

		Select @ChallanNo = ChallanNo, @LoadDate = LoadDate, @JobId = JobId, @GuaranteeWT = ChargesQty, @TotalFreight = TotalFreight, @TruckSource = TruckSource,
		@TruckId = TruckId, @Freight = Freight, @HSDCost = HSDCost, @PumpId = PumpId, @Transhipment = Transhipment, @LoadTime=IsNull(RateTime,0),
		@TPInvNo = ISNULL(TP, ''), @ClientRate=DBO.[FN_GetClientRateForChallan](@JobId, @TruckId, @LoadDate, IsNull(RateTime,0))
		From LoadingChallan Where Id = @LoadingId

			select @ClientRate=Rate, @RateId=rateid from dbo.[FN_GetClientRateForChallanWithRateId](@JobId, @TruckId, @LoadDate, @LoadTime, @RateId)

		IF @ClientRate=0
			THROW 50000, 'Please setup client rate in sector', 1

		IF @ChallanNo IS NULL
			THROW 50000, 'Challan No is not passed in LoadingChallan for Type = 1', 1
   --   	IF EXISTS (SELECT 1 FROM _InvoiceChallan WHERE ChallanNo=@ChallanNo)
			--THROW 50000, 'Invoice created cannot modify challan.', 1

		IF @LoadDate > GETDATE()
			THROW 50000, 'LoadDate should be less then Current Date.', 1
		SELECT @ValidChallanCount = Count(*) from RegisteredChallans WHERE ChallanNo=@ChallanNo AND Status IN ('I', 'U')
		SET @ErrorMsg = 'Challan is not registerd or not issued. Challn No - ' + Convert(Varchar(50), @ChallanNo)
		IF @ValidChallanCount = 0
			THROW 50000, @ErrorMsg, 1
		Select @JobStartDate=Job_StartDate, @JobEndDate=Job_EndDate, @CliamQtyType = ClaimQtyType, @Active = Active,@JobStatus=JobStatus, @IsMultiple=IsMultipleLoading,@paymentGuaranteeWT=ShowClientRate
		FROM vw_jobdetails WHERE JobId = @JobId
		IF ISNULL(@JobStatus,1)<>4
			THROW 50000, 'Selected job is not approved. Failed to create loading challan.', 1
		IF @LoadDate IS NOT NULL AND (@LoadDate < @JobStartDate OR @LoadDate > @JobEndDate)
			THROW 50000, 'Load date must be with in job period.', 1
		--IF @Active = 0
		--	THROW 50000, 'Selected Job in Loading Challan is not active.', 1
		IF (IsNull(@GuaranteeWT,0.0) > 0 AND (@CliamQtyType IS NULL OR @CliamQtyType <> 5)) 
			THROW 50000, 'Claim Type in work order of selected job is not Guarantee WT. So Guarantee WT is not allowed.', 1
		SET @TotalFreight=ROUND(COALESCE(@TotalFreight,0),0)
		
		SET @MaxFreightRate = 0.0
		DECLARE @FreightTolerance DECIMAL(18,2)=0.0
		DECLARE @AllowedToOverride BIT=0
		IF @TruckSource = 'MARKET'
				SELECT @AllowedToOverride=IsNull(AllowToOverride,0),@MaxLoadTime= R.RateTime ,@MaxFreightRate = R.FreightRate, @FreightTolerance=isnull(FreightTolerance,0) FROM _JobFreightMktRules R 
				WHERE JobId=@JobId AND CONVERT(SMALLDATETIME, @LoadDate,103) >=  DateFrom AND CONVERT(SMALLDATETIME, @LoadDate,103)  <= IsNull(DateTo, '2555-01-01')
		ELSE IF @TruckSource = 'ASSOCIATION'  
				SELECT @MaxFreightRate = Min(R.FreightRate) ,@MaxLoadTime= Min(R.RateTime) FROM _JobFrieghtAssRules R 
				WHERE JobId=@JobId AND CONVERT(SMALLDATETIME, @LoadDate,103) >=  DateFrom AND CONVERT(SMALLDATETIME, @LoadDate,103)  <= IsNull(DateTo, '2555-01-01')
		ELSE
			THROW 50000, 'Invalid Truck Source.', 1
		Select @MaxSpecialFreightRate = Min(FreightRate)
			from _JobFrieghtSpecialRules sr
			LEFT OUTER JOIN
			_JobFreightSpecialParty sp ON sp.JobSpecialFreightId=sr.Id
			LEFT OUTER JOIN
			_JobFreightSpecialTruck st ON st.JobSpecialFreightId=sr.Id
				Where sr.JobId=@JobId AND sr.LoadDate=CONVERT(SMALLDATETIME, @LoadDate,103) 
			AND (sp.PartyId=@TruckOwnerId OR st.TruckId = @TruckId)
		if (@MaxSpecialFreightRate > @MaxFreightRate)
			SET @MaxFreightRate = @MaxSpecialFreightRate
		if (@MaxFreightRate is null)
			THROW 50000, 'Freight rules are not defined in selected Job.', 1

		--	DECLARE @ICChallan INT = null
		--DECLARE @TCChallan INT = null
		--DECLARE @LAmount DECIMAL(18,2) = 0.0
		--select @ICChallan =IC.ChallanNo ,@TCChallan = TC.ChallanNo ,@LAmount = L.TotalFreight from LoadingChallan L Left outer join _TokenChallans TC ON TC.ChallanNo = L.ChallanNo
		-- Left outer join _InvoiceChallan IC ON IC.ChallanNo = L.ChallanNo
		--where L.ChallanNo = @ChallanNo
		--if @TCchallan is Not null OR @ICChallan is not null AND @TotalFreight <>0
		--	THROW 50000, 'Can not Modify.Token OR Ivoice created!!', 1
		


		--IF @AllowedToOverride=1 AND IsNull(@Freight,0.0) > (IsNull(@MaxFreightRate,0.0)+@FreightTolerance)
		--	THROW 50000, 'Freight rate can not be more then defined in Job.', 1

		--IF @AllowedToOverride=0 AND IsNull(@Freight,0.0)>IsNull(@MaxFreightRate,0.0) AND ISNULL(@LoadTime,0)> ISNULL(@MaxLoadTime,0)
		--	THROW 50000, 'Freight rate can not be more then defined in Job.', 1
		--Declare @Owner INT
		--    Select @Owner=[Owner] from Fleet_Vehicle where Id=@TruckId
		--if(@Owner=1)
		--  	THROW 50000, 'This truck is not allow for loading.', 1
		--if(@TruckId=1)
		--  	THROW 50000, 'This truck is not allow for loading.', 1

		--SELECT @TripCount=COUNT(TruckId) FROM LoadingChallan L
		--LEFT OUTER JOIN _Job J ON J.Id=L.JobId
			--	WHERE @TruckId = TruckId AND CONVERT(SMALLDATETIME, @LoadDate,103) =  CONVERT(SMALLDATETIME, LoadDate,103) AND IsMultipleLoading=0
		--IF @TripCount>1
			--THROW 50000, 'Only single trip allowed in a day', 1

			SELECT @TotalTyers=TotalTyers FROM Fleet_Vehicle WHERE Id=@TruckId
			
			IF(@TotalTyers=0 AND @CliamQtyType=5)
			THROW 50000, 'Tyres  can not be  defined GuaranteeWT Csae .', 1

			if (@TotalTyers=6 AND @paymentGuaranteeWT=1)
			SET @GuaranteeWT = 12;
			if (@TotalTyers=10 AND @paymentGuaranteeWT=1)
			SET @GuaranteeWT = 18;
			if (@TotalTyers=12 AND @paymentGuaranteeWT=1)
			SET @GuaranteeWT = 24;
			if (@TotalTyers=14 AND @paymentGuaranteeWT=1)
			SET @GuaranteeWT = 29;

			

		--IF CONVERT(DATE, @LoadDate,102)>=CONVERT(DATE, '2018-09-01',102) AND NOT EXISTS (SELECT 1 from _AdvanceDetails D LEFT OUTER JOIN _Advance A ON A.Id=D.AdvanceId WHERE JobId=@JobId AND CONVERT(DATE,LoadDate,102)=CONVERT(DATE, @LoadDate,102) )
		--	THROW 50000, 'Loading for job not allowed without requisition', 1

		-- truck block Check
		DECLARE @IsBlocked bit
		SELECT @IsBlocked=IsBlocked FROM Fleet_Vehicle WHERE Id=@TruckId
		if(@IsBlocked=1)
			THROW 50000, 'Truck is block.', 1
		Select @IsMiningReturn = IsNull(MiningReturn,0) from _WorkOrder W
		Inner Join _WorkOrderItems I On I.OrderId = W.Id
		Inner Join _Job J On J.WOSectorId = I.Id
		ANd J.Id= @JobId
		IF (LEN(@TPInvNo) = 0 AND @IsMiningReturn = 1)
			THROW 50000, 'TPNo is mandetory as mining return is required for its Work Order.', 1
		--IF @HSDCost IS NOT NULL AND @HSDCost > 0.0 AND @PumpId IS NULL
		--	THROW 50000, 'Please select pump becasue HSD Advnace is provided.', 16
		IF (@Transhipment = 1)
		BEGIN 
			Declare @IsDuplicateTras INT = NULL
			SELECT @IsDuplicateTras = Count(TruckId) From TLoadingChallan Where ChallanNo=@ChallanNo And TruckId = @TruckId
			If (@IsDuplicateTras > 0)
				THROW 50000, 'Transhipment for same truck is already done. Transhipment for this truck is not allwoed', 1
			INSERT INTO TLoadingChallan
				SELECT * FROM LoadingChallan WHERE LoadingChallan.ChallanNo=@ChallanNo
		END
		--Exec sp_loadingvouchernew @LoadingId=@LoadingId
		--DECLARE @AllowModification bit = 0
		--Select @AllowModification = IsNull(AllowToModify,0) from _WorkOrder W
		--Inner Join _WorkOrderItems I On I.OrderId = W.Id
		--IF (@AllowModification = 0)
		--Begin InvoiceClientRate=@ClientRate,
		Update LoadingChallan Set InvoiceClientRate=@ClientRate,ClientRateId=@RateId ,LoadedBy = IsNull(UpdateUSerId, InsertUserId), LoadedOn = GETDATE(),GuaranteeWT=@GuaranteeWT where LoadingChallan.ChallanNo=@ChallanNo 
		--END  InvoiceClientRate=@ClientRate,
		--INSERT INTO Log_LoadingChallan SELECT * FROM LoadingChallan where LoadingChallan.ChallanNo=@ChallanNo	

		Exec sp_LoadingVoucherNew @LoadingId
	END
	ELSE IF(@Type = 2) -- Delete
	BEGIN 
		Declare @LoadingStatus INT = NULL
		Declare @LoadingAdvVoucherId INT = NULL
		Declare @LoadingBulkPaymentRefNo Varchar(50) = NULL
		Declare @EMsg Varchar(1000) = NULL
		Select @ChallanNo = ChallanNo, @LoadingStatus = ApprovalStatus From LoadingChallan Where Id = @LoadingId
		
		--SET @EMsg = Convert(Varchar(50), @LoadingId)
		--IF 1=1
		--	THROW 50000, @EMsg, 1
		IF @LoadingStatus = 4
			THROW 50000, 'Loading Challan is approved and can not be deleted.', 1
		If EXISTS(select 1 from UnloadingChallan U  WHERE U.LoadingChallanId=@LoadingId)
			THROW 50000, 'Unloading details available. Failed to delete this challan.', 1
		
		Select @LoadingAdvVoucherId = Max(VoucherId) From LoadingAdvance Where LoadingId = @LoadingId and PaymentMode Not in (1)
		IF @LoadingAdvVoucherId IS NOT NULL
			THROW 50000, 'Payment voucher for loading challan has been created. Failed to delete this challan.', 1
		Select @LoadingBulkPaymentRefNo = Max(RefNo) From LoadingAdvanceBulkPayment B
		Inner Join LoadingAdvanceBulkPaymentId BI On B.Id = BI.BulkPaymentId
		Inner Join LoadingAdvance LA On LA.Id = BI.LoadingAdvId
		Where LA.LoadingId = @LoadingId
		SET @EMsg = 'This challan is added in Bulk Payment ('+@LoadingBulkPaymentRefNo+'), Can not delete this challan.'
		IF @LoadingBulkPaymentRefNo IS NOT NULL
			THROW 50000, @EMsg, 1
		declare @trancount1 int;
		set @trancount1 = @@trancount;
		if @trancount1 = 0
			begin transaction
		else
			save transaction [sp_loadingchallan1];
		BEGIN TRY
			DECLARE @VoucherId INT  = NULL
			SELECT @VoucherId=Id FROM Accounts_Vouchers 
			WHERE RefType = 1 And ReferenceId=@ChallanNo And VoucherType = 4 /*Journal*/;
			IF (@VoucherId IS NOT NULL)
				Exec [Acounting_DeleteVoucherById] @VoucherId
			-- DELETE FROM LoadingChallan WHERE ChallanNo=@ChallanNo
			DELETE FROM TLoadingChallan WHERE ChallanNo=@ChallanNo
			DELETE FROM _InstantLoadingDetails Where LoadingId = @LoadingId
			if @trancount1 = 0
				commit;
			SELECT 'S'
		END TRY
			BEGIN CATCH
				declare @error1 int, @message1 varchar(4000), @xstate1 int;
				select @error1 = ERROR_NUMBER(), @message1 = ERROR_MESSAGE(), @xstate1 = XACT_STATE();
				if @xstate1 = -1
					rollback;
				if @xstate1 = 1 and @trancount1 = 0
					rollback
				if @xstate1 = 1 and @trancount1 > 0
					rollback transaction [sp_loadingchallan1];
				raiserror ('Error:%s %d: %s', 16, 1,'', @error1, @message1) ;
		END CATCH

		--DECLARE @UnloadingWt decimal(18,3) = 0
		--DECLARE @UnloadingDate datetime = null
		--DECLARE @UnloadingChId int = 0
		--DECLARE @UnLoadingId int = 0
	 --   select @UnloadingWt = UnloadingWt ,@UnloadingDate = UnloadingDate ,@UnloadingChId=Id  from LoadingChallan where ChallanNo=@ChallanNo
		--select @UnLoadingId = loadingChallanId from UnloadingChallan where LoadingChallanId = @UnloadingChId

		--If (@UnLoadingId IS null)

		--insert into UnloadingChallan (LoadingChallanId ,UnloadedNetWt, UnloadedDate) values (@UnloadingChId, @UnloadingWt, @UnloadingDate)
		--If (@UnLoadingId IS Not null)
		--Update UnloadingChallan set  UnloadedNetWt = @UnloadingWt, UnloadedDate=@UnloadingDate where LoadingChallanId = @UnloadingChId


	END

	    Declare @CashAdvance decimal(18,2) =0.0
		Declare @HSDAdvance decimal(18,2) =0.0
		Declare @SlipNo varchar(30) =null
		Declare @CommAmount decimal(18,2) =0.0
		Declare @OfficeAmount decimal(18,2) =0.0
		Declare @GPSAmount decimal(18,2) =0.0
		Declare @OnlineRegAmount decimal(18,2) =0.0
		
		select @CashAdvance=ISNULL(Advance,0.0) , @HSDAdvance = ISNULL(Hsd,0.0), @SlipNo = ISNULL(MemoNo,'') ,@CommAmount = ISNULL(CommAmount,0.0) 
		       ,@GPSAmount = ISNULL(GPSAmount,0.0) ,@OnlineRegAmount = ISNULL(OnlineRegAmount,0.0)  ,@OfficeAmount = ISNULL(OtherExpenses ,0.0) from LoadingChallan where ChallanNo = @ChallanNo

		Declare @AdvAmount decimal(18,2) =0.0
		select @AdvAmount= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=1

		IF @CashAdvance>0 AND @AdvAmount <> @CashAdvance  --CashADVANCE
		BEGIN
		Declare @Cash Decimal(18,2) = null
			select @Cash =Advance from LoadingChallan where ChallanNo = @ChallanNo
			delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=1 And @Cash = Amount
		--delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=1
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @CashAdvance, 1, 0, NULL, 0, @LoadDate,  3346, 1)
	   END

			Declare @AdvAmount1 decimal(18,2) =0.0
			select @AdvAmount1= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=2


			IF @HSDAdvance>0  AND @AdvAmount1 <> @HSDAdvance  --HSDCost Advance
			BEGIN
			Declare @HSD Decimal(18,2) = null
			select @HSD =hsd from LoadingChallan where ChallanNo = @ChallanNo
			delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=2 And @HSD = Amount
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, PumpId, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode ,MemoNo)
			VALUES(@LoadingId, @HSDAdvance, 2, @PumpId,0, NULL, 0, @LoadDate,  3346, 1 ,@SlipNo)
			END

				Declare @AdvAmount2 decimal(18,2) =0.0
			select @AdvAmount2= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=9


			IF @CommAmount>0 AND @AdvAmount2 <> @CommAmount  --CommAmount
			BEGIN
			delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=9
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @CommAmount, 9, 0, NULL, 0, @LoadDate,  3346, 1)
		END

			Declare @AdvAmount3 decimal(18,2) =0.0
			select @AdvAmount3= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=8

		IF @OfficeAmount>0  AND @AdvAmount3 <> @OfficeAmount --OfficeAmount
		BEGIN
		delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=8
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @OfficeAmount, 8, 0, NULL, 0, @LoadDate,  3346, 1)
		END

		Declare @AdvAmount4 decimal(18,2) =0.0
			select @AdvAmount4= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=6

		IF @GPSAmount>0  AND @AdvAmount4 <> @GPSAmount -- GPSAmount
		BEGIN
		delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=6
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @GPSAmount, 6, 0, NULL, 0, @LoadDate,  3346, 1)
		END

		Declare @AdvAmount5 decimal(18,2) =0.0
			select @AdvAmount3= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=7

		IF @OnlineRegAmount>0  AND @AdvAmount3 <> @OnlineRegAmount --OnlineRegAmount
		BEGIN
		delete from LoadingAdvance where LoadingId = @Loadingid ANd AdvanceType=7
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @OnlineRegAmount, 7, 0, NULL, 0, @LoadDate,  3346, 1)
		END

			Exec sp_loadingvouchernew @LoadingId=@LoadingId		

END


GO
/****** Object:  StoredProcedure [dbo].[sp_LoadingVoucherAdvPayment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_LoadingVoucherAdvPayment] (@LoadingAdvId INT = NULL, @BulkPaymentId INT = NULL)
As
Begin
	DECLARE @ChallanNo INT
	DECLARE @BranchId INT 
	DECLARE @EexecutionMessage	Varchar(2000)
	DECLARE @trancount int = 0
	DECLARE @VoucherDate DATETIME
	DECLARE @VoucherRefType INT
	DECLARE @VoucherRefId INT
	DECLARE @VoucherRefNo Varchar(50)
	DECLARE @Narration varchar(2000)=''		
	DECLARE @CreatedBy int=0		
	DECLARE @FinancialYearId int= NULL		
	DECLARE @PaidLedgerId INT
	DECLARE @ChkNeftRefNo Varchar(50)
	DECLARE @PaymentMode Varchar(50)
	CREATE TABLE #tempLoadingAdvance(LoadingAdvId int, AdvanceType int, Amount Decimal(18,2), TDSDeduction Decimal(18,2), NetPayable Decimal(18,2), TDSId int, TruckOwner VARCHAR(50), LoadDate VARCHAR(10), ChallanNo INT, ChequeNo VARCHAR(20))
	IF @LoadingAdvId IS NOT NULL
	BEGIN
		SELECT 
			@VoucherDate = PaidOn, 
			@BranchId = J.BranchId, @VoucherRefId = A.Id, @VoucherRefNo = @ChallanNo, @VoucherRefType = 2,
			@CreatedBy = A.UpdateUserId,
			@PaidLedgerId = A.LedgerId,
			@ChkNeftRefNo = A.ChkNeftRefNo,
			@PaymentMode = A.PaymentMode,
			@Narration = Concat('Challan No ' + Convert(varchar(50), ChallanNo), '. ' , T.TypeName, ' Payment. ' , IsNull(Narration, ''))
		FROM [LoadingAdvance] A
		Inner Join LoadingChallan L On L.Id = A.LoadingId
		Inner Join LoadingAdvanceType T On T.Id = A.AdvanceType
		LEFT Join JobDetails J On J.Id = L.JobId
		Where A.Id = @LoadingAdvId
		INSERT INTO #tempLoadingAdvance (LoadingAdvId, AdvanceType, Amount, TDSDeduction, NetPayable, TDSId, TruckOwner, LoadDate, ChallanNo, ChequeNo) 
		SELECT A.[Id] as LoadingAdvId
			,[AdvanceType]
			,[Amount]
			,[TDSDeduction]
			,[NetPayable]
			,TDSId
			,P.PartyName
			,CONVERT(VARCHAR(10),L.LoadDate,103) LoadDate
			,L.ChallanNo
			,NULL ChequeNo
		FROM [LoadingAdvance] A
		Inner Join LoadingChallan L On L.Id = A.LoadingId
		Inner Join Common_Parties P On P.Id = L.OwnerId
		LEFT Join JobDetails J On J.Id = L.JobId
		Where A.Id = @LoadingAdvId
	END
	ELSE IF @BulkPaymentId IS NOT NULL
	BEGIN
		SELECT 
			@VoucherDate = BP.PaymentDate, 
			@VoucherRefId = BP.Id, @VoucherRefId = BP.Id, @VoucherRefNo = BP.RefNo, @VoucherRefType = 9,
			@CreatedBy = BP.UpdateUserId,
			@PaidLedgerId = BP.BankLedger,
			@ChkNeftRefNo = BP.ChkNeftRefNo,
			@PaymentMode = BP.PaymentMode,
			@Narration = BP.Narration
		FROM LoadingAdvanceBulkPayment BP
		Where BP.Id = @BulkPaymentId
		Select @BranchId = BranchId From Users Where Id = @CreatedBy
		INSERT INTO #tempLoadingAdvance (LoadingAdvId, AdvanceType, Amount, TDSDeduction, NetPayable, TDSId, TruckOwner, LoadDate, ChallanNo, ChequeNo) 
		SELECT A.[Id] as LoadingAdvId
			,[AdvanceType]
			,[Amount]
			,[TDSDeduction]
			,[NetPayable]
			,TDSId
			,P.PartyName
			,CONVERT(VARCHAR(10),L.LoadDate,103) LoadDate
			,L.ChallanNo
			,LBP.ChkNeftRefNo ChequeNo
		FROM LoadingAdvanceBulkPaymentId BP
		INNER JOIN LoadingAdvanceBulkPayment LBP ON LBP.Id=BP.BulkPaymentId
		Inner Join LoadingAdvance A On A.Id = BP.LoadingAdvId
		Inner Join LoadingChallan L On L.Id = A.LoadingId
		Inner Join Common_Parties P On P.Id = L.OwnerId
		LEFT Join JobDetails J On J.Id = L.JobId
		Where BP.BulkPaymentId = @BulkPaymentId
	END
	ELSE
		THROW 50000, 'Invalid parameters passed in [sp_LoadingVoucherAdvPayment]', 1
	
	DECLARE @ChequeNo varchar(1000)=''
	DECLARE @Owners varchar(1000)=''
	DECLARE @LoadDates varchar(1000)=''

	SELECT @ChequeNo = CASE WHEN ChequeNo IS NOT NULL THEN @ChequeNo + ChequeNo + ', ' ELSE 'CASH' END, @Owners = @Owners + TruckOwner + ', ' , @LoadDates = @LoadDates + LoadDate + ', ' from #tempLoadingAdvance

	IF LTRIM(RTRIM(ISNULL(@Narration,'')))=''
	BEGIN
		SELECT @Narration = 'Being Loading adv paid to '+@Owners+' vide Cheque No '+@ChequeNo +' on Load Date '+ @LoadDates	
	END

	SET @trancount = @@TRANCOUNT  
	BEGIN TRY
		if @trancount = 0
			begin transaction
		else
			save transaction sp_LoadingVoucherAdvPayment; 
		
		DECLARE @VoucherId INT=0
		DECLARE @VoucherName VARCHAR(200)=NULL
		SELECT @VoucherId=Id FROM Accounts_Vouchers 
			WHERE RefType = @VoucherRefType And ReferenceId=@VoucherRefId And VoucherType = 2 /*Payment*/;
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
		IF(@VoucherId IS NULL OR @VoucherId=0)
		BEGIN
			SET @VoucherName='6107'
			--SET @EexecutionMessage = @EexecutionMessage + ' Inserting Voucher Row'
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo)
			VALUES
				(@VoucherName,
				@VoucherDate,
				2, -- 'Payment Voucher',
				2, -- Submitted 
				@CreatedBy,
				GETDATE(),
				@Narration,
				@BranchId,
				@FinancialYearId,
				@VoucherRefType,
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			DECLARE @VoucherTempStatus INT = 0
			SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
			IF @VoucherTempStatus IS NOT NULL AND @VoucherTempStatus = 4 -- Approved
				THROW 50000, 'Loading voucher has been approved. Can not modify loading challan. Please reject the voucher.', 16
			SET @EexecutionMessage = @EexecutionMessage + ' Updating Voucher Row.'
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@VoucherDate,
				UpdateUserId=@CreatedBy,
				UpdateDate=GETDATE(),
				[Status] = 2,
				[Description]=@Narration,
				BranchId=@BranchId,
				FinancialYear=@FinancialYearId
				,RefType = @VoucherRefType
				,ReferenceNo = @VoucherRefNo
				,ReferenceId = @VoucherRefId
				,PaymentMode = @PaymentMode
				,ChkNeftRefNo=@ChkNeftRefNo
			WHERE Id = @VoucherId
		END
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
		SET @EexecutionMessage = @EexecutionMessage + ' DR FreightTransport.'
		
		DECLARE @TotalPayable DECIMAL(18,2) = 0.0
		DECLARE @TotalTDS DECIMAL(18,2) = 0.0
		DECLARE @Amount DECIMAL(18,2) = 0.0
		DECLARE @NetPayable DECIMAL(18,2) = 0.0
		DECLARE @TDSAmount DECIMAL(18,2) = 0.0
		DECLARE @TLedgerId INT
		DECLARE @TDSId INT = NULL
		Select @Amount = Sum(IsNull(Amount,0.0)), @NetPayable = Sum(IsNull(NetPayable,0.0)), @TDSAmount = Sum(IsNull(TDSDeduction,0.0)), @TDSId = Max(TDSId) 
		From  #tempLoadingAdvance Where AdvanceType = 1 -- Owner
		IF (@NetPayable > 0.0)
		BEGIN
			SET @TotalPayable = @TotalPayable + @NetPayable
			SELECT @TLedgerId = LedgerId FROM SystemLedger Where Description = 'TRANSPORTATION ADV TRUCK OWNERS'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@TLedgerId,NULL,2,@NetPayable)	
		END
		IF @TDSAmount > 0.0 AND @TDSId IS NOT NULL
		BEGIN
			SET @TotalTDS = @TotalTDS + @TDSAmount
			--Select @TLedgerId = LedgerId  From Accounts_TDSSettings Where Id = @TDSId
			--INSERT INTO Accounts_VoucherTransaction
			--	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			--VALUES
			--	(@VoucherId,@TLedgerId,NULL,1,@TDSAmount)	
		END
		Select @Amount = Sum(IsNull(Amount,0.0)), @NetPayable = Sum(IsNull(NetPayable,0.0)), @TDSAmount = Sum(IsNull(TDSDeduction,0.0)), @TDSId = Max(TDSId) 
		From  #tempLoadingAdvance Where AdvanceType = 3 -- Third Party
		IF (@NetPayable > 0.0)
		BEGIN
			SET @TotalPayable = @TotalPayable + @NetPayable
			SELECT @TLedgerId = LedgerId FROM SystemLedger Where Description = 'TRANSPORTATION ADV THIRD PARTY'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@TLedgerId,NULL,2,@NetPayable)	
		END
		IF @TDSAmount > 0.0 AND @TDSId IS NOT NULL
		BEGIN
			SET @TotalTDS = @TotalTDS + @TDSAmount
			--Select @TLedgerId = LedgerId  From Accounts_TDSSettings Where Id = @TDSId
			--INSERT INTO Accounts_VoucherTransaction
			--	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			--VALUES
			--	(@VoucherId,@TLedgerId,NULL,1,@TDSAmount)	
		END
		DECLARE @TotalAmt Decimal(18,2) = 0.0
		Select @TotalAmt = Sum(IsNull(Amount,0.0)) From  #tempLoadingAdvance 
		IF @TotalAmt <> (@TotalPayable + @TotalTDS)
			THROW 50000, 'Total of payable and TDS mismatch. Check calcualtion', 1
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@PaidLedgerId,NULL,1,@TotalPayable)
		Update LoadingAdvance Set VoucherId = @VoucherId Where Id in (Select LoadingAdvId From #tempLoadingAdvance)
		IF (@BulkPaymentId IS NOT NULL)
			Update LoadingAdvanceBulkPayment Set VoucherId = @VoucherId Where Id = @BulkPaymentId
		Exec [Acounting_ValidateVoucher] @Voucherid
		IF @trancount = 0
			COMMIT;
	END TRY
	BEGIN CATCH
		declare @error int, @message varchar(4000), @xstate int;
		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
		if @xstate = -1
			rollback;
		if @xstate = 1 and @trancount = 0
			rollback
		if @xstate = 1 and @trancount > 0
			rollback transaction [sp_LoadingVoucherAdvPaymentr];
		raiserror ('[sp_LoadingVoucherAdvPayment]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[sp_LoadingVoucherNew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[sp_LoadingVoucherNew] (@LoadingId INT, @Type INT=0)
As
Begin
	IF @Type=0
	BEGIN
		DECLARE @OwnerId	INT
		DECLARE @ChallanNo INT
		DECLARE @BranchId INT 
		DECLARE @EexecutionMessage	Varchar(2000)
		DECLARE @trancount int = 0
		DECLARE @VoucherDate DATETIME
		DECLARE @VoucherType INT=4
		DECLARE @Narration varchar(2000)=''		
		DECLARE @CreatedBy int=0		
		DECLARE @FinancialYearId int= NULL	
		DECLARE @CostCenterId INT=NULL		
		DECLARE @JobId INT=NULL	
		DECLARE @CashLedgerId INT=NULL
		DECLARE @TotalFreight Decimal(18,2) = 0.0
		DECLARE @FreightTransport INT=NULL
		DECLARE @FreightPayable INT=NULL
		DECLARE @DeductionType Varchar(50) = NULL
		DECLARE @HSDAdvance Decimal(18,2) = 0.0
		DECLARE @LoadDetention Decimal(18,2) = 0.0
		DECLARE @PumpRateId INT
	
		Update LoadingChallan Set TotalFreight = Freight * (Case When IsNull(GuaranteeWT, 0.0) > 0.0 Then GuaranteeWT Else NetWT End) Where Id = @LoadingId
	
		SELECT @ChallanNo = ChallanNo, @VoucherDate = LoadDate,  @Narration = Remarks, @CreatedBy = IsNull(UpdateUserId, InsertUserId), @JobId = JobId, 
		@OwnerId = OwnerId, @TotalFreight = TotalFreight
		From LoadingChallan Where Id = @LoadingId

		--IF LTRIM(RTRIM(ISNULL(@Narration,'')))=''
	--	BEGIN
		SELECT @Narration = 'Being Loading adv booked of '+CONVERT(VARCHAR,NetWt)+' MT@ '+CONVERT(VARCHAR,FreightRate)+'/MT fm '+Sector+' Under CH No-'+CONVERT(VARCHAR,ChallanNo)+',Job No '+JobNo+',Truck No '+TruckNumber+',Loading date '+CONVERT(VARCHAR(10), LoadDate, 103)+'. PAN No '+OwnerPan FROM 
			vw_ReportLoadingChallanReport L
				WHERE L.Id=@LoadingId
		--END

		select * from _Job

		SELECT	@BranchId=ExecutingBranch, @CostCenterId=CostCenterId, @CashLedgerId=LedgerId FROM _Job WHERE Id=@JobId
		DECLARE @IsAssoLedger BIT=0
		--SELECT @CashLedgerId=LedgerId FROM LoadingChallan WHERE Id=@LoadingId
		--SELECT	@BranchId=BranchId, @CostCenterId=CostCenterId FROM JobDetails WHERE Id=@JobId
		--IF @CashLedgerId IS NULL OR @CashLedgerId=0
		--	SELECT	TOP 1 @CashLedgerId=LedgerId FROM _JobAdvanceLedger WHERE JobId=@JobId
		
		--IF EXISTS (SELECT 1 FROM Common_Parties WHERE LedgerId=@CashLedgerId)
		--	SET @IsAssoLedger=1

		SELECT @FreightPayable=LedgerId FROM SystemLedger WHERE Description='FREIGHTPAYABLE'
		SELECT @FreightTransport=LedgerId FROM SystemLedger WHERE Description='FREIGHTTRANSPORT'
	
		DECLARE @TruckOwnerAdvance INT=NULL
		SELECT @TruckOwnerAdvance=LedgerId FROM SystemLedger WHERE Description='TRANSPORTATION ADV TRUCK OWNERS'
		DECLARE @FuelAdvance INT=NULL
		SELECT @FuelAdvance=LedgerId FROM SystemLedger WHERE Description='FUEL ADV TRUCK OWNERS'
	

		IF @TruckOwnerAdvance IS NULL
			THROW 50000, 'Please set Truck Owner Advance Ledger', 10

		Select @DeductionType = FieldValue From Common_Settings Where Id = 5 -- TDS Deduction
		SET @trancount = @@TRANCOUNT 
		BEGIN TRY
			if @trancount = 0
				begin transaction
			else
				save transaction [sp_loadingvouchernew]; 

			DECLARE @TotalAdvance Decimal(18,2) = 0.00
			SELECT @TotalAdvance=SUM(Amount) FROM LoadingAdvance WHERE LoadingId=@LoadingId AND AdvanceType in (1,2)
			SET @TotalAdvance=IsNULL(@TotalAdvance,0)
			SELECT @ChallanNo=ChallanNo FROM LoadingChallan WHERE Id=@LoadingId
			Update LoadingChallan Set FreightPayable=TotalFreight-@TotalAdvance, TotalAdvance=@TotalAdvance  Where Id = @LoadingId

			--IF IsNull(@TotalAdvance,0)=0 
			--BEGIN
			--	DELETE FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '%-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1			
			--END
			DECLARE @VchId INT=NULL
			--IF NOT EXISTS (SELECT 1 FROM LoadingAdvance WHERE AdvanceType=1 and Amount>0 AND LoadingId=@LoadingId)
			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '1-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END
			--IF NOT EXISTS (SELECT 1 FROM LoadingAdvance WHERE AdvanceType=2 and Amount>0 AND LoadingId=@LoadingId)
			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '2-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END
			--IF NOT EXISTS (SELECT 1 FROM LoadingAdvance WHERE AdvanceType=3 and Amount>0 AND LoadingId=@LoadingId)
			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '3-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END
			--IF NOT EXISTS (SELECT 1 FROM LoadingAdvance WHERE AdvanceType=4 and Amount>0 AND LoadingId=@LoadingId)
			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '4-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END
			--IF NOT EXISTS (SELECT 1 FROM LoadingAdvance WHERE AdvanceType=5 and Amount>0 AND LoadingId=@LoadingId)
			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '5-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END

			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '6-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END

			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '7-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END

			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '8-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END

			BEGIN
				SELECT @VchId=Id FROM Accounts_Vouchers WHERE [ReferenceNo] LIKE '9-'+CAST(@ChallanNo AS VARCHAR) AND RefType=1
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VchId
				DELETE FROM Accounts_Vouchers WHERE [Id]=@VchId
			END

			DECLARE transactionCur CURSOR FOR 
			SELECT Id FROM LoadingAdvance Where LoadingId = @LoadingId
			OPEN transactionCur
			DECLARE @LoadADvId INT = NULL
			FETCH NEXT FROM transactionCur INTO @LoadADvId
			WHILE (@@FETCH_STATUS = 0)
			BEGIN
				DECLARE @AdvanceType	 INT
				DECLARE @PaymentMode	INT
				DECLARE @Amount	Decimal(18,2) = 0.0
				DECLARE @TDSId		INT
				DECLARE @TDSRate		Decimal(18,2) = 0.0
				DECLARE @TDSDeduction		Decimal(18,2) = 0.0
				DECLARE @PartyId	INT
				DECLARE @PumpId	INT
				DECLARE @Remarks	Varchar(2000)
				Declare @TLedgerId INT
				Declare @TCostCenterId INT
				Declare @TType INT
			
				SELECT 
					 @AdvanceType = AdvanceType
					,@PaymentMode = PaymentMode
					,@Amount	 = Amount
					,@PartyId = PartyId
					,@PumpId = PumpId
					,@Remarks = Remarks
				FROM LoadingAdvance
				WHERE Id = @LoadADvId

				DECLARE @VoucherId INT=0
				DECLARE @VoucherName VARCHAR(200)=NULL
				DECLARE @ReferenceNo VARCHAR(200)=CAST(@AdvanceType AS VARCHAR)+'-'+CAST(@ChallanNo AS VARCHAR)
			
				IF @AdvanceType=1 AND @IsAssoLedger=0
					SET @VoucherType=2
				ELSE
					SET @VoucherType=4

				SELECT  @VoucherId=Id FROM Accounts_Vouchers 
					WHERE RefType = 1 And ReferenceId=@ChallanNo And VoucherType = @VoucherType AND ReferenceNo=@ReferenceNo
				SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
				IF(@VoucherId IS NULL OR @VoucherId=0)
				BEGIN
					SET @VoucherName='6107'
					--SET @EexecutionMessage = @EexecutionMessage + ' Inserting Voucher Row'
					INSERT INTO [Accounts_Vouchers]
						(VoucherName
						,VoucherDate
						,VoucherType
						,[Status]
						,InsertUserId
						,InsertDate
						,[Description]
						,BranchId
						,FinancialYear
						,RefType
						,ReferenceNo
						,ReferenceId)
					VALUES
						(@VoucherName,
						@VoucherDate,
						@VoucherType, -- 'PAYMENT',
						2, -- Submitted 
						@CreatedBy,
						GETDATE(),
						@Narration,
						@BranchId,
						@FinancialYearId,
						1, -- Reference Type  = Challan
						@ReferenceNo,
						@ChallanNo)
					SET @VoucherId=SCOPE_IDENTITY()
				END
				ELSE
				BEGIN
					DECLARE @VoucherTempStatus INT = 0
				SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
				IF @VoucherTempStatus IS NOT NULL AND @VoucherTempStatus = 4 -- Approved
					THROW 50000, 'Loading voucher has been approved. Can not modify loading challan. Please reject the voucher.', 16
					SET @EexecutionMessage = @EexecutionMessage + ' Updating Voucher Row.'
					UPDATE Accounts_Vouchers SET 
						VoucherDate=@VoucherDate,
						UpdateUserId=@CreatedBy,
						UpdateDate=GETDATE(),
						[Status] = 2,
						[Description]=@Narration,
						BranchId=@BranchId,
						FinancialYear=@FinancialYearId
						,RefType = 1
						,ReferenceNo = @ReferenceNo
						,ReferenceId = @ChallanNo
					WHERE Id = @VoucherId
				END
				DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId

				IF @Advancetype=1
				BEGIN
					IF @CashLedgerId IS NULL
						THROW 50000, 'Cash Ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@CashLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)	
						
				--	Update LoadingChallan Set Advance = @Amount	Where Id = @LoadingId

				END
				IF @Advancetype=2
				BEGIN
					SELECT @TLedgerId = LedgerId From PumpName Where Id = @PumpId

					IF @TLedgerId IS NULL
						THROW 50000, @PumpId , 16
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@FuelAdvance,NULL,2,@Amount)	

						
					Update LoadingChallan Set HSDCost = @Amount, PumpId=@PumpId	Where Id = @LoadingId
				END
				IF @Advancetype=3
				BEGIN
					SELECT @TLedgerId = LedgerId FROM SystemLedger Where Description = 'TRANSPORTATION ADV THIRD PARTY'
					IF @TLedgerId IS NULL
						THROW 50000, 'Transportation Third Party Ledger Not Found' , 16
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)	
					Update LoadingChallan Set Other = @Amount	Where Id = @LoadingId
				END
				IF @Advancetype=4
				BEGIN
					DECLARE @WelLedgerId INT=NULL
					SELECT @WelLedgerId = LedgerId FROM SystemLedger Where Description = 'TRANSPORTATION ADV WELFARE'

					IF @WelLedgerId IS NULL 
						THROW 50000, 'Welfare ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@WelLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)	
					Update LoadingChallan Set Welfare = @Amount	Where Id = @LoadingId
				END
				IF @Advancetype=5
				BEGIN
					DECLARE @LoadDetLedgerId INT=NULL
					SELECT @LoadDetLedgerId = LedgerId FROM SystemLedger Where Description = 'LOADDETENTION'
					IF @LoadDetLedgerId IS NULL 
						THROW 50000, 'Load detention ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@LoadDetLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)	

					Update LoadingChallan Set Detention = @Amount	Where Id = @LoadingId
				END

				IF @Advancetype=6
				BEGIN
					IF @CashLedgerId IS NULL
						THROW 50000, 'Cash Ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@CashLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)
               END


               IF @Advancetype=7
			   BEGIN
					IF @CashLedgerId IS NULL
						THROW 50000, 'Cash Ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@CashLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)
               END

			    IF @Advancetype=8
			   BEGIN
					IF @CashLedgerId IS NULL
						THROW 50000, 'Cash Ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@CashLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)
               END

			    IF @Advancetype=9
			   BEGIN
					IF @CashLedgerId IS NULL
						THROW 50000, 'Cash Ledger not found' , 16

					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@CashLedgerId,NULL,1,@Amount)	
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
						VALUES	(@VoucherId,@TruckOwnerAdvance,NULL,2,@Amount)
               END

				Update LoadingAdvance SET NetPayable = @Amount, PartyId = @PartyId Where id = @LoadADvId
				SET @EexecutionMessage =  ' Adv Type: ' + Convert(Varchar(50),isNull( @AdvanceType,0))+ ' Party Id: ' + Convert(Varchar(50), isnull(@PartyId,0))
			
				--IF @AdvanceType NOT IN  (4,5) -- Welfare, Do not add welfare in advance
				--	SET @TotalAdvance = @TotalAdvance + @Amount - @TDSDeduction

				Exec [Acounting_ValidateVoucher] @Voucherid

				FETCH NEXT FROM transactionCur INTO @LoadADvId
			END
			CLOSE transactionCur
			DEALLOCATE transactionCur
			SET @EexecutionMessage = @EexecutionMessage + ' Freight Payble.'
		
			--IF @TotalFreight < @TotalAdvance
			--	THROW 50000, 'Total Advance can not be greater than Total Frieght.', 1
			DECLARE @MaxAdvLimit Decimal(18,2) = 100.00
			DECLARE @MaxAdvLimitMsg Varchar(500) = 'DD'
			Select @MaxAdvLimit = MAX((CASE WHEN TruckSource = 'ASSOCIATION' THEN MaxAdvanceAssLimit ELSE MaxAdvanceLimit End )) from LoadingChallan  L
				Left Join Fleet_Vehicle V On V.Id = L.TruckId
				Left Join _JobPaymentRule J On J.JobId = L.JobId AND (J.Tyre = V.TotalTyers)
				Where L.Id = @LoadingId
		
			--IF @MaxAdvLimit IS NULL 
			--	THROW 50000, 'Payment rules are not defined in selected JOB for Tyre No', 16			
			--SET @MaxAdvLimitMsg = Concat('Advacne is given more then the assigned limit in Job Payment Rules. Max Limit is ' , Convert(Varchar, @MaxAdvLimit) , '')
			--IF (@TotalFreight>0) AND (@TotalAdvance * 100 / @TotalFreight) > @MaxAdvLimit
			--	THROW 50000, @MaxAdvLimitMsg, 1
		
			IF @trancount = 0
				COMMIT;
		END TRY
		BEGIN CATCH
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction [sp_loadingvouchernew];
			raiserror ('[sp_loadingvouchernew]: %s, %s', 16, 1, @EexecutionMessage, @message) ;
		END CATCH
	END
	ELSE IF @Type=1
	BEGIN
		DECLARE @ChNo INT=NULL
		SELECT @ChNo=ChallanNo FROM LoadingChallan WHERE Id=@LoadingId
		IF EXISTS (SELECT 1 FROM Accounts_Vouchers WHERE RefType=1 AND ReferenceId=@ChNo AND Status IN (2,3,4))
		BEGIN
			IF 1=1
				THROW 50000,'Loading voucher cannot be deleted in verified or approved mode', 10
		END
		ELSE
		BEGIN			
			DELETE FROM Accounts_VoucherTransaction WHERE VoucherId IN (SELECT Id FROM Accounts_Vouchers WHERE RefType=1 AND ReferenceId=@ChNo)
			DELETE FROM Accounts_Vouchers WHERE RefType=1 AND ReferenceId=@ChNo
		END
	END
END











GO
/****** Object:  StoredProcedure [dbo].[sp_MergePartyAccounts]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[sp_MergePartyAccounts](@PartyAccountId INT)
As
BEGIN
	Declare @ExitACNo Varchar(50) = ''
	Declare @PartyId INT
	Declare @ExistingACCount INT = 0
	Declare @ParytType INT
	Declare @BankAcNo Varchar(50)
	Declare @BankId INT
	Declare @BankAcType INT
	Declare @IfscCode Varchar(50)
	Declare @BankAddress Varchar(50)
	Declare @PrimaryAc INT
	Declare @JoinACPartyId INT
	Declare @PanNumber Varchar(50)
	Declare @MICRNo Varchar(100)
	Declare @PartyName Varchar(50)
	SELECT @PartyId = PartyId, @BankAcNo = BankAcNo, @BankAcType = BankAcType, @IfscCode = IfscCode, @BankId = BankId, @JoinACPartyId = JointACPartyId, @MICRNo = MICRNo,
	@BankAddress = BankAddress, @PrimaryAc = PrimaryAc From Common_PartyAccount Where Id = @PartyAccountId
	IF @JoinACPartyId IS NULL
	BEGIN
		Select @ParytType = PartyType From Common_Parties P Where Id = @PartyId
		SELECT @ExistingACCount = Count(A.BankACNo),@PanNumber=P.PANNumber,@PartyName=p.PartyName From Common_PartyAccount A
		Left Join Common_Parties P On P.Id = A.PartyId
		WHERE A.Id <> @PartyAccountId AND PartyType = @ParytType AND A.BankACNo IS NOT NULL AND LEN(A.BankACNo) > 0 AND A.BankACNo = @BankACNo
		group by P.PANNumber,p.PartyName
		DECLARE @ErrorInfo VARCHAR(100)
		SET @ErrorInfo = 'A/C No already exist for same Party Type Pan Number=> ' + @PanNumber + ' ' + @PartyName
		IF @ExistingACCount > 0
			THROW 50000, @ErrorInfo, 1
	END
	IF @BankId IS NULL
		THROW 50000, 'Bank selection is required', 1
	IF @BankACNo IS NULL
		THROW 50000, 'Bank A/C No is required', 1
	IF @IFSCCode IS NULL 
		THROW 50000, 'IFSC Code is required', 1
	Select @ExitACNo  = IsNull(BankACNo,'') From Common_Parties Where Id = @PartyId
	IF LEN(@ExitACNo) = 0 OR @PrimaryAc = 1
	BEGIN
		UPDATE Common_Parties SET BankACNo = @BankAcNo, BankACType = @BankAcType , IFSCCode = @IfscCode , @MICRNo =MICRNo, BankName=@BankId,
		BankAddress  =@BankAddress Where Id = @PartyId
	END
	IF LEN(@ExitACNo) = 0 OR @PrimaryAc = 1
	BEGIN
		Update Common_PartyAccount SET PrimaryAc  =0 Where PartyId = @PartyId
		Update Common_PartyAccount SET PrimaryAc  =1 Where Id = @PartyAccountId
	END
END





GO
/****** Object:  StoredProcedure [dbo].[sp_mis]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_mis]
@Type int = 1, 
@JobId INT=NULL,
@BranchId INT = NULL,
@ClientId INT = NULL,
@MaterialId INT = NULL,
@WOId INT = NULL,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@LoadingPoint  INT=NULL,
@UnloadingPoint INT=NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId as VARCHAR) + CAST( @WOId as VARCHAR)  +   CAST(@MaterialId as VARCHAR) + CAST( @ClientId as VARCHAR) + @StartDate + @EndDate + CAST( @BranchId as VARCHAR) +  CAST(@LoadingPoint as VARCHAR) +  CAST(@UnloadingPoint as VARCHAR)
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

IF(@Type = 1)
BEGIN
	SET NOCOUNT ON;
	
	SELECT L.JobId, ChallanNo
		,CASE WHEN L.TruckSource='ASSOCIATION' Then 1 else 0 end ATruck
		,CASE WHEN L.TruckSource='MARKET' Then 1 else 0 end MTruck
		,CASE WHEN L.TruckSource='ASSOCIATION' Then NetWT else 0 end ANetWT
		,CASE WHEN L.TruckSource='MARKET' Then NetWT else 0 end MNetWT
		,CASE WHEN L.TruckSource='ASSOCIATION' Then Freight else 0 end AFreight
		,CASE WHEN L.TruckSource='MARKET' Then Freight else 0 end MFreight
		INTO #jobid from LoadingChallan L
			LEFT OUTER JOIN _Job J ON J.Id=L.JobId
			LEFT OUTER JOIN _WorkOrderItems I ON I.Id=J.WOSectorId
			LEFT OUTER JOIN _WorkOrder W ON W.Id=I.OrderId
		WHERE 
				(@JobId IS NULL OR L.JobId=@JobId)
			AND (@ClientId IS NULL OR  W.ClientId=@ClientId)
			AND (@BranchId IS NULL OR  J.ExecutingBranch=@BranchId)
		GROUP BY L.JobId, ChallanNo,L.TruckSource, NetWT, Freight

	DECLARE @Total INT=1;
	DECLARE @MySQL VARCHAR(8000)='' 
	
	Select 
			(IsNull(I.Deduction,0) + IsNull(I.OtherDeduction,0)) As deduction, 
			IsNull(I.MoistureDeduction,0) as moisturededuction, 
			IsNull(I.TDS,0) as TDSDeduction ,I.JobId, I.InvoiceNo as Invoice, 
		I.InvoiceDate  as billedat, IC.ChallanNo As InvoicedChallanNo, I.BillStatus as billstatus
		INTO #t1
		From _InvoiceChallan IC
		Inner Join vw_InvoiceDetails I On IC.InvoiceId = I.InvoiceId
		Where I.JobId IN (SELECT JobId FROM #jobid)
	SELECT deduction/XX.TotalChallans as deduction, moisturededuction/XX.TotalChallans as moisturededuction, TDSDeduction/XX.TotalChallans as TDSDeduction, #jobid.JobId, Invoice, billstatus, billedat, #jobid.ChallanNo, InvoicedChallanNo
			, ATruck, MTruck,ANetWT,MNetWT,Afreight,Mfreight, d.Amount
	INTO #t2
	FROM #jobid LEFT OUTER JOIN #t1 ON #t1.InvoicedChallanNo=#jobid.ChallanNo 
	 LEFT OUTER JOIN vw_InvoiceChallanDetails d on d.ChallanNo=#t1.InvoicedChallanNo
	 Left Join (Select JobNo, Count(InvoiceId) as TotalChallans From vw_InvoiceChallanDetails Group By JobNo) XX ON XX.JobNo = d.JobNo
	SELECT @Total=COUNT(ChallanNo) FROM #t2 Where InvoicedChallanNo Is Not Null ;
	
	SELECT u.*, t.deduction deduction, t.moisturededuction moisturededuction, t.TDSDeduction as TDSDeduction, t.Invoice, t.billstatus, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId,ChallanDeduction,TollGate,EffectiveWt,ShortageWt
			,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,PaidTo
			,PaymentMode,ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(NetPayable AS VARCHAR(10)) ELSE 0.00 END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			, NetWt InvoiceWt, NetWt*ClientRate Income
			,COALESCE(EffectiveAmount,0)+COALESCE(Welfare,0)+COALESCE(Detention,0)+COALESCE(UnloadDetention,0)+COALESCE(TollGate,0)+COALESCE(Adjustment,0)-(COALESCE(ChallanLost,0)+COALESCE(Penalty,0)+COALESCE(ChallanDeduction,0)) Expense
			,COALESCE(ChallanLost,0)+COALESCE(Penalty,0)+COALESCE(ChallanDeduction,0) Recoverable
			,(COALESCE(PaidAmount,0)+COALESCE(TotalAdvance,0)) TotalExpense
			,Amount as NetIncome
			,ATruck,MTruck,ANetWT,MNetWT
			, 1 as TotalTruck
			, AFreight
			, MFreight
			INTO #Challan
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN #t2 t ON t.ChallanNo=u.ChallanNo
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		WHERE
				(@JobId IS NULL OR u.JobId=@JobId)
			AND (@ClientId IS NULL OR  u.JobClientId=@ClientId)
			AND (@BranchId IS NULL OR  u.JobExecutingBranchId=@BranchId)
			AND (@WOId IS NULL OR u.WOId=@WOId)
			AND (@StartDate IS NULL OR CONVERT(DATE, loaddate, 103)>=CONVERT(smalldatetime, +@StartDate,102))
			AND (@EndDate IS NULL OR CONVERT(DATE, loaddate, 103)<=CONVERT(smalldatetime, +@EndDate,102))
	
		SELECT  SUM(COALESCE(deduction,0)) shortagededuction,SUM(COALESCE(moisturededuction,0)) moisturededuction, 
			SUM(COALESCE(TDSDeduction,0)) Tds, 
			ClientRate, SUM(NetWt) NetWt, SUM(UnloadedNetWt) UnloadedNetWt, JobId, JobNo
			,SUM(InvoiceWt) InvoiceWt, SUM(LoadDMT) LoadDMT, SUM(NetWt) NetLoadWt, 
			SUM(UnloadedNetWt) NetUnloadWt, SUM(UnloadDMT) UnloadDMT, SUM(EffectiveWt) EffectiveWt
			,SUM(EffectiveAmount) EffectiveAmount, 
			CAST(SUM(Welfare) as decimal(18,2)) Welfare, CAST(SUM(AssociationCharge) as decimal(18,2)) AssociationCharge,
			CAST(SUM(ChallanDeduction) as decimal(18,2)) ChallanDeduction,
			CAST(SUM(Labor) as decimal(18,2)) Labor, CAST(SUM(Detention+UnloadDetention) as decimal(18,2)) Detention,
			CAST(SUM(TollGate) as decimal(18,2)) TollGate,
			CAST(SUM(Collection) as decimal(18,2)) Collection, CAST(SUM(Adjustment) as decimal(18,2)) Adjustment, 
			CAST(SUM(Other) as decimal(18,2)) Other, 
			CAST(SUM(Penalty) as decimal(18,2)) Penalty, CAST(SUM(ChallanLost) as decimal(18,2)) ChallanLost
			,CAST(ISNULL(SUM(NetIncome),0) as decimal(18,2)) NetIncome, 
			CAST(SUM(Expense) as decimal(18,2)) TotalExpense, 
			CAST(SUM(IsNull(NetIncome,0.0)-Expense) as decimal(18,2)) Profit,
			CAST((SUM(Expense)/SUM(case when COALESCE(EffectiveWt,0)=0 then NetWt else EffectiveWt end)) as decimal(18,2)) BEP
			,SUM(MTruck) as MTruck
			,SUM(ATruck) as ATruck
			,SUM(MNetWT) as MNetWT
			,SUM(ANetWT) as ANetWT
			,CASE WHEN SUM(TotalTruck)>0 THEN Convert(Decimal(18,2),Convert(Decimal(18,2),SUM(MTruck))*100/Convert(Decimal(18,2),SUM(TotalTruck))) ELSE 100  END MCount
			,CASE WHEN SUM(TotalTruck)>0 THEN Convert(Decimal(18,2),Convert(Decimal(18,2),SUM(ATruck))*100/Convert(Decimal(18,2),SUM(TotalTruck))) ELSE 100  END ACount
			,CASE WHEN (SUM(MNetWT)+SUM(ANetWT))>0 THEN SUM(MNetWT)*100/(SUM(MNetWT)+SUM(ANetWT)) ELSE 100 END  MWT
			,CASE WHEN (SUM(MNetWT)+SUM(ANetWT))>0 THEN SUM(ANetWT)*100/(SUM(MNetWT)+SUM(ANetWT)) ELSE 100 END  AWT
			,Count(TruckNumber) TotalTruck
			,AVG(MFreight) MFreightRate
			,AVG(AFreight) AFreightRate
			into #challan1 
			from #Challan group by JobId, JobNo,ClientRate;
		
		select j.ClientName, LoadingPoint, UnloadingPoint,  LoadingPoint+' - '+UnloadingPoint Sector, WO, j.ExecutingBranchName, j.MaterialName, c.* 
			FROM #challan1 c
			inner join  vw_jobdetails j on j.JobId=c.JobId
END






/****** Object:  StoredProcedure [dbo].[sp_HandlingVoucher]    Script Date: 12/14/2018 9:39:28 PM ******/


GO
/****** Object:  StoredProcedure [dbo].[sp_Nonpaymentreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_Nonpaymentreport]
@JobId INT=NULL,
@ClientId INT=NULL,
@AssociationId INT=Null,
@LoadingPoints INT=NULL,
@UnloadingPoints INT=NULL,
@StartDate Date  = NULL,
@EndDate Date  = NULL

AS

BEGIN 
	SET NOCOUNT ON;
	DECLARE @MySQL VARCHAR(8000)=''

SELECT TOP 10000 u.ChallanNo,u.TruckNumber,u.TP,ISNULL(U.Advance,0) AS Advance,u.HSD,u.HSDCost,u.ClientName,u.JobNO,u.LoadDate,U.netwt,
u.TotalFreight,u.UnloadedOn,(u.OwnerName +','+ u.ownerPan) AS OwnerName,u.Freight,u.UnloadedDate, p.Id PaymentId, p.LoadingId PLoadingId, ChallanDeduction,TollGate,
   isnull(u.UnloadedNetWt,0.0) UnloadedNetWt,
EffectiveWt,CONVERT(DECIMAL(18,0),ShortageWt,0) ShortageWt,unloadingpoint,LoadingPoint ,U.BrokerName
				
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		Where P.Id is NULL
		 AND (@StartDate IS NULL OR Convert(date, u.LoadDate,103) >= @StartDate)
		 AND (@EndDate IS NULL OR Convert(date, u.LoadDate,103) <= @EndDate)
		 AND (@JobId IS NULL OR u.JobId = @JobId) 
		 AND (@ClientId IS NULL OR u.JobClientId = @ClientId) 
		 AND (@AssociationId IS NULL OR u.LAssociationId = @AssociationId)    

		ORDER BY u.LoadDate 
		
END
GO
/****** Object:  StoredProcedure [dbo].[sp_oilreport_new]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_oilreport_new]

@PumpName varchar(50) = '',
@JobNo varchar(50) = '',
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = ''
AS

BEGIN
	SET NOCOUNT ON;
	select vL.Id LoadingId, LP.Loading LoadingPoint, UP.Unloading UnloadingPoint,  LP.Loading+'-'+UP.Unloading Sector, JobNo, ChallanNo
		, VehicleNo TruckNumber, LoadDate, NetWT, P.PumpName, CAST(aL.Amount as VARCHAR)  HSDAmount
	INTO #tempOil
	from LoadingChallan vL
	LEFT OUTER JOIN Fleet_Vehicle FV ON FV.Id=vL.TruckId
	LEFT OUTER JOIN _Job J ON J.Id=vL.JobId
	LEFT OUTER JOIN _WorkOrderItems WO ON WO.Id=J.WOSectorId
	LEFT OUTER JOIN LoadingPoints LP ON LP.Id=WO.LoadingPoint
	LEFT OUTER JOIN UnLoadingPoints UP ON UP.Id=WO.UnLoadingPoint
	LEFT OUTER JOIN LoadingAdvance aL ON aL.LoadingId=vL.Id
	LEFT OUTER JOIN PumpName P ON P.Id=aL.PumpId
	WHERE aL.AdvanceType=2
	AND (@JobNo='' OR JobNo=@JobNo)
	AND (@ChallanNo='' OR ChallanNo=@ChallanNo)
	AND (@TruckNo='' OR VehicleNo=@TruckNo)
	AND (@LoadingPoint='' OR Loading=@LoadingPoint)
	AND (@UnloadingPoint='' OR Unloading=@UnloadingPoint)
	AND (@StartDate='' OR (CONVERT(smalldatetime, loaddate, 103)>=CONVERT(smalldatetime, @StartDate,103)))
	AND (@EndDate='' OR (CONVERT(smalldatetime, loaddate, 103)<=CONVERT(smalldatetime, @EndDate,103)))
	AND (@PumpName='' OR PumpName=@PumpName)

	select LoadingId, LoadingPoint, UnloadingPoint,  Sector, JobNo, ChallanNo, TruckNumber, LoadDate, NetWT, 
	PumpName =  STUFF((SELECT ', ' + PumpName FROM #tempOil b  WHERE b.LoadingId = a.LoadingId  FOR XML PATH('')), 1, 2, '')
	, HSDAmount = STUFF((SELECT ', ' + HSDAmount FROM #tempOil b WHERE b.LoadingId = a.LoadingId FOR XML PATH('')), 1, 2, ''), SUM(cast(isnull(HSDAmount,0) as decimal(18,2))) TotalHSD
	FROM #tempOil a
	GROUP BY LoadingId, LoadingPoint, UnloadingPoint,  Sector, JobNo, ChallanNo, TruckNumber, LoadDate, NetWT
	Order by loaddate Asc
END
-- EXEC sp_oilreport 1
GO
/****** Object:  StoredProcedure [dbo].[sp_payment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_payment](
@Type INT=0,
@Id INT=0,
@ChallanNo INT =0,
@ChallanDeduction decimal(18,2)=0,  
@OtherDeduction decimal(18,2)=0,
@TollGate  decimal(18,2)=0,
@EffectiveWt decimal(18,3)=0,
@ShortageWt decimal(18,3)=0,
@Penalty  decimal(18,2)=0,
@ChallanLost decimal(18,2)=0,
@Adjustment decimal(18,2)=0,
@NetPayable decimal(18,2)=0,
@PaidDate SMALLDATETIME=null,
@PaidTo VARCHAR(100)='',
@PaymentMode INT = null,
@ChequeNo VARCHAR(50)='',
@PaidAmount decimal(18,2)=0,
@PaidToLedgerName VARCHAR(100)='',
@Remarks VARCHAR(2000)='',
@PaidBy INT=0,
@IsSubmitted INT=0,
@IsApproved INT=0,
@IsRejected INT=0,
@Search VARCHAR(500)='',
@FromToken INT=0,
@TdsId Int=0,
@TdsDeclaration Varchar(5)=NULL,
@PaidToId INT = NULL,
@ShortagePenaltyWt decimal(18,3)=0,
@PenaltyRate decimal(18,2)=0,
@TPInvNo Varchar(50) = NULL,
@EscalationRate Decimal(18,2)=0,
@PenaltyTypeId INT =0,
@PenaltyAmount Decimal(18,2)=0,
@PenaltyRemarks Varchar(2000) = Null


) 
AS 

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @PaidTo + @ChequeNo + @PaidToLedgerName + @Remarks + @Search + @TdsDeclaration + @TPInvNo + @PenaltyRemarks
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

IF(@Type = 1)
BEGIN
	DECLARE @LoadingId INT=0
	DECLARE @UnloadingId INT=0 
	DECLARE @PaymentId INT=0
	DECLARE @PaidToLedger INT=0
	DECLARE @Results Varchar(50) = NULL
	DECLARE @TDSAmount Decimal(10,2) = 0
	DECLARE @TDSRate Decimal(10,2) = 0
	DECLARE @OtherDeducationCashAdv Decimal(10,2) = 0
	DECLARE @CashAdvance Decimal(10,2) = 0
	DECLARE @ApplicableDate Date=Null
	DECLARE @PartyPANCard VARCHAR(50) = NULL
	DECLARE @ErrorMsg  VARCHAR(5000) = NULL
	DECLARE @ChallanStatus Varchar(50) = NULL
	DECLARE @TokenId INT = NULL
	DECLARE @TokenNo Varchar(50) = NULL
	DECLARE @TokenPartyId INT = NULL
	DECLARE @TruckTyre INT = 0
	DECLARE @TokenTDSDeclration VARCHAR(50) = NULL
	DECLARE @ExistingRemarks VARCHAR(5000) = NULL
	DECLARE @OtherPenalty  Decimal(10,2) = 0


	IF(@PaidToLedgerName<>'')
		SELECT @PaidToLedger=Id FROM Accounts_Ledgers WHERE LedgerName=@PaidToLedgerName

		--if exists (select 1 from LoadingApprovals where [Status]<>4 and LoadingId=@LoadingId and id=(select max(id) from LoadingApprovals where LoadingId=@LoadingId))
  --       THROW 50000, 'Challan not approved', 1

	
	DECLARE @OwnerId INT=NULL
	SELECT @OwnerId=LOwnerId,  @LoadingId=LoadingId, @UnloadingId=UnloadingId,  @TruckTyre = IsNull(Wheeler,0) FROM vw_unloadingchallandetails v WHERE v.ChallanNo=@ChallanNo
	IF @PaidToId IS NULL
		SELECT @PaidToId = PartyId From _TokenChallans TC 
		Inner Join _Token T On T.Id = TC.TokenId
		Where TC.ChallanNo = @ChallanNo
	IF @PaidToId IS NULL
		SELECT @PaidToId = vw_Party.Id, @TdsId = TDSType From vw_Party Where (LookupName = @PaidTo  OR PartyName = @PaidTo )
	ELSE 
		SELECT @PaidTo = vw_Party.LookupName, @TdsId = TDSType From vw_Party Where Id = @PaidToId
	IF @TdsId IS NULL 
		THROW 50000, 'Party Type (Individual / Other than Individual ) is not defined for selected party.', 1
	IF @ChallanNo IS NOT NULL
	BEGIN
		DECLARE @VoucherStatus INT = NULL
		SELECT @VoucherStatus = DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL)
		SET @ErrorMsg = 'Payment voucher for selected challan has been approved. So this can not be modified.'
		IF @VoucherStatus = 3
			THROW 50000, @ErrorMsg, 16
	END
	Select @ChallanStatus = [Status] From RegisteredChallans Where ChallanNo = @ChallanNo
	IF (@ChallanStatus <> 'I' AND  @ChallanStatus <> 'U')
		THROW 50000, 'Failed to save payment. This challan is locked or not issued.', 1
	IF @TruckTyre <= 0
		THROW 50000, 'Select truck in loading challan does not have tyre information. Please update truck tyre.', 1
	-- SELECT @PaymentMode = Id FROM Accounts_PaymentMode Where Name = @PaymentMode
	--Select @ReconciliationStatus = [Status] From _OilFillingData Where ChallanNo = @ChallanNo
	--IF (@ReconciliationStatus <> 2)
	--	THROW 50000, 'Oil Reconciliation Is Not Done For This Challan , Please Done Reconciliation First', 1
	DECLARE @ChallanApprovalStatus INT=NULL
	Select @ChallanApprovalStatus = ApprovalStatus From LoadingChallan Where ChallanNo = @ChallanNo
	IF (@ChallanApprovalStatus <> 4)
		THROW 50000, 'Failed to save payment. Loading Pending', 1
	----- otherChargeAdvaceCash Start

	SELECT @CashAdvance=Advance,@OtherDeducationCashAdv=OtherDeducationCashAdv,@ApplicableDate=ApplicableDate from  vw_unloadingchallandetails Where ChallanNo = @ChallanNo
	and CONVERT(DATE,LoadDate,103)>=CONVERT(DATE,ISNULL(ApplicableDate, GETDATE()),102)
	IF @OtherDeducationCashAdv > 0.0 
	BEGIN
	SET @ChallanLost=CEILING((@CashAdvance*@OtherDeducationCashAdv)/100)
	END
	

	SELECT @OtherPenalty = IsNull(Sum(IsNull([Amount], 0.0)), 0.0) FROM [_PaymentPenalty] Where [PaymentPenaltyId] = (Select Id From Payment Where LoadingId = @LoadingId)
	IF @OtherPenalty IS NULL
		SET @OtherPenalty = 0.0
	IF @EscalationRate IS NOT NULL AND @EscalationRate > 0.0
	BEGIN
	   Declare @tempEffectiveWt Decimal(18,3)
	   Declare @tempFreightRate Decimal(18,2)
	   Declare @tempTotalFreight Decimal(18,2)
	   Declare @tempEscFreight Decimal(18,2)
	   Select 
		  @tempEffectiveWt = (Case  WHEN IsNull(GuaranteeWT, 0.0) > 0 THEN GuaranteeWT When NetWt < UnloadedNetWt Then NetWt Else UnloadedNetWt End )
		 ,@tempFreightRate = Freight
		From vw_unloadingchallandetails Where ChallanNo = @ChallanNo
		SET @tempTotalFreight = @tempEffectiveWt * @tempFreightRate
		SET @tempEscFreight = @tempEffectiveWt * @EscalationRate
		Set @Adjustment = @tempEscFreight - @tempTotalFreight
	END
	ELSE
		Set @Adjustment = 0.0
	SELECT @TokenId = T.Id, @TokenNo=T.TokenNo, @TokenPartyId = T.PartyId, @PaymentMode = T.PaymentMode,
	@TokenTDSDeclration = (CASE WHEN T.TDSDeclaration = 1 THEN 'True' ELSE 'False' END) From _Token T
	INNER JOIN _TokenChallans TC ON TC.TokenId = T.Id Where TC.ChallanNo = @ChallanNo
	IF @TokenPartyId IS NULL
	BEGIN
	    SET @TokenPartyId = @PaidToId
	    SET @TokenTDSDeclration = @TdsDeclaration
	END
	IF @TokenId IS NOT NULL
	BEGIN
		DECLARE @TokenStatus INT = NULL
		DECLARE @teRMsg Varchar(5000) = NULL
		SET @teRMsg = 'TokenNo '+ @TokenNo +' has been created for this Challan. Modification is not allowed. To make modification please reject the Token.'
		SELECT @TokenStatus = IsNull(TokenStatus,1) From vw_TokenDetails Where Id = @TokenId
		IF @TokenStatus NOT IN (1,5)
			THROW 50000, @teRMsg, 1
	END
	
	--IF @PaidDate IS NOT NULL
	--BEGIN
	--	Select @TdsId = P.TDSType, @PartyPANCard = P.PANNumber
	--	from Accounts_TDSSettings T
	--	Left Join Common_Parties P On P.TDSType = T.TDSTypeId
	--	Where P.Id = @TokenPartyId And @PaidDate >= DateFrom And @PaidDate <= ISNull(DateTo,'2225-01-01')
	IF @PaidDate IS NOT NULL
	BEGIN
		Select @TdsId = R.Id, @PartyPANCard = P.PANNumber
		from  Common_Parties P 
			OUTER APPLY 
					(SELECT TOP 1 * 
					FROM Accounts_TDSSettings R 
					WHERE P.TDSType = R.TDSTypeId AND CONVERT(DATE,@PaidDate,102)>=CONVERT(DATE,R.DateFrom,102)
					ORDER BY R.DateFrom DESC) AS R
		Where P.Id = @TokenPartyId
	END
	-- Add last deducted TDS in the net Payble otherwise this amount is get lost.
	-- SELECT @NetPayable = @NetPayable + ISNULL(TdsAmount,0) FROM vw_paymentchallandetails Where ChallanNo = @ChallanNo 
	DECLARE @TDSDeductFlag BIT=0
	 SELECT @TDSDeductFlag=NoTDS FROM Common_Parties WHERE Id=@OwnerId--@PaidToId 
	 DECLARE @TDSType INT=0
	 SELECT @TDSType=TDSType FROM Common_Parties WHERE Id=@OwnerId 

	   DECLARE @truckcount INT=0
	 SELECT @truckcount=count(id) FROM Fleet_Vehicle WHERE [Owner]=@OwnerId 
	IF  @TDSDeductFlag = 0 OR (/*@OwnerId<>@PaidToId AND */ @TDSType=2 OR @truckcount>=10)

	--IF @TokenTDSDeclration IS NULL OR  @TokenTDSDeclration <> 'True' 

	

	BEGIN
	Select @TdsId = R.Id, @PartyPANCard = P.PANNumber
		from  Common_Parties P 
			OUTER APPLY 
					(SELECT TOP 1 * 
					FROM Accounts_TDSSettings R 
					WHERE P.TDSType = R.TDSTypeId AND CONVERT(DATE,@PaidDate,102)>=CONVERT(DATE,R.DateFrom,102)
					ORDER BY R.DateFrom DESC) AS R
		Where P.Id = @OwnerId

		--IF @TDSType=2
		--BEGIN
		--	Select @TdsId = P.TDSType, @PartyPANCard = P.PANNumber
		--	from Accounts_TDSSettings T
		--	Left Join Common_Parties P On P.TDSType = T.TDSTypeId
		--	Where P.Id = @OwnerId And @PaidDate >= DateFrom And @PaidDate <= ISNull(DateTo,'2225-01-01')
		--END

		DECLARE @DeductionType Varchar(50) = NULL
		SELECT @TDSRate= CASE WHEN @PartyPANCard IS NULL THEN RateWithOutPAN ELSE RateWithPAN END FROM Accounts_TDSSettings Where Id = @TdsId
		Select @DeductionType = FieldValue From Common_Settings Where Id = 5 -- TDS Deduction
		IF @DeductionType IS NULL
			THROW 50000, 'TDS Deduction Type is not defined in Global Settings', 1 
		IF @DeductionType = 'TOTALFREIGHT'
		BEGIN
			SELECT @TDSAmount = Convert(Decimal(18,2), Round(Freight * (Case When NetWt < UnloadedNetWt Then NetWt Else UnloadedNetWt End ) * @TDSRate/100, 0)) 
			From vw_unloadingchallandetails Where ChallanNo = @ChallanNo
		END
		ELSE IF @DeductionType = 'BALANCPAYABLE'
		BEGIN
			Select  @TDSAmount = 
				Convert(Decimal(18,2),Round(((IsNull(EffectiveAmount,0) + /*IsNull(Detention,0.0) +*/ IsNull(UnloadDetention,0.0) + IsNull(@Adjustment,0.0) + IsNull(@TollGate,0.0)) 
				- (IsNull(@ChallanDeduction,0.0) + IsNull(@ChallanLost,0.0) + IsNull(TotalAdvance,0.0) + IsNull(@Penalty,0.0)+ IsNull(@OtherPenalty,0.0))) * @TDSRate/100, 0))
			From vw_unloadingchallandetails Where ChallanNo = @ChallanNo
		END
		ELSE
			THROW 50000, 'Wrong TDS Deduction Type is defined in Global Settings', 1 
			
			DECLARE @tdsmanual bit = 0
			select @tdsmanual = TDSManual from _Token where Id = @TokenId

		IF @TDSAmount IS NULL OR @TDSAmount < 0.00 OR @tdsmanual = 0
			SET @TDSAmount = 0.0
	END

	--DECLARE @SecondAdvance DECIMAL(18,2)=0.00
	--SELECT @SecondAdvance =SUM(ISNULL(Amount,0)) 
	--FROM OfficeAdvance
	--WHERE LoadingId = @LoadingId


	DECLARE @NetPayDiff DECIMAL(18,2)=0.0
	SELECT @NetPayDiff = NetPayable FROM vw_paymentChallandetails Where ChallanNo=@ChallanNo

		 DECLARE @GPSAmount DECIMAL(18,2)=0.0
	 DECLARE @OnlineReg DECIMAL(18,2)=0.0
	 DECLARE @CommAmount DECIMAL(18,2)=0.0
	 DECLARE @OfficeAmount DECIMAL(18,2)=0.0
	 select @GPSAmount=ISNull(GPSAmount,0.0) ,@OnlineReg = ISNull(OnlineRegAmount,0.0) ,@CommAmount=ISNULL(CommAmount,0.0) ,@OfficeAmount=ISNULL(OtherExpenses,0.0) from LoadingChallan where
	 ChallanNo = @ChallanNo

	 --SELECT @Penalty=Penalty
		--	FROM dbo.ufnPenaltyInformation(@ChallanNo);

	Select 
	 -- @EffectiveWt = (Case  WHEN IsNull(GuaranteeWT, 0.0) > 0 THEN GuaranteeWT When NetWt < UnloadedNetWt Then NetWt Else UnloadedNetWt End )
	 --,
	 @NetPayable = 
		((IsNull(@EffectiveWt,0)*Freight + /*IsNull(Detention,0.0) +*/ IsNull(UnloadDetention,0.0) + IsNull(@Adjustment,0.0) + IsNull(@TollGate,0.0)) 
		- (IsNull(@ChallanDeduction,0.0)  /* + IsNull(@SecondAdvance,0.0) */ +  ISNULL(@OtherDeduction,0.0) + IsNull(@ChallanLost,0.0) + IsNull(TotalAdvance,0.0) + IsNull(@Penalty,0.0) + IsNull(@OtherPenalty,0.0) + IsNull(@TDSAmount,0.0) + ISNULL(@GPSAmount,0.0) + ISNULL(@OnlineReg, 0.0)
		+ ISNULL(@CommAmount, 0.0) + ISNULL(@OfficeAmount, 0.0)))  
	From vw_unloadingchallandetails Where ChallanNo = @ChallanNo
	SET @NetPayable = Round(@NetPayable,0)
	--SET @NetPayDiff = @NetPayDiff-@NetPayable
	
	IF @NetPayDiff<>@NetPayable
		SET @NetPayDiff = @NetPayDiff-@NetPayable
	ELSE 
		SET @NetPayDiff = 0.0

	SET @PaidAmount = @NetPayable 
	IF EXISTS (SELECT 1 FROM Payment WHERE LoadingId=@LoadingID) 
	BEGIN
		IF  @FromToken=0
		BEGIN
			IF EXISTS(SELECT 1 FROM Payment WHERE IsSubmitted>0) AND @IsApproved>0
			BEGIN
				UPDATE Payment SET IsApproved=@IsApproved WHERE LoadingId=@LoadingId
				INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
				SET @Results =  'S'
			END
			ELSE IF EXISTS(SELECT 1 FROM Payment WHERE IsSubmitted>0) AND @IsRejected>0
			BEGIN
				UPDATE Payment SET IsApproved=0, IsSubmitted=0, IsRejected=@IsRejected WHERE LoadingId=@LoadingId
				INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
				SET @Results =  'S'
			END
			ELSE IF @PaidBy>0 OR @IsSubmitted>0
			BEGIN
				IF @PaidBy=0
				BEGIN
					UPDATE Payment
					SET LoadingId = @LoadingId
						,UnloadingId = @UnloadingId
						,ChallanDeduction = @ChallanDeduction
						,TollGate = @TollGate
						,EffectiveWt = @EffectiveWt
						,ShortageWt = @ShortageWt
						,Penalty = @Penalty
						,ChallanLost = @ChallanLost
						,Adjustment = @Adjustment
						,NetPayable = @NetPayable
						,PaidDate = NULL
						,PaidTo = @PaidTo
						,PaidToId = @PaidToId
						,PaidToLedger = @PaidToLedger
						,PaymentMode = @PaymentMode
						,ChequeNo = @ChequeNo
						,PaidAmount = @PaidAmount
						,Remarks = @Remarks
						,PaidOn = GETDATE()
						,IsSubmitted = @IsSubmitted
						,TdsId=@TdsId
						,TdsDeclaration=@TokenTDSDeclration
						,TdsAmount=@TDSAmount
						,TdsRate = @TDSRate
						,ShortagePenaltyWt=@ShortagePenaltyWt
						,PenaltyRate=@PenaltyRate
						,EscalationRate = @EscalationRate
						WHERE LoadingId = @LoadingId
					--Exec [sp_RecalculateChallanPenalty] @ChallanNo
					UPDATE _Token SET Amount=IsNull(Amount,0)-@NetPayDiff WHERE Id=@TokenId
					INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
					SET @Results =  'S'	
				END
				ELSE
				BEGIN
					UPDATE Payment
						SET LoadingId = @LoadingId
							,UnloadingId = @UnloadingId
							,ChallanDeduction = @ChallanDeduction
							,TollGate = @TollGate
							,EffectiveWt = @EffectiveWt
							,ShortageWt = @ShortageWt
							,Penalty = @Penalty
							,ChallanLost = @ChallanLost
							,Adjustment = @Adjustment
							,NetPayable = @NetPayable
							,PaidDate = NULL
							,PaidTo = @PaidTo
							,PaidToId = @PaidToId
							,PaidToLedger = @PaidToLedger
							,PaymentMode = @PaymentMode
							,ChequeNo = @ChequeNo
							,PaidAmount = @PaidAmount
							,Remarks = @Remarks
							,PaidBy = @PaidBy
							,PaidOn = GETDATE()
							,TdsId=@TdsId
							,TdsDeclaration=@TokenTDSDeclration
							,TdsAmount=@TDSAmount
							,TdsRate = @TDSRate
							,ShortagePenaltyWt=@ShortagePenaltyWt
							,PenaltyRate=@PenaltyRate
							,EscalationRate=@EscalationRate
							WHERE LoadingId = @LoadingId
						--Exec [sp_RecalculateChallanPenalty] @ChallanNo
						UPDATE _Token SET Amount=IsNull(Amount,0)-@NetPayDiff WHERE Id=@TokenId
						INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
					SET @Results =  'S'
				END
			END
			ELSE
			BEGIN
				SET @Results = 'E'
			END
		END
		ELSE
		BEGIN
			UPDATE Payment
			SET  NetPayable = @NetPayable
				,PaidDate = NULL
				,PaidTo = @PaidTo
				,PaidToId = @PaidToId
				,PaidToLedger = @PaidToLedger
				,ChallanLost = @ChallanLost
				,PaymentMode = @PaymentMode
				,ChequeNo = @ChequeNo
				,PaidAmount = @PaidAmount
				-- ,Remarks = @Remarks, Do not update remarks of existing payment.
				,PaidOn = GETDATE()
				,TdsId=@TdsId
				,TdsDeclaration=@TokenTDSDeclration
				,TdsAmount=@TDSAmount
				,TdsRate = @TDSRate
				,EscalationRate = @EscalationRate
	            WHERE LoadingId = @LoadingId
			--Exec [sp_RecalculateChallanPenalty] @ChallanNo
			UPDATE _Token SET Amount=IsNull(Amount,0)-@NetPayDiff WHERE Id=@TokenId
			INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
			SET @Results =  'S'	
		END
	END
	ELSE  IF NOT EXISTS (SELECT 1 FROM Payment WHERE LoadingId=@LoadingID)
	BEGIN
		INSERT INTO Payment
				(LoadingId
				,UnloadingId
				,ChallanDeduction
				,TollGate
				,EffectiveWt
				,ShortageWt
				,Penalty
				,ChallanLost
				,Adjustment
				,NetPayable
				,PaidDate
				,PaidTo
				,PaidToId
				,PaidToLedger
				,PaymentMode
				,ChequeNo
				,PaidAmount
				,Remarks
				,PaidBy
				,PaidOn
				,IsSubmitted
				,TdsId
				,TdsDeclaration
				,TdsAmount
				,TdsRate
				,ShortagePenaltyWt
				,PenaltyRate
				,EscalationRate, RecordBranchId, RecordFYId)
			VALUES
				(@LoadingId
				,@UnloadingId
				,@ChallanDeduction
				,@TollGate
				,@EffectiveWt
				,@ShortageWt
				,@Penalty
				,@ChallanLost
				,@Adjustment
				,@NetPayable
				,NULL
				,@PaidTo
				,@PaidToId
				,@PaidToLedger
				,@PaymentMode
				,@ChequeNo
				,@PaidAmount
				,@Remarks
				,@PaidBy
				,GETDATE()
				,@IsSubmitted
				,@TdsId
				,@TokenTDSDeclration
				,@TDSAmount
				,@TDSRate
				,@ShortagePenaltyWt
				,@PenaltyRate
				,@EscalationRate, NULL, NULL)
				--Exec [sp_RecalculateChallanPenalty] @ChallanNo
				INSERT INTO Log_Payment SELECT * FROM Payment WHERE LoadingId = @LoadingId
			SET @Results = 'S'
		END
	ELSE
	BEGIN
		SET @Results =  'E'
	END
	IF (@ChallanNo > 0 AND @Results = 'S')
	BEGIN
		EXEC Accounting_CreateBill @ChallanNo, @PaidDate, @PaidTo, @PaidAmount, 'CHALLAN', NULL, 0, 0, NULL, NULL, @Remarks 
		-- EXEC sp_paymentvoucher 1, @ChallanNo, NULL
	END
	SELECT @Results
END
ELSE IF(@Type = 2)
BEGIN
	SELECT * From vw_paymentchallandetails v
		WHERE PaymentId IS NOT NULL AND v.ChallanNo LIKE '%'+@Search+'%'
END

ELSE IF(@Type = 3)
BEGIN
	Declare @nIsVehicleBlocked INT = 0
	Declare @VehicleErrMsg Varchar(500) = 0
	Declare @VehicleNo Varchar(500) = 0
	Declare @nPartyDuplicateBankAC INT = 0
	Declare @TruckId INT = 0
	Declare @TyreNos INT = 0
	Declare @FleetTruckOwner INT = 1
	Declare @ChallanTruckOwner INT = 1
	Declare @TempLoadingId INT = NULL
	Declare @LockedJobNo  Varchar(500) = NULL
	
	IF @TPInvNo IS NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
		THROW 50000, 'Challan No OR TP / Invoice No is mandetory.', 1
	IF @TPInvNo IS NOT NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
	BEGIN
		SELECT @ChallanNo = ChallanNo From LoadingChallan Where TP = @TPInvNo
		IF (@ChallanNo IS NULL OR @ChallanNo = 0)
			THROW 50000, 'Challan No not found for TP / Invoice No.', 1
	END
	Select @ChallanStatus = [Status] From RegisteredChallans Where ChallanNo = @ChallanNo
	IF @ChallanStatus IS NULL 
		THROW 50000, 'Challan No is not registred with RegisteredChallans.', 1
	--IF (@ChallanStatus <> 'I' AND  @ChallanStatus <> 'U')
		--THROW 50000, 'Failed to get payment details. This challan is locked or not issued.', 1
	Select @TruckId = TruckId, @ChallanTruckOwner = OwnerId, @TempLoadingId = Id From LoadingChallan Where ChallanNo = @ChallanNo
	IF @TempLoadingId IS NULL
		THROW 50000, 'Loading Details not found for given Challan No.', 1
	Select @nIsVehicleBlocked = IsNull(IsBlocked,0), @VehicleNo = VehicleNo, @FleetTruckOwner = [Owner], @TyreNos = TotalTyers From Fleet_Vehicle Where Id = @TruckId
	SET @VehicleErrMsg = 'Owner is not available for Truck No <' + @VehicleNo + '> in Challan No <'+ Convert(Varchar(50), @ChallanNo) +'>.' 
	--IF (IsNull(@ChallanTruckOwner,6208) = 6208 AND IsNull(@FleetTruckOwner,6208) = 6208)
	-------------------	THROW 50000, @VehicleErrMsg, 1
	IF (IsNull(@FleetTruckOwner,6208) <> 6208 AND IsNull(@ChallanTruckOwner,6208) = 6208)
		UPDATE LoadingChallan SET [OwnerId] = @FleetTruckOwner Where ChallanNo = @ChallanNo
	SET @VehicleErrMsg = 'Tyres information is not available for Truck No <' + @VehicleNo + '> in Challan No <'+ Convert(Varchar(50), @ChallanNo) +'>.' 
	IF (IsNull(@TyreNos, 0) = 0)
		THROW 50000, @VehicleErrMsg, 1
	SET @VehicleErrMsg = 'Truck No <' + @VehicleNo + '> used in loading is blocked. Falied to add ' + '> Challan No <'+ Convert(Varchar(50), @ChallanNo) +'>.' 
	IF @nIsVehicleBlocked = 1
		THROW 50000,@VehicleErrMsg, 1
	SELECt @LockedJobNo = JobNo From _Job J
	Inner Join LoadingChallan L On L.JobId = J.Id
	Where J.IsLock = 1 And L.ChallanNo = @ChallanNo
	SET @VehicleErrMsg = 'Job No <' + @LockedJobNo + '> is Locked. Falied to add ' + '> Challan No <'+ Convert(Varchar(50), @ChallanNo) +'>.' 
	IF @LockedJobNo IS NOT NULL
		THROW 50000,@VehicleErrMsg, 1
	IF EXISTS (SELECT 1 FROM vw_paymentchallandetails WHERE ChallanNo=@ChallanNo AND PaymentID IS NOT NULL) AND EXISTS  (SELECT 1 FROM registeredchallans WHERE ChallanNo=@ChallanNo AND Status IN ('I','U'))
	BEGIN
		SELECT *,
			 DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL) as VoucherStatus,
		    	(Select TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)) as TokenStatus
		 From vw_paymentchallandetails v
			WHERE v.ChallanNo=@ChallanNo
	END
	ELSE IF EXISTS (SELECT 1 FROM vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo AND UnloadingID IS NOT NULL)  AND EXISTS  (SELECT 1 FROM registeredchallans WHERE ChallanNo=@ChallanNo AND Status IN ('I','U'))
	BEGIN 
		DECLARE @Wheeler INT=0
		DECLARE @JobId INT=0
		DECLARE @TruckSource VARCHAR(20)=''
		DECLARE @LoadType VARCHAR(20)=''
		DECLARE @Shortage DECIMAL(18,3)=0.000
		DECLARE @NetWt DECIMAL(18,3)=0.000
		DECLARE @GWt DECIMAL(18,3)=0.000
		SELECT @GWt=IsNull(GuaranteeWT,0), @NetWt=NetWt, @LoadType=LoadType, @Shortage=(CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000, @Wheeler=Wheeler, @JobId=JobId, @TruckSource=(CASE WHEN TruckSource<>'MARKET' THEN 'ASSOCIATION' ELSE 'MARKET' END) from vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo
		DECLARE @Limit DECIMAL(18,3)=0.000
		DECLARE @LimitUnit VARCHAR(10)=''
		DECLARE @Deduction VARCHAR(10)=''
		DECLARE @PenaltyShortageWt DECIMAL(18,3)=0.000
		-- DECLARE @PenaltyRate DECIMAL(18,3)=0.000
		
		IF (@NetWt-@Shortage)>(@GWt-@Shortage)
			SET @GWt = @NetWt-(@Shortage/1000)
		ELSE 
			SET @GWt = @GWt-(@Shortage/1000)

		SET @PenaltyRate = 0.00

		
		SELECT @PenaltyShortageWt=PenaltyWt,@PenaltyRate=PenaltyRate,  @Shortage=Shortage, @Penalty=Penalty
			FROM dbo.ufnPenaltyInformation(@ChallanNo);


		--SELECT  @Penalty = SUM(CONVERT(DECIMAL(18,3),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
		--CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
		--END),1) * PenaltyRate)
		--from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND (Wheels=@Wheeler OR Wheels=0) AND (MinWeight=0 OR (@NetWt BETWEEN MinWeight AND MaxWeight)) AND JobId=@JobId AND Transporter=@TruckSource
		--SET @Penalty = [dbo].[FN_GetPenaltyForChallan] (@ChallanNo)
		--SELECT @PenaltyRate=PenaltyRate
		--from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND (Wheels=@Wheeler OR Wheels=0) AND (MinWeight=0 OR (@NetWt BETWEEN MinWeight AND MaxWeight))  AND JobId=@JobId AND Transporter=@TruckSource
		
		--SET @Penalty = @PenaltyRate * @PenaltyShortageWt
		DECLARE @JobDeduction DECIMAL(18,2)=0.00
		DECLARE @JobTollGate DECIMAL(18,2)=0.00
		
		SELECT @JobDeduction=MAX((CASE WHEN @TruckSource = 'ASSOCIATION' THEN AssChallanDeduction ELSE MktChallanDeduction End )), @JobTollGate=MAX(TollGate )
			FROM PaymentRules WHERE JobId=@JobId AND (Wheels=@Wheeler OR Wheels=0) AND (MinWeight=0 OR (@NetWt BETWEEN MinWeight AND MaxWeight)) 
		SET @JobDeduction=COALESCE(@JobDeduction,0)
		SET @JobTollGate=COALESCE(@JobTollGate,0)
		SELECT u.*, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId, 
		CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate
				,PaidTo, PaymentMode,ChequeNo,Convert(Decimal(18,2),Round(PaidAmount,0)) as PaidAmount,
				p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
				,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName,
				@JobDeduction ChallanDeduction, ChallanLost, @Penalty Penalty, p.OtherDeduction,
				CASE WHEN IsNull(u.GuaranteeWT, 0.0) > 0 THEN @GWt WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END EffectiveWt, 
				(CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000 ShortageWt, 
				@PenaltyShortageWt as ShortagePenaltyWt, @PenaltyRate as PenaltyRate,
				@JobTollGate TollGate, Adjustment, CONVERT(DECIMAL(18,2),(@Penalty+COALESCE(ChallanLost,0)),1) TotalDeduction
				,ROUND(CONVERT(DECIMAL(18,2),(((CASE WHEN IsNull(u.GuaranteeWT, 0.0) > 0 THEN @GWt WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)*Freight)+IsNull(UnloadDetention,0)+/*IsNull(Detention,0.0) +*/@JobTollGate-@JobDeduction-TotalAdvance-COALESCE(@Penalty,0)),1),0) NetPayable
				,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN IsNull(u.GuaranteeWT, 0.0) > 0 THEN @GWt WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END),1),0) EffectiveAmount
				,p.TdsDeclaration, IsNull(P.TDSAmount,0.0) as TDSAmount, IsNull(P.EscalationRate, 0.0) as EscalationRate,
				 DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL) as VoucherStatus,
				(Select TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)) as TokenStatus
				--TotalFreight+UnloadDetention+Detention-TotalAdvance-@Penalty NetPayable
			FROM vw_unloadingchallandetails u
			LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
			LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
			WHERE u.UnloadingId IS NOT NULL AND ChallanNo=@ChallanNo
	END
END
ELSE IF(@Type = 4)
BEGIN
	DECLARE @tTokenId INT = NULL
	SELECT @tTokenId = TokenId FROM _TokenChallans Where ChallanNo = @ChallanNo
	IF @tTokenId IS NOT NULL
		THROW 50000, 'This challan is associated with token, So can not be deleted', 1
	SELECT @Id=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo
	DELETE FROM Payment WHERE LoadingId=@Id
	SELECT 'S'
END
ELSE IF(@Type = 5)
BEGIN
	SELECT Id,Name FROM _PenaltyType
END
ELSE IF(@Type = 6)
BEGIN
	IF(@ChallanNo IS NOT NULL AND @ChallanNo != 0)
	BEGIN
	     DECLARE @PaymentPenaltyId int
		 SELECT @PaymentPenaltyId=Id from Payment where LoadingId in (select Id from LoadingChallan where ChallanNo=@ChallanNo) 
		 IF(@PaymentPenaltyId>0)
		 BEGIN
		    INSERT INTO _PaymentPenalty VALUES (@PaymentPenaltyId,@PenaltyTypeId,@PenaltyAmount,@PenaltyRemarks, NULL, NULL)
			SELECT SCOPE_IDENTITY()
		 END
	END
END
ELSE IF(@Type = 7)
BEGIN
	IF(@ChallanNo IS NOT NULL AND @ChallanNo != 0)
	BEGIN
		 Select PP.Id ,PT.Name, PP.Amount,PP.Remarks  from  _PaymentPenalty PP 
		 left outer join 
		  _PenaltyType PT on pt.Id =pp.PenaltyTypeId 	
		  where pp.PaymentPenaltyId in
		 (select PaymentId from vw_paymentchallandetails where ChallanNo=@ChallanNo) 
	END
END
ELSE IF(@Type = 8)
BEGIN
	IF(@Id > 0)
	BEGIN
	   DELETE FROM _PaymentPenalty WHERE Id=@Id 
	   SELECT 'S'
	END
END


GO
/****** Object:  StoredProcedure [dbo].[sp_paymentchallanreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_paymentchallanreport]
@JobId INT=NULL,
@Type INT=0,
@ChallanNo INT = 0,
@TokenNo VARCHAR(25) =NULL,
@StartPaidDate DATE = NULL,
@EndPaidDate DATE = NULL,
@LoadingPoint  INT=NULL,
@UnloadingPoint INT=NULL,
@TruckId INT = NULL,
@BranchId INT = NULL,
@ClientId INT = NULL,
@PartyId INT = NULL,
@PartyTypeId INT = NULL,
@TokenPaid INT = 0,
@InvoiceBill INT = 0,
@ReferenceNo VARCHAR(50) =NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartPaidDate AS varchar) + CAST(@EndPaidDate AS varchar) + CAST(@TruckId AS varchar) + CAST(@LoadingPoint AS varchar) + CAST(@UnloadingPoint AS varchar) 
 + CAST(@BranchId AS varchar) +CAST(@ClientId AS varchar) + CAST(@PartyId AS varchar) +CAST(@PartyTypeId AS varchar)

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;
	DECLARE @FYStartDate DATE=NULL
	DECLARE @FYEndDate DATE=NULL
	SEleCT @FYStartDate=Startdate, @FYEndDate=EndDate FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartPaidDate IS NOT NULL
	BEGIN
		SET @FYStartDate=@StartPaidDate
	END

	IF ISNULL(@ChallanNo,0)<>0
	BEGIN
		SET @FYStartDate=CONVERT(DATE,'2014-04-01',102)
	END

	IF @EndPaidDate IS NOT NULL
	BEGIN
		SET @FYEndDate=@EndPaidDate
	END

	SELECT L.* INTO #LoadAdvance FROM LoadingAdvance L
		INNER JOIN LoadingChallan C ON C.Id=L.LoadingId
		WHERE	CONVERT(DATE,LoadDate,102) BetWEEN CONVERT(DATE,@FYStartDate,102) AND CONVERT(DATE,@FYEndDate,102) OR (@ChallanNo IS NULL OR @ChallanNo=C.ChallanNo)
	;WITH LoadingAdv AS (
		SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM #LoadAdvance L
			LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
		UNION 
		SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM #LoadAdvance L GROUP BY L.LoadingId
	) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv1
		FROM LoadingAdv 
			PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

		SELECT DISTINCT A.LoadingId, B.PumpName PumpNameAdvance INTO #adv3 From #LoadAdvance A 
			LEFT OUTER JOIN PumpName B ON B.Id=A.PumpId
		WHERE PumpId IS NOT NULL 

		SELECT loadingid, PumpNameAdvance = STUFF((SELECT ', ' + PumpNameAdvance  FROM #adv3 b   WHERE b.LoadingId = a.LoadingId  FOR XML PATH('')), 1, 2, '')
			 INTO #adv2 FROM #adv3 a GROUP BY LoadingId
      
		SELECT TOP 10000 u.*, t.InvoiceNo as Invoice, t.billstatus as billstatus, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId
				,ChallanDeduction,TollGate,EffectiveWt,ShortageWt
			,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,p.PaidTo
			,p.PaymentMode,p.ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, t.BranchId PaidBranchId, FullName PaidByName
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE '0.00' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN u.NetWt<UnloadedNetWt THEN u.NetWt ELSE UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),u.Freight*(CASE WHEN u.NetWt<UnloadedNetWt THEN u.NetWt ELSE UnloadedNetWt END)-(COALESCE(u.TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-u.TotalAdvance),0) LoadingBalance
			,IsNull(IC.BillingRate,u.ClientRate) as ClientRate, CONVERT(VARCHAR(10),t.InvoiceDate,103) InvoiceDate
			,Round(CONVERT(DECIMAL(18,2),u.NetWt * IsNull(IC.BillingRate,u.ClientRate)),0) as BillAmount
			,Cash, Cheque, BulkTransfer, Cash+Cheque+BulkTransfer+FuelCost as LoadingAdvance, FuelCost, PumpNameAdvance
			,CASE WHEN PAN.PANNo IS NULL THEN 'NOTCHK- '+u.OwnerPAN WHEN u.OwnerName=PAN.NameInPAN AND PAN.PANStatus='E' THEN 'CORRECT-'+u.OwnerPAN ELSE 'ERROR - '+u.OwnerPAN END PanCardStatus		
			,u.ClientName, p.TdsAmount, tn.tokenno as tokenreference, u.DestinationId as Destination,TB.RefNo ,ISNULL(L.CommAmount,0) CommAmount ,ISNULL(L.OtherExpenses,0) OfficeAmount
			,X.Amount BulkAdvance ,Y.Amount SecondHSD , L.OnlineRegAmount ,L.GPSAmount
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN #adv1 A ON A.LoadingId=u.LoadingId
		LEFT OUTER JOIN #adv2 B ON B.LoadingId=u.LoadingId
		LEFT OUTER JOIN DB_PANInfo PAN ON PAN.PANNo=u.OwnerPAN
		 LEFT OUTER JOIN _TokenChallans tc ON tc.ChallanNo=u.challanno
		 LEFT OUTER JOIN _Token tn ON tn.Id=tc.TokenId
		 LEFT OUTER JOIN _TokenBulkPaymentId TBP ON TBP.TokenId = tn.Id
		 LEFT OUTER JOIN _TokenBulkPayment TB ON TB.Id = TBP.BulkPaymentId
		LEFT OUTER JOIN LoadingPoints LP ON LP.Loading=u.loadingpoint
		LEFT OUTER JOIN UnloadingPoints ULP ON ULP.Unloading=u.unloadingpoint
		LEFT OUTER JOIN LoadingChallan L ON L.ChallanNo = U.ChallanNo
		LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount from LoadingAdvance  Where AdvanceType = 1 and PaymentMode = 3) AS X ON L.Id =X.LoadingId
        LEFT OUTER JOIN (Select LoadingId, ISNULL(Amount,0) Amount ,A.PumpId from LoadingAdvance A
        LEFT OUTER JOIN LoadingChallan L On L.Id = A.LoadingId Where AdvanceType = 2 and L.PumpId<>A.PumpId) AS Y ON L.Id =Y.LoadingId

		WHERE u.LoadingId IN (SELECT LoadingId from Payment where PaidDate BetWEEN @FYStartDate AND @FYEndDate) AND
		(@JobId IS NULL OR U.JobId=@JobId) AND
		(@ChallanNo=0 OR u.ChallanNo=@ChallanNo) AND
		(@TruckId IS NULL  OR U.TruckId=@TruckId) AND
		(@LoadingPoint IS NULL  OR LP.Id=@LoadingPoint) AND
		(@UnloadingPoint IS NULL  OR  ULP.Id=@UnloadingPoint) AND
		(@ClientId IS NULL  OR U.JobClientId=@ClientId) AND
		(@BranchId IS NULL  OR u.JobExecutingBranchId=@BranchId) AND
		(@TokenNo  IS NULL  OR tn.TokenNo=@TokenNo)  AND 
		(@PartyId  IS NULL  OR P.paidtoid=@PartyId)  AND
		(@ReferenceNo  IS NULL  OR TB.RefNo=@ReferenceNo) 
		--((@TokenPaid=0) OR (@TokenPaid=1 AND p.id IS NOT NULL) OR (@TokenPaid=2 AND p.Id IS NULL)) 
		--AND 
	 -- ((@InvoiceBill=0) OR (@InvoiceBill=1 AND IC.id IS NOT NULL) OR (@InvoiceBill=2 AND IC.Id IS NULL)) 
	--AND
		--(@StartPaidDate IS NULL OR CONVERT(date, PaidDate, 103)>=CONVERT(date, @StartPaidDate,102)) AND
		--(@EndPaidDate IS NULL  OR CONVERT(date, PaidDate, 103)<=CONVERT(date, @EndPaidDate,102))
		ORDER BY CONVERT(SMALLDATETIME,PaidDate,103) asc

		--select PaidDate, @FYStartDate , @FYEndDate from payment where loadingid=475966
END






GO
/****** Object:  StoredProcedure [dbo].[sp_paymentreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_paymentreport]
@Type int=0,
@Contact varchar(20)='',
@BranchName varchar(100)='',
@JobNo varchar(50) = '',
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = '',
@PaidType varchar(20)='',
@PaidToName varchar(100)='',
@Token varchar(50)='',
@ClientName varchar(50)=''
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Contact + @BranchName + @JobNo + @StartDate + @TruckNo + @LoadingPoint + @UnloadingPoint + @PaidType + @PaidToName + @Token + @ClientName
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1




IF(@Type = 1)
BEGIN 
	SET NOCOUNT ON;
	DECLARE @MySQL VARCHAR(8000)=''
	SET @MySQL=N'SELECT TOP 15000 u.*, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId,ChallanDeduction,TollGate,EffectiveWt,CONVERT(DECIMAL(18,0),ShortageWt,0) ShortageWt
			,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,p.PaidTo
			,AV.PaymentMode,p.ChequeNo,Convert(Decimal(18,2),Round(PaidAmount,0)) as PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName
			,CONVERT(DECIMAL(18,2)
			-- ,(Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)),1) EffectiveAmount
			,(Freight*EffectiveWt),1) EffectiveAmount
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE ''0.00'' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,''Pending'' as PaymentStatus
			,TokenReference as TokenNo, AV.VoucherNo as Voucher
			,Convert(Decimal(18,2),Round(TDSAmount,0)) as TDSAmount
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN token ON token.challan=u.challanno
		LEFT OUTER JOIN Accounts_Vouchers AV ON AV.ReferenceId=token.TokenId
		WHERE  AV.VoucherNo IS NOT NULL' 
		IF(@JobNo<>'')
			SET @MySQL=@MySQL+' AND JobNo='''+@JobNo+''''
		IF(@BranchName<>'')
			SET @MySQL=@MySQL+' AND ExecutingBranchName='''+@BranchName+''''
		IF(@Token<>'')
			SET @MySQL=@MySQL+' AND TokenReference='''+@Token+''''
		IF(@ChallanNo<>0)
			SET @MySQL=@MySQL+' AND ChallanNo='+CAST(@ChallanNo AS VARCHAR(10))
		IF(@TruckNo<>'')
			SET @MySQL=@MySQL+' AND TruckNumber='''+@TruckNo+''''
		IF(@LoadingPoint<>'')
			SET @MySQL=@MySQL+' AND LoadingPoint='''+@LoadingPoint+''''
		IF(@UnloadingPoint<>'')
			SET @MySQL=@MySQL+' AND UnloadingPoint='''+@UnloadingPoint+''''
		IF(@StartDate IS NOT NULL AND @StartDate<>'')
			SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, PaidDate, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
		IF(@EndDate IS NOT NULL AND @EndDate<>'')
			SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, PaidDate, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'

		IF(@Contact<>'')
			SET @MySQL=@MySQL+' AND p.PaidTo LIKE ''%'+@Contact+'%'''
		/*IF(@PaidType='BROKER')
			SET @MySQL=@MySQL+' AND BrokerContact='''+@Contact+''''
		IF(@PaidType='OWNER')
			SET @MySQL=@MySQL+' AND OwnerContact='''+@Contact+''''
		IF(@PaidType='DISCOUNTER')
			SET @MySQL=@MySQL+' AND DiscounterContact='''+@Contact+'''' */

		SET @MySQL=@MySQL+' ORDER BY loaddate, unloadeddate asc'
--PRINT @MySQL
	EXECUTE(@MySQL)
END
--EXEC [sp_paymentreport] 1,'11', 'TSL/T/15-16/060', 119181, '14/11/2015', NULL, 'OD05Q2939', 'TSALLOYS'
--select *FROM vw_unloadingchallandetails

GO
/****** Object:  StoredProcedure [dbo].[sp_paymentreportnew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- exec [sp_detailreportnew] @TruckId='OD05AC7721'
--exec [sp_paymentreport] @Type=0,@BranchId=default,@ClientId=default,@JobId=6,@StartPaidDate=N'2019-02-15',@EndPaidDate=N'2018-12-31',@LoadingPoint=default,@UnloadingPoint=default,@TruckId=default,@ChallanNo=default,@BrokerId=default,@PAN=default

CREATE PROCEDURE [dbo].[sp_paymentreportnew]
@JobId INT=0,
@Type INT=0,
@ChallanNo INT = 0,
@TokenNo VARCHAR(25) =NULL,
@StartPaidDate VARCHAR(10) = NULL,
@EndPaidDate VARCHAR(10) = NULL,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckId INT = NULL,
@BranchId INT = NULL,
@ClientId INT = NULL,
@PartyId INT = NULL,
@PartyTypeId INT = NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = CAST(@JobId AS varchar) + CAST(@StartPaidDate AS varchar) + CAST(@EndPaidDate AS varchar) + CAST(@TruckId AS varchar)
 + CAST(@BranchId AS varchar) +CAST(@ClientId AS varchar) + CAST(@PartyId AS varchar) +CAST(@PartyTypeId AS varchar)

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)

IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	SET NOCOUNT ON;	
	
	SELECT L.LoadDate, P.Id PaymentId, SUM(NetWt) over (partition by JobId order by P.PaidDate, L.LoadDate) as CummulativeNetWt
		, ROW_NUMBER() over (partition by JobId order by P.PaidDate, L.LoadDate) as SrNo INTO #AllPayment FROM Payment P
		INNER JOIN LoadingChallan L ON L.Id=P.LoadingId
		INNER JOIN _TokenChallans TC ON TC.ChallanNo=L.ChallanNo
		INNER JOIN _Token T ON T.Id=TC.TokenId
		where p.PaidDate is not null AND T.VoucherID IS NOT NULL
	ORDER BY L.JobId
	
	
	DECLARE @FYStartDate varchar(10)=''
	DECLARE @FYEndDate varchar(10)=''
	SEleCT @FYStartDate=convert(varchar(10),Startdate,102), @FYEndDate=convert(varchar(10),EndDate,102) FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate

	IF @StartPaidDate<>''
	BEGIN
		SET @FYStartDate=@StartPaidDate
	END
	IF @EndPaidDate<>''
	BEGIN
		SET @FYEndDate=@EndPaidDate
	END

	SELECT L.* INTO #LoadAdvance FROM LoadingAdvance L
		INNER JOIN LoadingChallan C ON C.Id=L.LoadingId
		WHERE	CONVERT(DATE,LoadDate,102) BetWEEN CONVERT(DATE,@FYStartDate,102) AND CONVERT(DATE,@FYEndDate,102)
	;WITH LoadingAdv AS (
		SELECT T.Name, SUM(CASE WHEN L.AdvanceType<>2 THEN L.Amount ELSE 0 END) Amount, L.LoadingId FROM #LoadAdvance L
			LEFT OUTER JOIN Accounts_PaymentMode T ON L.PaymentMode = T.Id GROUP BY L.LoadingId, T.Name
		UNION 
		SELECT 'FUELCOST' Name, SUM(CASE WHEN L.AdvanceType=2 THEN L.Amount ELSE 0 END) Amount, LoadingId FROM #LoadAdvance L GROUP BY L.LoadingId
	) SELECT LoadingId, IsNull(Cash,0) Cash,  IsNull(Cheque,0) Cheque, IsNull([BULK TRANSFER],0) BulkTransfer, IsNull([FUELCOST],0) FuelCost  INTO #adv1
		FROM LoadingAdv 
			PIVOT (Max(Amount) FOR Name IN ([CASH], [CHEQUE], [BULK TRANSFER], [FUELCOST])) P;

		SELECT DISTINCT A.LoadingId, B.PumpName PumpNameAdvance INTO #adv3 From #LoadAdvance A 
			LEFT OUTER JOIN PumpName B ON B.Id=A.PumpId
		WHERE PumpId IS NOT NULL 

		SELECT loadingid, PumpNameAdvance = STUFF((SELECT ', ' + PumpNameAdvance  FROM #adv3 b   WHERE b.LoadingId = a.LoadingId  FOR XML PATH('')), 1, 2, '')
			 INTO #adv2 FROM #adv3 a GROUP BY LoadingId
      
		SELECT TOP 15000 u.*, t.InvoiceNo as Invoice, t.billstatus as billstatus, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId
				,ChallanDeduction,TollGate,EffectiveWt,ShortageWt
			,Penalty,ChallanLost,Adjustment,NetPayable,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,p.PaidTo
			,p.PaymentMode,p.ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, t.BranchId PaidBranchId, FullName PaidByName
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE '0.00' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END),1),0) EffectiveAmount
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,ROUND(CONVERT(DECIMAL(18,2),EffectiveAmount-TotalAdvance),0) LoadingBalance
			,IsNull(IC.BillingRate,u.ClientRate) as ClientRate, CONVERT(VARCHAR(10),t.InvoiceDate,103) InvoiceDate
			,Round(CONVERT(DECIMAL(18,2),NetWt * IsNull(IC.BillingRate,u.ClientRate)),0) as BillAmount
			,Cash, Cheque, BulkTransfer, Cash+Cheque+BulkTransfer+FuelCost as LoadingAdvance, FuelCost, PumpNameAdvance
			,CASE WHEN PAN.PANNo IS NULL THEN 'NOTCHK- '+u.OwnerPAN WHEN u.OwnerName=PAN.NameInPAN AND PAN.PANStatus='E' THEN 'CORRECT-'+u.OwnerPAN ELSE 'ERROR - '+u.OwnerPAN END PanCardStatus		
			,u.ClientName, p.TdsAmount, tn.tokenno as tokenreference, p.OtherDeduction, tn.FY
			, AP.SrNo, AP.CummulativeNetWt, u.DestinationId as Destination
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=u.ChallanNO
		LEFT OUTER JOIN _Invoice t ON t.Id=IC.InvoiceId
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN #adv1 A ON A.LoadingId=u.LoadingId
		LEFT OUTER JOIN #adv2 B ON B.LoadingId=u.LoadingId
		LEFT OUTER JOIN DB_PANInfo PAN ON PAN.PANNo=u.OwnerPAN
		 LEFT OUTER JOIN _TokenChallans tc ON tc.ChallanNo=u.challanno
		 LEFT OUTER JOIN _Token tn ON tn.Id=tc.TokenId
		 INNER JOIN #AllPayment AP ON AP.PaymentId=P.Id
		WHERE --u.LoadingId IN (SELECT LoadingId from Payment where PaidDate BetWEEN @FYStartDate AND @FYEndDate) AND
		tn.VoucherId IS NOT NULL AND
		(U.JobId=@JobId) AND
		(@ChallanNo=0 OR u.ChallanNo=@ChallanNo) AND
		(@TruckId IS NULL  OR U.TruckId=@TruckId) AND
		(@ClientId IS NULL  OR U.JobClientId=@ClientId) AND
		(@BranchId IS NULL  OR u.JobExecutingBranchId=@BranchId) AND
		(@TokenNo  IS NULL  OR tn.TokenNo=@TokenNo)  AND 
		(@PartyId  IS NULL  OR P.paidtoid=@PartyId)  
		--AND
		--(@StartPaidDate IS NULL OR CONVERT(date, PaidDate, 103)>=CONVERT(date, @StartPaidDate,102)) AND
		--(@EndPaidDate IS NULL  OR CONVERT(date, PaidDate, 103)<=CONVERT(date, @EndPaidDate,102))
		ORDER BY SrNo asc, LoadDate
END



GO
/****** Object:  StoredProcedure [dbo].[sp_paymentrules]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_paymentrules] (
@Type INT=0,
@Id INT=0,
@JobId INT =0,
@Wheels INT=0,
@ChallanDeduction DECIMAL(18,2)=0.00,
@TollGate DECIMAL(18,2)=0.00,
@CreatedBy INT=0
)
AS
BEGIN
	IF(@Type=1)
	BEGIN
		--IF(@JobId>0)
		--	BEGIN
		--		INSERT INTO PaymentRules(Wheels,ChallanDeduction,TollGate,CreatedBy,JobId) 
		--	    VALUES(@Wheels,@ChallanDeduction,@TollGate,@CreatedBy,@JobId)			
		--		 SELECT @@IDENTITY
		--	END
		SELECT 'E'
	END
	IF(@Type=2)
	BEGIN
        SELECT * FROM PaymentRules WHERE JobId=@JobId
	END
	IF(@Type=3)
	BEGIN
        DELETE FROM PaymentRules WHERE Id=@Id
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_paymentvoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_paymentvoucher] (
@PaidToLedgerId INT,	
@TokenId INT = NULL, 
@ChallanNo INT = NULL,	
@PaidDate SMALLDATETIME=null,			  
@BulkPaymentId INT = NULL,				  
@PaidToCostCenterId INT = NULL,
@PaymentMode INT = NULL,
@ChkNeftRefNo VARCHAR(50) = NULL,
@Narration  VARCHAR(5000) = NULL,
@InsertById INT
)
AS
BEGIN
DECLARE @pPaidToLedgerId		INT	
DECLARE @pTokenId				INT = NULL
DECLARE @pChallanNo				INT = NULL			  
DECLARE @pBulkPaymentId			INT = NULL			  
DECLARE @pPaidToCostCenterId	INT = NULL
DECLARE @pPaymentMode			INT = NULL
DECLARE @pChkNeftRefNo			VARCHAR(50) = NULL
DECLARE @pNarration				VARCHAR(5000) = NULL
DECLARE @pInsertById			INT
SET @pPaidToLedgerId		= @PaidToLedgerId	
SET @pTokenId				= @TokenId			
SET @pChallanNo				= @ChallanNo			
SET @pBulkPaymentId			= @BulkPaymentId		
SET @pPaidToCostCenterId	= @PaidToCostCenterId
SET @pPaymentMode			= @PaymentMode		
SET @pChkNeftRefNo			= @ChkNeftRefNo		
SET @pNarration				= @Narration			
SET @pInsertById			= @InsertById	
	
DECLARE @FinancialYearId INT = NULL
DECLARE @FreightPayable DECIMAL(18,2)=NULL
DECLARE @FreightTransport DECIMAL(18,2)=NULL
DECLARE @ChallanDeduction DECIMAL(18,2)=NULL		
DECLARE @OtherDeduction DECIMAL(18,2)=NULL		
DECLARE @Collection DECIMAL(18,2)=NULL	
DECLARE @Penalty DECIMAL(18,2)=NULL
DECLARE @LoadDetention DECIMAL(18,2)=NULL	
DECLARE @UnLoadDetention DECIMAL(18,2)=NULL
DECLARE @TollGate DECIMAL(18,2)=NULL
DECLARE @ChallanLost DECIMAL(18,2)=NULL
DECLARE @TokenOtherDeduction DECIMAL(18,2)=NULL
DECLARE @TokenRecovery DECIMAL(18,2)=NULL
DECLARE @Adjustment DECIMAL(18,2)=NULL
DECLARE @PaidAmount DECIMAL(18,2)=NULL
DECLARE @TDSAmount DECIMAL(18,2)=NULL
DECLARE @VoucherDate smalldatetime=NULL
DECLARE @EexecutionMessage VARCHAR(2000) = ''
DECLARE @VoucherRefType INT = NULL
DECLARE @VoucherRefId INT = NULL
DECLARE @VoucherRefNo VARCHAR(MAX) = NULL
DECLARE @TDSId INT = NULL
DECLARE @trancount int = NULL;
DECLARE @UserBranchId int = NULL;
DECLARE @VoucherStauts int = 2



Select @UserBranchId = BranchId From Users Where Id = @pInsertById
CREATE TABLE #ChallanTempTable(ChallanNo int, JobCostCenterId int, TokenIdCur int, LoadingId int)

CREATE TABLE #TokenIds(TokenId int)
IF @pTokenId IS NOT NULL
BEGIN
	INSERT INTO #ChallanTempTable (ChallanNo, JobCostCenterId, TokenIdCur, LoadingId) 
		SELECT T0.ChallanNo, JobDetails.CostCenterId, T0.TokenId, LoadingChallan.Id
		FROM _TokenChallans T0 
		Left Join LoadingChallan On LoadingChallan.ChallanNo = T0.ChallanNo
		Left Join JobDetails On JobDetails.Id = LoadingChallan.JobId
		Where T0.TokenId = @pTokenId
	SET @VoucherRefId = @pTokenId
	SELECT @VoucherDate=CONVERT(SMALLDATETIME,PaidOn,103), @VoucherRefNo = TokenNo FROM _Token WHERE Id = @pTokenId
	SET @VoucherRefType = 3 -- Token Type
END
ELSE IF @pChallanNo IS NOT NULL
BEGIN
	DECLARE @tempCostCenterId INT
	DECLARE @LoadingId INT
	SELECT @tempCostCenterId = CostCenterId, @LoadingId=L.Id From JobDetails J
	INNER JOIN LoadingChallan L ON L.JobId=J.Id WHERE ChallanNo = @pChallanNo
	select @TokenId=TokenId from _TokenChallans where challanno=@pChallanNo
	INSERT INTO #ChallanTempTable (ChallanNo, JobCostCenterId, TokenIdCur, LoadingId) VALUES (@pChallanNo, @tempCostCenterId, @TokenId, @LoadingId)
	
	SELECT @VoucherDate=CONVERT(SMALLDATETIME,PaidDate,103) FROM vw_paymentchallandetails WHERE ChallanNo = @pChallanNo
	SET @VoucherRefId = @pChallanNo
	SET @VoucherRefType = 1 -- CHALLAN Type
	SET @VoucherRefNo = Convert(VARCHAR(MAX), @pChallanNo)
END
ELSE IF @pBulkPaymentId IS NOT NULL
BEGIN
	INSERT INTO #ChallanTempTable (ChallanNo, JobCostCenterId, TokenIdCur, LoadingId) 
		SELECT T0.ChallanNo, JobDetails.CostCenterId, T0.TokenId, LoadingChallan.Id
		FROM _TokenChallans T0 
		Inner Join _TokenBulkPaymentId B On B.TokenId = T0.TokenId
		Left Join LoadingChallan On LoadingChallan.ChallanNo = T0.ChallanNo
		Left Join JobDetails On JobDetails.Id = LoadingChallan.JobId
		Where B.BulkPaymentId = @pBulkPaymentId
	SET @VoucherRefId = @pBulkPaymentId
	SELECT @VoucherDate=CONVERT(SMALLDATETIME,PaymentDate,103), @VoucherRefNo = RefNo FROM _TokenBulkPayment WHERE Id = @pBulkPaymentId
	SET @VoucherRefType = 7 -- Bulk Token Payment
END



IF @BulkPaymentId IS NOT NULL
BEGIN
	SET @VoucherStauts = 1
	IF @VoucherDate IS NULL
		SET @VoucherDate = GETDATE()
END
SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
SET @trancount = @@trancount;
BEGIN TRY
		if @trancount = 0
				begin transaction
			else
				save transaction [sp_paymentvoucher]; 
DECLARE @VoucherId INT=0
DECLARE @VoucherName VARCHAR(200)=NULL
DECLARE @PaidToLedgerTransactionId INT =  NULL
SELECT @VoucherId = Id FROM [Accounts_Vouchers] WHERE RefType = @VoucherRefType And ReferenceId = @VoucherRefId

DECLARE @vouchermode INT = 2
DECLARE @ledgerType INT = null
SELECT @ledgerType=LedgerType FROM Accounts_Ledgers where Id=@pPaidToLedgerId
IF @ledgerType IN(8,10)
   SET @vouchermode=4

--IF LTRIM(RTRIM(IsNull(@pNarration,'')))=''
--	BEGIN
SELECT @pNarration = 'Being Freight Paid as per Freight Payment Statement against total Nos of Challans '+ (CONVERT(VARCHAR,COUNT(L.ChallanNo)))+' Vide RefNo '+CONVERT(VARCHAR,TB.RefNo)+'' FROM 
			vw_ReportLoadingChallanReport L
Left Outer join _TokenChallans TC On L.ChallanNo = TC.ChallanNo 
Left Outer Join _Token T On T.Id = TC.TokenId
Left outer join _TokenBulkPaymentId TBI ON TBI.TokenId = T.Id
Left outer join _TokenBulkPayment TB ON TB.Id=TBI.BulkPaymentId
			WHERE L.ChallanNo IN (SELECT ChallanNo FROM #ChallanTempTable)
			group by TB.RefNo
		--SELECT @pNarration = 'Being Bal payment made to '+ MAX(ISNULL(OwnerName,''))+' for '+CONVERT(VARCHAR,SUM(NetWt))+' MT@ '+CONVERT(VARCHAR,AVG(FreightRate))+'/MT Total CH No-'+CONVERT(VARCHAR,COUNT(ChallanNo))+', Loading date Between '+CONVERT(VARCHAR(10), MIN(LoadDate), 103)+' - '+CONVERT(VARCHAR(10), MAX(LoadDate), 103)+'. PAN No '+ MAX(ISNULL(OwnerPan,'')) FROM 
		--	vw_ReportLoadingChallanReport L
		--	WHERE L.ChallanNo IN (SELECT ChallanNo FROM #ChallanTempTable)
--	END

IF(@VoucherId=0)
BEGIN
	INSERT INTO [Accounts_Vouchers]
		(VoucherName
		,VoucherDate
		,VoucherType
		,[Status]
		,InsertUserId
		,InsertDate
		,[Description]
		,BranchId
		,FinancialYear
		,RefType
		,ReferenceNo
		,ReferenceId
		,PaymentMode
		,ChkNeftRefNo)
	VALUES
		(@VoucherName,
		@VoucherDate,
		@vouchermode, -- 'PAYMENT/Journal',
		@VoucherStauts, -- Submitted 
		@pInsertById,
		GETDATE(),
		@pNarration,
		@UserBranchId,
		6,--@FinancialYearId,
		@VoucherRefType, 
		@VoucherRefNo,
		@VoucherRefId,
		@pPaymentMode,
		@pChkNeftRefNo)
	SET @VoucherId=SCOPE_IDENTITY()
END
ELSE
BEGIN
	DECLARE @VoucherTempStatus INT = 0
	SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
	IF @VoucherTempStatus IS NOT NULL AND @VoucherTempStatus not in (1,5,2) -- Approved
		THROW 50000, 'Payment voucher has been approved. Can not modify payment voucher. Reject the voucher to make modification.', 16
	UPDATE Accounts_Vouchers SET 
		VoucherDate=@VoucherDate,
		VoucherType = @vouchermode, -- Payment/Journal Type,
		UpdateUserId=@pInsertById,
		UpdateDate=GETDATE(),
		[Description]=@pNarration,
		[Status] = @VoucherStauts,
		FinancialYear=@FinancialYearId
		,RefType = @VoucherRefType
		,ReferenceNo = @VoucherRefNo
		,ReferenceId = @VoucherRefId
		,PaymentMode = @pPaymentMode
		,ChkNeftRefNo = @pChkNeftRefNo
	WHERE Id = @VoucherId
END		
DELETE FROM Accounts_VoucherTransactionBills WHERE TransactionId IN (SELECT Id FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId)
DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId

SET @TokenOtherDeduction = 0.0
SET @TokenRecovery = 0.0

Select @TokenRecovery = Abs(Sum(Amount)) from _Recovery TR Where 
EXISTS (Select 1 from _Token T0 Where 
EXISTS (select 1 from #ChallanTempTable where TokenIdCur=T0.Id) AND TR.Id=T0.RecoveryId)

Select @TokenOtherDeduction = Sum(IsNull(OtherDeduction,0.0)) from _Token T0 Where 
EXISTS (select 1 from #ChallanTempTable where TokenIdCur=T0.Id)
DECLARE @TokenOtherDeductionLedger INT=NULL
DECLARE @TokenRecoveryLedger INT=NULL
DECLARE @TokenOtherDeductionCenter INT=NULL
IF @TokenOtherDeduction > 0.0 
BEGIN
	Select @TokenOtherDeductionLedger = LedgerId, 
	@TokenOtherDeductionCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then CostCenterId	When CostCenterOption = 2 Then CostCenterId End)
	From systemledger Where Description = 'TOKENOTHERDEDUCTION'
	IF @TokenOtherDeductionLedger IS NULL
		THROW 50000, 'System Legder is not defined for TOKEN OTHERD EDUCTION.', 16
END	
IF @TokenRecovery > 0.0 
BEGIN
	Select @TokenRecoveryLedger = LedgerId
	From systemledger Where Description = 'TRANSPORTATIONRECOVERY'
	IF @TokenRecoveryLedger IS NULL
		THROW 50000, 'System Legder is not defined for TOKEN RECOVERY ADJUSTMENT.', 16
END

DECLARE jobCostCenterCur CURSOR LOCAL FOR 
	SELECT Distinct JobCostCenterId FROM #ChallanTempTable 
OPEN jobCostCenterCur
DECLARE @JobCostCenterId INT = NULL
DECLARE @TotalPaidAmount DECIMAL(18,2) = 0.0
CREATE TABLE #TDSAmountTempTable(VoucherId INT, LedgerId INT,CostCenter INT,TransactionType INT,Amount Decimal(18,2))
FETCH NEXT FROM jobCostCenterCur INTO @JobCostCenterId
WHILE (@@FETCH_STATUS = 0)
BEGIN
		SELECT	
				@ChallanDeduction=SUM(COALESCE(ChallanDeduction,0)), 
			@OtherDeduction=SUM(COALESCE(OtherDeduction,0)),
				@Penalty=SUM(ROUND(COALESCE(Penalty,0),0)),
				@LoadDetention=SUM(COALESCE(P.Detention,0)),
				@UnLoadDetention=SUM(COALESCE(UnLoadDetention,0)),
				@TollGate=SUM(COALESCE(TollGate,0)),
				@ChallanLost=SUM(COALESCE(ChallanLost,0)),
				@Adjustment=SUM(COALESCE(Adjustment,0)),
				@PaidAmount=SUM(COALESCE(PaidAmount,0)),
				@TDSAmount=SUM(ROUND(COALESCE(TDSAmount,0),0)),
				@TDSId=MAX(ISNULL(TDSId,0)),
				--@FreightTransport = SUM(ROUND(EffectiveWt*Freight,0))
				@FreightTransport=(SUM(COALESCE(ChallanDeduction,0)) + SUM(COALESCE(OtherDeduction,0))+ SUM(ROUND(COALESCE(Penalty,0),0)) + SUM(COALESCE(PaidAmount,0)) +SUM(ROUND(COALESCE(TDSAmount,0),0)) + SUM(ISNULL(P.TotalAdvance,0)) + SUM(ISNULL(L.OtherExpenses,0)) + SUM(ISNULL(L.GPSAmount,0)) + SUM(ISNULL(L.CommAmount,0))+ SUM(ISNULL(L.OnlineRegAmount,0)))
		FROM vw_paymentchallandetails P LEFT OUTER JOIN LoadingChallan L On L.Id = P.LoadingId
		WHERE P.ChallanNo IN (Select ChallanNo From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)



		DECLARE @DetentionAmt DECIMAL(18,2)=0.00
		DECLARE @AdvanceAmt DECIMAL(18,2)=0.00
		DECLARE @FuelAmt DECIMAL(18,2)=0.00
		DECLARE @GPSAmount DECIMAL (18,2) = 0.00
		DECLARE @OnlineReg DECIMAL (18,2) = 0.00
		DECLARE @OfficeAmount DECIMAL (18,2) = 0.00
		DECLARE @CommAmount DECIMAL (18,2) = 0.00
		SELECT	@AdvanceAmt =SUM(CASE WHEN AdvanceType IN (1,3) THEN Amount ELSE 0 END) ,
				@FuelAmt = SUM(CASE WHEN AdvanceType IN (2) THEN Amount ELSE 0 END) ,
				@LoadDetention = SUM(CASE WHEN  AdvanceType IN (5) THEN Amount ELSE 0 END) ,
				@GPSAmount = SUM(CASE WHEN  AdvanceType IN (6) THEN Amount ELSE 0 END),
				@OnlineReg = SUM(CASE WHEN  AdvanceType IN (7) THEN Amount ELSE 0 END) ,
				@OfficeAmount = SUM(CASE WHEN  AdvanceType IN (8) THEN Amount ELSE 0 END) ,
				@CommAmount = SUM(CASE WHEN  AdvanceType IN (9) THEN Amount ELSE 0 END) 


		FROM LoadingAdvance
		WHERE LoadingId IN (Select LoadingId From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)



		--DECLARE @SecondAdvance DECIMAL(18,2)=0.00
		--SELECT	@SecondAdvance =SUM(ISNULL(Amount,0)) 
		--FROM OfficeAdvance
		--WHERE LoadingId IN (Select LoadingId From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)
		



		INSERT INTO #TokenIds SELECT T.Id  from _Token T 
		Inner Join _TokenChallans TC ON TC.TokenId = T.Id
		Where ChallanNo IN (Select ChallanNo From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)
		
					 
		DECLARE @FreightTransportLedger INT=NULL
		DECLARE @FreightTransportCenter INT=NULL
		DECLARE @LoadingDetentionLedger INT=NULL
		DECLARE @LoadingDetentionCenter INT=NULL
		DECLARE @UnloadingDetentionLedger INT=NULL
		DECLARE @UnloadingDetentionCenter INT=NULL
		DECLARE @ChallanDeductionLedger INT=NULL
		DECLARE @OtherDeductionLedger INT=NULL
		DECLARE @ChallanDeductionCenter INT=NULL
		DECLARE @OtherDeductionCenter INT=NULL
		DECLARE @TollGateLedger INT=NULL
		DECLARE @TollGateCenter INT=NULL
		DECLARE @PenaltyLedger INT=NULL
		DECLARE @PenaltyCenter INT=NULL
		DECLARE @ChallanLostLedger INT=NULL
		DECLARE @ChallanLostCenter INT=NULL
		DECLARE @AdjustmentLedger INT=NULL
		DECLARE @AdjustmentCenter INT=NULL
		DECLARE @FreightPaybleLedger INT=NULL
		DECLARE @FreightPaybleCenter INT=NULL
		DECLARE @TDSLedgerId INT=NULL
		DECLARE @TDSLedgerCenter INT=NULL
		DECLARE @ReverseFMsg VARCHAR(5000) = ''
		DECLARE @TruckOwnerAdvanceLedger INT=NULL
		DECLARE @FuelAdvanceLedger INT=NULL

		SET @EexecutionMessage = ''
		SELECT @TruckOwnerAdvanceLedger=LedgerId FROM SystemLedger WHERE Description='TRANSPORTATION ADV TRUCK OWNERS'
		SELECT @FuelAdvanceLedger=LedgerId FROM SystemLedger WHERE Description='FUEL ADV TRUCK OWNERS'
		Select @FreightTransportLedger = LedgerId, 
		@FreightTransportCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'FREIGHTTRANSPORT'
		Select @LoadingDetentionLedger = LedgerId, 
		@LoadingDetentionCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'LOADDETENTION'
		Select @UnloadingDetentionLedger = LedgerId, 
		@UnloadingDetentionCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'UNLOADDETENTION'
		Select @ChallanDeductionLedger = LedgerId, 
		@ChallanDeductionCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'CHALLANDEDUCTION'
		Select @OtherDeductionLedger = LedgerId, 
		@OtherDeductionCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'OTHERDEDUCTION'
		Select @TollGateLedger = LedgerId, 
		@TollGateCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'TOLLGATE'
		Select @PenaltyLedger = LedgerId, 
		@PenaltyCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'PENALTY'
		Select @ChallanLostLedger = LedgerId, 
		@ChallanLostCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'CHALLANLOST'
		Select @AdjustmentLedger = LedgerId, 
		@AdjustmentCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'ADJUSTMENT'
		Select @FreightPaybleLedger = LedgerId, 
		@FreightPaybleCenter = (Case When CostCenterOption = 0 Then Null	When CostCenterOption = 1 Then @JobCostCenterId	When CostCenterOption = 2 Then CostCenterId End)
		From systemledger Where Description = 'FREIGHTPAYABLE'
		

		IF @TDSId IS NOT NULL AND @TDSId > 0
		BEGIN
			Select @TDSLedgerId = LedgerId, @TDSLedgerCenter = NULL  From Accounts_TDSSettings Where Id = @TDSId
		END
		
		
		IF @FreightTransport  IS NULL 
			RAISERROR ('Freight Transport amount not found.', 1, 16)
		BEGIN
			-- DECLARE @IsLoadingVoucherExist INT  = 0
			-- DECLARE @TotalChallans INT = 0
			
			-- SELECT @IsLoadingVoucherExist = Count(Id) FROM LoadingChallan 
			-- WHERE ChallanNo IN (Select ChallanNo From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)

			-- SELECT @TotalChallans = Count(*) FROM #ChallanTempTable Where JobCostCenterId = @JobCostCenterId
			-- SET @EexecutionMessage = @EexecutionMessage + 'Job CostCenter: ' + IsNull(Convert(Varchar(50), @JobCostCenterId), 'N/A')+ '. '

			--IF @IsLoadingVoucherExist = @TotalChallans -- Create payment voucher only if loading voucher has been created for all challans.
			BEGIN
				-- Auto Approve Loading Voucher..
				Update Accounts_Vouchers Set [Status] = 4, StatusOn = GetDate(), [StatusRemarks] = 'Auto Approved at the time of payment.'
				WHERE IsAutoGenerated = 1 And RefType  = 1 -- CHALLAN
						And ReferenceId IN (Select ChallanNo From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId)
						And VoucherType = 2 -- Jonural Voucher
				
				-- DR FreightTransport
				SET @EexecutionMessage = @EexecutionMessage + 'DR FreightTransport: ' + IsNull(Convert(Varchar(50), @FreightTransport), 'N/A')+ '. '
				IF(ISNULL(@FreightTransport,0)<>0)
					INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES	(@VoucherId,@FreightTransportLedger, @FreightTransportCenter,2, @FreightTransport)	
		
				-- DR Loading Detention
				SET @EexecutionMessage = @EexecutionMessage + 'DR Loading: ' + IsNull(Convert(Varchar(50), @LoadDetention), 'N/A')+ '. '
				IF(ISNULL(@LoadDetention,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@LoadingDetentionLedger,@LoadingDetentionCenter,2, @LoadDetention)
	
				-- DR UnLoading Detention
				SET @EexecutionMessage = @EexecutionMessage + 'DR UnLoading: ' + IsNull(Convert(Varchar(50), @UnLoadDetention), 'N/A')+ '. '
				IF(ISNULL(@UnLoadDetention,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@UnloadingDetentionLedger,@UnloadingDetentionCenter,2, @UnLoadDetention)
				
				-- CR Challan Deduction
				SET @EexecutionMessage = @EexecutionMessage + 'CR Challan: '  + IsNull(Convert(Varchar(50), @ChallanDeduction), 'N/A') + '. '
				IF(ISNULL(@ChallanDeduction,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@ChallanDeductionLedger,@ChallanDeductionCenter,1, @ChallanDeduction)

				-- CR Challan Deduction
				SET @EexecutionMessage = @EexecutionMessage + 'CR Other Deduction: '  + IsNull(Convert(Varchar(50), @OtherDeduction), 'N/A') + '. '
				IF(ISNULL(@OtherDeduction,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@OtherDeductionLedger,@OtherDeductionCenter,1, @OtherDeduction)
	
				-- CR Penalty
				SET @EexecutionMessage = @EexecutionMessage + 'CR Penalty: ' + IsNull(Convert(Varchar(50), @Penalty), 'N/A') + '. '
				IF(ISNULL(@Penalty,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@PenaltyLedger,@PenaltyCenter,1, @Penalty)
	
				-- CR TollGate
				SET @EexecutionMessage = @EexecutionMessage + 'DR TollGate: ' + IsNull(Convert(Varchar(50), @TollGate), 'N/A') + '. '
				IF(ISNULL(@TollGate,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@TollGateLedger,@TollGateCenter,2, @TollGate)
	
				-- CR Challan Lost
				SET @EexecutionMessage = @EexecutionMessage + 'CR Lost: ' + IsNull(Convert(Varchar(50), @ChallanLost), 'N/A') + '. '
				IF(IsNULL(@ChallanLost,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@ChallanLostLedger,@ChallanLostCenter,1, @ChallanLost)
				-- CR TDS
				SET @EexecutionMessage = @EexecutionMessage + 'CR TDS: ' + IsNull(Convert(Varchar(50), @TDSAmount), 'N/A') + '. '
				IF(IsNULL(@TDSAmount,0)<>0)
				INSERT INTO #TDSAmountTempTable
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(	@VoucherId,@TDSLedgerId,@TDSLedgerCenter,1, @TDSAmount)
				-- CR Adjustment
				SET @EexecutionMessage = @EexecutionMessage + 'DR Adjustment: ' + IsNull(Convert(Varchar(50), @Adjustment), 'N/A') + '. '
				IF(ISNULL(@Adjustment,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@AdjustmentLedger,@AdjustmentCenter,2, @Adjustment)
				
				-- CR Advance
				SET @EexecutionMessage = @EexecutionMessage + 'DR Advance: ' + IsNull(Convert(Varchar(50), @AdvanceAmt), 'N/A') + '. '
				IF(ISNULL(@AdvanceAmt,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @AdvanceAmt)

				-- CR GPSAmount
				SET @EexecutionMessage = @EexecutionMessage + 'DR GPS Amount: ' + IsNull(Convert(Varchar(50), @GPSAmount), 'N/A') + '. '
				IF(ISNULL(@GPSAmount,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @GPSAmount)

				-- CR GPSAmount
				SET @EexecutionMessage = @EexecutionMessage + 'Online Reg: ' + IsNull(Convert(Varchar(50), @OnlineReg), 'N/A') + '. '
				IF(ISNULL(@OnlineReg,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @OnlineReg)

				-- CR OfficeAmount
				SET @EexecutionMessage = @EexecutionMessage + 'Office Amt: ' + IsNull(Convert(Varchar(50), @OfficeAmount), 'N/A') + '. '
				IF(ISNULL(@OfficeAmount,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @OfficeAmount)

				-- CR CommAmount
				SET @EexecutionMessage = @EexecutionMessage + 'Commission: ' + IsNull(Convert(Varchar(50), @CommAmount), 'N/A') + '. '
				IF(ISNULL(@CommAmount,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @CommAmount)

				-- CR Fuel
				SET @EexecutionMessage = @EexecutionMessage + 'DR Fuel: ' + IsNull(Convert(Varchar(50), @FuelAmt), 'N/A') + '. '
				IF(ISNULL(@FuelAmt,0)<>0)
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				VALUES
				(@VoucherId,@FuelAdvanceLedger,NULL,1, @FuelAmt)



				--SET @EexecutionMessage = @EexecutionMessage + 'Second Advance: ' + IsNull(Convert(Varchar(50), @FuelAmt), 'N/A') + '. '
				--IF(ISNULL(@FuelAmt,0)<>0)
				--INSERT INTO Accounts_VoucherTransaction
				--	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				--VALUES
				--(@VoucherId,@TruckOwnerAdvanceLedger,NULL,1, @SecondAdvance)


				-- CR Reverse Freight Transport
				--SET @FreightTransport=@FreightTransport+COALESCE(@LoadDetention,0)+COALESCE(@UnLoadDetention,0)+COALESCE(@TollGate,0)+COALESCE(@ADJUSTMENT,0)
				--SET @FreightTransport=@FreightTransport-(COALESCE(@ChallanDeduction,0)+COALESCE(@Penalty,0)+COALESCE(@ChallanLost,0)+ISNULL(@TDSAmount,0)+ISNULL(@OtherDeduction,0))
				--SET @FreightTransport=@FreightTransport-(COALESCE(@AdvanceAmt,0)+COALESCE(@FuelAmt,0))
				
				SET @PaidAmount=@PaidAmount
				--DECLARE @ReverseEntry DECIMAL(18,2)=0.00
				--SET @ReverseEntry=@FreightPayable-@PaidAmount
				
				--SET @EexecutionMessage = @EexecutionMessage + 'CR Reverse Freight: '  + IsNull(Convert(Varchar(50), @ReverseEntry), 'N/A') + '. '
				--SET @EexecutionMessage = @EexecutionMessage + 'CR Paid Amount: '  + IsNull(Convert(Varchar(50), @PaidAmount), 'N/A') + '. '
				--SET @ReverseFMsg = 'Paid amount found to be more than the desired. Failed to create payment. (CostCenterId:' + Convert(Varchar, @JobCostCenterId) + ')'
				--IF(ISNULL(@ReverseEntry,0) < -10.00)
				--BEGIN
				--	raiserror (@ReverseFMsg, 16, 1);
				--END
				--IF(ISNULL(@ReverseEntry,0)<>0)
				--INSERT INTO Accounts_VoucherTransaction
				--	(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
				--VALUES
				--(	@VoucherId,@FreightTransportLedger,@FreightTransportCenter,1, @ReverseEntry)	
				--SET @EexecutionMessage = @EexecutionMessage + 'CR Reverse Freight End.'
				--DECLARE @OfficeAdv DECIMAL(18,2)=NULL	

				--select @OfficeAdv=ISNULL(Amount,0) from OfficeAdvance where ChallanNo =@ChallanNo				
				SET @TotalPaidAmount = @TotalPaidAmount + @PaidAmount --@OfficeAdv --+ COALESCE(@AdvanceAmt,0)+COALESCE(@FuelAmt,0)
		
			END
			/*ELSE
			BEGIN
				DECLARE @Chlaalans VARCHAR(MAX)
				SELECT @Chlaalans = 'Loading voucher is not created for following challans: ' + STUFF((
				Select ', ' + Convert(Varchar,ChallanNo) From #ChallanTempTable Where JobCostCenterId = @JobCostCenterId
				And ChallanNo Not in (Select IsNull(ReferenceId,-1) From Accounts_Vouchers Where RefType = 1 And VoucherType = 4)
				FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
				
				SET @EexecutionMessage = ''
				raiserror (@Chlaalans, 16, 1) ;
			END*/
		END
    FETCH NEXT FROM jobCostCenterCur INTO @JobCostCenterId
END
CLOSE jobCostCenterCur
DEALLOCATE jobCostCenterCur

IF IsNull(@TokenOtherDeduction,0.0) <> 0.0 
BEGIN
	SET @EexecutionMessage = @EexecutionMessage + 'Token Deduction: ' + IsNull(Convert(Varchar(50), @TokenOtherDeduction), 'N/A') + '. '
	INSERT INTO Accounts_VoucherTransaction
		(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
	VALUES
		(@VoucherId,@TokenOtherDeductionLedger,@TokenOtherDeductionCenter,1, @TokenOtherDeduction)
END

IF IsNull(@TokenRecovery,0.0) <> 0.0 
BEGIN
	SET @EexecutionMessage = @EexecutionMessage + 'Token Recovery Adjustment: ' + IsNull(Convert(Varchar(50), @TokenRecovery), 'N/A') + '. '
	INSERT INTO Accounts_VoucherTransaction
		(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
	VALUES
		(@VoucherId,@TokenRecoveryLedger,NULL,1, @TokenRecovery)
END
SET @TotalPaidAmount = @TotalPaidAmount- ISNULL(@TokenOtherDeduction,0.0) - ISNULL(@TokenRecovery,0.0)
-- CR Paid Amount
DECLARE @PaidTranType INT = 1
IF @TotalPaidAmount < 0.0
BEGIN
	SET @PaidTranType = 2
	UPDATE Accounts_Vouchers SET VoucherType = 3 /*Receipt Voucher*/ Where Id = @VoucherId
END

IF @TotalPaidAmount=0
BEGIN
UPDATE Accounts_Vouchers SET VoucherType = 4 /*Journal Voucher*/ Where Id = @VoucherId
END

INSERT INTO Accounts_VoucherTransaction (VoucherId, LedgerId,CostCenter,TransactionType,Amount)
Select VoucherId, LedgerId,CostCenter,TransactionType, Sum(Amount) FROM #TDSAmountTempTable GROUP BY VoucherId, LedgerId,CostCenter,TransactionType

IF(ISNULL(@TotalPaidAmount,0)<>0)
INSERT INTO Accounts_VoucherTransaction
	(VoucherId, LedgerId,CostCenter,TransactionType,Amount,ChkNeftRefNo)
VALUES
(	@VoucherId,@pPaidToLedgerId,@pPaidToCostCenterId,@PaidTranType, Abs(@TotalPaidAmount),@pChkNeftRefNo)
	
SET @PaidToLedgerTransactionId = SCOPE_IDENTITY()
--INSERT INTO Accounts_VoucherTransactionBills (TransactionId, BillId) 
	--SELECT @PaidToLedgerTransactionId, Id From Accounts_Bills Where BillNo IN (Select ChallanNo From #ChallanTempTable) AND BillType = 'CHALLAN'
Update Payment Set PVoucherId = @VoucherId 
FROM Payment P
Inner Join LoadingChallan ON LoadingChallan.Id = P.LoadingId
Where LoadingChallan.ChallanNo in (Select ChallanNo From #ChallanTempTable)
IF @pTokenId IS NOT NULL
	UPDATE _Token Set VoucherId = @VoucherId Where Id = @pTokenId
IF @pBulkPaymentId IS NOT NULL
BEGIN
	UPDATE _TokenBulkPayment Set VoucherId = @VoucherId Where Id = @pBulkPaymentId
	UPDATE _Token Set 
		VoucherId = @VoucherId, -- PaymentMode = @pPaymentMode,  
		ChkNeftRefNo = @pChkNeftRefNo, PaidOn = @VoucherDate, LedgerId =  @pPaidToLedgerId 
	Where Id in (Select TokenId From _TokenBulkPaymentId Where BulkPaymentId = @pBulkPaymentId)
END
SET @EexecutionMessage = ''

Exec [Acounting_ValidateVoucher] @Voucherid	
Update Payment Set /* PaymentMode = @pPaymentMode, */ ChequeNo= @pChkNeftRefNo, PaidDate=@PaidDate Where LoadingId In (
Select id From LoadingChallan
Inner Join #ChallanTempTable CC On CC.ChallanNo = LoadingChallan.ChallanNo)
if @trancount = 0
			commit;
END TRY
BEGIN CATCH
	declare @error int, @message varchar(4000), @xstate int;
	select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
	if @xstate = -1
		rollback;
	if @xstate = 1 and @trancount = 0
		rollback
	if @xstate = 1 and @trancount > 0
		rollback transaction [sp_paymentvoucher];
	raiserror ('[sp_paymentvoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[sp_Pump]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Pump](@Type INT=0, @PumpName VARCHAR(100)=NULL)
AS
BEGIN
	IF @Type=6
		SELECT Id, PumpName FROM PumpName
	ELSE IF @Type=9
		SELECT N.Id, DieselRate from Pump P
			INNER JOIN PumpName N ON N.Id=P.PumpNameId
				WHERE N.PumpName=@PumpName
END
GO
/****** Object:  StoredProcedure [dbo].[sp_RecalculateChallanPenalty]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_RecalculateChallanPenalty](@ChallanNo INT)
as
begin
	DECLARE @Wheeler INT=0
	DECLARE @JobId INT=0
	DECLARE @TruckSource VARCHAR(20)=''
	DECLARE @LoadType VARCHAR(20)=''
	DECLARE @Shortage DECIMAL(18,3)=0.000
	DECLARE @NetWt DECIMAL(18,3)=0.000
	SELECT @NetWt=NetWt, @LoadType=LoadType, @Shortage=(CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000, @Wheeler=Wheeler, @JobId=JobId, @TruckSource=TruckSource from vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo
	DECLARE @Limit DECIMAL(18,3)=0.000
	DECLARE @LimitUnit VARCHAR(10)=''
	DECLARE @Deduction VARCHAR(10)=''
	DECLARE @PenaltyShortageWt DECIMAL(18,3)=0.000
	DECLARE @PenaltyRate DECIMAL(18,3)=0.000
	Declare @PaymentId INT = NULL
	Declare @ShortageWaiverId INT = NULL
	Select  @PaymentId = PaymentId From vw_paymentchallandetails Where ChallanNo = @ChallanNo
	IF @PaymentId IS NOT NULL
	BEGIN
		Select @ShortageWaiverId = Id  from _ShoratgeWaiver Where PaymentId = @PaymentId And [Status] = 4
		IF @ShortageWaiverId IS NULL
		BEGIN
			SET @PenaltyRate = 0.00
			SELECT  @PenaltyShortageWt = MAX(CONVERT(DECIMAL(18,3),(CASE WHEN @Shortage<(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) THEN 0 ELSE 
			CASE WHEN Deduction='EXTRA' THEN @Shortage-(CASE WHEN LimitUnit='%' THEN (@NetWt*COALESCE(Limit,0)*10) ELSE Limit END) ELSE @Shortage END
			END),1))
			from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND (Wheels=@Wheeler OR Wheels=0 ) AND JobId=@JobId AND Transporter=@TruckSource
			
			SELECT @PenaltyRate=PenaltyRate
			from transportershortage WHERE UPPER(LoadType)=UPPER(@LoadType) AND (Wheels=@Wheeler OR Wheels=0 ) AND JobId=@JobId AND Transporter=@TruckSource
			
			IF @PenaltyShortageWt IS NULL 
				SET @PenaltyShortageWt = 0.000
			IF @PenaltyRate IS NULL 
				SET @PenaltyRate = 0.000
			update payment set ShortagePenaltyWt = @PenaltyShortageWt, PenaltyRate = @PenaltyRate, ShortageWt = @Shortage, Penalty = (@PenaltyRate * @PenaltyShortageWt) Where id = @PaymentId
		END
		ELSE
		BEGIN
			update payment SET 
				ShortagePenaltyWt = IsNull((W.ShortagePenaltyWt - W.ApproveWaiverWt), 0.0000),
				Penalty = IsNull((W.ShortagePenaltyWt - W.ApproveWaiverWt) * W.PenaltyRate, 0.000)
			From payment P
			Inner Join _ShoratgeWaiver W On W.PaymentId = P.Id
			Where W.PaymentId = @PaymentId
		END
	END
End

GO
/****** Object:  StoredProcedure [dbo].[sp_sealbook]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_sealbook](
	@Type int = 0, 
	@Id int =0,
	@SealStart INT=0, 
	@SealEnd INT=0,
	@BranchId INT=0,
    @BranchName varchar(50)='',
	@SealType varchar(10)='',
	@SealCase  varchar(10)='',
	@Deleted bit = 0,
	@Search varchar(50)='', 
	@Createddby INT=0
) 


AS 
DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Search + @SealType + @SealCase + @BranchName
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

	IF(@Type = 1)
		BEGIN
			SELECT    SealBook.Id id,SealBook.SealStart,SealBook.SealEnd,SealBook.SealType,SealBook.SealCase,Branch.Name BranchName FROM SealBook
			left outer join  Branch ON  SealBook.BranchId=Branch.Id
			WHERE SealBook.SealStart LIKE '%'+ @Search+'%'
		END
	ELSE IF(@Type = 2)
		BEGIN
			SELECT    SealBook.Id Id,SealBook.SealStart,SealBook.SealEnd,SealBook.SealType,SealBook.SealCase,Branch.Name BranchName FROM SealBook
				left outer join  Branch ON  SealBook.BranchId=Branch.Id
				WHERE SealBook.Id=@Id
		END
	ELSE IF(@Type = 3)
		BEGIN
			IF (@SealCase='Stock')
				BEGIN
					IF EXISTS (SELECT 1 FROM SealBook WHERE
								(@SealStart BETWEEN SealStart AND SealEnd) OR 
								(@SealEnd BETWEEN SealStart AND SealEnd) OR
								(SealStart BETWEEN @SealStart AND @SealEnd) OR 
								(SealEnd BETWEEN @SealStart AND @SealEnd)
								)
					BEGIN
						SELECT 'E';
					END
					ELSE
					BEGIN
						INSERT INTO  SealBook (SealStart,SealEnd, BranchId,SealCase,CreatedBy,CreatedOn, Deleted)
							VALUES(@SealStart,@SealEnd, @BranchId,@SealCase,@Createddby ,GETDATE(), 0)
							SET NOCOUNT ON
							WHILE @SealStart <= @SealEnd
							BEGIN
								INSERT INTO RegisteredSeals(SealNo, Status, BranchId) VALUES (@SealStart, 'S', @BranchId);
								SELECT @SealStart = @SealStart + 1;
							END;
							SET NOCOUNT OFF
						SELECT 'S';
					END
				END
			ELSE IF (@SealCase='Issue')
				BEGIN
					IF EXISTS (SELECT 1 FROM SealBook WHERE
								(@SealStart BETWEEN SealStart AND SealEnd) AND 
								(@SealEnd BETWEEN SealStart AND SealEnd) AND SealCase='Stock'
								) AND
					   NOT EXISTS (SELECT 1 FROM RegisteredSeals WHERE
								(SealNo BETWEEN @SealStart AND @SealEnd) AND Status<>'S')
					BEGIN
						INSERT INTO  SealBook (SealStart,SealEnd, BranchId,SealCase,CreatedBy,CreatedOn, Deleted)
							VALUES(@SealStart,@SealEnd, @BranchId,@SealCase,@Createddby ,GETDATE(), 0)
							SET NOCOUNT ON
							WHILE @SealStart <= @SealEnd
							BEGIN
								UPDATE RegisteredSeals SET Status='I', BranchId=@BranchId WHERE SealNo=@SealStart;
								SELECT @SealStart = @SealStart + 1;
							END;
							SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END
			ELSE IF (@SealCase='Return')
				BEGIN
					IF NOT EXISTS (SELECT 1 FROM RegisteredSeals WHERE
								(SealNo BETWEEN @SealStart AND @SealEnd) AND Status<>'I')
					BEGIN
						INSERT INTO  SealBook (SealStart,SealEnd, BranchId,SealCase,SealType, CreatedBy,CreatedOn, Deleted)
							VALUES(@SealStart,@SealEnd, @BranchId,'Stock', 'Return',@Createddby ,GETDATE(), 0)
						SET NOCOUNT ON
						WHILE @SealStart <= @SealEnd
						BEGIN
							UPDATE RegisteredSeals SET Status='S', BranchId=@BranchId WHERE SealNo=@SealStart;
							SELECT @SealStart = @SealStart + 1;
						END;
						SET NOCOUNT OFF
						SELECT 'S';
					END
					ELSE
					BEGIN
						SELECT 'E';
					END
				END
		END
	ELSE IF(@Type = 4)
		BEGIN
		SELECT @SealStart=SealStart, @SealEnd=SealEnd From SealBook WHERE Id=@Id
		IF NOT EXISTS (SELECT 1 FROM RegisteredSeals WHERE
					(SealNo BETWEEN @SealStart AND @SealEnd) AND Status<>'S')
		BEGIN
			DELETE FROM SealBook WHERE Id=@Id
			DELETE FROM RegisteredSeals WHERE SealNo BETWEEN @SealStart AND @SealEnd
			SELECT 'S';
		END
		ELSE
		BEGIN
			SELECT 'E';
		END
	END
	IF(@Type = 5)
BEGIN

     SELECT @BranchId=Id from  branch where Branch.Name=@BranchName
	 SELECT DISTINCT SealBook.SealStart,SealBook.SealEnd,SealBook.SealCase,CONVERT(varchar(10) ,SealBook.CreatedOn,103)CreatedOn ,RegisteredSeals.Status,Branch.Name,Branch.Code from SealBook
			  inner join RegisteredSeals ON SealBook.BranchId=RegisteredSeals.BranchId 
			  inner join Branch ON RegisteredSeals.BranchId=Branch.Id
			   WHERE SealBook.SealCase='Issue' AND RegisteredSeals.Status='I' AND SealBook.BranchId=@BranchId 
END




 

GO
/****** Object:  StoredProcedure [dbo].[sp_shortagereport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_shortagereport]
@Type int=0,
@Contact varchar(20)='',
@BranchName varchar(100)='',
@JobNo varchar(50) = '',
@ChallanNo INT = 0,
@StartDate VARCHAR(10) = '',
@EndDate VARCHAR(10) = '',
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = '',
@PaidType varchar(20)='',
@PaidToName varchar(100)='',
@Token varchar(50)='',
@IsPaid INT = NULL
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Token + @PaidToName + @PaidType + @UnloadingPoint + @LoadingPoint + @TruckNo + @EndDate + @StartDate
 + @JobNo + @BranchName + @Contact
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type = 1)
BEGIN 
	DECLARE @pType int=0
	DECLARE @pContact varchar(20)=''
	DECLARE @pBranchName varchar(100)=''
	DECLARE @pJobNo varchar(50) = ''
	DECLARE @pChallanNo INT = 0
	DECLARE @pStartDate VARCHAR(10) = NULL
	DECLARE @pEndDate VARCHAR(10) = NULL
	DECLARE @pTruckNo varchar(50) = ''
	DECLARE @pLoadingPoint  varchar(50) = ''
	DECLARE @pUnloadingPoint varchar(50) = ''
	DECLARE @pPaidType varchar(20)=''
	DECLARE @pPaidToName varchar(100)=''
	DECLARE @pToken varchar(50)=''
	DECLARE @pIsPaid INT = NULL

	SET @pType			= @Type				
	SET @pContact		= @Contact			
	SET @pBranchName    = @BranchName         
	SET @pJobNo         = @JobNo              
	SET @pChallanNo     = @ChallanNo          
	SET @pStartDate     = @StartDate          
	SET @pEndDate       = @EndDate            
	SET @pTruckNo       = @TruckNo            
	SET @pLoadingPoint  = @LoadingPoint       
	SET @pUnloadingPoint= @UnloadingPoint     
	SET @pPaidType      = @PaidType           
	SET @pPaidToName    = @PaidToName         
	SET @pToken         = @Token              
	SET @pIsPaid        = @IsPaid             

	
SELECT J.JobNo, L.Challanno, L.LoadDate, U.UnloadedDate, L.NetWT, U.UnloadedNetWt, L.LoadType, CP.PartyName OwnerName, CP.PANNumber OwnerPan
, CONVERT(DECIMAL(18,0), IsNull(P.ShortageWt,((CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000)),0) ShortageWt, V.VehicleNo TruckNumber, L.Freight
, L.Advance, L.HSDCost, P.Penalty, P.ChallanDeduction, P.PaidTo, P.PaidAmount
, Sector, J.MaterialName, ClientName, CONVERT(DECIMAL(18,2),(Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)),1) NewEffectiveAmount
, ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
, P.Penalty-ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0)+P.Challandeduction
, Tokenno, dbo.[FN_GetNetPaybleForChallanLive](L.ChallanNo) NetPayable
FROM LoadingChallan L
 LEFT OUTER JOIN vw_ReportJobDetails J ON J.JobId=L.JobId
 LEFT OUTER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
 LEFT OUTER JOIN Payment P ON P.LoadingId=L.Id
 LEFT OUTER JOIN Common_Parties CP ON CP.Id=L.OwnerId
 LEFT OUTER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
 LEFT OUTER JOIN _TokenChallans TC ON TC.ChallanNo=L.ChallanNo
 LEFT OUTER JOIN _Token T ON T.Id=TC.TokenId
 WHERE U.Id is not null AND (L.NetWt-U.UnloadedNetWt)>0
		AND (IsNull(@pJobNo,'') = '' OR JobNo = @pJobNo)
		AND (@pBranchName = '' OR J.BranchName = @pBranchName)
		AND (@pToken = '' OR TokenNo = @pToken)
		AND (@pChallanNo = 0 OR L.ChallanNo = @pChallanNo)
		AND (@pTruckNo = '' OR V.VehicleNo = @pTruckNo)
		AND (@pLoadingPoint = '' OR LoadingPoint = @pLoadingPoint)
		AND (@pUnloadingPoint = '' OR UnloadingPoint = @pUnloadingPoint)
		AND (@pStartDate = '' OR CONVERT(smalldatetime, LoadDate, 103) >= CONVERT(smalldatetime, @pStartDate, 103))
		AND (@pEndDate = '' OR CONVERT(smalldatetime, LoadDate, 103) <= CONVERT(smalldatetime, @pEndDate, 103))
		AND (@pContact = '' OR p.PaidTo LIKE '%' + @pContact + '%')
ORDER BY LoadDate DESC
	/*SELECT  u.*, p.Id PaymentId, p.LoadingId PLoadingId, p.UnloadingId PUnloadingId,ChallanDeduction,TollGate,EffectiveWt,
			CONVERT(DECIMAL(18,0),IsNull(ShortageWt,((CASE WHEN NetWt<UnloadedNetWt THEN 0 ELSE NetWt-UnloadedNetWt END)*1000)),0) ShortageWt
			,IsNull(Penalty, dbo.[FN_GetPenaltyForChallan](u.ChallanNo)) As Penalty,ChallanLost,Adjustment
			,ISNULL(p.NetPayable,DBO.[FN_GetNetPaybleForChallan](u.ChallanNo)) As NetPayable
			,CONVERT(VARCHAR(10),p.PaidDate, 103) PaidDate,p.PaidTo
			,PaymentMode,p.ChequeNo,PaidAmount,p.Remarks PaymentRemarks, PaidBy,CONVERT(VARCHAR(10),p.PaidOn, 103) PaidOn
			,IsSubmitted, IsApproved, BranchName PaidBranchName, FullName PaidByName
			,CONVERT(DECIMAL(18,2),(Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)),1) NewEffectiveAmount
			,CASE WHEN COALESCE(IsSubmitted,0)>0 AND COALESCE(IsApproved,0)=0 THEN CAST(COALESCE(NetPayable,0) AS VARCHAR(25)) ELSE '0.00' END NetBalance
			,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
			,'Pending' as PaymentStatus
			,TokenReference as TokenNo INTO #TempT1
		FROM vw_unloadingchallandetails u
		LEFT OUTER JOIN Payment p ON p.LoadingId=u.LoadingId
		LEFT OUTER JOIN vw_userdetails ON PaidBy=UserId
		LEFT OUTER JOIN token ON token.challan=u.challanno
		WHERE 1=1  
		AND (IsNull(@pJobNo,'') = '' OR JobNo = @pJobNo)
		AND (@pBranchName = '' OR ExecutingBranchName = @pBranchName)
		AND (@pToken = '' OR TokenReference = @pToken)
		AND (@pChallanNo = 0 OR ChallanNo = @pChallanNo)
		AND (@pTruckNo = '' OR TruckNumber = @pTruckNo)
		AND (@pLoadingPoint = '' OR LoadingPoint = @pLoadingPoint)
		AND (@pUnloadingPoint = '' OR UnloadingPoint = @pUnloadingPoint)
		AND (@pStartDate = '' OR CONVERT(smalldatetime, LoadDate, 103) >= CONVERT(smalldatetime, @pStartDate, 103))
		AND (@pEndDate = '' OR CONVERT(smalldatetime, LoadDate, 103) <= CONVERT(smalldatetime, @pEndDate, 103))
		AND (@pContact = '' OR p.PaidTo LIKE '%' + @pContact + '%')
		-- AND (@pIsPaid IS NULL OR CASE WHEN(p.PaidTo,0) = @pIsPaid)
		
		
		SELECT * FROM #TempT1 Where NetPayable < 0 */

END
GO
/****** Object:  StoredProcedure [dbo].[sp_STODetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_STODetails]
(
@Type INT=-1,
@Id INT=0,
@WONo VARCHAR(50)='',
@STONo VARCHAR(50)='',
@Quantity DECIMAL(18,3)=0.000,
@StartDate SMALLDATETIME=null,
@EndDate SMALLDATETIME=null,
@CreatedBy INT=0
)
AS 

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @WONo + @STONo  
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1



IF(@Type=99)
BEGIN 
	DECLARE @Sector VARCHAR(200)=''
	SELECT TOP 1 @Sector=Sector FROM vw_loadingchallandetails WHERE STONo=@STONo
	SELECT DISTINCT STODetails.Id, STODetails.WONo, STODetails.STONo,STODetails.Quantity,CONVERT(VARCHAR(10),STODetails.StartDate, 103) StartDate, CONVERT(VARCHAR(10),STODetails.EndDate, 103) EndDate
		,@Sector Sector
		FROM STODetails 
		WHERE COALESCE(Deleted,0)=0 AND STONo LIKE '%'+@STONo+'%'
END
ELSE IF(@Type = 1)
BEGIN
      SELECT DISTINCT STODetails.Id, STODetails.WONo, STODetails.STONo,STODetails.Quantity,CONVERT(VARCHAR(10),STODetails.StartDate, 103) StartDate, CONVERT(VARCHAR(10),STODetails.EndDate, 103) EndDate
		,Sector
		FROM STODetails 
		LEFT OUTER JOIN vw_loadingchallandetails l ON l.WO=STODetails.WONo
		WHERE COALESCE(Deleted,0)=0 AND STODetails.Id=@Id
END
ELSE IF(@Type = 2)
BEGIN
	 -- INSERT INTO STODetails(WONo,STONo,Quantity,StartDate,EndDate,CreatedOn,CreatedBy) VALUES (@WONo,@STONo,@Quantity,@StartDate,@EndDate,GETDATE(),@CreatedBy)
	 -- SELECT @@IDENTITY
	 SELECT 'Error in adding STO. Use new module to add STO.'
End
ELSE IF(@Type=3)
BEGIN
	 SELECT 'Error in adding STO. Use new module to add STO.'
END	 
ELSE IF(@Type = 4)
     BEGIN
	SELECT 'Error in adding STO. Use new module to add STO.'
END
ELSE IF(@Type = 5)
BEGIN
      SELECT DISTINCT STODetails.Id, STODetails.WONo, STODetails.STONo,STODetails.Quantity,CONVERT(VARCHAR(10),STODetails.StartDate, 103) StartDate, CONVERT(VARCHAR(10),STODetails.EndDate, 103) EndDate
		,Sector
		FROM STODetails 
		LEFT OUTER JOIN vw_loadingchallandetails l ON l.WO=STODetails.WONo
		WHERE COALESCE(Deleted,0)=0 AND STODetails.STONo=@STONo
END
ELSE IF(@Type = 6)
BEGIN
      SELECT DISTINCT STODetails.Id, STODetails.WONo, STODetails.STONo,STODetails.Quantity,CONVERT(VARCHAR(10),STODetails.StartDate, 103) StartDate, CONVERT(VARCHAR(10),STODetails.EndDate, 103) EndDate
		FROM STODetails 
		WHERE STODetails.STONo=@STONo
END
GO
/****** Object:  StoredProcedure [dbo].[sp_transitreport_NotUsed]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_transitreport_NotUsed]
@Type int = 0,
@JobNo varchar(50) = '',
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@ChallanNo INT = 0,
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = '',
@BranchName varchar(100) = '',
@ClientName varchar(100) = ''
AS
IF(@Type =1 )
BEGIN
	SET NOCOUNT ON;
	DECLARE @MySQL VARCHAR(8000)=''
	SET @MySQL=N'SELECT TOP 5000 * FROM vw_unloadingchallandetails WHERE unloadingId IS NULL '
		IF(@JobNo<>'')
			SET @MySQL=@MySQL+' AND JobNo='''+@JobNo+''''
		IF(@ChallanNo<>0)
			SET @MySQL=@MySQL+' AND ChallanNo='+CAST(@ChallanNo AS VARCHAR(10))
		IF(@TruckNo<>'')
			SET @MySQL=@MySQL+' AND TruckNumber='''+@TruckNo+''''
		IF(@LoadingPoint<>'')
			SET @MySQL=@MySQL+' AND LoadingPoint='''+@LoadingPoint+''''
		IF(@UnloadingPoint<>'')
			SET @MySQL=@MySQL+' AND UnloadingPoint='''+@UnloadingPoint+''''
		IF(@BranchName<>'')
			SET @MySQL=@MySQL+' AND ExecutingBranchName='''+@BranchName+''''
		IF(@ClientName<>'')
			SET @MySQL=@MySQL+' AND ClientName='''+@ClientName+''''
		IF(@StartDate IS NOT NULL AND @StartDate<>'')
			SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, loaddate, 103)>=CONVERT(smalldatetime, '''+@StartDate+''',103)'
		IF(@EndDate IS NOT NULL AND @EndDate<>'')
			SET @MySQL=@MySQL+' AND CONVERT(smalldatetime, loaddate, 103)<=CONVERT(smalldatetime, '''+@EndDate+''',103)'

		SET @MySQL=@MySQL+' ORDER BY CONVERT(smalldatetime, loaddate, 103)'
--PRINT @MySQL
	EXECUTE(@MySQL)
END
-- EXEC sp_transitreport 1
GO
/****** Object:  StoredProcedure [dbo].[sp_truck]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[sp_truck](
@Type int = 0, 
@Drivername varchar(100) = '',
@Id int =0,
@Trucknumber varchar(50) = '', 
@Ownername varchar(100) = '',
@Brokername varchar(100) = '',
@DriverContact varchar(100) = '',
@OwnerContact varchar(100) = '',
@BrokerContact varchar(100) = '',
@Ttype varchar(50) = '', 
@Chasisno varchar(50) = '', 
@Engineno varchar(50) = '', 
@Association varchar(50) = '',
@DriverId  int = NULL, 
@BrokerId int  = NULL, 
@OwnerId int = NULL, 
@Deleted bit = 0,
@AssociationId int=0,
@Search varchar(50)='', 
@Createdon smalldatetime=NULL, 
@Createdby int =0,
@InsuranceCompany varchar(100) = '', 
@InsuranceName varchar(50) = '', 
@InsuranceExpire smalldatetime = NULL, 
@Fitnes varchar(100) = '', 
@FitnessExpire smalldatetime= NULL, 
@Pollution varchar(100)= '', 
@PollutionExpire smalldatetime= NULL, 
@Permit varchar (100)  = '', 
@PermitExpire smalldatetime= NULL, 
@RoadTax varchar(50) = '',
@LastService smalldatetime = NULL,
@Remarks varchar(100) = '',
@Tyre varchar(200)='',
@TruckId int=0

) 
AS 

DECLARE @SQLInjectdata VARCHAR(8000)=''
SET @SQLInjectdata = @Trucknumber  + @Tyre + @Remarks + @RoadTax + CONVERT(varchar(20), ISNULL(@LastService, '')) + CONVERT(varchar(20), ISNULL(@PermitExpire, '')) + @Permit 
                    + CONVERT(varchar(20), ISNULL(@PollutionExpire, ''))  + @Pollution  + CONVERT(varchar(20), ISNULL(@FitnessExpire, '')) + @Fitnes + CONVERT(varchar(20), ISNULL(@InsuranceExpire, '')) 
                    + @InsuranceName + @InsuranceCompany + CONVERT(varchar(20), ISNUll(@Createdon, '')) + @Search + @Association + @Engineno + @Chasisno 
		            + @Ttype + @BrokerContact + @OwnerContact + @DriverContact + @Brokername + @Ownername + @Trucknumber + @Drivername

DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

IF(@Type = 1)
BEGIN
	SELECT Truck.Id, Truck.TruckNumber,Truck.Type,Truck.ChasisNo,Truck.EngineNo, Driver.Name Drivername,Driver.Contact DMobileNo,Owner.Name Ownername,Owner.Contact OMobileNo ,Broker.Name Brokername,Broker.Contact BMobileNo ,Association.Association FROM Truck 

         left outer join Driver on Truck.DriverId=Driver.Id 
         left outer join Owner on Truck.OwnerId=Owner.Id
          left outer join  Broker on Truck.BrokerId=Broker.Id
		  left outer join  Association on Truck.AssociationId=Association.Id
	      WHERE Truck.TruckNumber LIKE '%'+ @Search+'%'
END
ELSE IF(@Type = 2)
BEGIN
		SELECT * INTO #tr1 FROM Truck WHERE Truck.Id=@Id
		SELECT Truck.id, Truck.TruckNumber,Truck.Type,Truck.ChasisNo,Truck.EngineNo, Driver.Name Drivername,Driver.Contact DMobileNo,Owner.Name Ownername,Owner.Contact OMobileNo ,Broker.Name Brokername,Broker.Contact BMobileNo,Association.Association FROM #tr1 Truck 
			left outer join Driver on Truck.DriverId=Driver.Id 
			left outer join Owner on Truck.OwnerId=Owner.Id
			left outer join  Broker on Truck.BrokerId=Broker.Id
			left outer join  Association on Truck.AssociationId=Association.Id
END
ELSE IF(@Type = 3)
BEGIN
	SELECT @DriverId=Id FROm Driver WHERE Code=@DriverContact
	SELECT @BrokerId=Id FROm Broker WHERE Code=@BrokerContact
	SELECT @OwnerId=Id FROm Owner WHERE Code=@OwnerContact

 --   IF (@Id=0)
	--BEGIN
	--	INSERT INTO  Truck (TruckNumber,Type,ChasisNo,EngineNo,DriverId,OwnerId,BrokerId,AssociationId,Deleted,CreatedBy,CreatedOn)
	--		VALUES(@Trucknumber,@Ttype,@Chasisno,@Engineno,@DriverId ,@OwnerId,@BrokerId,@AssociationId,@Deleted,@Createdby,GETDATE())

	--		SELECT @@IdENTITY
	--END
	--ELSE 
	--BEGIN
	--		UPDATE Truck
	--		SET TruckNumber=@Trucknumber,
	--			Type=@Ttype,
	--			ChasisNo=@Chasisno,
	--			EngineNo=@Engineno,
	--			DriverId=@DriverId ,
	--			OwnerId=@OwnerId,
	--			BrokerId=@BrokerId,
	--			AssociationId=@AssociationId,
	--			Deleted=@Deleted,
	--			CreatedBy=@Createdby  WHERE Id=@Id
	--		SELECT @Id
	--END
	SELECT 'E'
END
ELSE IF(@Type = 4)
BEGIN           
           DECLARE @TruckxId INT=0;
		   SELECT @TruckxId = Id FROM Truck WHERE TruckNumber=@Trucknumber 
	       INSERT INTO  TruckX(TruckId,InsuranceCompany,InsuranceName,InsuranceExpire,Fitness,FitnessExpire,Pollution,PollutionExpire,Permit,PermitExpire,RoadTax,LastService,Remarks,Tyre,Createdby,Createdon  )
		      VALUES(@TruckId,@InsuranceCompany,@InsuranceName,@InsuranceExpire ,@Fitnes,@FitnessExpire ,@Pollution,@PollutionExpire,@Permit,@PermitExpire,@RoadTax,@LastService,@Remarks,@Tyre,@Createdby,GETDATE())   
			  
END
ELSE IF(@Type = 5)
BEGIN
	         -- DELETE from Truck where Truck.Id=@Id  
			 SELECT 'E'
END
ELSE IF(@Type = 6)
BEGIN
	SELECT * INTO #tr FROM Truck WHERE TruckNumber=@Trucknumber
	SELECT Truck.id, Truck.TruckNumber,Truck.Type,Truck.ChasisNo,Truck.EngineNo, Driver.Code Drivername,
	[Owner].Code Ownername ,[Broker].Code Brokername ,Association.Association, [Type] as Tyre FROM #tr Truck 
		left outer join Driver on Truck.DriverId=Driver.Id 
		left outer join [Owner] on Truck.OwnerId=[Owner].Id
		left outer join  [Broker] on Truck.BrokerId=[Broker].Id
		left outer join  Association on Truck.AssociationId=Association.Id
END

ELSE IF(@Type = 7)
BEGIN
	DECLARE @MySQL VARCHAR(8000)=''
	SET @MySQL=N'SELECT Truck.id, Truck.TruckNumber,Truck.Type,Truck.ChasisNo,Truck.EngineNo, Driver.Name Drivername,Driver.Contact DMobileNo,Owner.Name Ownername,Owner.Contact OMobileNo ,Broker.Name Brokername,Broker.Contact BMobileNo,Association.Association 
				FROM Truck 
					left outer join Driver on Truck.DriverId=Driver.Id 
					left outer join Owner on Truck.OwnerId=Owner.Id
					left outer join  Broker on Truck.BrokerId=Broker.Id
					left outer join  Association on Truck.AssociationId=Association.Id
				WHERE 1=1 ' 
		IF(@Trucknumber<>'' AND @Trucknumber IS NOT NULL)
			SET @MySQL=@MySQL+' AND Truck.TruckNumber='''+@Trucknumber+'''' 
		IF(@Drivername<>'' AND @Drivername IS NOT NULL)
			SET @MySQL=@MySQL+' AND Driver.Name LIKE ''%'+@Drivername+'%''' 
		IF(@Ownername<>'' AND @Ownername IS NOT NULL)
			SET @MySQL=@MySQL+' AND Owner.Name LIKE ''%'+@Ownername+'%''' 
		IF(@Association<>'' AND @Association IS NOT NULL)
			SET @MySQL=@MySQL+' AND Association.Association LIKE ''%'+@Association+'%''' 
		IF(@Brokername<>'' AND @Brokername IS NOT NULL)
			SET @MySQL=@MySQL+' AND Broker.Name LIKE ''%'+@Brokername+'%''' 

--PRINT @MySQL
EXECUTE(@MySQL)
	END
	ELSE IF(@Type = 8)
	BEGIN
	SELECT Truck.id, Truck.TruckNumber FROM Truck
		 
	END
ELSE IF(@Type = 9)
BEGIN
	SELECT Truck.TruckNumber FROM Truck 
	Inner Join Fleet_Vehicle V On V.VehicleNo = Truck.TruckNumber
	WHERE Truck.TruckNumber LIKE '%'+ @Search+'%' AND Truck.TruckNumber NOT LIKE 'NA-%' AND V.IsBlocked = 0
END
GO
/****** Object:  StoredProcedure [dbo].[sp_unloadingchallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_unloadingchallan] (
@Type INT=0,
@ChallanNo INT=0,
@LoadingChallanId INT=0,
@UnloadedGrossWt  DECIMAL(18,3)=0.000, 
@UnloadedTareWt DECIMAL(18,3)=0.000, 
@UnloadedNetWt DECIMAL(18,3)=0.000, 
@UnloadDMT DECIMAL(18,3)=0.000, 
@UnloadedDate SMALLDATETIME=null,
@GRNNo VARCHAR(50)='',
@UnloadedMoisture DECIMAL(18,3)=0.000, 
@UnloadedMoistureUnit VARCHAR(10)='',
@Seals VARCHAR(50)='',
@Detention DECIMAL(18,2)=0.00, 
@UnloadedBags INT=0,
@Remarks VARCHAR(2000)='',
@RecoverAmount DECIMAL(18,2)=0.00,
@UnloadedBy INT=0,
@Search VARCHAR(50)='',
@TPInvNo VARCHAR(50)=NULL
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @GRNNo + @UnloadedMoistureUnit + @Seals + @Remarks + @Search + @TPInvNo
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type=1)
BEGIN
	DECLARE @ErrorMsg VARCHAR(3000) = ''
	DECLARE @InvoiceNo VARCHAR(50) = NULL
	DECLARE @LoadingApproval INT = NULL
	SET @ErrorMsg='Loading Challan is not approved for ChallanNo-' + Convert(Varchar,@ChallanNo) +'.'
	SELECT @LoadingChallanId=Id, @LoadingApproval = IsNull(ApprovalStatus,1) FROM LoadingChallan WHERE LoadingChallan.ChallanNo= @ChallanNo
	IF @LoadingApproval <> 4
		THROW 50000, @ErrorMsg, 16
	--Select @InvoiceNo = InvoiceNo from vw_InvoiceChallanDetails i,vw_unloadingchallandetails u Where i.ChallanNo = @ChallanNo  and  InvoiceClaimQtyType not in(3,5) 
	--AND i.ChallanNo=u.ChallanNo AND u.UnloadingId IS NOT NULL
	--SET @ErrorMsg = 'Invoice No ' + @InvoiceNo + ' has been created for this challan. This can not be modify.'
	--IF @InvoiceNo IS NOT NULL
	--	THROW 50000, @ErrorMsg, 16
	IF EXISTS (select 1 from UnloadingChallan WHERE UnloadingChallan.LoadingChallanId=@LoadingChallanId)
	BEGIN
			DECLARE @VoucherStatus INT = NULL
			SELECT @VoucherStatus = DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL)
			SET @ErrorMsg = 'Payment voucher for selected challan has been created. So this can not be modified.'
			IF @VoucherStatus IS NOT NULL AND @VoucherStatus <> 5
			BEGIN
				UPDATE UnloadingChallan
				SET 
					 UnloadDMT=@UnloadDMT
					,GRNNo = @GRNNo
					,UnloadedMoisture = @UnloadedMoisture
					,UnloadedMoistureUnit = @UnloadedMoistureUnit
					,Seals = @Seals
					,UnloadedBags = @UnloadedBags
					,Remarks = @Remarks
					,RecoverAmount = @RecoverAmount
					,UnloadedBy = @UnloadedBy
					,UnloadedOn = GETDATE()
				WHERE LoadingChallanId = @LoadingChallanId
				INSERT INTO Log_UnloadingChallan SELECT * FROM UnloadingChallan WHERE LoadingChallanId = @LoadingChallanId
				SELECT @LoadingChallanId
			END
			ELSE
			BEGIN
			UPDATE UnloadingChallan
				SET LoadingChallanId = @LoadingChallanId
					,UnloadedGrossWt = @UnloadedGrossWt
					,UnloadedTareWt = @UnloadedTareWt
					,UnloadedNetWt = @UnloadedNetWt
					,UnloadDMT=@UnloadDMT
					,UnloadedDate = @UnloadedDate
					,GRNNo = @GRNNo
					,UnloadedMoisture = @UnloadedMoisture
					,UnloadedMoistureUnit = @UnloadedMoistureUnit
					,Seals = @Seals
					,Detention = @Detention
					,UnloadedBags = @UnloadedBags
					,Remarks = @Remarks
					,RecoverAmount = @RecoverAmount
					,UnloadedBy = @UnloadedBy
					,UnloadedOn = GETDATE()
					
				WHERE LoadingChallanId = @LoadingChallanId
				INSERT INTO Log_UnloadingChallan SELECT * FROM UnloadingChallan WHERE LoadingChallanId = @LoadingChallanId
				SELECT @LoadingChallanId	
			END			
	END
	ELSE IF (@LoadingChallanId<>0)
	BEGIN
		INSERT INTO UnloadingChallan
				(LoadingChallanId
				,UnloadedGrossWt
				,UnloadedTareWt
				,UnloadedNetWt
				,UnloadDMT
				,UnloadedDate
				,GRNNo
				,UnloadedMoisture
				,UnloadedMoistureUnit
				,Seals
				,Detention
				,UnloadedBags
				,Remarks
				,RecoverAmount
				,UnloadedBy
				,UnloadedOn)
			VALUES
				(@LoadingChallanId
				,@UnloadedGrossWt
				,@UnloadedTareWt
				,@UnloadedNetWt
				,@UnloadDMT
				,@UnloadedDate
				,@GRNNo
				,@UnloadedMoisture
				,@UnloadedMoistureUnit
				,@Seals
				,@Detention
				,@UnloadedBags
				,@Remarks
				,@RecoverAmount
				,@UnloadedBy
				,GETDATE())
			
			INSERT INTO Log_UnloadingChallan SELECT * FROM UnloadingChallan WHERE LoadingChallanId = @LoadingChallanId
			SELECT @@IDENTITY
	END
	ELSE
	BEGIN
		SELECT 'E'
	END
END
ELSE IF(@Type=2)
BEGIN
		SELECT * FROM vw_unloadingchallandetails
			WHERE ChallanNo LIKE '%' +@Search+'%'
END
ELSE IF(@Type=3)
BEGIN
		SELECT  ABS(LoadingChallan.NetWT-UnloadingChallan.UnloadedNetWt) ShortageWt,CONVERT(VARCHAR(10),UnloadingChallan.UnloadedDate,103) UnloadedDate,UnloadingChallan.GRNNo GRNNo,UnloadingChallan.UnloadedBags UnloadedBags,
				UnloadingChallan.UnloadedTareWt UnloadedTareWt,UnloadingChallan.UnloadedGrossWt UnloadedGrossWt,
				UnloadingChallan.UnloadedNetWt UnloadedNetWt,UnloadingChallan.UnloadedMoisture UnloadedMoisture,
				UnloadingChallan.UnloadedMoistureUnit UnloadedMoistureUnit,UnloadingChallan.Detention Detention,
				UnloadingChallan.Remarks Remarks 	FROM  UnloadingChallan 
			LEFT OUTER JOIN LoadingChallan ON LoadingChallan.Id=UnloadingChallan.LoadingChallanId
			WHERE LoadingChallan.ChallanNo=@ChallanNo
END
ELSE IF(@Type = 4)
BEGIN 
	SELECT @LoadingChallanId=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo
	If NOT EXISTS(select 1 from Payment WHERE LoadingId=@LoadingChallanId)
	BEGIN
		DELETE FROM UnLoadingChallan WHERE LoadingChallanId=@LoadingChallanId
		SELECT 'S'
	END
	ELSE
	BEGIN
		SELECT 'E'
	END
END
ELSE IF(@Type=5)
BEGIN
	Declare @LoadingId INT = NULL
	Declare @LoadingApprovalStatus INT = NULL
	IF @TPInvNo IS NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
		THROW 50000, 'Challan No OR TP / Invoice No is mandetory.', 1
	IF @TPInvNo IS NOT NULL AND (@ChallanNo IS NULL OR @ChallanNo = 0)
	BEGIN
		SELECT @ChallanNo = ChallanNo From LoadingChallan Where TP = @TPInvNo
		IF (@ChallanNo IS NULL OR @ChallanNo = 0)
			THROW 50000, 'Challan No not found for TP / Invoice No.', 1
	END
	Select @LoadingId = Id, @LoadingApprovalStatus = ApprovalStatus From LoadingChallan Where ChallanNo = @ChallanNo
	IF @LoadingId IS  NULL
		THROW 50000, 'Loading is not found for this challan', 1
	
	IF @LoadingApprovalStatus <> 4
		THROW 50000, 'Loading is not approved for this challan', 1
	 SELECT *,
		    DBO.[FN_Accounts_GetChallanVoucherStatus](@ChallanNo, NULL) as VoucherStatus,
			(Select TokenStatus From [vw_TokenDetails] Where Id = (Select TokenId From _TokenChallans Where ChallanNO = @ChallanNo)) as TokenStatus,
			[dbo].[FN__GetChallanInvoiceStatus](@ChallanNo) AS InvoiceStatus

     FROM vw_unloadingchallandetails WHERE ChallanNo=@ChallanNo
END
GO
/****** Object:  StoredProcedure [dbo].[sp_updatechallandataattoken]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_updatechallandataattoken](
	@ChallanNo INT=NULL,
	@TPNo VARCHAR(50)=NULL,
	@TOId INT=NULL,
	@TNumber INT=NULL,
	@TOPan VARCHAR(50)=NULL,
	@UWt DECIMAL(18,2)=NULL,
	@UDate Date=NULL,
	@BrokerId INT = NULL,
	@OfficeAmount DECIMAL(18,2)=NULL,
	@CommAmount DECIMAL(18,2)=NULL
)
AS
BEGIN
	DECLARE @LoadingId INT=NULL

	IF @TPNo IS NOT NULL
		SELECT @LoadingId=Id FROM LoadingChallan WHERE TP=@TPNo

	IF @ChallanNo IS NOT NULL
		SELECT @LoadingId=Id FROM LoadingChallan WHERE ChallanNo=@ChallanNo

	IF EXISTS (SELECT 1 FROM UnloadingChallan WHERE LoadingChallanId=@LoadingId)
	BEGIN
		UPDATE UnloadingChallan SET 
				UnloadedNetWt = (CASE WHEN @UWt IS NOT NULL THEN @UWt ELSE UnloadedNetWt END),
				UnloadedDate = (CASE WHEN @UDate IS NOT NULL THEN @UDate ELSE UnloadedDate END)
			WHERE LoadingChallanId=@LoadingId
		UPDATE LoadingChallan SET 
		       OwnerId= (CASE WHEN @TOId IS NOT NULL THEN @TOId ELSE OwnerId END),
			    BrokerId= (CASE WHEN @BrokerId IS NOT NULL THEN @BrokerId ELSE BrokerId END),
				OtherExpenses = (CASE WHEN @OfficeAmount IS NOT NULL THEN @OfficeAmount ELSE OtherExpenses END),
				CommAmount = (CASE WHEN @CommAmount IS NOT NULL THEN @CommAmount ELSE CommAmount END)
				WHERE Id=@LoadingId
		UPDATE Common_Parties SET PANNumber=CASE WHEN @TOPan  IS NOT NULL THEN @TOPan ELSE PANNumber END
				WHERE Id=@TOId
	END
	ELSE
	BEGIN
		INSERT INTO UnloadingChallan (LoadingChallanId, UnloadedDate, UnloadedNetWt) 
				VALUES(@LoadingId, @UDate, @UWt)
		UPDATE LoadingChallan SET
		       OwnerId= (CASE WHEN @TOId IS NOT NULL THEN @TOId ELSE OwnerId END),
			    BrokerId= (CASE WHEN @BrokerId IS NOT NULL THEN @BrokerId ELSE BrokerId END),
				OtherExpenses = (CASE WHEN @OfficeAmount IS NOT NULL THEN @OfficeAmount ELSE OtherExpenses END),
				CommAmount = (CASE WHEN @CommAmount IS NOT NULL THEN @CommAmount ELSE CommAmount END)
				WHERE Id=@LoadingId
		UPDATE Common_Parties SET PANNumber=CASE WHEN @TOPan  IS NOT NULL THEN @TOPan ELSE PANNumber END
				WHERE Id=@TOId
	END


	    DECLARE @LoadDate Date=NULL
		select @CommAmount = ISNULL(CommAmount,0.0) ,@OfficeAmount = ISNULL(OtherExpenses ,0.0) ,@BrokerId = ISNULL(BrokerId ,0)
		 ,@LoadDate = LoadDate from LoadingChallan where ChallanNo = @ChallanNo
		--Declare @CashAdvance decimal(18,2) =0.0
		Declare @AdvAmount decimal(18,2) =0.0
		select @AdvAmount= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=1

			Declare @AdvAmount2 decimal(18,2) =0.0
			select @AdvAmount2= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=9


			IF @CommAmount>0 AND @AdvAmount2 <> @CommAmount  --CommAmount
			BEGIN
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @CommAmount, 9, 0, NULL, 0, @LoadDate,  3346, 1)
		END

			Declare @AdvAmount3 decimal(18,2) =0.0
			select @AdvAmount3= ISNull(Amount,0) from LoadingAdvance  A 
		LEFT OUTER JOIN LoadingChallan L on L.Id=A.loadingId where L.ChallanNo = @ChallanNo and A.AdvanceType=8

		IF @OfficeAmount>0  AND @AdvAmount3 <> @OfficeAmount --OfficeAmount
		BEGIN
			INSERT INTO LoadingAdvance
			(LoadingId, Amount, AdvanceType, TDSDeduction, TDSId, TDSRate, InsertDate, InsertUserId, PaymentMode)
			VALUES(@LoadingId, @OfficeAmount, 8, 0, NULL, 0, @LoadDate,  3346, 1)
		END

			Exec sp_loadingvouchernew @LoadingId=@LoadingId


	UPDATE LoadingChallan SET OwnerId= CASE WHEN @TOId IS NOT NULL THEN @TOId ELSE OwnerId END 
				WHERE Id=@LoadingId
END
GO
/****** Object:  StoredProcedure [dbo].[sp_UpdateFreighRatetAssLoadingChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_UpdateFreighRatetAssLoadingChallan] (
@JobId INT,
@Freight decimal(18,2)=0 ,
@FromDate Datetime=null,
@ToDate Datetime=null 
)
As
Begin

	SELECT L.Id LoadId, ChallanNo INTO #tempChallans FROM LoadingChallan L 
		LEFT OUTER JOIN Payment P ON P.LoadingId=L.Id 
			WHERE P.Id IS NULL AND JobId=@JobId
				AND LoadDate BETWEEN @FromDate AND  Convert(DATE,IsNULL(@ToDate,'2099-01-01'),102) AND TruckSource='ASSOCIATION'

	
	Update LoadingChallan Set Freight = @Freight, TotalFreight=NetWt*Freight FROM LoadingChallan L
		INNER JOIN #tempChallans A
			ON A.ChallanNo=L.ChallanNo
 

	DECLARE db_cursor CURSOR FOR 
	SELECT LoadId FROM #tempChallans 
	DECLARE @LoadId INT=0
	OPEN db_cursor  
	FETCH NEXT FROM db_cursor INTO @LoadId
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		EXEC sp_LoadingVoucherNew @LoadingId=@LoadId
		FETCH NEXT FROM db_cursor INTO @LoadId
	END 

	CLOSE db_cursor  
	DEALLOCATE db_cursor 

 Select 'S'
End
GO
/****** Object:  StoredProcedure [dbo].[sp_UpdateFreighRatetMktLoadingChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_UpdateFreighRatetMktLoadingChallan] (
@JobId INT,
@Freight decimal(18,2)=0 ,
@FromDate Datetime=null,
@ToDate Datetime=null 
)
As
Begin

	SELECT L.Id INTO #specialTrucks 
		FROM LoadingChallan L
		LEFT OUTER JOIN Fleet_VehicleAssociations A ON A.VehicleId=L.TruckId 
			WHERE JobId=@JobId AND 
				A.AssociationId IN (SELECT AssociationId FROM _JobFrieghtSpecialRules WHERE JobId=@JobId)

	SELECT L.Id LoadId, ChallanNo INTO #tempChallans FROM LoadingChallan L 
		LEFT OUTER JOIN Payment P ON P.LoadingId=L.Id 
		LEFT OUTER JOIN #specialTrucks S ON S.Id=L.Id 
			WHERE P.Id IS NULL AND JobId=@JobId AND S.Id IS NULL
				AND LoadDate BETWEEN @FromDate AND  Convert(DATE,IsNULL(@ToDate,'2099-01-01'),102) AND TruckSource='MARKET'

	
	Update LoadingChallan Set Freight = @Freight, TotalFreight=NetWt*Freight FROM LoadingChallan L
		INNER JOIN #tempChallans A
			ON A.ChallanNo=L.ChallanNo
 

	DECLARE db_cursor CURSOR FOR 
	SELECT LoadId FROM #tempChallans 
	DECLARE @LoadId INT=0
	OPEN db_cursor  
	FETCH NEXT FROM db_cursor INTO @LoadId
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		EXEC sp_LoadingVoucherNew @LoadingId=@LoadId
		FETCH NEXT FROM db_cursor INTO @LoadId
	END 

	CLOSE db_cursor  
	DEALLOCATE db_cursor 

 Select 'S'
End
GO
/****** Object:  StoredProcedure [dbo].[sp_UpdateOwnerInLoadingChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_UpdateOwnerInLoadingChallan] (
@TruckId INT,
@OwnerId INT)
As
Begin
 Update LoadingAdvance Set PartyId = @OwnerId
 Where LoadingId in (Select Id From LoadingChallan  Where TruckId = @TruckId )
 And AdvanceType = 1 

 Update LoadingChallan Set OwnerId = @OwnerId
 Where TruckId = @TruckId 

 Select 'S'
End
GO
/****** Object:  StoredProcedure [dbo].[sp_user]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_user](
@Type int = 0, 
@Id int =0,
@name varchar(50)='',
@Username varchar(50) = '', 
@Contact varchar(50) = '', 
@Address varchar(50) = '',
@Password varchar(50) = '',
@Email   varchar(50) = '',
@Search   varchar(50) = '',
@IsMasterAdmin int=1, 
@IsActive  int=1, 
@Createdon datetime='',
@BranchId     int ='',
@GroupId     int ='',
@Deleted bit='',
@Createdby int =0  


) 
AS 

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @name + @Username + @Contact + @Address + @Password + @Email + @Search 
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type = 1)
BEGIN

     	SELECT  Users.Id,Users.Name name , Users.address, Users.contact,Users.password, Users.UserName username ,Users.Email email,Users.IsActive,Branch.Name BranchName,Groups.GroupName GroupName FROM Users
	     left outer join Branch on Users.BranchId=Branch.Id
	     left outer join Groups on Users.GroupId=Groups.Id
	     WHERE Users.Name LIKE '%'+ @Search+'%'
END
ELSE IF(@Type = 2)
BEGIN 
		SELECT  UserId Id, Address, Contact, Password, FullName name ,username ,Email,IsActive,BranchId, BranchName, BranchCode
				, GroupName
			FROM vw_userdetails
			 WHERE UserId=@Id
			
END
ELSE IF(@Type = 3)
BEGIN
select 'E'
END
ELSE IF(@Type = 4)
BEGIN
	-- EXEC sp_autolock 1;
		SELECT  UserId Id, Address, Contact, Password, FullName name ,username ,Email,IsActive,BranchId, BranchName, BranchCode
			FROM vw_userdetails
			         WHERE UserName = @Username AND Password=@Password
END
ELSE IF(@Type = 5)
BEGIN
                 -- DELETE FROM Users WHERE Users.Id=@Id
				 SELECT 'E'
END
ELSE IF(@Type = 7)
BEGIN
               SELECT  Id, GroupName FROM Groups
END
ELSE IF(@Type = 8)
BEGIN
               SELECT  Name, UserName, Password, Email FROM  Users where UserName=@Username
END
ELSE IF(@Type = 9)
BEGIN
    SELECT PermissionKey from UserPermissions Where UserId = @Id AND [Grant] = 1
	UNION
	SELECT PermissionKey From RolePermissions Where RoleId in (Select RoleId From UserRoles Where UserId = @Id)
	AND PermissionKey NOT IN (SELECT PermissionKey from UserPermissions Where UserId = @Id AND [Grant] = 0)
END
GO
/****** Object:  StoredProcedure [dbo].[sp_UserAccessBranchs]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[sp_UserAccessBranchs](@UserId INT)
As
Begin
	IF @UserId = 3105
		SELECT Id as BranchId FROM Common_Branch
	ELSE
		Select BranchId from UserBranchAccess Where UserId = @UserId 
End
GO
/****** Object:  StoredProcedure [dbo].[sp_userlogreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_userlogreport]
@Type int = 0,
@JobNo varchar(50) = '',
@ChallanNo INT = 0,
@RecordCount INT = 100,
@StartDate VARCHAR(10) = NULL,
@EndDate VARCHAR(10) = NULL,
@TruckNo varchar(50) = '',
@LoadingPoint  varchar(50) = '',
@UnloadingPoint varchar(50) = '',
@UserName varchar(100) = ''
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @JobNo + @StartDate + @EndDate + @TruckNo + @LoadingPoint + @UnloadingPoint + @UserName
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


IF(@Type = 1)
BEGIN
	SET NOCOUNT ON;
	DECLARE @JobId INT=0
	SELECT @JobId=Id FROM JobDetails WHERE JobNo=@JobNo
	
	DECLARE @MySQL VARCHAR(8000)=''

SET @MySQL=N'SELECT TOP '+CONVERT(VARCHAR(10),@RecordCount)+' * FROM vw_log_paymentchallandetails 
				WHERE 1=1 ' 
		IF(@JobNo<>'' AND @JobNo IS NOT NULL)
			SET @MySQL=@MySQL+' AND JobNo='''+@JobNo+'''' 
		IF(@ChallanNo<>0 AND @ChallanNo IS NOT NULL)
			SET @MySQL=@MySQL+' AND ChallanNo='+CAST(@ChallanNo AS VARCHAR(10))
		IF(@TruckNo<>'' AND @TruckNo IS NOT NULL)
			SET @MySQL=@MySQL+' AND TruckNumber='''+@TruckNo+''''
		IF(@LoadingPoint<>'' AND @LoadingPoint IS NOT NULL)
			SET @MySQL=@MySQL+' AND LoadingPoint='''+@LoadingPoint+''''
		IF(@UnloadingPoint<>'' AND @UnloadingPoint IS NOT NULL)
			SET @MySQL=@MySQL+' AND UnloadingPoint='''+@UnloadingPoint+''''
		IF(@StartDate IS NOT NULL AND @StartDate<>'')
		BEGIN
			SET @MySQL=@MySQL+' AND (CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryLoadedOn, 103),103)>=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@StartDate+''',103),103)'
			SET @MySQL=@MySQL+' OR	CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryUnLoadedOn, 103),103)>=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@StartDate+''',103),103)'
			SET @MySQL=@MySQL+' OR  CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryPaidOn, 103),103)>=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@StartDate+''',103),103))'

		END
		IF(@EndDate IS NOT NULL AND @EndDate<>'')
		BEGIN
			SET @MySQL=@MySQL+' AND (CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryLoadedOn, 103),103)<=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@EndDate+''',103),103)'
			SET @MySQL=@MySQL+' OR	CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryUnLoadedOn, 103),103)<=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@EndDate+''',103),103)'
			SET @MySQL=@MySQL+' OR  CONVERT(smalldatetime, CONVERT(VARCHAR(10), EntryPaidOn, 103),103)<=CONVERT(smalldatetime, CONVERT(VARCHAR(10), '''+@EndDate+''',103),103))'

		END			
		IF(@UserName<>'' AND @UserName IS NOT NULL)
		BEGIN
			SET @MySQL=@MySQL+' AND (LoaderName='''+@UserName+''''
			SET @MySQL=@MySQL+' OR UnloaderName='''+@UserName+''''
			SET @MySQL=@MySQL+' OR PaidByName='''+@UserName+''')'
		END
		 
		SET @MySQL=@MySQL+' ORDER BY EntryLoadedOn, EntryUnLoadedOn, EntryPaidOn DESC'

--PRINT @MySQL
EXECUTE(@MySQL)
END
--select top 5 EntryPaidOn, EntryUnloadedOn, EntryLoadedOn from vw_log_paymentchallandetails
-- select top 2 EntryunloadedOn, EntryloadedOn from vw_log_unloadingchallandetails
-- select top 2 * from vw_log_paymentchallandetails
-- EXEC [sp_userlogreport] 1, '', 0, '', '', 'OD05Q2939', ''

--SELECT CONVERT(SMALLDATETIME, '14/11/2015',103)
GO
/****** Object:  StoredProcedure [dbo].[sp_ValidateTokenBeforeStatusUpdate]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[sp_ValidateTokenBeforeStatusUpdate](@TokenId INT)
AS
BEGIN
	Declare @ValidateValue Varchar(50) = NULL
	Declare @EMsg Varchar(1000) = NULL
	Select Top 1 @ValidateValue = Convert(Varchar(50),P.ChallanNo) From _TokenChallans T
	inner Join vw_paymentchallandetails P On T.ChallanNo = P.ChallanNo
	inner Join  _ShoratgeWaiver S On P.PaymentId = S.PaymentId
	Where T.TokenId = @TokenId AND S.Status Not in (4,5)
	SET @EMsg = 'There is pending request for shortage waiver for challan no ' + @ValidateValue + ' in this token. Please close the shoratge request first.'
	IF @EMsg IS NOT NULL
		THROW 50000, @EMsg, 1
	Select Top 1 @ValidateValue = JobNo
	From _TokenChallans TC
	Left Join LoadingChallan L On L.ChallanNo = TC.ChallanNo
	Left Join _Job J On J.Id = L.JobId
	Where  TC.TokenId = @TokenId AND J.IsLock = 1
	SET @EMsg = 'Job No ' + @ValidateValue + ' is locked for some challans used in Token. Please unlock the job first.'
	IF @EMsg IS NOT NULL
		THROW 50000, @EMsg, 1
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ValidateUnloading]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ValidateUnloading](
@Type INT=1, 
@UnloadingId INT)
AS
BEGIN
	IF EXISTS(
		SELECT 1 FROM UnloadingChallan U 
			INNER JOIN LoadingChallan L ON L.Id=U.LoadingChallanId
			LEFT OUTER JOIN _TokenChallans T ON T.ChallanNo=L.ChallanNo
			INNER JOIN _Token TT ON TT.Id=T.TokenId
			WHERE U.Id=@UnloadingId AND T.ChallanNo IS NOT NULL
	)
	THROW 50001, 'Please delete token for the challan', 1

	--ELSE IF EXISTS(
	--	SELECT 1 FROM UnloadingChallan U 
	--		INNER JOIN LoadingChallan L ON L.Id=U.LoadingChallanId
	--		LEFT OUTER JOIN _InvoiceChallan I ON I.ChallanNo=L.ChallanNo
	--		WHERE U.Id=@UnloadingId AND I.ChallanNo IS NOT NULL
	--)
	--THROW 50001, 'Please delete invoice for the challan', 1
END
GO
/****** Object:  StoredProcedure [dbo].[sp_VehicleInsert]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec [sp_GetLoadingInstantDetails] @ChallanNo=N'14758'

CREATE Procedure [dbo].[sp_VehicleInsert](
 @TruckNo VARCHAR(50) = NULL

)
As
DECLARE @data VARCHAR(8000)=''
DECLARE @flag bit=0
SELECT @flag=dbo.FN_EscapeSQLInjection(@data)
IF @flag=0
 THROW 50000, 'SQL Server encountered exception', 1 
Begin
	
	DECLARE @TruckId INT
	DECLARE @TruckOwnerId INT = NULL
	DECLARE @Tyre INT = NULL

	
	SELECT @TruckId = Id, @TruckOwnerId = IsNull(V.[Owner],1) From Fleet_Vehicle V Where VehicleNo = @TruckNo
	IF @TruckId IS NULL
	BEGIN
		Set @TruckOwnerId = 6931
		
		Insert Into Fleet_Vehicle (VehicleNo, TotalTyers, [Owner], InsertUserId, InsertDate, Remarks) Values (@TruckNo, 12, @TruckOwnerId, 3105, GETDATE(), 'Auto Created by system in bulk entry.')
		SELECT @TruckId = Id, @TruckOwnerId = V.[Owner] From Fleet_Vehicle V Where VehicleNo = @TruckNo
	END
			
END



GO
/****** Object:  StoredProcedure [dbo].[sp_VoucherOnTokenApproval]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  Procedure [dbo].[sp_VoucherOnTokenApproval] (@TokenId INT=0)
As
Begin
	DECLARE @OwnerId	INT
	DECLARE @ChallanNo INT
	DECLARE @BranchId INT 
	DECLARE @EexecutionMessage	Varchar(2000)
	DECLARE @trancount int = 0
	DECLARE @VoucherDate DATETIME
	DECLARE @VoucherType INT
	DECLARE @Narration varchar(2000)=''		
	DECLARE @CreatedBy int=0		
	DECLARE @FinancialYearId int= NULL	
	DECLARE @CostCenterId INT=NULL		
	DECLARE @JobId INT=NULL	
	DECLARE @CashLedgerId INT
	DECLARE @TotalFreight Decimal(18,2) = 0.0
	DECLARE @FreightTransport INT=NULL
	DECLARE @FreightPayable INT=NULL
	DECLARE @DeductionType Varchar(50) = NULL
	DECLARE @HSDAdvance Decimal(18,2) = 0.0
	DECLARE @WelfareAmount Decimal(18,2) = 0.0
	DECLARE @LoadDetention Decimal(18,2) = 0.0
	DECLARE @PumpRateId INT
	--DECLARE @LoadingId INT
	
	SET @trancount = @@TRANCOUNT 
--	BEGIN TRY
--		if @trancount = 0
--			begin transaction
--		else
--			save transaction [sp_VoucherOnTokenApproval]; 

--		DECLARE loadVoucherCursor CURSOR FOR 
--		select l.Id  from _TokenChallans tc
--        inner join LoadingChallan l on l.ChallanNo=tc.ChallanNo
--        where TokenId=@TokenId

--		OPEN loadVoucherCursor
--		DECLARE @LoadingId INT = NULL
--		FETCH NEXT FROM loadVoucherCursor INTO @LoadingId
--		WHILE (@@FETCH_STATUS = 0)
--		BEGIN


--	--SELECT @VoucherDate=ReceivedOn FROM _Token WHERE Id=@TokenId
--	SELECT @ChallanNo = ChallanNo, @VoucherDate = LoadDate, @VoucherType = 4, @Narration = Remarks, @CreatedBy = IsNull(UpdateUserId, InsertUserId), @JobId = JobId, 
--	@OwnerId = OwnerId, @TotalFreight = TotalFreight
--	From LoadingChallan Where Id = @LoadingId

--	--IF LTRIM(RTRIM(ISNULL(@Narration,'')))=''
----	BEGIN
--		SELECT @Narration = 'Being Loading adv booked of '+CONVERT(VARCHAR,NetWt)+' MT@ '+CONVERT(VARCHAR,FreightRate)+'/MT fm '+Sector+' Under CH No-'+CONVERT(VARCHAR,ChallanNo)+',Job No '+JobNo+',Truck No '+TruckNumber+',Loading date '+CONVERT(VARCHAR(10), LoadDate, 103)+'. PAN No '+OwnerPan FROM 
--			vw_ReportLoadingChallanReport L
--			WHERE L.Id=@LoadingId
--	--END
	
--	SELECT	@BranchId=BranchId, @CostCenterId=CostCenterId, @CashLedgerId=LedgerId FROM JobDetails WHERE Id=@JobId
	
--	SELECT @FreightPayable=LedgerId FROM SystemLedger WHERE Description='FREIGHTPAYABLE'
--	SELECT @FreightTransport=LedgerId FROM SystemLedger WHERE Description='FREIGHTTRANSPORT'
--	Select @DeductionType = FieldValue From Common_Settings Where Id = 5 -- TDS Deduction
	
--	DECLARE @TruckOwnerAdvance INT=NULL
--	SELECT @TruckOwnerAdvance=LedgerId FROM SystemLedger WHERE Description='TRANSPORTATION ADV TRUCK OWNERS'
--	DECLARE @FuelAdvance INT=NULL
--	SELECT @FuelAdvance=LedgerId FROM SystemLedger WHERE Description='FUEL ADV TRUCK OWNERS'
		
--		DECLARE @VoucherId INT=0
--		DECLARE @VoucherName VARCHAR(200)=NULL
--		SELECT @VoucherId=Id FROM Accounts_Vouchers 
--			WHERE RefType = 1 And ReferenceNo=cast(@ChallanNo as varchar) And VoucherType = 4 /*Journal*/;
--		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
--		IF(@VoucherId IS NULL OR @VoucherId=0)
--		BEGIN
--			SET @VoucherName='6107'
--			--SET @EexecutionMessage = @EexecutionMessage + ' Inserting Voucher Row'
--			INSERT INTO [Accounts_Vouchers]
--				(VoucherName
--				,VoucherDate
--				,VoucherType
--				,[Status]
--				,InsertUserId
--				,InsertDate
--				,[Description]
--				,BranchId
--				,FinancialYear
--				,RefType
--				,ReferenceNo
--				,ReferenceId)
--			VALUES
--				(@VoucherName,
--				@VoucherDate,
--				4, -- 'JOURNAL',
--				2, -- Submitted 
--				@CreatedBy,
--				GETDATE(),
--				@Narration,
--				@BranchId,
--				@FinancialYearId,
--				1, -- Reference Type  = Challan
--				@ChallanNo,
--				@ChallanNo)
--			SET @VoucherId=SCOPE_IDENTITY()
--		END
--		ELSE
--		BEGIN
--			DECLARE @VoucherTempStatus INT = 0
--		SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
--		--IF 1=1 -- Approved
--		--	THROW 50000, 'Loading voucher has been approved. Can not modify loading challan. Please reject the voucher.', 16
--			SET @EexecutionMessage = @EexecutionMessage + ' Updating Voucher Row.'
--			UPDATE Accounts_Vouchers SET 
--				VoucherDate=@VoucherDate,
--				UpdateUserId=@CreatedBy,
--				UpdateDate=GETDATE(),
--				[Status] = 2,
--				[Description]=@Narration,
--				BranchId=@BranchId,
--				FinancialYear=@FinancialYearId
--				,RefType = 1
--				,ReferenceNo = @ChallanNo
--				,ReferenceId = @ChallanNo
--			WHERE Id = @VoucherId
--		END
--		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
--		SET @EexecutionMessage = @EexecutionMessage + ' DR FreightTransport.'
--		INSERT INTO Accounts_VoucherTransaction
--			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--		VALUES
--			(@VoucherId,@FreightTransport,NULL,2,@TotalFreight)	
--		DECLARE @TotalAdvance Decimal(18,2) = 0.00
--		DECLARE transactionCur CURSOR FOR 
--		SELECT Id FROM LoadingAdvance Where LoadingId = @LoadingId
--		OPEN transactionCur
--		DECLARE @LoadADvId INT = NULL
--		FETCH NEXT FROM transactionCur INTO @LoadADvId
--		WHILE (@@FETCH_STATUS = 0)
--		BEGIN
--			DECLARE @AdvanceType	 INT
--			DECLARE @PaymentMode	INT
--			DECLARE @Amount	Decimal(18,2) = 0.0
--			DECLARE @TDSId		INT
--			DECLARE @TDSRate		Decimal(18,2) = 0.0
--			DECLARE @TDSDeduction		Decimal(18,2) = 0.0
--			DECLARE @PartyId	INT
--			DECLARE @PumpId	INT
--			DECLARE @Remarks	Varchar(2000)
--			Declare @TLedgerId INT
--			Declare @TCostCenterId INT
--			Declare @TType INT
--			DECLARE @TDSAuthorization INT=0
			
--			SET @TCostCenterId = @CostCenterId
--			SELECT 
--				 @AdvanceType = AdvanceType
--				,@PaymentMode = PaymentMode
--				,@Amount	 = Amount
--				,@PartyId = PartyId
--				,@PumpId = PumpId
--				,@Remarks = Remarks


--			FROM LoadingAdvance
--			WHERE Id = @LoadADvId
--			SET @TType = 1 
--			IF @AdvanceType = 1 -- Owner
--			BEGIN
--				IF @DeductionType = 'BALANCPAYABLE'
--				BEGIN
--					Declare @TruckCount INT = 0
--					SET @PartyId = @OwnerId
--					Select @TruckCount = Count(*) From Fleet_Vehicle Where [Owner] = @OwnerId
--					IF @TruckCount >= 10 AND @PartyId <> 1
--					BEGIN
--						Declare @PartyPANCard  Varchar(50)
--						Select @TdsId = CASE WHEN IsNull(P.NoTDS,0)<>1 THEN P.TDSType ELSE NULL END, @PartyPANCard = PANNumber  -- CASE CONDITION FOR EXIM TRUCK NoTDS=1 DO not deduct TDS
--								from Accounts_TDSSettings T
--								Left Join Common_Parties P On P.TDSType = T.TDSTypeId
--								Where P.Id = @OwnerId And @VoucherDate >= DateFrom And @VoucherDate <= ISNull(DateTo,'2225-01-01')
--						IF @PartyPANCard IS NULL
--							THROW 50000, 'Owner is liable to deduct TDS on advance payment but owner has not provided his PAN No.', 1
--						SELECT @TDSRate= CASE WHEN @PartyPANCard IS NULL THEN RateWithOutPAN ELSE RateWithPAN END FROM Accounts_TDSSettings Where Id = @TdsId
--						SET @TDSDeduction = Convert(Decimal(18,2), Round(@Amount * @TDSRate/100, 0)) 
--					END
--				END
--				SET @PumpId=Null
--				SET @TLedgerId = @TruckOwnerAdvance
--			END
--			ELSE IF @AdvanceType = 3 -- Third Party
--			BEGIN

--				IF @DeductionType = 'BALANCPAYABLE'
--				BEGIN
--				   IF @TDSAuthorization=0
--				    BEGIN
--					Declare @PartyPANCardTP  Varchar(50)
--					Select @TdsId = P.TDSType, @PartyPANCardTP = PANNumber 
--							from Accounts_TDSSettings T
--							Left Join Common_Parties P On P.TDSType = T.TDSTypeId
--							Where P.Id = @PartyId And @VoucherDate >= DateFrom And @VoucherDate <= ISNull(DateTo,'2225-01-01')
--					IF @PartyPANCardTP IS NULL
--						THROW 50000, 'Third Party is liable to deduct TDS on advance payment but he has not provided his PAN No.', 1
--					SELECT @TDSRate= CASE WHEN @PartyPANCardTP IS NULL THEN RateWithOutPAN ELSE RateWithPAN END FROM Accounts_TDSSettings Where Id = @TdsId
--					SET @TDSDeduction = Convert(Decimal(18,2), Round(@Amount * @TDSRate/100, 0)) 
--					END					
--				END
--				SET @PumpId=NULL
--				SET @TLedgerId = @TruckOwnerAdvance
--			END
--			ELSE IF @AdvanceType = 2 -- Desiel
--			BEGIN
--				SET @HSDAdvance = @HSDAdvance + @Amount
--				SET @PartyId=NULL
--				SET @TLedgerId = @FuelAdvance
--				SELECT Top 1 @PumpRateId = Id From Pump Where PumpNameId = @PumpId
--				IF @TLedgerId IS NULL
--					THROW 50000, 'Ledger is not defined for selcted Pump', 1
--			END
--			ELSE IF @AdvanceType = 4 -- Welfare
--			BEGIN
--				Declare @WelLedgerId INT
--				SET @TLedgerId = @TruckOwnerAdvance
--				SELECT @WelLedgerId = LedgerId FROM SystemLedger Where Description = 'TRANSPORTATION ADV WELFARE'
--				IF @WelLedgerId IS NULL
--					THROW 50000, 'System Ledger is not defined for TRANSPORTATION ADV WELFARE', 1
--				INSERT INTO Accounts_VoucherTransaction
--					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--				VALUES
--					(@VoucherId,@WelLedgerId,NULL,2,@Amount)	

--				SET @WelfareAmount = @WelfareAmount+@Amount
--			END
--			ELSE IF @AdvanceType = 5 -- Load Detention
--			BEGIN
--				SET @LoadDetention = @LoadDetention + @Amount
--				Declare @LoadDetLedgerId INT
--				SET @TLedgerId = @TruckOwnerAdvance
--				SELECT @LoadDetLedgerId = LedgerId FROM SystemLedger Where Description = 'LOADDETENTION'
--				IF @LoadDetLedgerId IS NULL
--					THROW 50000, 'System Ledger is not defined for LOADDETENTION', 1
--				INSERT INTO Accounts_VoucherTransaction
--					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--				VALUES
--					(@VoucherId,@LoadDetLedgerId,NULL,2,@Amount)	
--			END
--			SET @EexecutionMessage =  ' Adv Type: ' + Convert(Varchar(50),isNull( @AdvanceType,0))+ ' Party Id: ' + Convert(Varchar(50), isnull(@PartyId,0))
--			--If 1=1
--			--THROW 50000, @EexecutionMessage, 1
--			INSERT INTO Accounts_VoucherTransaction
--				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--			VALUES
--				(@VoucherId,@TLedgerId,@TCostCenterId,@TType,(@Amount- @TDSDeduction))	
--			IF @TDSDeduction > 0.0
--			BEGIN
--				DECLARE @TDSLedgerId INT
--				Select @TDSLedgerId = LedgerId From Accounts_TDSSettings Where Id = @TDSId
--				SET @TotalAdvance = @TotalAdvance + @TDSDeduction
--				SET @EexecutionMessage = @EexecutionMessage + ' TDS : ' + Convert(Varchar(50), @AdvanceType)
--				INSERT INTO Accounts_VoucherTransaction
--					(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--				VALUES
--					(@VoucherId,@TDSLedgerId,@TCostCenterId,1,@TDSDeduction)	
--			END
--			IF @AdvanceType NOT IN  (4,5) -- Welfare, Do not add welfare in advance
--				SET @TotalAdvance = @TotalAdvance + @Amount - @TDSDeduction
--			FETCH NEXT FROM transactionCur INTO @LoadADvId
--		END
--		CLOSE transactionCur
--		DEALLOCATE transactionCur
--		SET @EexecutionMessage = @EexecutionMessage + ' Freight Payble.'
--		INSERT INTO Accounts_VoucherTransaction
--			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
--		VALUES
--			(@VoucherId,@FreightPayable,NULL,1, (@TotalFreight - @TotalAdvance))	
	
--		--IF @TotalFreight < @TotalAdvance
--		--	THROW 50000, 'Total Advance can not be greater than Total Frieght.', 1
--		DECLARE @MaxAdvLimit Decimal(18,2) = 100.00
--		DECLARE @MaxAdvLimitMsg Varchar(500) = 'DD'
--		Select @MaxAdvLimit = Max(J.MaxAdvanceLimit) from LoadingChallan  L
--		Left Join Fleet_Vehicle V On V.Id = L.TruckId
--		Left Join _JobPaymentRule J On J.JobId = L.JobId AND J.Tyre = V.TotalTyers
--		Where L.Id = @LoadingId
		
				
--		SET @MaxAdvLimitMsg = Concat('Advacne is given more then the assigned limit in Job Payment Rules. Max Limit is ' , Convert(Varchar, @MaxAdvLimit) , '')
--		IF (@TotalAdvance * 100 / @TotalFreight) > @MaxAdvLimit
--			THROW 50000, @MaxAdvLimitMsg, 1
		
--		Exec [Acounting_ValidateVoucher] @Voucherid
		

--			FETCH NEXT FROM loadVoucherCursor INTO @LoadingId
--		END
--		CLOSE loadVoucherCursor
--		DEALLOCATE loadVoucherCursor

--		IF @trancount = 0
--			COMMIT;

--	END TRY
--	BEGIN CATCH
--		declare @error int, @message varchar(4000), @xstate int;
--		select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
--		if @xstate = -1
--			rollback;
--		if @xstate = 1 and @trancount = 0
--			rollback
--		if @xstate = 1 and @trancount > 0
--			rollback transaction [sp_VoucherOnTokenApproval];
--		raiserror ('[sp_VoucherOnTokenApproval]: %s, %s', 16, 1, @EexecutionMessage, @message) ;
	----END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[_AddApprovalRecord]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_AddApprovalRecord] (
	@TableName Varchar(50),
	@ColumnName Varchar(50),
	@ColumnValue INT,
	@StatusId INT,
	@ActionBy INT,
	@Remarks Varchar(5000) = NULL
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @TableName + @ColumnName + @Remarks
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @MySQL NVARCHAR(MAX)=''
	IF @Remarks IS NULL 
		SET @Remarks = 'NULL';
	ELSE
		SET @Remarks = '''' + @Remarks + ''''
	SET @MySQL= 'INSERT INTO '+@TableName+' ('+@ColumnName+',[Status],[Remarks],[ActionBy]) VALUES ('
	SET @MySQL= @MySQL +  Convert(Varchar,@ColumnValue) + ',' + Convert(Varchar,@StatusId) + ',' + @Remarks + ','  +  Convert(Varchar,@ActionBy) + ')'
	EXECUTE sp_executeSQL @MySQL

	DECLARE @ApprovalFlag Bit=0
	DECLARE @VerifyFlag Bit=0
	IF @TableName = 'LoadingApprovals'
	BEGIN
	    select @ApprovalFlag=LoadingChallanApproval FROM _ApprovalSetting
		IF(@ApprovalFlag=1 AND @StatusId<>5)
		BEGIN
			update LoadingApprovals set Status=4 Where LoadingId=@ColumnValue AND Status=2
			Update LoadingChallan Set ApprovalStatus = 4 Where Id = @ColumnValue
		END
		ELSE
		   Update LoadingChallan Set ApprovalStatus = @StatusId Where Id = @ColumnValue
	END
    
	--IF CHARINDEX('_TokenApprovals',@TableName) >= 0
	IF @TableName = '_TokenApprovals'
	BEGIN
	   Select @ApprovalFlag=TokenApproval FROM _ApprovalSetting
	   IF(@ApprovalFlag =1 AND @StatusId<>5)
	   BEGIN
	      Update _TokenApprovals Set Status = 4 Where TokenId = @ColumnValue AND Status=3
          Update _Token Set TokenStatus = 4 Where Id = @ColumnValue AND TokenStatus=3
	   END  
	   ELSE
	   Update _Token Set TokenStatus = @StatusId Where Id = @ColumnValue
	END

	-- SELECT ' ' + @MySQL
	-- Exec [_AddApprovalRecord] @TableName='_AdvanceApprovals', @ColumnName='WOId', @ColumnValue=3, @StatusId=1,@ActionBy=3107, @Remarks=NULL

	
	
	IF @TableName = '_WOApprovals'
	BEGIN
		select @ApprovalFlag=WorkOrderApproval, @VerifyFlag=WorkOrderVerify FROM _ApprovalSetting
		IF(@VerifyFlag=1)
		  update _WOApprovals set Status=3 Where WOId=@ColumnValue AND Status=2
		ELSE IF(@ApprovalFlag=1)
		  update _WOApprovals set Status=4 Where WOId=@ColumnValue AND Status=2 
	END

	IF @TableName = '_JobApprovals'
	BEGIN
		select @ApprovalFlag=JobApproval, @VerifyFlag=JobVerify FROM _ApprovalSetting
		IF(@VerifyFlag=1)
		  update _JobApprovals set Status=3 Where JobId=@ColumnValue AND Status=2
		 ELSE IF(@ApprovalFlag=1)
		  update _JobApprovals set Status=4 Where JobId=@ColumnValue AND Status=2
	END

END

GO
/****** Object:  StoredProcedure [dbo].[_AdvLastLoadingDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_AdvLastLoadingDetails] (@JobId INT, @CurrentLoadDate DATE)
AS
BEGIN
	Select *, 
		(Case 
		WHEN AA.TruckSource = 'ASSOCIATION' THEN
			(Select Count(*) From LoadingChallan Where Jobid=  AA.JobId AND LoadDate = AA.LoadDate and AssociationId IS NOT NULL) 
		WHEN AA.TruckSource = 'MARKET' THEN
			(Select Count(*) From LoadingChallan Where Jobid=  AA.JobId AND LoadDate = AA.LoadDate and AssociationId IS NULL) 
		ELSE 0 END)
		as LoadedTrucks,
		IsNull((Case 
		WHEN AA.TruckSource = 'ASSOCIATION' THEN
			(Select Sum(NetWT) From LoadingChallan Where Jobid=  AA.JobId AND LoadDate = AA.LoadDate and AssociationId IS NOT NULL) 
		WHEN AA.TruckSource = 'MARKET' THEN
			(Select Sum(NetWT) From LoadingChallan Where Jobid=  AA.JobId AND LoadDate = AA.LoadDate and AssociationId IS NULL) 
		ELSE 0 END),0.0)
		as LoadedQty
	From (
	Select A.LoadDate,TruckSource, Ad.JobId, Sum(Trucks) TotalTrucks, Sum(IsNull(Trucks*Quantity,0.0)) as TotalQty
	FROM _AdvanceDetails  AD
	Left Join _Advance A On A.Id = Ad.AdvanceId
	Where JobId = @JobId and AdvanceId in (
	(Select Max(Id) From _Advance Where LoadDate < @CurrentLoadDate
	and Id in (Select AdvanceId From _AdvanceDetails Where JobId = @JobId)))
	Group By TruckSource,  A.LoadDate, Ad.JobId ) AA
END
-- Exec _AdvLastLoadingDetails 8507, '2016-07-28' 
GO
/****** Object:  StoredProcedure [dbo].[_AdvLastRequestJobDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[_AdvLastRequestJobDetails] (@CurrentAdvId INT, @ExcludeCurrentAdvJobs INT)
AS
BEGIN
	DECLARE @AdvanceId INT
	Declare @BranchId INT
	Declare @LoadDate Date
	Declare @LastAdvanceId INT

	SET @AdvanceId  = @CurrentAdvId
	Select @BranchId = BranchId, @LoadDate = LoadDate from _Advance Where Id = @AdvanceId
	Select @LastAdvanceId = Id From _Advance Where BranchId = @BranchId And LoadDate = (
		Select Max(LoadDate) From _Advance Where BranchId = @BranchId And LoadDate < @LoadDate)

	Select AD.JobId, J.JobNo, J.ClientName, J.Sector, J.MaterialName From _AdvanceDetails  AD
	Left Join vw_jobdetails J On J.JobId = AD.JobId
	Where AdvanceId = @LastAdvanceId 
	And (@ExcludeCurrentAdvJobs = 0 OR AD.JobId Not In (Select JobId From _AdvanceDetails Where AdvanceId = @AdvanceId))
END
GO
/****** Object:  StoredProcedure [dbo].[_ApplyNewClientRateNewChallans]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_ApplyNewClientRateNewChallans]
(@RateId INT)
AS
BEGIN
	DECLARE @DateFrom DATE=GETDATE()
	DECLARE @DateTo DATE=NULL
	DECLARE @ClientRate DECIMAL(18,2)=0.00

	SELECT @DateFrom=DateFrom, @ClientRate=ClientRate from _WOSectorRate WHERE WOSectorId=@RateId
	SELECT @DateTo=MIN(DateFrom) FROM _WOSectorRate WHERE DateFrom>@DateFrom AND WOSectorId=@RateId

		UPDATE LoadingChallan SET InvoiceClientRate=@ClientRate FROM LoadingChallan L
		WHERE 
			LoadDate>=@DateFrom AND 
			LoadDate<IsNull(@DateTo,'2999-01-01') AND
			NOT EXISTS (SELECT 1 FROM _InvoiceChallan I WHERE I.ChallanNo=L.ChallanNo)
END
GO
/****** Object:  StoredProcedure [dbo].[_BulkApproval]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[_BulkApproval](@TableName Varchar(100), @ParentColumn Varchar(50), @TokenList Varchar(5000), @Status INT, @UserId INT)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @TableName + @ParentColumn + @TokenList
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	DECLARE @MySQL VARCHAR(8000)='' 
	SET @MySQL += 'Select '+@ParentColumn+' as ParentId, Max(Id) as AppId INTO #TempApprovals from '+@TableName+' Where '+@ParentColumn+' in (' + @TokenList + ') Group By '+@ParentColumn+';'
	IF @Status = 4 -- Approved
		SET @MySQL += 'Insert Into '+@TableName+' Select XX.ParentId, (TA.Status + 1), NULL, '+Convert(Varchar, @UserId) +' ,GetDate()  from #TempApprovals XX INNER JOIN '+@TableName+' TA ON TA.Id = XX.AppId Where TA.Status < 4'
	ELSE IF @Status = 5 -- Reject
		SET @MySQL += 'Insert Into  '+@TableName+' Select XX.ParentId, 5, NULL, '+Convert(Varchar, @UserId) +' ,GetDate()  from #TempApprovals;'
	
	EXECUTE(@MySQL)
END

GO
/****** Object:  StoredProcedure [dbo].[_BulkLoadingInsert]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_BulkLoadingInsert] (
@InstantId INT = NULL,
@TotalRecords INT = NULL
)
AS
BEGIN
	DECLARE @existingTotal INT = 0
	DECLARE @NewRecords INT = 0
	IF @TotalRecords IS NULL OR @InstantId IS NULL
		THROW 50000, '@TotalRecords and @InstantId is required to call [_BulkLoadingInsert] for type 1.', 1
	IF @TotalRecords > 1000
		THROW 50000, 'Maximum 1000 Records are allowed to create.', 1
	SELECT @existingTotal = Count(1) FROM _InstantLoadingDetails Where InstantId = @InstantId
	SET @NewRecords = @TotalRecords - @existingTotal
	IF @NewRecords > 0 -- Need to add more records
	BEGIN
		
		DECLARE @MYSQL VARCHAR(8000) = ''
		SET @MYSQL = 'INSERT INTO _InstantLoadingDetails (InstantId) VALUES '
		WHILE (@NewRecords > 0)
		BEGIN
			SET @NewRecords = @NewRecords -1;
			SET @MYSQL = @MYSQL + '(' +CONVERT(VARCHAR, @InstantId) +')'
			IF @NewRecords > 0
				SET @MYSQL = @MYSQL + ','
		END
		EXEC (@MYSQL)
	END
	ELSE
	BEGIN
		DECLARE @deleteRecords INT = 0
		DECLARE @eEmptyTotal INT
		SET @deleteRecords = ABS(@NewRecords)
		SELECT @eEmptyTotal = Count(1) FROM _InstantLoadingDetails 
		Where InstantId = @InstantId  AND LoadingId  Is Null
		IF @deleteRecords > @eEmptyTotal
			THROW 50000, 'There are some records which contains data. Can not remove the records',1
		SET @MYSQL = 'DELETE FROM _InstantLoadingDetails WHERE ID IN (SELECT TOP '+ CONVERT(Varchar,@deleteRecords) +' ID FROM _InstantLoadingDetails Where InstantId = '+ Convert(Varchar, @InstantId) +' AND LoadingId  Is Null)'
		EXEC (@MYSQL)
	END
END

GO
/****** Object:  StoredProcedure [dbo].[_BulkUnloadingInsert_NotUsed]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_BulkUnloadingInsert_NotUsed] (
@UnloadInstantId INT = NULL,
@TotalRecords INT = NULL
)
AS
BEGIN
	DECLARE @existingTotal INT = 0
	DECLARE @NewRecords INT = 0
	IF @TotalRecords IS NULL OR @UnloadInstantId IS NULL
		THROW 50000, '@TotalRecords and @UnloadInstantId is required to call [_BulkUnloadingInsert] for type 1.', 1
	IF @TotalRecords > 1000
		THROW 50000, 'Maximum 1000 Records are allowed to create.', 1
	SELECT @existingTotal = Count(1) FROM _InstantUnloadingDetails Where UnloadInstantId = @UnloadInstantId
	SET @NewRecords = @TotalRecords - @existingTotal
	IF @NewRecords > 0 -- Need to add more records
	BEGIN
		
		DECLARE @MYSQL VARCHAR(8000) = ''
		SET @MYSQL = 'INSERT INTO _InstantUnloadingDetails (UnloadInstantId) VALUES '
		WHILE (@NewRecords > 0)
		BEGIN
			SET @NewRecords = @NewRecords -1;
			SET @MYSQL = @MYSQL + '(' +CONVERT(VARCHAR, @UnloadInstantId) +')'
			IF @NewRecords > 0
				SET @MYSQL = @MYSQL + ','
		END
		EXEC (@MYSQL)
	END
	ELSE
	BEGIN
		DECLARE @deleteRecords INT = 0
		DECLARE @eEmptyTotal INT
		SET @deleteRecords = ABS(@NewRecords)
		SELECT @eEmptyTotal = Count(1) FROM _InstantUnloadingDetails 
		Where UnloadInstantId = @UnloadInstantId  AND ChallanNo IS NULL  AND UnloadWt IS NULL
		IF @deleteRecords > @eEmptyTotal
			THROW 50000, 'There are some records which contains data. Can not remove the records',1
		SET @MYSQL = 'DELETE FROM _InstantUnloadingDetails WHERE ID IN (SELECT TOP '+ CONVERT(Varchar,@deleteRecords) +' ID FROM _InstantUnloadingDetails Where UnloadInstantId = '+ Convert(Varchar, @UnloadInstantId) +' AND ChallanNo IS NULL AND UnloadWt IS NULL)'
		EXEC (@MYSQL)
	END
END

GO
/****** Object:  StoredProcedure [dbo].[_ChallanPaymentReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_ChallanPaymentReport] 
(
@FYId INT,
@BranchId INT = NULL,
@OwnerId INT = NULL,
@LoadDateFrom Date = NULL,
@LoadDateTo Date = NULL,
@ChallanNo VARCHAR(5000)=NULL

)
AS
DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @ChallanNo
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
   IF(@BranchId IS NULL AND @OwnerId IS NULL AND @LoadDateFrom IS NULL AND @LoadDateTo IS NULL AND @ChallanNo IS NULL)
   BEGIN
     SELECT 'PLEASE SELECT FILTER'
   END
   ELSE
   BEGIN
		   SELECT * INTO #temp_ChallanList FROM (  
				SELECT Split.a.value('.', 'VARCHAR(100)') AS ChallanNo
					FROM	
						(
							SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanNo, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS ChallanNo  
						) AS A CROSS APPLY ChallanNo.nodes ('/M') AS Split(a)
				) XX
		 
			DECLARE @RowCount INT=0
		    DECLARE @FYStartDate DATE
			DECLARE @FYEndDate DATE
			SELECT  @FYStartDate=StartDate, @FYEndDate=EndDate From Accounts_FinancialYear WHERE ID=@FYId

			IF(@LoadDateFrom IS NOT NULL OR @LoadDateTo IS NOT NULL)
			BEGIN
			    IF (@LoadDateFrom < @FYStartDate OR @LoadDateTo > @FYEndDate)
				     THROW 50000, 'Selected period should be with in financial year.', 1
			END	

			IF(@RowCount=0)
			BEGIN
				SELECT @RowCount=COUNT(Id) from  vw_ReportPaymentChallan
					WHERE 1=1
					AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, LoadDate, 103)>= @LoadDateFrom)
					AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, LoadDate, 103) <= @LoadDateTo)
					AND (@ChallanNo IS NULL OR ChallanNo IN (Select ChallanNo from #temp_ChallanList))

			    IF(@RowCount>5000)
		              THROW 50000, '5000 Above Records cannot show Please Apply another filter .', 1
				ELSE
				BEGIN
					SELECT ChallanNo, LoadDate, NetWT, FreightRate, TotalFreight, Advance,  HSDCost, TotalAdvance
					       , UnloadedDate, UnloadedNetWt
					       , EffectiveWt, ChallanDeduction, ChallanLost, TollGate, ShortageWt, PenaltyRate, PenaltyShoratge, Penalty
						   , EscalationRate, EscalationAmount, TdsAmount, NetPayable, PaidAmount 
						   from  vw_ReportPaymentChallan
					WHERE 1=1
				    AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, LoadDate, 103)>= @LoadDateFrom)
		            AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, LoadDate, 103) <= @LoadDateTo)
					AND (@ChallanNo IS NULL OR ChallanNo IN (Select ChallanNo from #temp_ChallanList))
				END
			END
     END
END
GO
/****** Object:  StoredProcedure [dbo].[_ComparativeStatement]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_ComparativeStatement]
(
   @JobId INT=NULL,
   @LoadDateFrom Date = NULL,
   @LoadDateTo Date = NULL
)

AS
BEGIN
    
	SELECT   J.JobNo as JobNo, SUM(L.NetWt) AS LoadQty,
			COUNT(L.Id) AS LoadingTrip, COUNT(U.LoadingChallanId) AS UnloadingTrip, 
			SUM(ISNULL(U.UnloadedNetWt, 0)) AS UnLoadQty, COUNT(IC.ChallanNo) AS BillingTrip,
			SUM(ISNULL(IC.ClaimWt, 0)) AS BillingQTY, 
			SUM(ISNULL(IC.ClaimWt, 0) * ISNULL(IC.BillingRate, 0)) AS BillingAmt,
			COUNT(L.Id) - COUNT(IC.ChallanNo) AS BillDiffTrip ,
			COUNT(P.LoadingId) AS PaymentTrip, SUM(ISNULL(P.EffectiveWt, 0)) AS  PaymentQTY,
			ISNUll(SUM(P.NetPayable),0) as PaymentAmt

     FROM  LoadingChallan L
     LEFT OUTER JOIN
     UnloadingChallan U ON U.LoadingChallanId = L.Id
     LEFT OUTER JOIN
     Payment P ON P.LoadingId = L.Id
     LEFT OUTER JOIN
     _Job J  ON J.Id = L.JobId
     LEFT OUTER JOIN
     _WorkOrderItems WI ON WI.Id = J.WOSectorId
     LEFT OUTER JOIN
     LoadingPoints LP ON LP.Id = WI.LoadingPoint
     LEFT OUTER JOIN
     UnloadingPoints UP ON UP.Id = WI.UnLoadingPoint
     LEFT OUTER JOIN
     _WorkOrder W ON W.Id = WI.OrderId
     LEFT OUTER JOIN
     Common_Client C ON C.Id =  W.ClientId
	 LEFT OUTER JOIN
	 _STODetails S ON S.Id = L.STOId
	 LEFT OUTER JOIN
	 vw_InvoiceChallanDetails IC  ON IC.ChallanNo = L.ChallanNo

     WHERE  (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103)>= @LoadDateFrom)
			AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103) <= @LoadDateTo)
			AND (@JobId IS NULL OR @JobId=J.Id)
            
	GROUP BY   J.JobNo

    ORDER BY J.JobNo ASC


END



--select top 1* from _InvoiceChallan 
GO
/****** Object:  StoredProcedure [dbo].[_CreateAdvanceVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[_CreateAdvanceVoucher] (@AdvanceId INT)
AS
BEGIN
DECLARE @trancount int;
DECLARE @FinancialYearId INT = NULL

DECLARE @VoucherId INT=0
DECLARE @VoucherDate DATE=NULL
DECLARE @VoucherStatus INT = 2 -- SUBMIT
DECLARE @VoucherType INT= 1 -- 1: Contra, 4: Journal
DECLARE @VoucherRefType INT=5 -- ADVANCE
DECLARE @VoucherRefId INT= @AdvanceId
DECLARE @VoucherRefNo VARCHAR(50)
DECLARE @PaymentMode INT
DECLARE @ChkNeftRefNo VARCHAR(50)
DECLARE @InsertById INT=NULL
DECLARE @UserBranchId INT=NULL
DECLARE @VoucherTempStatus INT = 0

SET @trancount = @@trancount;

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @VoucherRefNo + @ChkNeftRefNo
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


SELECT 
	@VoucherRefNo = CONCAT(Convert(Varchar(50), A.LoadDate, 103), ' (', B.Name, ')')
FROM _Advance A
LEFT JOIN Common_Branch B ON B.Id = A.BranchId
WHERE A.Id = @AdvanceId

SELECT TOP 1 @VoucherDate = PaymentDate, @InsertById = InsertUserId, @PaymentMode = PaymentMode, @ChkNeftRefNo=ChkRefNo  FROM _AdvanceVoucher Where AdvanceId = @AdvanceId
SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @VoucherDate Between StartDate And EndDate;
SELECT @UserBranchId = BranchId From Users Where Id = @InsertById

IF @FinancialYearId IS NULL
	THROW 50000, 'Could not found financial year for payment date', 1

SELECT @VoucherId = Id 
	FROM [Accounts_Vouchers] 
	WHERE VoucherType = @VoucherType And ReferenceId = @AdvanceId And IsAutoGenerated = 1

SELECT @VoucherTempStatus = [Status] FROM Accounts_Vouchers Where Id = @VoucherId
IF @VoucherTempStatus = 4 -- Approved
	THROW 50000, 'Payment voucher has been approved. Can not modify the advance request.', 16

SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'ADVANCEPAYMENT'
BEGIN
	DECLARE @EexecutionMessage VARCHAR(5000) = ''

	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION [_CreateInvoiceVoucher]; 

		

		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo)
			VALUES
				(NULL,
				@VoucherDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				NULL,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@VoucherDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @VoucherRefNo,
				ReferenceId=@VoucherRefId,
				RefType=@VoucherRefType,
				FinancialYear=@FinancialYearId,
				PaymentMode =@PaymentMode,
				ChkNeftRefNo=@ChkNeftRefNo
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId

		SET @EexecutionMessage = @EexecutionMessage + '@FreightIncomeLedger.'
		BEGIN
			DECLARE @PaymentLedgerId INT
			DECLARE @BranchLedgerId INT
			DECLARE @Amount DECIMAL(18,2)
			DECLARE @LPaymentMode INT
			DECLARE @LChkRefNo VARCHAR(50)
			DECLARE @Narration VARCHAR(5000)
		
			DECLARE ledgerCur CURSOR FOR 
				SELECT  [PaymentLedgerId],[BranchLedgerId],[Amount],
						[PaymentMode],[ChkRefNo],[Narration] 
				FROM _AdvanceVoucher WHERE AdvanceId = @AdvanceId
			OPEN ledgerCur
			
			FETCH NEXT FROM ledgerCur INTO @PaymentLedgerId, @BranchLedgerId, @Amount, @LPaymentMode, @LChkRefNo, @Narration
			WHILE (@@FETCH_STATUS = 0)
			BEGIN
				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration, ChkNeftRefNo, PaymentMode)
				VALUES
					(@VoucherId,@PaymentLedgerId,NULL,1, @Amount, @Narration, @LChkRefNo, @LPaymentMode)

				INSERT INTO Accounts_VoucherTransaction
					(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration, ChkNeftRefNo, PaymentMode)
				VALUES
					(@VoucherId,@BranchLedgerId,NULL,2, @Amount, NULL, NULL, NULL)
				FETCH NEXT FROM ledgerCur
			END
		END
		Exec [Acounting_ValidateVoucher] @VoucherId	
		UPDATE _Advance SET VoucherId = @VoucherId Where Id = @AdvanceId
		if @trancount = 0
			commit;
	 END TRY
	 BEGIN CATCH
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction [_CreateInvoiceVoucher];
			raiserror ('[_CreateAdvanceVoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	end catch
END
END

GO
/****** Object:  StoredProcedure [dbo].[_CreateClientPaymentVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[_CreateClientPaymentVoucher] 
(
  @RecevedId INT

)
AS
BEGIN
 DECLARE @trancount INT;
    DECLARE @PaymentDate DATE;
    DECLARE @ClientLedgerId INT;
	DECLARE @TdsLedgerId INT;
	DECLARE @MoistureLedgerId INT;
	DECLARE @ShortageLedgerId INT;
    DECLARE @ReceivedLedgerId INT;
    DECLARE @PaymentModeId INT;
    DECLARE @TotalAmount DECIMAL(18,2)=0.0;
    DECLARE @Narration VARCHAR(2000) = NULL;
    DECLARE @ChkNeftRefNo VARCHAR(50) = NULL;
    DECLARE @FinancialYearId INT;
    DECLARE @InsertById INT=NULL;
    DECLARE @VoucherStatus INT = 2;
    DECLARE @UserBranchId INT=NULL;
    DECLARE @VoucherId INT=0;
    DECLARE @CurrentVoucherStatus INT=0;
    DECLARE @TdsAmount DECIMAL(18,3)=0.000
	DECLARE @ShortageDeduction DECIMAL(18,3)=0.000
	DECLARE @MoistureDeduction DECIMAL(18,3)=0.000

	SET @trancount = @@trancount;
    

	SELECT @PaymentDate = R.PaymentDate , @ClientLedgerId = C.LedgerId, @PaymentModeId = R.PaymentModeId
		  ,@ChkNeftRefNo = R.Reference 
		  ,@InsertById = 3105
		  ,@UserBranchId = 1
		  ,@ReceivedLedgerId = R.ReceivedLedgerId, @TotalAmount = R.Amount, @VoucherId = R.VoucherId, @Narration = R.Narration
		  ,@TdsAmount = R.TdsAmount, @ShortageDeduction = R.ShortageDeduction, @MoistureDeduction = R.MoistureDeduction
    FROM _PaymentReceived R
    LEFT OUTER JOIN
    Common_Client C ON C.Id = R.ClientId
    WHERE R.Id = @RecevedId


	SELECT @ShortageLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE SHORTAGE DEDUCTION'
	SELECT @MoistureLedgerId = LedgerId  FROM SystemLedger WHERE Description='INVOICE MOISTURE DEDUCTION'
	SELECT @TdsLedgerId = LedgerId FROM SystemLedger WHERE Description='INVOICE TDS DEDUCTION'

	
	--IF(1 = 1)
	--  throw 50000, @Narration, 1

	SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @PaymentDate Between StartDate And EndDate;

	IF(@VoucherId IS NOT NULL) 
    BEGIN
       SELECT @CurrentVoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId
    END
	IF(@CurrentVoucherStatus != 5 AND @CurrentVoucherStatus > 0)
          THROW 50000, 'Please Reject Vouchers ???. ' , 1
    IF(@TotalAmount = 0.0)
          THROW 50000, 'Voucher cannot be create of zero Amount ???.', 1

	


    BEGIN
       BEGIN TRY
           IF @trancount = 0
          BEGIN TRANSACTION
       ELSE
          SAVE TRANSACTION ClientPaymentVoucher;
    
          IF(@VoucherId = 0 OR @VoucherId IS NULL)
          BEGIN
             INSERT INTO [Accounts_Vouchers]
					 (VoucherName
					 ,VoucherDate
					 ,VoucherType
					 ,[Status]
					 ,InsertUserId
					 ,InsertDate
					 ,[Description]
					 ,BranchId
					 ,FinancialYear
					 ,RefType
					 ,ReferenceNo
					 ,ReferenceId
					 ,PaymentMode
					 ,ChkNeftRefNo)
             VALUES
					 (NULL,
					 @PaymentDate,
					 3, -- Receipt Voucher
					 @VoucherStatus, -- Submitted 
					 @InsertById,
					 GETDATE(),
					 @Narration,
					 @UserBranchId,
					 @FinancialYearId,
					 NULL, 
					 NULL,
					 @RecevedId,
					 @PaymentModeId,
					 @ChkNeftRefNo)
                     SET @VoucherId = SCOPE_IDENTITY()
              END
             ELSE
             BEGIN
				 UPDATE Accounts_Vouchers SET 
				 VoucherDate = @PaymentDate,
				 UpdateUserId= @InsertById,
				 UpdateDate = GETDATE(),
				 [Status] = @VoucherStatus,
				 ReferenceId=@RecevedId,
				 FinancialYear=@FinancialYearId,
				 [Description]=@Narration
				 WHERE Id = @VoucherId
             END
    
         DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId] = @VoucherId
    
	

	     IF(@TdsAmount > 0.00)
	     BEGIN
	          IF(@TdsLedgerId IS NULL)
	     	    THROW 50000, 'Please set tds ledger in system ledger of  INVOICE TDS DEDUCTION', 1
			  ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @TdsLedgerId, NULL, 2, @TdsAmount)
			   END
	     END
	     
	     IF(@ShortageDeduction > 0.00)
	     BEGIN
	          IF(@ShortageLedgerId IS NULL)
	     	   THROW 50000, 'Please set Shortage ledger in system ledger of  INVOICE SHORTAGE DEDUCTION', 1
			  ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @ShortageLedgerId, NULL, 2, @ShortageDeduction)
			   END
	     END
	     
	     IF(@MoistureDeduction > 0.00)
	     BEGIN
	          IF(@MoistureLedgerId IS NULL)
	     	   THROW 50000, 'Please set Moisture ledger in system ledger of  INVOICE MOISTURE DEDUCTION', 1
			 ELSE
			   BEGIN
			      INSERT INTO Accounts_VoucherTransaction
				      (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
				  VALUES
				      (@VoucherId, @MoistureLedgerId, NULL, 2, @MoistureDeduction)
			   END
	     END

		 DECLARE @NetReceivedAmount DECIMAL(18, 3) = 0.000
		 SET @NetReceivedAmount = @TotalAmount
		 SET @TotalAmount = @TotalAmount + @TdsAmount + @ShortageDeduction + @MoistureDeduction

		 INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ClientLedgerId, NULL, 1, @TotalAmount)
    
		 INSERT INTO Accounts_VoucherTransaction
		    (VoucherId, LedgerId, CostCenter, TransactionType, Amount)
		 VALUES
		    (@VoucherId, @ReceivedLedgerId, NULL, 2, @NetReceivedAmount)
    



        UPDATE _PaymentReceived SET VoucherId = @VoucherId WHERE Id = @RecevedId
           EXEC [Acounting_ValidateVoucher] @VoucherId	
    
    IF @trancount = 0
     COMMIT;
    END TRY
    BEGIN CATCH
       DECLARE @error INT, @message VARCHAR(4000), @xstate INT;
       SELECT @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
    IF @xstate = -1
       ROLLBACK;
    IF @xstate = 1 and @trancount = 0
       ROLLBACK
    IF @xstate = 1 and @trancount > 0
       ROLLBACK transaction ClientPaymentVoucher;
    
     RAISERROR ('[ClientPaymentVoucher]: %s %d: %s', 16, 1, '', @error, @message) ;
    END CATCH
  END
END
GO
/****** Object:  StoredProcedure [dbo].[_CreateInvoicePaymentVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_CreateInvoicePaymentVoucher] (
@InvoicePaymentId INT = NULL,
@BulkInvoiceId INT = NULL
)
AS
BEGIN
DECLARE @trancount int;
DECLARE @FinancialYearId INT = NULL
DECLARE @ClientLedger INT=NULL
DECLARE @ReceivedLedger INT=NULL
DECLARE @ReceivedAmount DECIMAL(18,2)=NULL
DECLARE @ShortageLedger INT=NULL
DECLARE @ShortageCostCenter INT=NULL
DECLARE @ShortageAmount DECIMAL(18,2)=NULL
DECLARE @MoistureLedger INT=NULL
DECLARE @MoistureCostCenter INT=NULL
DECLARE @MoistureAmount DECIMAL(18,2)=NULL
DECLARE @TDSLedger INT=NULL
DECLARE @TDSCostCenter INT=NULL
DECLARE @TDSAmount DECIMAL(18,2)=NULL
DECLARE @OtherLedger INT=NULL
DECLARE @OtherCostCenter INT=NULL
DECLARE @OtherAmount DECIMAL(18,2)=NULL
DECLARE @OtherAmountRemark VARCHAR(5000)=NULL
DECLARE @ReceivedDate DATE=NULL
DECLARE @InsertById INT=NULL
DECLARE @UserBranchId INT=NULL
DECLARE @VoucherStatus INT = NULL
DECLARE @VoucherRefNo VARCHAR(50) = NULL
DECLARE @VoucherRefId INT = NULL
DECLARE @VoucherRefType INT = NULL
DECLARE @PaymentMode INT = NULL
DECLARE @ChkNeftRefNo VARCHAR(50)  = NULL
DECLARE @VoucherNarration VARCHAR(5000)  = NULL
IF @BulkInvoiceId IS NULL AND @InvoicePaymentId IS NULL
	THROW 50000, 'One parameter from @BulkInvoiceId or @InvoiceId is required.',1
IF @BulkInvoiceId IS NOT NULL AND @InvoicePaymentId IS NOT NULL
	THROW 50000, 'Only One parameter from @BulkInvoiceId or @InvoiceId is allowed.',1
CREATE TABLE #TransactionTempTable(
	JobCostCenterId int, 
	ReceivedAmount Decimal(18,2),  
	HandlingReceived Decimal(18,2),  
	ShortageAmount Decimal(18,2),  
	MoistureAmount Decimal(18,2),  
	TDSAmount Decimal(18,2),
	OtherAmount Decimal(18,2),
	OtherAmountRemark VARCHAR(5000)
	)
IF @InvoicePaymentId IS NOT NULL
BEGIN
	SELECT 
		@VoucherRefType = 4, -- INvoice
		@VoucherRefId = @InvoicePaymentId, -- INvoice
		@VoucherRefNo = (I.InvoiceNo + Case When IsNull(P.PNo,1) > 1 THEN '('+Convert(varchar, P.PNo )+')' ELSE '' END),
		@ReceivedDate = P.RealizationOn,
		@InsertById = IsNull(P.UpdateUserId, P.InsertUserId),
		@ClientLedger = Common_Client.LedgerId,
		@ReceivedLedger = P.ReceivedLedgerId,
		@PaymentMode = P.PaymentMode,
		@ChkNeftRefNo = P.ChkNEFTRefNo,
		@VoucherNarration = P.Remarks
	FROM _InvoicePayment P
	Left Join _Invoice I On I.Id = P.InvoiceId
	LEFT JOIN JobDetails On JobDetails.Id = I.JobId
	LEFT JOIN Common_Client On Common_Client.Id = JobDetails.ClientId
	WHERE P.Id = @InvoicePaymentId
	INSERT INTO #TransactionTempTable
	SELECT 
		IsNull(CostCenterId,-1) As JobCostCenterId,
		ISNULL(P.ReceivedAmount,0.0) As ReceivedAmount,
		ISNULL(P.HandlingReceived,0.0) As HandlingReceived,
		ISNULL(P.ShortageDeduction,0.0) As ShortageAmount,
		ISNULL(P.MoistureDeduction,0.0) As MoistureAmount,
		ISNULL(P.TDSAmount,0) As TDSAmount,
		ISNULL(P.OtherDeduction,0.0) As OtherAmount,
		P.DeductionRemarks As OtherAmountRemark
	FROM _InvoicePayment P 
	Left Join _Invoice I On I.Id = P.InvoiceId
	LEFT JOIN vw_InvoiceAmount On vw_InvoiceAmount.Id = I.Id
	LEFT JOIN JobDetails On JobDetails.Id = I.JobId
	WHERE P.Id = @InvoicePaymentId
END
ELSE --select * FROM _InvoiceBulkPayment BP where id=355
BEGIN
	SELECT 
		@VoucherRefType = 6, -- Bulk INvoice
		@VoucherRefId = @BulkInvoiceId, -- INvoice
		@VoucherRefNo = Convert(varchar,BP.BulkRefNo),
		@ReceivedDate = ReceivedDate,
		@InsertById = ISNULL(BP.UpdateUserId,BP.InsertUserId),
		@ClientLedger = Common_Client.LedgerId,
		@ReceivedLedger = BP.ReceivedLedgerId,
		@PaymentMode = BP.PaymentMode,
		@ChkNeftRefNo = BP.ChkNeftrefNo,
		@VoucherNarration = BP.Remarks
	FROM _InvoiceBulkPayment BP
	LEFT JOIN Common_Client On Common_Client.Id = BP.ClientId
	WHERE BP.Id = @BulkInvoiceId
	INSERT INTO #TransactionTempTable
	SELECT  -- select * from _InvoiceBulkPaymentId where paymentid=355
		CostCenterId As JobCostCenterId,
		SUM(ISNULL(P.ReceivedAmount,0.0)) As ReceivedAmount,
		SUM(ISNULL(P.HandlingReceived,0.0)) As HandlingReceived,
		SUM(ISNULL(P.ShortageDeduction,0.0)) As ShortageAmount,
		SUM(ISNULL(P.MoistureDeduction,0.0)) As MoistureAmount,
		SUM(ISNULL(P.TDSAmount,0)) As TDSAmount,
		SUM(ISNULL(P.OtherDeduction,0.0)) As OtherAmount,
		BP.OtherDeductionRemarks As OtherAmountRemark
	FROM _InvoiceBulkPaymentId BI 
	LEFT JOIN  _InvoiceBulkPayment BP On BP.Id = BI.PaymentId 
	LEFT JOIN _InvoicePayment P On P.Id = BI.InvoicePaymentId
	Left Join _Invoice I On I.Id = P.InvoiceId
	LEFT JOIN JobDetails On JobDetails.Id = I.JobId
	WHERE BP.Id = @BulkInvoiceId
	GROUP BY CostCenterId, BP.OtherDeductionRemarks
END
IF @ReceivedLedger IS NULL
	THROW 50000, 'Received payment ledger is not defined', 1
Select @UserBranchId = BranchId From Users Where Id = @InsertById
SET @trancount = @@trancount;
SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'INVOICEPAYMENT'
SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @ReceivedDate Between StartDate And EndDate;
BEGIN
	DECLARE @VoucherId INT = 0
	DECLARE @VoucherType INT = 3 -- Receipt Voucher(Do not chnage it to 5 becasue it will conflict with the voucher of invoice submisstion)
	DECLARE @InvoiceTaxes DECIMAL(18,2)= 0.0
	DECLARE @EexecutionMessage VARCHAR(5000) = ''
	DECLARE @CurrentVoucherStatus INT = 0
	DECLARE @TempDefaultJobCostCenterId INT = -999999
	SELECT @VoucherId = Id, @CurrentVoucherStatus = [Status]
	FROM [Accounts_Vouchers] 
	WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @VoucherRefId
	IF @CurrentVoucherStatus = 4 -- Approved
		THROW 50000, 'Voucher for this request has been approved. Modifications are not allwoed.', 1
		
	SELECT 
		@ShortageLedger = LedgerId, 
		@ShortageCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE SHORTAGE DEDUCTION'
	SELECT 
		@MoistureLedger = LedgerId, 
		@MoistureCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE MOISTURE DEDUCTION'
	SELECT 
		@TDSLedger = LedgerId, 
		@TDSCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE TDS DEDUCTION'
	SELECT 
		@OtherLedger = LedgerId, 
		@OtherCostCenter = 
			(Case When CostCenterOption = 0 Then Null	
					When CostCenterOption = 1 Then @TempDefaultJobCostCenterId	
					When CostCenterOption = 2 Then CostCenterId 
				End)
	From SYSTEMLEDGER Where [Description] = 'INVOICE OTHER DEDUCTION'
	BEGIN TRY
		IF @trancount = 0
			BEGIN TRANSACTION
		ELSE
			SAVE TRANSACTION [InvoicePaymentVoucher]; 
		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId
				,PaymentMode
				,ChkNeftRefNo)
			VALUES
				(NULL,
				@ReceivedDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				@VoucherNarration,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@VoucherRefNo,
				@VoucherRefId,
				@PaymentMode,
				@ChkNeftRefNo)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate = @ReceivedDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @VoucherRefNo,
				ReferenceId=@VoucherRefId,
				FinancialYear=@FinancialYearId,
				PaymentMode = @PaymentMode,
				ChkNeftRefNo = @ChkNeftRefNo,
				[Description] = @VoucherNarration
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
	
		DECLARE @TotalInvoiceAmount DECIMAL(18,2)=0.0
		DECLARE @TotalReceivedAmount DECIMAL(18,2)=0.0
		DECLARE @TotalShortageAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalMoistureAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalTDSAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalOtherAmount   DECIMAL(18,2)=0.0
		DECLARE @TotalOtherAmountRemarks   VARCHAR(5000) = ''
		DECLARE transactionCur CURSOR FOR 
		SELECT Distinct JobCostCenterId FROM #TransactionTempTable 
		OPEN transactionCur
		DECLARE @JobCostCenterId INT = NULL
		FETCH NEXT FROM transactionCur INTO @JobCostCenterId
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT 
				@ReceivedAmount = (ReceivedAmount + HandlingReceived),
				@ShortageAmount = ShortageAmount,
				@MoistureAmount = MoistureAmount,
				@TDSAmount = TDSAmount,
				@OtherAmount = OtherAmount,
				@OtherAmountRemark = OtherAmountRemark
			FROM #TransactionTempTable
			WHERE JobCostCenterId = @JobCostCenterId
			SET @TotalReceivedAmount = @TotalReceivedAmount + @ReceivedAmount
			SET @TotalInvoiceAmount = @TotalInvoiceAmount + @ReceivedAmount + @ShortageAmount + @MoistureAmount + @TDSAmount + @OtherAmount
			IF @ShortageAmount <> 0.0
			BEGIN
				IF @ShortageCostCenter = @TempDefaultJobCostCenterId
					SET @ShortageCostCenter = @JobCostCenterId
				IF @ShortageCostCenter IS NULL
					SET @TotalShortageAmount = @TotalShortageAmount + @ShortageAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@ShortageLedger.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@ShortageLedger,@ShortageCostCenter,2, @ShortageAmount)
				END
			END
			IF @MoistureAmount <> 0.0
			BEGIN
				IF @MoistureCostCenter = @TempDefaultJobCostCenterId
					SET @MoistureCostCenter = @JobCostCenterId
				IF @MoistureCostCenter IS NULL
					SET @TotalMoistureAmount = @TotalMoistureAmount + @MoistureAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@Moisture.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@MoistureLedger,@MoistureCostCenter,2, @MoistureAmount)
				END
			END
			IF @TDSAmount <> 0.0
			BEGIN
				IF @TDSCostCenter = @TempDefaultJobCostCenterId
					SET @TDSCostCenter = @JobCostCenterId
				IF @TDSCostCenter IS NULL
					SET @TotalTDSAmount = @TotalTDSAmount + @TDSAmount
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@TDS.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
					VALUES
						(@VoucherId,@TDSLedger,@TDSCostCenter,2, @TDSAmount)
				END
			END
		
			IF @OtherAmount <> 0.0
			BEGIN
				IF @OtherCostCenter = @TempDefaultJobCostCenterId
					SET @OtherCostCenter = @JobCostCenterId
				IF @OtherCostCenter IS NULL
				BEGIN
					SET @TotalOtherAmount = @TotalOtherAmount + @OtherAmount
					SET @TotalOtherAmountRemarks = @TotalOtherAmountRemarks + '' + @OtherAmountRemark
				END
				ELSE
				BEGIN
					SET @EexecutionMessage = @EexecutionMessage + '@OtherLedger.'
					INSERT INTO Accounts_VoucherTransaction
						(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration)
					VALUES
						(@VoucherId,@OtherLedger,@OtherCostCenter,2, @OtherAmount, @OtherAmountRemark)
				END
			END	
		FETCH NEXT FROM transactionCur INTO @JobCostCenterId
		END
		CLOSE transactionCur
		DEALLOCATE transactionCur
		SET @EexecutionMessage = @EexecutionMessage + '@ClientLedger.'
		DECLARE @OnAcc DECIMAL(18,2)=0
		SELECT @OnAcc=IsNULL(SUM(Amount),0) from Accounts_OnAccPayment O INNER JOIN _InvoiceBulkPaymentOnAcc B ON B.OnAccId=O.Id
			WHERE B.BulkPaymentId=@BulkInvoiceId
		SET @TotalInvoiceAmount=@TotalInvoiceAmount-@OnAcc
		IF @TotalInvoiceAmount <> 0.0
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@ClientLedger,NULL,1, @TotalInvoiceAmount)
		IF @TotalShortageAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@ShortageLedger1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@ShortageLedger,@ShortageCostCenter,2, @TotalShortageAmount)
		END
		IF @TotalMoistureAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@Moisture1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@MoistureLedger,@MoistureCostCenter,2, @TotalMoistureAmount)
		END
		IF @TotalTDSAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@TDS1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@TDSLedger,@TDSCostCenter,2, @TotalTDSAmount)
		END
		IF @TotalOtherAmount <> 0.0
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@OtherLedger1.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount, Narration)
			VALUES
				(@VoucherId,@OtherLedger,@OtherCostCenter,2, @TotalOtherAmount, @TotalOtherAmountRemarks)
		END 
		SET @EexecutionMessage = @EexecutionMessage + '@ReceivedLedger.'
		--SET @TotalReceivedAmount=@TotalReceivedAmount-@OnAcc
		SELECT @TotalReceivedAmount=ReceivedAmount FROM _InvoiceBulkPayment WHERE Id=@BulkInvoiceId
		
		IF @TotalReceivedAmount <> 0.0
		BEGIN
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@ReceivedLedger,NULL,2, @TotalReceivedAmount)
		END
		ELSE 
		BEGIN
			UPDATE Accounts_Vouchers SET VoucherType=4 WHERE Id=@VoucherId
			UPDATE Accounts_Vouchers
				SET VTypeNo  = 
					(
					SELECT (ISNULL(MAX(VTypeNo),0))+ 1 FROM Accounts_Vouchers
					WHERE Accounts_Vouchers.VoucherType = 4 and FinancialYear = @FinancialYearId
					)
				WHERE Id = @VoucherId
		END
		IF @InvoicePaymentId IS NOT NULL
			UPDATE _InvoicePayment SET VoucherId = @VoucherId Where Id = @InvoicePaymentId
		ELSE IF @BulkInvoiceId IS NOT NULL
			UPDATE _InvoiceBulkPayment SET VoucherId = @VoucherId Where Id = @BulkInvoiceId
		
		Exec [Acounting_ValidateVoucher] @Voucherid	
		SET @EexecutionMessage = ''
		if @trancount = 0
			commit;
		END TRY
	 begin catch
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction [InvoicePaymentVoucher];
			raiserror ('Validation Error: %s %s', 16, 1, @EexecutionMessage, @message) ;
	end catch
END
END


















GO
/****** Object:  StoredProcedure [dbo].[_CreateInvoiceVoucher]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_CreateInvoiceVoucher] (@InvoiceId INT)
AS
BEGIN
DECLARE @trancount int;
DECLARE @FinancialYearId INT = NULL
DECLARE @JobCostCenterId INT=NULL
DECLARE @ClientLedger INT=NULL
DECLARE @ClientDebitAmount DECIMAL(18,2)=NULL
DECLARE @FreightIncomeLedger INT=NULL
DECLARE @FreightIncomeCostCenter INT=NULL
DECLARE @FreightIncomeAmount DECIMAL(18,2)=NULL
DECLARE @InvoiceNo VARCHAR(500)=NULL
DECLARE @InvoiceDate DATE=NULL
DECLARE @AddTaxs BIT = 0
DECLARE @JobId INT=NULL
DECLARE @InsertById INT=NULL
DECLARE @UserBranchId INT=NULL
DECLARE @VoucherStatus INT = NULL
DECLARE @IsHandlingInvoice INT = 0
DECLARE @HandlingAmount Decimal(18,2) = 0.0
DECLARE @HandlingTaxs Decimal(18,2) = 0.0
DECLARE @FreightHandlingLedger INT=NULL
DECLARE @FreightHandlingCostCenter INT=NULL
SET @trancount = @@trancount;
SELECT 
	@InvoiceNo = InvoiceNo,
	@JobId = JobId, 
	@InvoiceDate = _Invoice.InvoiceDate,
	@InsertById = (CASE WHEN _Invoice.UpdateUserId IS NULL THEN _Invoice.InsertUserId ELSE _Invoice.UpdateUserId END),
	@UserBranchId = U.BranchId,
	@AddTaxs = _Invoice.AddTaxInAmount,
	@FreightIncomeAmount = (vw_InvoiceAmount.InvoiceAmount),
	@JobCostCenterId = CostCenterId,
	@ClientLedger = Common_Client.LedgerId,
	@IsHandlingInvoice = IsHandlingInvoice,
	@HandlingAmount = IsNull(vw_InvoiceAmount.HandlingAmount, 0.0)
FROM _Invoice 
LEFT JOIN vw_InvoiceAmount On vw_InvoiceAmount.Id = _Invoice.Id
LEFT JOIN JobDetails On JobDetails.ClientId = _Invoice.ClientId
LEFT JOIN Common_Client On Common_Client.Id = JobDetails.ClientId
LEFT JOIN Users U On U.Id = _Invoice.InsertUserId
WHERE _Invoice.Id = @InvoiceId
SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE @InvoiceDate Between StartDate And EndDate;
SELECT @VoucherStatus = DefaultStatus FROM Accounts_AutoVoucherAction WHERE ActionType = 'INVOICESUBMISSTION'
SELECT 
	@FreightIncomeLedger = LedgerId, 
	@FreightIncomeCostCenter = 
		(Case When CostCenterOption = 0 Then Null	
			  When CostCenterOption = 1 Then @JobCostCenterId	
			  When CostCenterOption = 2 Then CostCenterId 
		 End)
From SYSTEMLEDGER Where [Description] = 'FREIGHT TRANSPORT INCOME'
IF @FreightIncomeLedger IS NULL
	THROW 50000, 'Ledger is not defined for System Ledger - FREIGHT TRANSPORT INCOME', 1
IF @FreightIncomeAmount  IS NULL OR @FreightIncomeAmount = 0
	THROW 50000, 'Invoice amount is not found.', 1
BEGIN
	DECLARE @VoucherId INT = 0
	DECLARE @VoucherType INT = 5 -- Sale Voucher
	DECLARE @VoucherRefType INT = 4 -- Invoice
	DECLARE @InvoiceTaxes DECIMAL(18,2)= 0.0
	DECLARE @EexecutionMessage VARCHAR(5000) = ''
	BEGIN TRY
		IF @trancount = 0
				BEGIN TRANSACTION
			ELSE
				SAVE TRANSACTION [_CreateInvoiceVoucher]; 
		SELECT @VoucherId = Id 
		FROM [Accounts_Vouchers] 
		WHERE VoucherType = @VoucherType And RefType = @VoucherRefType And ReferenceId = @InvoiceId
		IF(@VoucherId=0)
		BEGIN
			INSERT INTO [Accounts_Vouchers]
				(VoucherName
				,VoucherDate
				,VoucherType
				,[Status]
				,InsertUserId
				,InsertDate
				,[Description]
				,BranchId
				,FinancialYear
				,RefType
				,ReferenceNo
				,ReferenceId)
			VALUES
				(NULL,
				@InvoiceDate,
				@VoucherType,
				@VoucherStatus, -- Submitted 
				@InsertById,
				GETDATE(),
				NULL,
				@UserBranchId,
				@FinancialYearId,
				@VoucherRefType, 
				@InvoiceNo,
				@InvoiceId)
			SET @VoucherId=SCOPE_IDENTITY()
		END
		ELSE
		BEGIN
			UPDATE Accounts_Vouchers SET 
				VoucherDate=@InvoiceDate,
				VoucherType=@VoucherType,
				UpdateUserId=@InsertById,
				UpdateDate=GETDATE(),
				[Status] = @VoucherStatus,
				ReferenceNo = @InvoiceNo,
				FinancialYear=@FinancialYearId
			WHERE Id = @VoucherId
		END
		
		DELETE FROM Accounts_VoucherTransaction WHERE [VoucherId]=@VoucherId
		SET @EexecutionMessage = @EexecutionMessage + '@FreightIncomeLedger.'
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@FreightIncomeLedger,@FreightIncomeCostCenter,1, @FreightIncomeAmount)
		IF @AddTaxs = 1 -- Add taxes in client amount becasue he will pay tax also
		BEGIN
			SET @EexecutionMessage = @EexecutionMessage + '@Add Taxs Ledger.'
			SELECT @InvoiceTaxes = SUM(TaxAmount) FROM [vw_InvoiceTaxDetails] WHERE InvoiceId = @InvoiceId
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			SELECT @VoucherId, LedgerId, NULL, 1, TaxAmount
			FROM [vw_InvoiceTaxDetails]
			WHERE InvoiceId = @InvoiceId
		END
		IF @IsHandlingInvoice = 1
		BEGIN
			SELECT 
				@FreightHandlingLedger = LedgerId, 
				@FreightHandlingCostCenter = 
					(Case When CostCenterOption = 0 Then Null	
						  When CostCenterOption = 1 Then @JobCostCenterId	
						  When CostCenterOption = 2 Then CostCenterId 
					 End)
			From SYSTEMLEDGER Where [Description] = 'FREIGHT TRANSPORT HANLDING INCOME'
			IF @FreightHandlingLedger IS NULL
				THROW 50000, 'Ledger is not defined for System Ledger - FREIGHT TRANSPORT HANLDING INCOME', 1
			IF @HandlingAmount  IS NULL OR @HandlingAmount = 0
				THROW 50000, 'Handling amount is not found.', 1
			
			SET @EexecutionMessage = @EexecutionMessage + '@FreightHandlingLedger.'
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			VALUES
				(@VoucherId,@FreightHandlingLedger,@FreightHandlingCostCenter,1, @HandlingAmount)
			SELECT @HandlingTaxs = SUM(TaxAmount) FROM [vw_InvoiceTaxHandlingDetails] WHERE InvoiceId = @InvoiceId
			INSERT INTO Accounts_VoucherTransaction
				(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
			SELECT @VoucherId, LedgerId, NULL, 1, TaxAmount
			FROM [vw_InvoiceTaxHandlingDetails]
			WHERE InvoiceId = @InvoiceId
		END
		SET @ClientDebitAmount = @FreightIncomeAmount + @InvoiceTaxes + @HandlingAmount + @HandlingTaxs
		SET @EexecutionMessage = @EexecutionMessage + '@ClientLedger.'
		INSERT INTO Accounts_VoucherTransaction
			(VoucherId, LedgerId,CostCenter,TransactionType,Amount)
		VALUES
			(@VoucherId,@ClientLedger,NULL,2, @ClientDebitAmount)
		
		Update _Invoice Set VoucherId = @VoucherId
		, SubmisstionDate=(CASE WHEN SubmisstionDate IS NULL THEN InvoiceDate ELSE SubmisstionDate END) Where Id = @InvoiceId
		SET @EexecutionMessage = ''
		Exec [Acounting_ValidateVoucher] @Voucherid	
		if @trancount = 0
			commit;
		END TRY
	 begin catch
			declare @error int, @message varchar(4000), @xstate int;
			select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
			if @xstate = -1
				rollback;
			if @xstate = 1 and @trancount = 0
				rollback
			if @xstate = 1 and @trancount > 0
				rollback transaction [_CreateInvoiceVoucher];
			raiserror ('[_CreateInvoiceVoucher]: %s %d: %s', 16, 1, @EexecutionMessage, @error, @message) ;
	end catch
END
END

GO
/****** Object:  StoredProcedure [dbo].[_CreateJobDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_CreateJobDetails] (@JobId INT)
AS
BEGIN
INSERT INTO [dbo]._JobFrieghtAssRules
           ([JobId]
           ,[DateFrom]
           ,[DateTo]
           ,[FreightRate]
           ,[Remarks]
           ,[InsertUserId]
           ,[InsertDate])
SELECT J.Id as JobId, J.StartDate, null, FR.MaxAssociationRate, null, J.InsertUserId, GETDATE() From _Job J
Inner Join _WorkOrderItems WI On WI.Id = J.WOSectorId
Inner Join _FreightSectorRules FR On FR.LoadingPoint = WI.LoadingPoint AND FR.UnloadingPoint = WI.UnLoadingPoint
Where J.Id = @JobId
INSERT INTO [dbo]._JobFreightMktRules
           ([JobId]
           ,[DateFrom]
           ,[DateTo]
           ,[FreightRate]
           ,[Remarks]
           ,[InsertUserId]
           ,[InsertDate])
SELECT J.Id as JobId, J.StartDate, null, FR.MaxMarketRate, null, J.InsertUserId, GETDATE() From _Job J
Inner Join _WorkOrderItems WI On WI.Id = J.WOSectorId
Inner Join _FreightSectorRules FR On FR.LoadingPoint = WI.LoadingPoint AND FR.UnloadingPoint = WI.UnLoadingPoint
Where J.Id = @JobId
INSERT INTO [dbo].[_JobPaymentRule]
           ([JobId]
           ,[Tyre]
           ,[TollGate]
           ,[MktChallanDeduction]
           ,[AssChallanDeduction]
           ,[Remarks]
           ,[InsertUserId]
           ,[InsertDate])
SELECT J.Id as JobId, FT.Tyres, TR.MaxTollGate, TR.MinChallanDeduction, TR.MinChallanDeduction, null,  J.InsertUserId, GETDATE() From _Job J
Inner Join _WorkOrderItems WI On WI.Id = J.WOSectorId
Inner Join _FreightSectorRules FR On FR.LoadingPoint = WI.LoadingPoint AND FR.UnloadingPoint = WI.UnLoadingPoint
Inner Join _FreightSectorTyre FT On FT.SectorId = FR.Id
Inner Join _FrieghtTyreRules TR On TR.SectorTyreId = FT.Id
Where J.Id = @JobId
INSERT INTO [dbo].[_JobShortageRule]
           ([JobId]
           ,[Tyre]
           ,[LoadType]
           ,[ClientLimit]
           ,[ClientUnit]
           ,[ClientDeductionType]
           ,[ClientPaneltyRate]
           ,[AssLimit]
           ,[AssUnit]
           ,[AssDeductionType]
           ,[AssPaneltyRate]
           ,[MktLimit]
           ,[MktUnit]
           ,[MktDeductionType]
           ,[MktPaneltyRate]
           ,[InsertUserId]
           ,[InsertDate])
SELECT J.Id as JobId
      ,SR.[Tyre]
      ,SR.[LoadType]
      ,SR.[ClientLimit]
      ,SR.[ClientUnit]
      ,SR.[ClientDeductionType]
      ,SR.[ClientPaneltyRate]
      ,SR.[AssLimit]
      ,SR.[AssUnit]
      ,SR.[AssDeductionType]
      ,SR.[AssPaneltyRate]
      ,SR.[MktLimit]
      ,SR.[MktUnit]
      ,SR.[MktDeductionType]
      ,SR.[MktPaneltyRate]
      ,J.[InsertUserId]
      ,J.[InsertDate]
From _Job J
Inner Join _WorkOrderItems WI On WI.Id = J.WOSectorId
Inner Join _WOShortageRules SR On SR.SectorId = WI.Id 
Where J.Id = @JobId
END

GO
/****** Object:  StoredProcedure [dbo].[_CreateMultipleTokens]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--SELECT PartyId, ReceivedOn, PaymentMode, TDSDeclaration, InsertDate, InsertUserId, TokenBranchId, BCode, MCode, PCode
--		, FY, Amount, TokenStatus, RecordBranchId, RecordFYId  FROM _Token where Tokenno='CTC/O/65/464/18-19'
--
--exec _CreateMultipleTokens @TokenId=57
CREATE PROCEDURE [dbo].[_CreateMultipleTokens](@TokenId INT)
AS
BEGIN
DECLARE @PartyId INT
DECLARE @TokenPartyId INT
DECLARE @PaidAmount DECIMAL(18,2)

SELECT @TokenPartyId=PartyId FROM _Token WHERE Id=@TokenId

SELECT L.OwnerId PartyId, ReceivedOn, T.PaymentMode, T.TDSDeclaration, T.InsertDate, T.InsertUserId, TokenBranchId, BCode, MCode, PCode
	, FY, SUM(PaidAmount) PaidAmount, TokenStatus, T.RecordBranchId, T.RecordFYId  INTO #TempToken FROM _Token T
	INNER JOIN _TokenChallans TC ON TC.TokenId=T.Id
	INNER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
	INNER JOIN Payment P ON P.LoadingId=L.Id
	WHERE T.Id=@TokenId
	GROUP BY L.OwnerId, ReceivedOn, T.PaymentMode, T.TDSDeclaration, T.InsertDate, T.InsertUserId, TokenBranchId, BCode, MCode, PCode
	, FY, TokenStatus, T.RecordBranchId, T.RecordFYId

DECLARE @SubTokenId INT=NULL	
DECLARE db_cursor CURSOR FOR 
	SELECT PartyId, PaidAmount FROM #TempToken

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @PartyId, @PaidAmount

WHILE @@FETCH_STATUS = 0  
BEGIN  
	IF @TokenPartyId<>@PartyId
	BEGIN
      INSERT INTO _Token(PartyId, ReceivedOn, PaymentMode, TDSDeclaration, InsertDate, InsertUserId, TokenBranchId, BCode, MCode, PCode
		, FY, Amount, TokenStatus, RecordBranchId, RecordFYId)
		SELECT PartyId, ReceivedOn, PaymentMode, TDSDeclaration, InsertDate, InsertUserId, TokenBranchId, BCode, MCode, PCode
		, FY, PaidAmount, TokenStatus, RecordBranchId, RecordFYId FROM #TempToken WHERE PartyId=@PartyId

		SET @SubTokenId = @@IDENTITY

		INSERT INTO _TokenApprovals(TokenId, ActionBy, ActionDate, Status)
			SELECT @SubTokenId, InsertUserId, InsertDate, TokenStatus FROM #TempToken WHERE PartyId=@PartyId
	END
	ELSE
	BEGIN
		SET @SubTokenId = @TokenId
	END

	SELECT @PaidAmount=SUM(PaidAmount) FROM _Token T
			INNER JOIN _TokenChallans TC ON TC.TokenId=T.Id
			INNER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
			INNER JOIN Payment P ON P.LoadingId=L.Id
			WHERE T.id=@SubTokenId AND L.OwnerId=@PartyId
			GROUP BY L.OwnerId

		
		UPDATE Payment SET PaidToId=@PartyId 
			WHERE LoadingId IN (SELECT L.Id FROM _TokenChallans TC 
								INNER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
									WHERE L.OwnerId=@PartyId AND TokenId=@TokenId)

		UPDATE _TokenChallans SET TokenId=@SubTokenId
			WHERE ChallanNo IN (SELECT TC.ChallanNo FROM _TokenChallans TC 
								INNER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
									WHERE L.OwnerId=@PartyId AND TokenId=@TokenId)
	
	UPDATE _Token SET Amount=@PaidAmount	WHERE Id=@SubTokenId


    FETCH NEXT FROM db_cursor INTO  @PartyId, @PaidAmount
END 

CLOSE db_cursor  
DEALLOCATE db_cursor 

END
GO
/****** Object:  StoredProcedure [dbo].[_CurrentInvoiceReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- drop table #FinalDues
-- exec [_CurrentInvoiceReport] @StartDate='2017-04-01', @EndDate='2018-03-31', @ClientId=9414
CREATE Procedure [dbo].[_CurrentInvoiceReport] 
AS
Begin
	DECLARE @StartDate Date = NUll
	DECLARE @EndDate Date = NULL
	DECLARE @BranchId INT = NULL
	DECLARE @ClientId INT = NULL
	Declare @FyId INT
	Select @FyId = Id, @StartDate=StartDate, @EndDate=EndDate From Accounts_FinancialYear with (nolock) Where GETDATE() BETWEEN  StartDate And EndDate
	
	/*Select 
		p.InvoiceId
		,SUM(p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) InvTotalReceived
		 INTO #Received
	from _InvoicePayment p
	 WHERE RealizationOn >= convert(date,@StartDate,102) AND RealizationOn <=  convert(date,@EndDate,102)
	Group By InvoiceId
	*/
	SELECT * INTO #Received FROM (
		Select 
		v.ClientId
		, sum(case when InvoiceDate<@StartDate then (p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) else 0 end) SettleAmount
		--, sum(case when InvoiceDate>=@StartDate then SUM(p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) else 0 end) CurrentReceived
		--, sum(case when InvoiceDate>=@StartDate then (v.TotalInvoiceAmount+isnull(v.TaxAmount,0)- isnull(p.TotalAmountReceived,0)) else 0 end) DueAmount
		FROM _InvoicePayment p
		left outer join vw_InvoiceDetails v on p.InvoiceId=v.InvoiceId
		where  RealizationOn>=@StartDate  group by v.ClientId ) XX

	SELECT C.Id ClientId, isNull((Case When OpeningTransactionType = 1 Then -OpeningBalance Else OpeningBalance End)-IsNULL(S.SettleAmount,0),0) OpeningBalance INTO #Opening 
		FROM Common_Client C INNER JOIN Accounts_LedgerBalance L ON L.LedgerId=C.LedgerId
		LEFT OUTER JOIN #Received S ON S.ClientId=C.Id
		WHERE L.[Year]=@FyId and OpeningBalance<>0 
		
	Select AC.ClientId, SUM(Amount) as ODOnAccAmount,  
		SUM(CASE WHEN V.VoucherDate >= @StartDate then Amount else 0 end) as OnAccAmount Into #OnAcc 
		From [Accounts_OnAccPayment] AC 
		Inner Join Accounts_Vouchers V On V.Id = AC.VoucherId
		Left Join Common_Client C On C.Id = AC.ClientId
	--Where V.VoucherDate >= @StartDate And V.[Status] in(2,4)
		Where V.VoucherDate >= CONVERT(DATE,'2016-04-01',102) And V.[Status] in(2,4)
	AND AC.Id Not in (Select OnAccId From _InvoiceBulkPaymentOnAcc)
	GROUP BY AC.ClientId
	
	SELECT * INTO #Overdue FROM (
		Select 
		p.InvoiceId, p.ClientId , p.ClientName PartyName, p.InvoiceBranchId ExecutingBranchId, p.InvoiceBranchName BranchName
		, p.TotalInvoiceAmount+isnull(p.TaxAmount,0)- isnull(p.TotalAmountReceived,0) OverDueAmount
		, case when p.InvoiceDate>=@StartDate then (p.TotalInvoiceAmount+isnull(p.TaxAmount,0)- isnull(p.TotalAmountReceived,0)) else 0 end DueAmount
		,(CASE WHEN ((p.TotalInvoiceAmount+isnull(p.TaxAmount,0)- isnull(p.TotalAmountReceived,0))>1) THEN DATEDIFF(day, p.InvoiceDate, GETDATE()) ELSE 0 END) as Age
		from vw_InvoiceDetails p where invoicedate>=CONVERT(DATE,'2016-04-01',102)) XX WHERE XX.Age>0 
		
	
	SELECT ClientId, ExecutingBranchId, PartyName, BranchName
		, 0 Amount
		,Sum(Case When IsNull(O.Age,0) > 30 Then O.OverDueAmount Else 0 End) as OverDueAmount
		,Sum(O.DueAmount) as PendingAmount
		,MAX(Case When O.DueAmount > 0 Then O.Age Else 0 End)  as TotalPendingAge
		,COUNT(Case When IsNull(O.DueAmount,0) >0 then 1 else 0 end) as TotalPendingInvoiceCount
		,MAX(Case When O.Age > 30 Then O.Age Else 0 End)  as TotalOverdueAge
		,COUNT(Case When IsNull(O.Age,0) > 30 then 1 else 0 end) as TotalOverdueInvoiceCount 
		,Count(ClientId) as TotalInvoice,0  as Received,0 as CheckReceived, 0 as ShortageDeduction,0 as TDSDeduction ,0 as OtherDeduction
		INTO #FinalDues
	FROM #Overdue O
	GROUP BY ClientId, ExecutingBranchId, PartyName, BranchName
	--select * from #FinalDues where clientid=6347
	
	Select IsNull(Sum(IsNull(CP.ClientRate*CP.NetWT,0)),0.0) UnbilledAmount, CP.JobClientId, CP.InvoiceBranchId INTO #Unbilled From vw_InvoiceChallanPending CP 
			Where CP.LoadingId IS NOT NULL GROUP BY JobClientId, InvoiceBranchId

	SELECT ClientId INTO #AllClients FROM
		( SELECT ClientId FROM #FinalDues 
			UNION 
			SELECT ClientId FROM #Opening
			UNION 
			SELECT JobClientId FROM #Unbilled 
		  ) XX
	--drop table ci
	SELECT * FROM (
	Select 
		 XX.ClientId 
		,XX.ExecutingBranchId
		,XX.PartyName
		,XX.BranchName 
		,isnull(O.OpeningBalance,0) as OpeningBalance
		,isnull(A.OnAccAmount,0) OnAccAmount
		, isnull(XX.OverDueAmount,0) OD
		,isnull(ODOnAccAmount,0) ODOnCC
		,(IsNull(XX.OverDueAmount,0)-IsNull(ODOnAccAmount,0)) Org
		,0 as TotalInvoice            
		,(case when ((IsNull(XX.PendingAmount,0)+IsNull(O.OpeningBalance,0)-IsNull(OnAccAmount,0))>0) THEN XX.TotalPendingInvoiceCount else 0 end) as TotalPendingInvoiceCount 
		,(case when ((IsNull(XX.PendingAmount,0)+IsNull(O.OpeningBalance,0)-IsNull(OnAccAmount,0))>0) THEN XX.TotalPendingAge else 0 end) as TotalPendingAge 
		,(case when ((IsNull(XX.OverDueAmount,0)-IsNull(ODOnAccAmount,0))>0) THEN XX.TotalOverdueInvoiceCount else 0 end) as TotalOverdueInvoiceCount 
		,(case when ((IsNull(XX.OverDueAmount,0)-IsNull(ODOnAccAmount,0))>0) THEN XX.TotalOverdueAge else 0 end) as TotalOverdueAge 
		,IsNull(XX.PendingAmount,0) as PendingAmount
		--, IsNull(XX.PendingAmount,0)+IsNull(O.OpeningBalance,0)-IsNull(OnAccAmount,0) as PendingAmount
		, Amount                
		,(case when (IsNull(XX.OverDueAmount,0)-IsNull(ODOnAccAmount,0)>0) THEN (IsNull(XX.OverDueAmount,0)-IsNull(ODOnAccAmount,0)) else 0 end) as OverDueAmount 
		,Received,CheckReceived ,ShortageDeduction ,TDSDeduction ,OtherDeduction 
		, isnull(UnbilledAmount,0)  UnbilledAmount
			,IsNull( Email,'') Email
			
	from #FinalDues XX
	--left outer join #FinalDues F on F.ClientId=XX.ClientId
	left outer join #OnAcc A on A.ClientId=XX.ClientId
	left outer join #Opening O ON O.ClientId=XX.ClientId
	left outer join common_branch b on b.id=XX.ExecutingBranchId
	left outer join Accounts_Ledgers l on l.id=b.ledgerid
	left outer join #Unbilled u on JobClientId=XX.ClientId AND u.InvoiceBranchId=XX.ExecutingBranchId
	UNION 
	SELECT JobClientId, InvoiceBranchId, ClientName, InvoiceBranchName,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, IsNull(Sum(IsNull(CP.ClientRate*CP.NetWT,0)),0.0),IsNull( Email,'') Email 
		From vw_InvoiceChallanPending CP 
		left outer join common_branch b on b.id=CP.InvoiceBranchId
		left outer join Accounts_Ledgers l on l.id=b.ledgerid
		Where CP.LoadingId IS NOT NULL AND not exists (select 1 from #Overdue o where o.ClientId=CP.JobClientId)
	GROUP BY JobClientId, InvoiceBranchId, ClientName, InvoiceBranchName, Email
	) YY
	WHERE YY.PendingAmount>0 OR YY.UnbilledAmount>0
	ORDER BY YY.BranchName
	
	
End
GO
/****** Object:  StoredProcedure [dbo].[_CurrentInvoiceReport_inprogress]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[_CurrentInvoiceReport_inprogress] 
AS
Begin
DECLARE @StartDate Date = NUll
DECLARE @EndDate Date = NULL
Declare @FyId INT
Select @FyId = Id, @StartDate=StartDate, @EndDate=EndDate From Accounts_FinancialYear with (nolock) Where GETDATE() BETWEEN StartDate And EndDate

SELECT C.Id ClientId, C.Name ClientName, C.MaxInvoiceAge PaymentTerms, (CASE WHEN B.OpeningTransactionType=1 THEN B.OpeningBalance*(-1) ELSE B.OpeningBalance END) PreviousYearCarryForward INTO #Opening
FROM Common_Client C 
INNER JOIN Accounts_LedgerBalance B ON C.LedgerId=B.LedgerId AND B.[Year]=@FyId WHERE ABS(OpeningBalance)>0

SELECT ClientId, SUM(CurrentYearDue) CurrentYearDue, AVG(AverageAge) AverageAge, AVG(CASE WHEN OverDueAvgAge<=0 THEN 0 ELSE OverDueAvgAge END) OverDueAvgAge, SUM(Due30) Due30, SUM(Due60) Due60, SUM(Due90) Due90, SUM(TotalOverDue) TotalOverDue INTO #Current FROM (
SELECT	ClientId, 
CASE WHEN DATEDIFF(DAY, InvoiceDate, GETDATE()) BETWEEN 0 AND 30 THEN (TotalInvoiceAmount-TotalAmountReceived) ELSE 0 END Due30,
CASE WHEN DATEDIFF(DAY, InvoiceDate, GETDATE()) BETWEEN 31 AND 60 THEN (TotalInvoiceAmount-TotalAmountReceived) ELSE 0 END Due60,
CASE WHEN DATEDIFF(DAY, InvoiceDate, GETDATE()) >60 THEN (TotalInvoiceAmount-TotalAmountReceived) ELSE 0 END Due90,
CASE WHEN DATEDIFF(DAY, InvoiceDate, GETDATE()) >0 THEN (TotalInvoiceAmount-TotalAmountReceived) ELSE 0 END TotalOverDue,
(TotalInvoiceAmount-TotalAmountReceived) CurrentYearDue,
(DATEDIFF(day, invoicedate, getdate())) AverageAge,
(DATEDIFF(day, DATEADD(DAY, C.MaxInvoiceAge, CONVERT(DATE,InvoiceDate,103)), getdate())) OverDueAvgAge
from vw_InvoiceDetails V
INNER JOIN Common_Client C ON C.Id=V.ClientId
WHERE	CONVERT(DATE,InvoiceDate,102) BETWEEN CONVERT(DATE,@StartDate,102) AND CONVERT(DATE,@EndDate,102)
AND ABS(TotalInvoiceAmount-TotalAmountReceived)>1
AND V.SubmisstionDate IS NOT NULL) X
GROUP BY ClientId

SELECT ClientId, SUM(TotalOnAccSettled) TotalOnAccSettled INTO #OnAccSettled FROM(
SELECT O.ClientId, SUM(BO.ReceivedAmount+IsNull(BO.ShortageDeduction,0)+IsNull(BO.MoistureDeduction,0)+IsNull(BO.TDSAmount,0) +IsNull(BO.HandlingReceived,0)) TotalOnAccSettled FROM _InvoicePayment BO
INNER JOIN [_PaymentReceived] O ON BO.SettleId=O.Id
INNER JOIN Accounts_Vouchers A ON A.Id=O.VoucherId AND (CONVERT(DATE,VoucherDate,102) BETWEEN CONVERT(DATE,@StartDate,102) AND CONVERT(DATE,@EndDate,102))
GROUP BY ClientId

)X GROUP BY ClientId

SELECT ClientId, LastReceivedDate INTO #LastReceived
FROM (SELECT ClientId, PaymentDate LastReceivedDate, row_number() over(partition by ClientId order by PaymentDate desc) as rn from [_PaymentReceived]) t where t.rn = 1

SELECT ClientId, SUM(Amount) TotalOnAcc INTO #OnAcc from [_PaymentReceived] O
INNER JOIN Accounts_Vouchers A ON A.Id=O.VoucherId AND (CONVERT(DATE,VoucherDate,102) BETWEEN CONVERT(DATE,@StartDate,102) AND CONVERT(DATE,@EndDate,102))
GROUP BY ClientId


SELECT A.ClientId, A.ClientName, A.PaymentTerms, A.PreviousYearCarryForward, IsNull(B.CurrentYearDue,0) CurrentYearDue, C.LastReceivedDate, IsNull(D.TotalOnAcc,0) TotalOnAcc, IsNull(E.TotalOnAccSettled,0) TotalOnAccSettled, (IsNull(D.TotalOnAcc,0)-IsNull(E.TotalOnAccSettled,0)) UnSettled
, (A.PreviousYearCarryForward+IsNull(B.CurrentYearDue,0))-(IsNull(D.TotalOnAcc,0)-IsNull(E.TotalOnAccSettled,0)) NetDueAsOnDate
, CASE WHEN (A.PreviousYearCarryForward)-(IsNull(D.TotalOnAcc,0)-IsNull(E.TotalOnAccSettled,0)) <0 THEN 0 ELSE ((A.PreviousYearCarryForward)-(IsNull(D.TotalOnAcc,0)-IsNull(E.TotalOnAccSettled,0))) END NetDueFromPast
, /*(CASE WHEN IsNull(B.AverageAge,0)>PaymentTerms THEN B.AverageAge-PaymentTerms ELSE 0 END) */ B.AverageAge InvoiceAge,ISNull(TotalOverDue,0)TotalOverDue, ISNULL(Due30,0)Overdue30 , ISNULL(Due60,0) Overdue60,ISNull(Due90,0)Overdue90
, OverDueAvgAge
FROM #Opening A
LEFT OUTER JOIN #Current B ON B.ClientId=A.ClientId
LEFT OUTER JOIN #LastReceived C ON C.ClientId=A.ClientId
LEFT OUTER JOIN #OnAcc D ON D.ClientId=A.ClientId	
LEFT OUTER JOIN #OnAccSettled E ON E.ClientId=A.ClientId

End
GO
/****** Object:  StoredProcedure [dbo].[_CurrentJobReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_CurrentJobReport] 
(
@JobId Int=NULL,
@JobDateFrom DATE='2017-04-01',
@JobDateTo DATE=NULL,
@ClientId INT=NULL,
@LoadingPointId INT=NULL,
@UnloadingPointId INT=NULL,
@MaterialId INT=NULL,
@BranchId INT=NULL,
@RunningJob INT=NULL
)
As 
BEGIN
    SELECT TJ.Id JobId, JobNo, WO.OrderNo WORefNo, TJ.WOSectorId, CONVERT(VARCHAR(12), StartDate, 103) as StartDate, 
           CONVERT(VARCHAR(12), EndDate, 103) as EndDate, WOI.LoadingPoint LoadingPointId, LP.Loading,
           LP.Loading + '-' + UP.Unloading Sector, WOI.UnloadingPoint UnloadingPointId, UP.Unloading, 
           WOI.Material MaterialId, MP.MaterialName, TJ.Quantity, WO.ClientId, CC.Name ClientName, 
           CC1.Name Consignee, CC2.Name Consigner, CB.Name BranchName, ExecutingBranch, CR.ClientRate 
    INTO #JobDetails 
    FROM job TJ
    LEFT OUTER JOIN _WorkOrderItems WOI ON WOI.Id = TJ.WOSectorId
    LEFT OUTER JOIN _WorkOrder WO ON WO.Id = WOI.OrderId
    LEFT OUTER JOIN Common_Client CC ON WO.ClientId = CC.Id
    LEFT OUTER JOIN Common_Client CC1 ON TJ.Consignee = CC1.Id
    LEFT OUTER JOIN Common_Client CC2 ON TJ.Consigner = CC2.Id
    LEFT OUTER JOIN Common_Branch CB ON CB.Id = TJ.ExecutingBranch
    LEFT OUTER JOIN LoadingPoints LP ON LP.Id = WOI.LoadingPoint
    LEFT OUTER JOIN UnloadingPoints UP ON UP.Id = WOI.UnLoadingPoint
    LEFT OUTER JOIN Materials MP ON MP.Id = WOI.Material
    LEFT OUTER JOIN _ClientRateView CR ON CR.WOSectorId = TJ.WOSectorId
    WHERE (@JobId IS NULL OR TJ.Id = @JobId) 
      AND (@LoadingPointId IS NULL OR WOI.LoadingPoint = @LoadingPointId) 
      AND (@UnLoadingPointId IS NULL OR WOI.UnloadingPoint = @UnloadingPointId) 
      AND (@MaterialId IS NULL OR WOI.Material = @MaterialId) 
      AND (@BranchId IS NULL OR ExecutingBranch = @BranchId)
      AND (@ClientId IS NULL OR WO.ClientId = @ClientId)
      AND (@JobDateFrom IS NULL OR CONVERT(DATE, StartDate, 103) >= CONVERT(DATE, @JobDateFrom, 103))
      AND (@JobDateTo IS NULL OR CONVERT(DATE, StartDate, 103) <= CONVERT(DATE, @JobDateTo, 103))
      AND (@RunningJob IS NULL OR (CONVERT(DATE, GETDATE(), 103) BETWEEN CONVERT(DATE, StartDate, 103) AND CONVERT(DATE, EndDate, 103)))

    SELECT COUNT(LoadingId) TotalChallan, JD.JobId, ISNULL(SUM(TotalFreight), 0) TotalFreight, 
           ISNULL(SUM(Advance), 0) Advance, ISNULL(SUM(HSDCost), 0) HSDCost, ISNULL(SUM(TotalAdvance), 0) TotalAdvance, 
           ISNULL(SUM(NetWt), 0) NetWt, ISNULL(SUM(CASE WHEN PVoucherId IS NULL THEN 0 ELSE ISNULL(PaidAmount, 0) END), 0) PaidAmount, 
           ISNULL(SUM(TotalFreight - TotalAdvance), 0) NetBalance,
           ISNULL(SUM(Welfare + LC.Detention + UC.Detention + TollGate + Adjustment), 0) as Expenses,
           ISNULL(SUM(ChallanDeduction + ChallanLost + Penalty), 0) as Recoverable,
           SUM(CASE WHEN PVoucherId IS NULL THEN ISNULL(PaidAmount, 0) ELSE 0 END) ReceivedNotPaid,
           ISNULL(SUM(CASE WHEN UC.Id IS NULL THEN TotalFreight - TotalAdvance ELSE 0 END +
                       CASE WHEN UC.Id IS NOT NULL AND UnLoadingId IS NULL THEN TotalFreight - TotalAdvance ELSE 0 END +
                       CASE WHEN PVoucherId IS NULL AND UnLoadingId IS NOT NULL THEN PaidAmount ELSE 0 END), 0) AS NetPayable,
           JobNo, WORefNo, WOSectorId, StartDate, EndDate, LoadingPointId, Loading, Sector, UnloadingPointId, Unloading, 
           MaterialId, MaterialName, Quantity, ClientId, ClientName, Consignee, Consigner, BranchName, ExecutingBranch, ClientRate
    FROM #JobDetails JD
    LEFT OUTER JOIN LoadingChallan LC ON JD.JobId = LC.JobId
    LEFT OUTER JOIN UnloadingChallan UC ON UC.LoadingChallanId = LC.Id
    LEFT OUTER JOIN Payment PC ON PC.LoadingId = LC.Id
    GROUP BY JD.JobId, JobNo, WORefNo, WOSectorId, StartDate, EndDate, LoadingPointId, Loading, Sector, 
             UnloadingPointId, Unloading, MaterialId, MaterialName, Quantity, ClientId, ClientName, Consignee, 
             Consigner, BranchName, ExecutingBranch, ClientRate

END

GO
/****** Object:  StoredProcedure [dbo].[_DiscounterSummaryReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[_DiscounterSummaryReport]
@ReceivedOnFrom Date = NULL,
@ReceivedOnTo Date  = NULL,
@PaymentDateFrom Date = NULL,
@PaymentDateTo Date = NULL,
@JobId INT=NULL,
@PLoadingId INT=NULL,
@ULoadingId INT=NULL,
@PartyId INT=NULL,
@TokenStatus INT=NULL,
@MaterialName Varchar(500) = NULL,
@TokenBranchId INT=NULL,
@PaymentMode INT = NULL
AS
BEGIN
		SELECT    PCD.JobNo JobNo,PCD.ClientName ClientName,PCD.Sector Sector,PCD.ChallanNo ChallanNo,PCD.LoadDate LoadDate
				 ,PCD.UnloadedDate  UnloadedDate , PCD.NetWT NetWT,PCD.UnloadedNetWt UnloadedNetWt, PCD.EffectiveWt EffectiveWt , PCD.ShortageWt ShortageWt , PCD.TruckNumber TruckNumber 
				 ,PCD.TruckSource TruckSource , PCD.OwnerName OwnerName ,PCD.BrokerName BrokerName , PCD.AssociationName AssociationName
				 ,PCD.Freight Freight , PCD.EffectiveAmount EffectiveAmount , PCD.Advance Advance , PCD.HSD HSD , IsNull(PCD.HSDRate,0.00) HSDRate
				 ,PCD.HSDCost HSDCost ,PCD.Welfare Welfare , PCD.UnloadDetention UnloadDetention , PCD.TollGate TollGate , PCD.Adjustment Adjustment
				 ,PCD.ChallanDeduction ChallanDeduction , PCD.ChallanLost ChallanLost , IsNull(PCD.Penalty,0.0) Penalty , PCD.PaidTo PaidTo , PCD.PaymentMode PaymentMode
				 ,PCD.PaidDate PaidDate , PCD.PaidAmount PaidAmount , ISNULL(PCD.TDSAmount,0.0) TDSAmount ,PCD.Remarks PaymentRemarks , PCD.TokenNo TokenNo  
				 ,ROUND(CONVERT(DECIMAL(18,2),Freight*(CASE WHEN NetWt<UnloadedNetWt THEN NetWt ELSE UnloadedNetWt END)-(COALESCE(TotalAdvance,0)),1),0) Balance
				 ,T.PaidOn PaymentDate,Cp.PartyName PartyName
				  FROM vw_paymentchallandetails PCD
				  left outer join _TokenChallans TC ON TC.ChallanNo=PCD.ChallanNo
				  left outer join _Token T ON T.Id=TC.TokenId
				  left outer join Common_Parties Cp ON Cp.Id=T.DiscounterId WHERE 1=1 
				  AND (@ReceivedOnFrom IS NULL OR ReceivedOn >= @ReceivedOnFrom)
				  AND (@ReceivedOnTo IS NULL OR ReceivedOn <= @ReceivedOnTo)
				  AND (@PaymentDateFrom IS NULL OR CONVERT(DATE,T.PaidOn,102) <= @PaymentDateFrom)
				  AND (@PaymentDateTo IS NULL OR CONVERT(DATE,T.PaidOn,102) <= @PaymentDateTo)
				  AND (@JobId IS NULL OR PCD.JobId = @JobId)
				  AND (@PartyId IS NULL OR T.DiscounterId = @PartyId)
				  AND (@PLoadingId IS NULL OR PCD.PLoadingID = @PLoadingId)
				  AND (@ULoadingId IS NULL OR PCD.PUnloadingID = @ULoadingId)
				  AND (@TokenStatus IS NULL OR (CASE WHEN T.VoucherId IS NULL THEN 0 ELSE 1 END) = @TokenStatus)
				  AND (@MaterialName IS NULL OR PCD.MaterialName = @MaterialName)
				  AND (@JobId IS NULL OR PCD.JobId = @JobId)
				  AND (@TokenBranchId IS NULL OR T.TokenBranchId = @TokenBranchId)
END
GO
/****** Object:  StoredProcedure [dbo].[_GetApprovals]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_GetApprovals] 
(@ModuleId INT,
 @RowId	INT)
As
BEGIN
	DECLARE @CurrentStatus INT
	IF @ModuleId = 1
	BEGIN
		SELECT @CurrentStatus = [Status] FROM _AdvanceApprovals Where Id = (Select Max(Id) From _AdvanceApprovals Where AdvanceId = @RowId)
		SELECT 
			 A.Id
			,A.[Status]
			,IsNull(U.DisplayName, ISNULL(U.Name, U.UserName)) as UserName
			,ActionDate
			,Remarks 
		FROM _AdvanceApprovals A
		INNER JOIN (
		SELECT [Status], Max(Id) as mId FROM _AdvanceApprovals WHERE AdvanceId = @RowId AND [Status] <= @CurrentStatus 
		GROUP BY [Status]) XX ON XX.mId = A.Id
		LEFT JOIN Users U ON U.Id = A.ActionBy
	END
	ELSE IF @ModuleId = 2
	BEGIN
		SELECT @CurrentStatus = [Status] FROM _WOApprovals Where Id = (Select Max(Id) From _WOApprovals Where WOId = @RowId)
		SELECT 
			 A.Id
			,A.[Status]
			,IsNull(U.DisplayName, ISNULL(U.Name, U.UserName)) as UserName
			,ActionDate
			,Remarks 
		FROM _WOApprovals A
		INNER JOIN (
		SELECT [Status], Max(Id) as mId FROM _WOApprovals WHERE WOId = @RowId AND [Status] <= @CurrentStatus 
		GROUP BY [Status]) XX ON XX.mId = A.Id
		LEFT JOIN Users U ON U.Id = A.ActionBy
	END
	ELSE IF @ModuleId = 3
	BEGIN
		SELECT @CurrentStatus = [Status] FROM _TokenApprovals Where Id = (Select Max(Id) From _TokenApprovals Where TokenId = @RowId)
		IF NOT EXISTS (SELECT 1 FROM _Token with (nolock) Where Id=@RowId AND TokenStatus=@CurrentStatus)
			UPDATE _Token SET  TokenStatus=@CurrentStatus Where Id=@RowId
		SELECT 
			 A.Id
			,A.[Status]
			,IsNull(U.DisplayName, ISNULL(U.Name, U.UserName)) as UserName
			,ActionDate
			,Remarks 
		FROM _TokenApprovals A
		INNER JOIN (
		SELECT [Status], Max(Id) as mId FROM _TokenApprovals WHERE TokenId = @RowId AND [Status] <= @CurrentStatus 
		GROUP BY [Status]) XX ON XX.mId = A.Id
		LEFT JOIN Users U ON U.Id = A.ActionBy
	END
	ELSE IF @ModuleId = 4
	BEGIN
		SELECT @CurrentStatus = [Status] FROM _JobApprovals Where Id = (Select Max(Id) From _JobApprovals Where JobId = @RowId)
		SELECT 
			 A.Id
			,A.[Status]
			,IsNull(U.DisplayName, ISNULL(U.Name, U.UserName)) as UserName
			,ActionDate
			,Remarks 
		FROM _JobApprovals A
		INNER JOIN (
		SELECT [Status], Max(Id) as mId FROM _JobApprovals WHERE JobId = @RowId AND [Status] <= @CurrentStatus 
		GROUP BY [Status]) XX ON XX.mId = A.Id
		LEFT JOIN Users U ON U.Id = A.ActionBy
	END
END
GO
/****** Object:  StoredProcedure [dbo].[_GetShortageChallans]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_GetShortageChallans](@TokenId INT)
AS
BEGIN
	
	DECLARE @PartyId INT
	Select @PartyId=PartyId From _Token Where Id = @TokenId
	Select Top 50 ChallanNo, NegativePayable, LOwnerId, OwnerPAN, OwnerName From (
	Select Dbo.[FN_GetNetPaybleForChallan](ChallanNO) as NegativePayable, * 
	From vw_paymentchallwithpending 
	where 1=1
	AND TokenId=@TokenId
	--And Convert(Date, LoadDate, 103)  >= '2016-04-01' 
	And TokenVoucher IS NULL AND PaymentVoucherId IS NULL And TokenNo Is NULL
	--And 
	--(LOwnerId =@PartyId 
	--OR TruckNumber In (Select TruckNumber From vw_LoadingChallan vt, _TokenChallans tt Where vt.ChallanNo=tt.ChallanNo AND tt.TokenId = @TokenId))
	) XX
	Where NegativePayable < 0 order by NegativePayable asc
END

GO
/****** Object:  StoredProcedure [dbo].[_GlobalValidation]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [dbo].[_GlobalValidation] (@InvoiceId INT)
	AS
	BEGIN
	DECLARE @VoucherId INT
	DECLARE @VoucherStatus INT
	SELECT @VoucherId = VoucherId FROM _Invoice WHERE Id = @InvoiceId
	SELECT @VoucherStatus = [Status] FROM Accounts_Vouchers WHERE Id = @VoucherId 
	/*  Voucher Status 5 means Reject or status 4 Approve or status 2 submit */
	IF( @VoucherStatus != 5 )
		THROW 50000, 'Please contact billing Accountant !!!' , 1  
END


GO
/****** Object:  StoredProcedure [dbo].[_InsertChallanReceived]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_InsertChallanReceived]
	@ReceivingId INT,
	@ChallanList VARCHAR(MAX)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @ChallanList
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @Check INT = 0
	SELECT * INTO #temp_ReceivedChallan FROM (
	SELECT	@ReceivingId as ReceivingId,  
			Split.a.value('.', 'VARCHAR(100)') AS ChallanNo
	FROM	
		(
			SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanList, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS Challan  
		) AS A CROSS APPLY Challan.nodes ('/M') AS Split(a)
	) XX
	SELECT @Check=COUNT(ISNULL(L.ChallanNo,0)) FROM #temp_ReceivedChallan RC
	LEFT OUTER JOIN
	LoadingChallan L ON L.ChallanNo =RC.ChallanNo 
	IF(@Check=0)
		THROW 50000, 'Wrong Challan Number OR This challan loading is not done ', 1
	INSERT INTO _ChallanReceivedDetails (ReceivingId, ChallanNo) SELECT ReceivingId,ChallanNo  FROM #temp_ReceivedChallan
END

GO
/****** Object:  StoredProcedure [dbo].[_InsertInvoiceChallan]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_InsertInvoiceChallan]
	@InvoiceId INT,
	@ChallanList VARCHAR(MAX),
	@OnlyValidate INT
AS


DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @ChallanList
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
-- Do not add begin and end transaction becasue this SP already execute in transaction inside Invoice Repository
	DECLARE @JobCount INT = 0
	DECLARE @InvoiceDate DATE =  NULL
	DECLARE @InvalidChallans INT = 0
	DECLARE @InvoiceSubmissionDate DATE = NULL
	DECLARE @ClientId INT = 0
	DECLARE @JobId INT = 0
	DECLARE @InvalidJobChallan INT = NULL
	DECLARE @BillingRate Decimal(18,2) = 0.0
	DECLARE @InvoiceClaimQty Decimal(18,2) = 0.0
	DECLARE @IsHandlingInvoice INT = 0
	SELECT * INTO #temp_InvoiceChallan FROM (
	SELECT	@InvoiceId as InvoiceId,  
			Split.a.value('.', 'VARCHAR(100)') AS Challan,
			@BillingRate as BillingRate,
			@InvoiceClaimQty as InvoiceClaimQty,
			0 AS JobId,
			GETDATE() LoadDate,
			0 ClaimTypeId
	FROM	
		(
			SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanList, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS Challan  
		) AS A CROSS APPLY Challan.nodes ('/M') AS Split(a)
	) XX
	
	UPDATE #temp_InvoiceChallan SET JobId=B.JobId, LoadDate=B.LoadDate
					, BillingRate=B.ClientRate, InvoiceClaimQty=B.ClaimLoad
					, ClaimTypeId=B.ClaimQtyType FROM #temp_InvoiceChallan A
	INNER JOIN vw_ReportLoadingChallanReport B ON B.ChallanNo=A.Challan

	SELECT @JobCount = Count(Distinct L.JobId) , @JobId=MAX(L.JobId)
	FROM #temp_InvoiceChallan IC
	LEFT JOIN LoadingChallan L ON L.ChallanNo = IC.Challan
	WHERE InvoiceId = @InvoiceId
	IF @JobCount = 0 
		THROW 50000, 'Invalid Challan or Challan does not exist.', 1
	
	SELECT @InvalidChallans = Count(IC.Challan)
	FROM #temp_InvoiceChallan IC
	WHERE NOT EXISTS (SELECT 1 FROM vw_InvoiceChallanPending V WHERE V.ChallanNo= IC.Challan)

	IF @InvalidChallans > 0 
		THROW 50000, 'Unloading is not done for Challan or This is already associated with another invoice', 1
	
	SELECT @InvoiceSubmissionDate = SubmisstionDate, @InvoiceDate = InvoiceDate, @ClientId = ClientId, @IsHandlingInvoice = IsHandlingInvoice
	From _Invoice Where Id = @InvoiceId
	
	DECLARE @GSTType INT=0  --0=>Local and 1=>Interstate
	DECLARE @GSTTaxId INT=0 
	SELECT @GSTType=(CASE WHEN L.State<>L1.State THEN 1 ELSE 0 END) FROM  JobDetails JD 
	LEFT OUTER JOIN Common_Client C ON C.Id=JD.ClientId
	LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=C.LedgerId
	LEFT OUTER JOIN Common_Branch B ON B.Id=JD.InvoiceBranchId
	LEFT OUTER JOIN Accounts_Ledgers L1 ON L1.Id=B.LedgerId
	WHERE JD.Id=@JobId

	IF @InvoiceSubmissionDate IS NOT NULL
		THROW 50000, 'Changes in challans are not allowed after Invoice Submission.', 1
	
	IF @OnlyValidate = 0
	BEGIN
		DECLARE @STCategory INT = NULL
		DECLARE @LGST INT = NULL
		DECLARE @IGST INT = NULL
		INSERT INTO _InvoiceChallan (InvoiceId, ChallanNo, BillingRate, InvoiceClaimQty, ClaimQtyTypeId) 
			SELECT InvoiceId, Challan, BillingRate, InvoiceClaimQty, ClaimTypeId FROM #temp_InvoiceChallan

		Select @STCategory = L.STCategory, @LGST=L.LGSTId, @IGST=L.IGSTId from SystemLedger SL
		Left Join Accounts_Ledgers L On L.Id = SL.LedgerId
		Where [Description] = 'FREIGHT TRANSPORT INCOME'
		IF @InvoiceDate < CONVERT(DATE,'2017-07-01',102)
		BEGIN
			IF @STCategory IS NULL
			BEGIN
				Update _Invoice SET 
				Abatement = 0.0,
				BillStatus = ISNULL(BillStatus, InvoiceNo) Where Id = @InvoiceId
			END
			ELSE
			BEGIN
				-- Insert and Update  Default values
				/*Do not execute multiple update statement for _Invoice. It will conflict with Update trigger in transaction and will not allowed to update*/
				Update _Invoice SET 
				Abatement = (Select ISNULL(Abatement,0.0) From Accounts_STCategoryAbatement Where STCategoryId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')),  
				BillStatus = ISNULL(BillStatus, InvoiceNo) Where Id = @InvoiceId
				INSERT INTO [dbo].[_InvoiceTax] ([InvoiceId],[TaxId]) 
					SELECT @InvoiceId, vw_ServiceTax.STRateId FROM vw_ServiceTax Where STId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')
			END
		END
		ELSE
		BEGIN
			IF @IGST IS NULL AND @LGST IS NULL
			BEGIN
				Update _Invoice SET 
				Abatement = 0.0,
				BillStatus = ISNULL(BillStatus, InvoiceNo) Where Id = @InvoiceId
			END
			ELSE
			BEGIN
				IF @GSTType=1 AND @IGST IS NULL
					THROW 50000, 'IGST not defined for ledger', 1
				ELSE IF @GSTType=1 AND @IGST IS NOT NULL
					SET @STCategory = @IGST
				ELSE IF @GSTType=0 AND @LGST IS NULL
					THROW 50000, 'Local GST not defined for ledger', 1
				ELSE
					SET @STCategory = @LGST
				
				--if 1=1
				--	THROW 50000, @IGST, 1
				-- Insert and Update  Default values
				/*Do not execute multiple update statement for _Invoice. It will conflict with Update trigger in transaction and will not allowed to update*/
				Update _Invoice SET 
				Abatement = (Select ISNULL(Abatement,0.0) From Accounts_STCategoryAbatement Where STCategoryId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')),  
				BillStatus = ISNULL(BillStatus, InvoiceNo) Where Id = @InvoiceId
				INSERT INTO [dbo].[_InvoiceTax] ([InvoiceId],[TaxId]) 
					SELECT @InvoiceId, vw_ServiceTax.STRateId FROM vw_ServiceTax Where STId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')
			END
		END
	END
	IF (@IsHandlingInvoice = 1)
	BEGIN
		SET @STCategory = NULL
		Select @STCategory = L.STCategory, @LGST=L.LGSTId, @IGST=L.IGSTId from SystemLedger SL
		Left Join Accounts_Ledgers L On L.Id = SL.LedgerId
		Where [Description] = 'FREIGHT TRANSPORT HANLDING INCOME'
		DECLARE @HandlingRate Decimal(18,2) = 0.0
		Update _InvoiceChallan Set HandlingRate = IsNull(R.HandlingInvoiceRate,0.0) 
			From _InvoiceChallan A
			INNER JOIN vw_ReportLoadingChallanReport R ON R.ChallanNo=A.ChallanNo
			Where InvoiceId = @InvoiceId

		IF @InvoiceDate < CONVERT(DATE,'2017-07-01',102)
		BEGIN
			IF @STCategory IS NULL
				THROW 50000, 'System Ledger FREIGHT TRANSPORT HANDLING INCOME does not have Service Tax Category.', 1
			IF @STCategory IS NOT NULL
			BEGIN
				DELETE FROM [_InvoiceTaxHandling] WHERE [InvoiceId] = @InvoiceId
				INSERT INTO [dbo].[_InvoiceTaxHandling] ([InvoiceId],[TaxId]) 
				SELECT @InvoiceId, vw_ServiceTax.STRateId FROM vw_ServiceTax 
				Where STId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')
			END
		END
		ELSE
		BEGIN
			IF @IGST IS NULL AND @LGST IS NULL
				THROW 50000, 'System Ledger FREIGHT TRANSPORT HANDLING INCOME does not have GST Tax Category.', 1
			ELSE
			BEGIN
				IF @GSTType=1 AND @IGST IS NULL
					THROW 50000, 'IGST not defined for ledger', 1
				ELSE IF @GSTType=1 AND @IGST IS NOT NULL
					SET @STCategory = @IGST
				ELSE IF @GSTType=0 AND @LGST IS NULL
					THROW 50000, 'Local GST not defined for ledger', 1
				ELSE
					SET @STCategory = @LGST
				
				DELETE FROM [_InvoiceTaxHandling] WHERE [InvoiceId] = @InvoiceId
				INSERT INTO [dbo].[_InvoiceTaxHandling] ([InvoiceId],[TaxId]) 
				SELECT @InvoiceId, vw_ServiceTax.STRateId FROM vw_ServiceTax 
				Where STId = @STCategory AND @InvoiceDate >= DateFrom And @InvoiceDate <= ISNULL(DateTo, '2555-01-01')
			END
		END
	END
END	

GO
/****** Object:  StoredProcedure [dbo].[_InvoiceSummaryReportNew]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec [_InvoiceSummaryReportNew] @InvoiceDateFrom='2017-04-01', @InvoiceDateTo='2018-03-31', @ClientId=9414
CREATE Procedure [dbo].[_InvoiceSummaryReportNew] 
(
 @InvoiceDateFrom Date = NUll,
 @InvoiceDateTo Date = NULL,
 @BranchId INT = NULL,
 @ClientId INT = NULL
)
AS
Begin
	Declare @FyId INT
	Select @FyId = Id From Accounts_FinancialYear with (nolock) Where @InvoiceDateFrom >= StartDate And @InvoiceDateFrom <= EndDate
	/*select i.BulkRefNo RefNo, 
		SUM(p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) InvTotalReceived
		,SUM(p.ReceivedAmount) ReceivedAmount
		,SUM(p.ShortageDeduction) ShortageDeduction
		,SUM(p.MoistureDeduction) MoistureDeduction
		,SUM(p.TDSAmount) TDSAmount
		,SUM(p.OtherDeduction) OtherDeduction
		,SUM(p.HandlingReceived) HandlingReceived
		--into t4
		from _InvoicePayment p
		left outer join _InvoiceBulkPaymentId b  on b.InvoicePaymentId=p.Id
		left outer join _InvoiceBulkPayment i on i.Id=b.PaymentId
		WHERE b.InvoicePaymentId IS NOT NULL AND RealizationOn>=CONVERT(DATE,@InvoiceDateFrom,102) AND RealizationOn<=CONVERT(DATE,@InvoiceDateTo,102) 
		AND ClientId=@ClientId 
		Group By BulkRefNo
	UNION
	select b.invoiceno RefNo, 
		SUM(p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) InvTotalReceived
		,SUM(p.ReceivedAmount) ReceivedAmount
		,SUM(p.ShortageDeduction) ShortageDeduction
		,SUM(p.MoistureDeduction) MoistureDeduction
		,SUM(p.TDSAmount) TDSAmount
		,SUM(p.OtherDeduction) OtherDeduction
		,SUM(p.HandlingReceived) HandlingReceived
	--into t5
	from _InvoicePayment p
	left outer join vw_InvoiceDetails b  on b.InvoiceId=p.InvoiceId
	WHERE RealizationOn>=CONVERT(DATE,@InvoiceDateFrom,102) AND RealizationOn<=CONVERT(DATE,@InvoiceDateTo,102) 
	AND ClientId=@ClientId 
	Group By invoiceno
	*/
	Select 
		p.InvoiceId
		,Max(p.RealizationOn) as RealizationOn
		,SUM(p.ReceivedAmount+p.ShortageDeduction+p.MoistureDeduction+p.TDSAmount+p.OtherDeduction+p.HandlingReceived) InvTotalReceived
		,SUM(p.ReceivedAmount) ReceivedAmount
		,SUM(p.ShortageDeduction) ShortageDeduction
		,SUM(p.MoistureDeduction) MoistureDeduction
		,SUM(p.TDSAmount) TDSAmount
		,SUM(p.OtherDeduction) OtherDeduction
		,SUM(p.HandlingReceived) HandlingReceived
		 INTO #Pay
	from _InvoicePayment p
	 WHERE RealizationOn >= convert(date,@InvoiceDateFrom,102) AND RealizationOn <=  convert(date,@InvoiceDateTo,102)
	Group By InvoiceId
	
	SELECT * INTO #OldSettle FROM (
		Select 
		p.InvoiceId
		,p.TotalAmountReceived SettleAmount
		from vw_InvoiceDetails p where  RealizationDate>=CONVERT(DATE,'2016-04-01',102) and InvoiceDate<CONVERT(DATE,'2016-04-01',102) and ClientId=@ClientId) XX 

	SELECT * INTO #Overdue FROM (
		Select 
		p.InvoiceId, p.TotalInvoiceAmount+isnull(p.TaxAmount,0)- isnull(p.TotalAmountReceived,0) OverDueAmount,
		(CASE WHEN ((p.TotalInvoiceAmount+isnull(p.TaxAmount,0)- isnull(p.TotalAmountReceived,0))>0) THEN DATEDIFF(day, p.InvoiceDate, @InvoiceDateTo) ELSE NULL END) as Age
		from vw_InvoiceDetails p where ClientId=@ClientId AND invoicedate>=CONVERT(DATE,'2016-04-01',102) ) XX WHERE XX.Age>0
	
	SELECT InvoiceId into #allinvoice from (
		select invoiceid from #Pay
			UNION
		select Id as invoiceid from _Invoice 
			where  InvoiceDate >= convert(date,@InvoiceDateFrom,102) 
				AND InvoiceDate <=  convert(date,@InvoiceDateTo,102)
			UNION 
		select InvoiceId from #Overdue
		UNION 
		select InvoiceId from #OldSettle
	) X
	
	Select I.ClientId, I.InvoiceBranchId ExecutingBranchId, I.ClientName, I.InvoiceBranchName BranchName
		,Sum(case when I.InvoiceDate >= convert(date,@InvoiceDateFrom,102) AND I.InvoiceDate <=  convert(date,@InvoiceDateTo,102) then I.TotalInvoiceAmount else 0 end)
		+Sum(case when I.InvoiceDate >= convert(date,@InvoiceDateFrom,102) AND I.InvoiceDate <=  convert(date,@InvoiceDateTo,102) then I.TaxAmount else 0 end) as Amount
		,Sum(Case When IsNull(O.Age,0) > 30 Then O.OverDueAmount Else 0 End) as OverDue
		,MAX(Case When IsNull(I.Age,-1) >= 0 then I.Age else 0 end)  as TotalPendingAge
		,Sum(Case When IsNull(I.Age,-1) >= 0 then 1 else 0 end) as TotalPendingInvoice
		,MAX(Case When IsNull(O.Age,0) > 30 then O.Age else 0 end)  as TotalOverdueAge
		,Sum(Case When IsNull(O.Age,0) > 30 then 1 else 0 end) as TotalOverdueInvoice
		,Count(case when I.InvoiceDate >= convert(date,@InvoiceDateFrom,102) AND I.InvoiceDate <=  convert(date,@InvoiceDateTo,102) then I.InvoiceId else 0 end) as TotalInvoice
		,sum(R.InvTotalReceived)  as Received
		,Sum(IsNull(R.InvTotalReceived,0.0)) as CheckReceived
		,Sum(IsNull(R.ShortageDeduction, 0.0) + IsNull(R.MoistureDeduction, 0.0)) as ShortageDeduction
		,Sum(IsNull(R.TDSAmount,0.0)) as TDSDeduction
		,Sum(IsNull(R.OtherDeduction,0.0)) as OtherDeduction
		INTO #invoice
		From #allinvoice a
		left outer join vw_InvoiceDetails I on I.invoiceId=a.InvoiceId
		LEFT OUTER JOIN #Pay R ON R.InvoiceId=a.InvoiceId
		LEFT OUTER JOIN #Overdue O ON O.InvoiceId=a.InvoiceId
		Where --I.InvoiceDate >= convert(date,@InvoiceDateFrom,102) AND I.InvoiceDate <=  convert(date,@InvoiceDateTo,102) AND  I.SubmisstionDate IS NOT NULL AND
		 ( I.ClientId = @ClientId) And (@BranchId IS NULL OR I.InvoiceBranchId = @BranchId)
		Group By I.ClientId, I.InvoiceBranchId, I.ClientName, I.InvoiceBranchName
	--select * from #overdue
	--select * from #allinvoice
	--select * from #invoice
	DECLARE @RECCOUNT INT=0
	SELECT @RECCOUNT=COUNT(ClientId) FROM #invoice
	IF(@RECCOUNT<1)
	BEGIN
		
		Select I.ClientId, I.InvoiceBranchId ExecutingBranchId, I.ClientName, I.InvoiceBranchName BranchName
		,0 as Amount
		,Sum(Case When IsNull(I.Age,0) > 30 Then I.TotalInvoiceAmount-COALESCE(R.InvTotalReceived,0) Else 0 End) as OverDue
		,Sum(Case When IsNull(I.Age,-1) >= 0 then I.Age else 0 end)  as TotalPendingAge
		,Sum(Case When IsNull(I.Age,-1) >= 0 then 1 else 0 end) as TotalPendingInvoice
		,Sum(Case When IsNull(I.Age,0) > 30 then I.Age else 0 end)  as TotalOverdueAge
		,Sum(Case When IsNull(I.Age,0) > 30 then 1 else 0 end) as TotalOverdueInvoice
		,Count(I.InvoiceId) as TotalInvoice
		,sum(case when R.RealizationOn >= @InvoiceDateFrom AND R.RealizationOn <= @InvoiceDateTo then IsNull(R.InvTotalReceived,0.0) else 0 end)  as Received
		,Sum(IsNull(R.InvTotalReceived,0.0)) as CheckReceived
		,Sum(IsNull(R.ShortageDeduction, 0.0) + IsNull(R.MoistureDeduction, 0.0)) as ShortageDeduction
		,Sum(IsNull(R.TDSAmount,0.0)) as TDSDeduction
		,Sum(IsNull(R.OtherDeduction,0.0)) as OtherDeduction
		INTO #invoice1
		From #allinvoice a
		left outer join vw_InvoiceDetails I on I.invoiceId=a.InvoiceId
		LEFT OUTER JOIN #Pay R ON R.InvoiceId=a.InvoiceId
		Where (I.ClientId = @ClientId) And (@BranchId IS NULL OR I.InvoiceBranchId = @BranchId)
		Group By I.ClientId, I.InvoiceBranchId, I.ClientName, I.InvoiceBranchName

		INSERT INTO #invoice 
			SELECT * FROM #invoice1
	END
	
	IF (@FyId IS NULL)
		SET @FyId = 2
	Select 
		 XX.ClientId 
		,XX.ExecutingBranchId as BranchId 
		,XX.ClientName 
		,XX.BranchName 
		,IsNull((Select (Case When OpeningTransactionType = 1 Then -OpeningBalance Else OpeningBalance End) 
from Accounts_LedgerBalance  with (nolock)
Where LedgerId = (Select LedgerId From Common_Client  with (nolock) Where Id = XX.ClientId ) and [Year] = @FyId),0.0) as OpeningBalance
		,IsNull(XX.TotalInvoice			  ,0) as TotalInvoice            
		,IsNull(XX.TotalPendingInvoice	  ,0) as TotalPendingInvoice 
		,IsNull(XX.TotalPendingAge		  ,0) as TotalPendingAge 
		,IsNull(XX.TotalOverdueInvoice	  ,0) as TotalOverdueInvoice 
		,IsNull(XX.TotalOverdueAge		  ,0) as TotalOverdueAge 
		,IsNull(XX.Amount               ,0) as Amount                
		,IsNull(XX.OverDue 			   ,0) as OverDue 
		,IsNull(XX.Received 		   ,0) as Received 
		,IsNull(XX.CheckReceived	   ,0) as CheckReceived 
		,IsNull(XX.ShortageDeduction   ,0) as ShortageDeduction 
		,IsNull(XX.TDSDeduction 	   ,0) as TDSDeduction 
		,IsNull(XX.OtherDeduction 	   ,0) as OtherDeduction 
		,(Select IsNull(Sum(IsNull(CP.ClientRate*CP.NetWT,0)),0.0) From vw_InvoiceChallanPending CP 
				Where CP.LoadingId IS NOT NULL AND CP.JobExecutingBranchId = XX.ExecutingBranchId                   -- This condition CP.UnloadingId IS NOT NULL Change CP.LoadingId IS NOT NULL
			AND CP.JobClientId = XX.ClientId
			AND CP.LoadDate >= @InvoiceDateFrom AND  CP.LoadDate <= @InvoiceDateTo) as UnbilledAmount
	from #invoice XX
		Order By XX.ClientName, XX.BranchName 
End
GO
/****** Object:  StoredProcedure [dbo].[_jobreport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[_jobreport] 
(
@JobId Int=NULL,
@JobDateFrom DATE=NULL,
@JobDateTo DATE=NULL,
@ClientId INT=NULL,
@LoadingPointId INT=NULL,
@UnloadingPointId INT=NULL,
@MaterialId INT=NULL,
@BranchId INT=NULL,
@RunningJob INT=NULL
)
As 
BEGIN
		IF(@JobId IS NULL AND @JobDateFrom IS NULL AND @JobDateTo IS NULL AND @ClientId IS NULL 
		AND @LoadingPointId IS NULL AND @UnloadingPointId IS NULL AND @MaterialId IS NULL AND @BranchId IS NULL)
		BEGIN
			SELECT 1 from Accounts_FinancialYear WHERE 1<>1
		END
		ELSE
		BEGIN
    SELECT TJ.Id JobId, JobNo, WO.OrderNo WORefNo, TJ.WOSectorId, CONVERT(VARCHAR(12), StartDate, 103) as StartDate, 
           CONVERT(VARCHAR(12), EndDate, 103) as EndDate, WOI.LoadingPoint LoadingPointId, LP.Loading,
           LP.Loading + '-' + UP.Unloading Sector, WOI.UnloadingPoint UnloadingPointId, UP.Unloading, 
           WOI.Material MaterialId, MP.MaterialName, TJ.Quantity, WO.ClientId, CC.Name ClientName, 
           CC1.Name Consignee, CC2.Name Consigner, CB.Name BranchName, ExecutingBranch, CR.ClientRate 
    INTO #JobDetails 
    FROM job TJ
    LEFT OUTER JOIN _WorkOrderItems WOI ON WOI.Id = TJ.WOSectorId
    LEFT OUTER JOIN _WorkOrder WO ON WO.Id = WOI.OrderId
    LEFT OUTER JOIN Common_Client CC ON WO.ClientId = CC.Id
    LEFT OUTER JOIN Common_Client CC1 ON TJ.Consignee = CC1.Id
    LEFT OUTER JOIN Common_Client CC2 ON TJ.Consigner = CC2.Id
    LEFT OUTER JOIN Common_Branch CB ON CB.Id = TJ.ExecutingBranch
    LEFT OUTER JOIN LoadingPoints LP ON LP.Id = WOI.LoadingPoint
    LEFT OUTER JOIN UnloadingPoints UP ON UP.Id = WOI.UnLoadingPoint
    LEFT OUTER JOIN Materials MP ON MP.Id = WOI.Material
    LEFT OUTER JOIN _ClientRateView CR ON CR.WOSectorId = TJ.WOSectorId
    WHERE (@JobId IS NULL OR TJ.Id = @JobId) 
      AND (@LoadingPointId IS NULL OR WOI.LoadingPoint = @LoadingPointId) 
      AND (@UnLoadingPointId IS NULL OR WOI.UnloadingPoint = @UnloadingPointId) 
      AND (@MaterialId IS NULL OR WOI.Material = @MaterialId) 
      AND (@BranchId IS NULL OR ExecutingBranch = @BranchId)
      AND (@ClientId IS NULL OR WO.ClientId = @ClientId)
      AND (@JobDateFrom IS NULL OR CONVERT(DATE, StartDate, 103) >= CONVERT(DATE, @JobDateFrom, 103))
      AND (@JobDateTo IS NULL OR CONVERT(DATE, StartDate, 103) <= CONVERT(DATE, @JobDateTo, 103))
      AND (@RunningJob IS NULL OR (CONVERT(DATE, GETDATE(), 103) BETWEEN CONVERT(DATE, StartDate, 103) AND CONVERT(DATE, EndDate, 103)))

    SELECT COUNT(LoadingId) TotalChallan, JD.JobId, ISNULL(SUM(TotalFreight), 0) TotalFreight, 
           ISNULL(SUM(Advance), 0) Advance, ISNULL(SUM(HSDCost), 0) HSDCost, ISNULL(SUM(TotalAdvance), 0) TotalAdvance, 
           ISNULL(SUM(NetWt), 0) NetWt, ISNULL(SUM(CASE WHEN PVoucherId IS NULL THEN 0 ELSE ISNULL(PaidAmount, 0) END), 0) PaidAmount, 
           ISNULL(SUM(TotalFreight - TotalAdvance), 0) NetBalance,
           ISNULL(SUM(Welfare + LC.Detention + UC.Detention + TollGate + Adjustment), 0) as Expenses,
           ISNULL(SUM(ChallanDeduction + ChallanLost + Penalty), 0) as Recoverable,
           SUM(CASE WHEN PVoucherId IS NULL THEN ISNULL(PaidAmount, 0) ELSE 0 END) ReceivedNotPaid,
           ISNULL(SUM(CASE WHEN UC.Id IS NULL THEN TotalFreight - TotalAdvance ELSE 0 END +
                       CASE WHEN UC.Id IS NOT NULL AND UnLoadingId IS NULL THEN TotalFreight - TotalAdvance ELSE 0 END +
                       CASE WHEN PVoucherId IS NULL AND UnLoadingId IS NOT NULL THEN PaidAmount ELSE 0 END), 0) AS NetPayable,
           JobNo, WORefNo, WOSectorId, StartDate, EndDate, LoadingPointId, Loading, Sector, 
           UnloadingPointId, Unloading, MaterialId, MaterialName, Quantity, ClientId, ClientName, Consignee, 
           Consigner, BranchName, ExecutingBranch, ClientRate
    FROM #JobDetails JD
    LEFT OUTER JOIN LoadingChallan LC ON JD.JobId = LC.JobId
    LEFT OUTER JOIN UnloadingChallan UC ON UC.LoadingChallanId = LC.Id
    LEFT OUTER JOIN Payment PC ON PC.LoadingId = LC.Id
    GROUP BY JD.JobId, JobNo, WORefNo, WOSectorId, StartDate, EndDate, LoadingPointId, Loading, Sector, 
             UnloadingPointId, Unloading, MaterialId, MaterialName, Quantity, ClientId, ClientName, Consignee, 
             Consigner, BranchName, ExecutingBranch, ClientRate

END

END

GO
/****** Object:  StoredProcedure [dbo].[_LoadingChallanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_LoadingChallanDetails]
@WOId INT = NULL,
@JobId INT = NULL,
@ClientId INT= NULL,
@LoadDateFrom Date = NULL,
@LoadDateTo Date = NULL,
@LoadingPoint VARCHAR(50)=NULL,
@UnloadingPoint VARCHAR(50)=NULL,
@UnloadDateFrom Date=NULL,
@UnloadDateTo Date=NULL,
@IsUnloadingPending Varchar(50)  = NULL,
@TPInvNo Varchar(50) = NULL,
@TruckNo Varchar(50) = NULL,
@OwnerId INT = NULL,
@PartyId INT=NULL,
@AssociationId INT=NULL
AS
BEGIN
   SELECT TOP 10000 v.ChallanNo,v.TP,CONVERT(VARCHAR(10),v.LoadDate, 103)  LoadDate,v.TruckNumber,v.NetWT,v.UnloadedNetWt,v.ClaimLoad
   ,CONVERT(VARCHAR(10),v.UnloadedDate, 103) UnloadedDate,v.ChallanSerialNo 
   , REPLACE(V.ChallanNoKey, '//','/') ChallanNoKey,c.Name as ClientName
   ,L.Address as ClientAddress,L.State as ClientState,L.PinCode as PinCode
  FROM   vw_ReportLoadingChallanReport v 
   Left Outer Join Common_Client C ON C.Id= v.ClientId
   Left Outer Join Accounts_Ledgers L ON C.LedgerId=L.Id
   WHERE 1=1
    AND (@ClientId IS NULL OR v.ClientId = @ClientId)
   AND (@LoadingPoint IS NULL OR v.LoadingPointId = @LoadingPoint)
   AND (@UnloadingPoint IS NULL OR v.UnLoadingPointId = @UnloadingPoint)
   AND (@LoadDateFrom IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadDateFrom)
   AND (@LoadDateTo IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadDateTo)
   AND (@UnloadDateFrom IS NULL OR CONVERT(date, v.UnloadedDate, 103)>= @UnloadDateFrom)
   AND (@UnloadDateTo IS NULL OR CONVERT(date, v.UnloadedDate, 102) <= @UnloadDateTo)
   --AND (@OwnerId IS NULL OR [LOwnerId] = @OwnerId)
   AND (@AssociationId IS NULL OR V.LAssociationId = @AssociationId)
   And (@PartyId IS NULL OR v.LOwnerId = @PartyId)
   ORDER BY v.LoadDate    
END
--select * from _TPDetails
GO
/****** Object:  StoredProcedure [dbo].[_LoadingChallanSummaryDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[_LoadingChallanSummaryDetails]
@WOId INT = NULL,
@JobId INT = NULL,
@ClientId INT= NULL,
@LoadFromDate Date = NULL,
@LoadToDate Date = NULL,
@LoadingPoint VARCHAR(50)=NULL,
@UnloadingPoint VARCHAR(50)=NULL,
@UnloadDateFrom Date=NULL,
@UnloadDateTo Date=NULL,
@IsUnloadingPending Varchar(50)  = NULL,
@TPInvNo Varchar(50) = NULL,
@TruckNo Varchar(50) = NULL,
@OwnerId INT = NULL,
@PartyId INT=NULL,
@AssociationId INT=NULL
AS
BEGIN
/*
   SELECT TOP 10000 COUNT(v.Id) Trips,/*CONVERT(VARCHAR(10), v.LoadDate,103)*/ '' LoadDate,SUM(v.NetWT) NetWT,IsNULL(SUM(v.ClaimLoad),0)ClaimLoad
   ,SUM(v.UnloadedNetWt) UnloadedNetWt,v.ClientName
   , CAST(YEAR(v.LoadDate) AS VARCHAR)+'-'+ { fn MONTHNAME(v.LoadDate) } TripMonth
  --, L.Address as ClientAddress,L.State as ClientState,L.PinCode as PinCode
 FROM   vw_ReportLoadingChallanReport v 
   Left Outer Join Common_Client C ON C.Id= v.ClientId
   Left Outer Join Accounts_Ledgers L ON C.LedgerId=L.Id
   WHERE 1=1
    AND (@ClientId IS NULL OR v.ClientId = @ClientId)
   AND (@LoadingPoint IS NULL OR v.LoadingPointId = @LoadingPoint)
   AND (@UnloadingPoint IS NULL OR v.UnLoadingPointId = @UnloadingPoint)
   AND (@LoadFromDate IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadFromDate)
   AND (@LoadToDate IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadToDate)
   AND (@UnloadDateFrom IS NULL OR CONVERT(date, v.UnloadedDate, 103)>= @UnloadDateFrom)
   AND (@UnloadDateTo IS NULL OR CONVERT(date, v.UnloadedDate, 102) <= @UnloadDateTo)
   --AND (@OwnerId IS NULL OR [LOwnerId] = @OwnerId)
   AND (@AssociationId IS NULL OR V.LAssociationId = @AssociationId)
   And (@PartyId IS NULL OR v.LOwnerId = @PartyId)
   Group BY V.ClientName, CAST(YEAR(v.LoadDate) AS VARCHAR)+'-'+  { fn MONTHNAME(v.LoadDate) } , MONTH(v.LoadDate)  --v.LoadDate,V.ClientName,L.Address,L.State,L.PinCode
   Order By CAST(YEAR(v.LoadDate) AS VARCHAR)+'-'+  MONTH(v.LoadDate)
   */

	SELECT SUM(Trips) Trips, SUM(NetWt) NetWt, SUM(UnloadedNetWt) UnloadedNetWt, SUM(ClaimLoad) ClaimLoad, ClientName,LYear, LMonth, { fn MONTHNAME('2000-'+CAST(LMonth AS VARCHAR)+'-01') }+'-'+CAST(LYear AS VARCHAR) TripMonth FROM(
	SELECT 1 Trips, NetWT,IsNULL(v.ClaimLoad,0) ClaimLoad, UnloadedNetWt, v.ClientName, YEAR(v.LoadDate) LYear, MONTH(V.LoadDate) LMonth
	FROM   vw_ReportLoadingChallanReport v 
		Left Outer Join Common_Client C ON C.Id= v.ClientId
		Left Outer Join Accounts_Ledgers L ON C.LedgerId=L.Id
		WHERE 1=1
		AND (@ClientId IS NULL OR v.ClientId = @ClientId)
		AND (@LoadingPoint IS NULL OR v.LoadingPointId = @LoadingPoint)
		AND (@UnloadingPoint IS NULL OR v.UnLoadingPointId = @UnloadingPoint)
		AND (@LoadFromDate IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadFromDate)
		AND (@LoadToDate IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadToDate)
		AND (@UnloadDateFrom IS NULL OR CONVERT(date, v.UnloadedDate, 103)>= @UnloadDateFrom)
		AND (@UnloadDateTo IS NULL OR CONVERT(date, v.UnloadedDate, 102) <= @UnloadDateTo)
		--AND (@OwnerId IS NULL OR [LOwnerId] = @OwnerId)
		AND (@AssociationId IS NULL OR V.LAssociationId = @AssociationId)
		And (@PartyId IS NULL OR v.LOwnerId = @PartyId)
	) X 
	Group BY LYear, LMonth, ClientName
	--V.ClientName, CAST(YEAR(v.LoadDate) AS VARCHAR)+'-'+  { fn MONTHNAME(v.LoadDate) } , MONTH(v.LoadDate)  --v.LoadDate,V.ClientName,L.Address,L.State,L.PinCode
	Order By LYear, LMonth, ClientName
--select * from _TPDetails
END
GO
/****** Object:  StoredProcedure [dbo].[_ManageFrieghtTyreRulesRow]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_ManageFrieghtTyreRulesRow]
	@SectorRuleId INT
AS
BEGIN
	DECLARE @pSectorRuleId INT = NULL 
	SET @pSectorRuleId = @SectorRuleId;

	INSERT INTO _FrieghtTyreRules (SectorTyreId) 
	SELECT Id From _FreightSectorTyre 
	Where SectorId = @pSectorRuleId And Id Not in (Select SectorTyreId From _FrieghtTyreRules)
END	
GO
/****** Object:  StoredProcedure [dbo].[_Mis]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_Mis] 
(
 @JobId INT=0
)
AS
BEGIN
	--Select * from _Job where JobNo='TSL/T/16-17/145'
    --SELECT TruckSource,COUNT(ChallanNo) AS TotalTruck,SUM(NetWT) AS Quantity,AVG(Freight) AS Rate  
	--FROM vw_loadingchallandetails WHERE JobId=@JobId
	--GROUP BY TruckSource
	SELECT JobNo, Sector, TruckSource,COUNT(ChallanNo) AS TotalTruck,SUM(NetWT) AS Quantity
	,CONVERT(decimal(10,2), AVG(Freight)) AS Rate
	,TotalTruck= (SELECT COUNT(ChallanNo) FROM vw_loadingchallandetails  WHERE JobId=@JobId)	
	,TotalQuantity= (SELECT SUM(NetWT) FROM vw_loadingchallandetails  WHERE JobId=@JobId)	
	,TruckRatio = CONVERT(decimal(10,2),(CAST(COUNT(ChallanNo) as decimal)*100)/(SELECT COUNT(ChallanNo) FROM vw_loadingchallandetails  WHERE JobId=@JobId))
	,QuantityRatio =CONVERT(decimal(10,2),(SUM(NetWT)*100)/(SELECT SUM(NetWT) FROM vw_loadingchallandetails  WHERE JobId=@JobId))
	,AvgRate =CONVERT(decimal(10,2),(AVG(Freight) * (SUM(NetWT)*100)/(SELECT SUM(NetWT) FROM vw_loadingchallandetails  WHERE JobId=@JobId))/100)
	FROM vw_loadingchallandetails WHERE JobId=@JobId
	GROUP BY TruckSource,JobNo,Sector
END

GO
/****** Object:  StoredProcedure [dbo].[_NetMIS]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[_NetMIS](@DateStart DATE = NULL, @DateEnd DATE=NULL)
AS
BEGIN

DECLARE @fyid INT =4
CREATE TABLE #temp (SNo INT, HeadOfExpenses VARCHAR(50), Amount DECIMAL(18,2), data VARCHAR(500))

DECLARE @Overhead DECIMAL(18,2)=0.0
DECLARE @Freight DECIMAL(18,2)=0.0
DECLARE @Detention DECIMAL(18,2)=0.0
DECLARE @Invoice DECIMAL(18,2)=0.0
DECLARE @Toll DECIMAL(18,2)=0.0
DECLARE @CDeduction DECIMAL(18,2)=0.0
DECLARE @Penalty DECIMAL(18,2)=0.0
DECLARE @IDeduction DECIMAL(18,2)=0.0

INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data )
SELECT ROW_NUMBER() Over (Order by G.Id) As SNo, UPPER(G.Name) HeadOfExpenses, SUM(T.Amount) Amount, '<tr><td>'+ CONVERT(VARCHAR,ROW_NUMBER() Over (Order by G.Id))+'</td><td>'+UPPER(G.Name)+'</td><td>'+CONVERT(VARCHAR,SUM(T.Amount))+'</td></tr>' Data  from Accounts_VoucherTransaction T
LEFT OUTER JOIN Accounts_Ledgers L ON L.Id=T.LedgerId
LEFT OUTER JOIN Accounts_Groups G ON G.Id=L.[Group]
WHERE G.GroupNature=4 AND LedgerId not  in (select LedgerId from SystemLedger where LedgerId is not null) AND T.TransactionType=2 AND fyid=@fyid 
GROUP BY G.Id, G.Name

SELECT @Overhead = SUM(Amount) FROM #temp
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'TOTAL OVERHEAD', @Overhead, '<tr><td colspan=2>TOTAL OVERHEAD</td><td>'+CONVERT(VARCHAR,@Overhead)+'</td></tr>')

SELECT @Freight = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId=(SELECT TOP 1 LedgerId FROM SystemLedger WHERE Description='FREIGHTTRANSPORT')  AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'FREIGHT EXPENSE', @Freight, '<tr><td colspan=2>FREIGHT EXPENSE</td><td>'+CONVERT(VARCHAR,@Freight)+'</td></tr>')

SELECT @Detention = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId IN (SELECT LedgerId FROM SystemLedger WHERE Description IN ('LOADDETENTION', 'UNLOADDETENTION'))  AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'DETENTION', @Detention, '<tr><td colspan=2>ADD DETENTION</td><td>'+CONVERT(VARCHAR,@Detention)+'</td></tr>')

SELECT @CDeduction = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId = (SELECT TOP 1 LedgerId FROM SystemLedger WHERE Description='CHALLANDEDUCTION')  AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'CHALLAN DEDUCTION', IsNULL(@CDeduction,0), '<tr><td colspan=2>LESS CHALLAN DEDUCTION</td><td>'+CONVERT(VARCHAR,IsNULL(@CDeduction,0))+'</td></tr>')

SELECT @Toll = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId = (SELECT Top 1 LedgerId FROM SystemLedger WHERE Description='TOLLGATE') AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'TOLL GATE', IsNULL(@Toll,0), '<tr><td colspan=2>ADD TOLL GATE</td><td>'+CONVERT(VARCHAR,IsNULL(@Toll,0))+'</td></tr>')

SELECT @Penalty = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId = (SELECT Top 1 LedgerId FROM SystemLedger WHERE Description='PENALTY')  AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'SHORTAGE RECOVERED', IsNULL(@Penalty,0), '<tr><td colspan=2> LESS SHORTAGE RECOVERED</td><td>'+CONVERT(VARCHAR,IsNULL(@Penalty,0))+'</td></tr>')

DECLARE @NetFreight DECIMAL(18,2)=0.0
SET @NetFreight = @Freight + @Detention + IsNull(@Toll,0) - IsNull(@CDeduction,0) - IsNull(@Penalty,0)
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'NET FREIGHT PAID',@NetFreight , '<tr><td colspan=2>NET FREIGHT PAID</td><td>'+CONVERT(VARCHAR,@NetFreight)+'</td></tr>')

DECLARE @TotalExp DECIMAL(18,2)=0.0
SET @TotalExp = @NetFreight + @Overhead
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'TOTAL EXPENSES',@TotalExp , '<tr><td colspan=2>TOTAL EXPENSES</td><td>'+CONVERT(VARCHAR,@TotalExp)+'</td></tr>')

DECLARE @Interest DECIMAL(18,2)=0.0
SET @Interest = 0
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'INTEREST ON INVEST',@Interest , '<tr><td colspan=2>INTEREST ON INVEST</td><td>'+CONVERT(VARCHAR,@Interest)+'</td></tr>')

DECLARE @GrandExp DECIMAL(18,2)=0.0
SET @GrandExp = @TotalExp + @Interest
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'GRAND TOTAL EXPENSE',@GrandExp , '<tr><td colspan=2>GRAND TOTAL EXPENSE</td><td>'+CONVERT(VARCHAR,@GrandExp)+'</td></tr>')

SELECT @Invoice = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId=(SELECT TOP 1 LedgerId FROM SystemLedger WHERE Description='FREIGHT TRANSPORT INCOME') AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'INVOICE AMOUNT', @Invoice, '<tr><td colspan=2>INVOICE AMOUNT</td><td>'+CONVERT(VARCHAR,@Invoice)+'</td></tr>')

SELECT @IDeduction = SUM(Amount) FROM Accounts_VoucherTransaction T WHERE LedgerId IN (SELECT LedgerId FROM SystemLedger WHERE Description IN ('INVOICE SHORTAGE DEDUCTION', 'INVOICE MOISTURE DEDUCTION', 'INVOICE OTHER DEDUCTION'))  AND T.TransactionType=2 AND fyid=@fyid 
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'LESS CLIENT DEDUCTIONS', @IDeduction, '<tr><td colspan=2>LESS CLIENT DEDUCTIONS</td><td>'+CONVERT(VARCHAR,@IDeduction)+'</td></tr>')

DECLARE @NetInvoice DECIMAL(18,2)=0.0
SET @NetInvoice = @Invoice-@IDeduction
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'NET INVOICE AMOUNT',@NetInvoice , '<tr><td colspan=2>NET INVOICE AMOUNT</td><td>'+CONVERT(VARCHAR,@NetInvoice)+'</td></tr>')

DECLARE @NetProfit DECIMAL(18,2)=0.0
SET @NetInvoice = @NetInvoice-@GrandExp
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, 'NET PROFIT',@NetProfit , '<tr><td colspan=2>NET PROFIT</td><td>'+CONVERT(VARCHAR,@NetProfit)+'</td></tr>')

DECLARE @NetProfitPer DECIMAL(18,2)=0.0
SET @NetProfitPer = (@NetProfit*100)/@TotalExp
INSERT INTO #temp (SNo , HeadOfExpenses , Amount, data ) VALUES(101, '% NET PROFIT',@NetProfitPer , '<tr><td colspan=2>% NET PROFIT</td><td>'+CONVERT(VARCHAR,@NetProfitPer)+'</td></tr>')

SELECT * FROM #temp

END
GO
/****** Object:  StoredProcedure [dbo].[_OilRecociliation]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[_OilRecociliation] (
@Type INT,
@Id INT = NULL,
@FillingId INT = NULL,
@TotalRecords INT = NULL
)
AS
BEGIN

IF @Type = 1
BEGIN
	DECLARE @existingTotal INT = 0
	DECLARE @NewRecords INT = 0

	-- update oil filling
	DECLARE @PumpId INT=NULL
	DECLARE @StartDate DATE=NULL
	DECLARE @EndDate DATE=NULL
	DECLARE @OilAmount DECIMAL(18,2)=0

	SELECT @PumpId=PumpId, @StartDate=DateFrom, @EndDate=DateTo FROM _OilFilling WHERE Id=@FillingId
	
	INSERT INTO _OilFillingData (FillingId, ChallanNo, TruckNo, FillingDate, Amount, MemoNo) 
	SELECT Distinct @FillingId, L.ChallanNo, V.VehicleNo, L.LoadDate, A.Amount, A.MemoNo FROM LoadingAdvance A
		INNER JOIN LoadingChallan L ON L.Id=A.LoadingId
		INNER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
		LEFT OUTER JOIN _OilFillingData O ON O.ChallanNo=L.ChallanNo
		WHERE A.PumpId=@PumpId AND A.AdvanceType=2  AND A.PumpId IS NOT NULL 
		AND CONVERT(DATE,L.LoadDate,102) > = CONVERT(DATE,@StartDate,102) AND CONVERT(DATE,@EndDate,102) >= CONVERT(DATE,L.LoadDate,102)
       -- AND O.ChallanNo not in (select FillingId from _OilFillingData where FillingId = @FillingId)
		AND O.ChallanNo IS NULL
	--SELECT @OilAmount=SUM(Amount) FROM _OilFillingData WHERE FillingId=@FillingId
	--UPDATE _OilFilling SET OilAmount=@OilAmount WHERE Id=@FillingId

	

	IF @TotalRecords IS NULL OR @FillingId IS NULL
		THROW 50000, '@TotalRecords and @FillingId is required to call [_OilRecociliation] for type 1.', 1
	IF @TotalRecords > 1300
		THROW 50000, 'Maximum 1300 Records are allowed to create.', 1


		-- old oil filling
 /*	SELECT @existingTotal = Count(1) FROM _OilFillingData Where FillingId = @FillingId
	SET @NewRecords = @TotalRecords - @existingTotal

	IF @NewRecords > 0 -- Need to add more records
	BEGIN
		
		DECLARE @MYSQL VARCHAR(8000) = ''

		SET @MYSQL = 'INSERT INTO _OilFillingData (FillingId) VALUES '
		WHILE (@NewRecords > 0)
		BEGIN
			SET @NewRecords = @NewRecords -1;
			SET @MYSQL = @MYSQL + '(' +CONVERT(VARCHAR, @FillingId) +')'
			IF @NewRecords > 0
				SET @MYSQL = @MYSQL + ','
		END
		EXEC (@MYSQL)
	END
	ELSE
	BEGIN
		DECLARE @deleteRecords INT = 0
		DECLARE @eEmptyTotal INT

		SET @deleteRecords = ABS(@NewRecords)
		SELECT @eEmptyTotal = Count(1) FROM _OilFillingData 
		Where FillingId = @FillingId AND MemoNo IS NULL AND ChallanNo IS NULL AND TruckNo IS NULL 
		AND Quantity IS NULL AND Rate IS NULL
		IF @deleteRecords > @eEmptyTotal
			THROW 50000, 'There are some records which contains data. Can not remove the records',1

		SET @MYSQL = 'DELETE FROM _OilFillingData WHERE ID IN (SELECT TOP '+ CONVERT(Varchar,@deleteRecords) +' ID FROM _OilFillingData Where FillingId = '+ Convert(Varchar, @FillingId) +' AND MemoNo IS NULL AND ChallanNo IS NULL AND TruckNo IS NULL 
		AND Quantity IS NULL AND Rate IS NULL)'
		EXEC (@MYSQL)
	END    */
END
ELSE IF @Type = 2
BEGIN
	DECLARE @MatchCount INT = 0
	DECLARE @LoadingId INT = NULL
	DECLARE @ChallanNo INT = 0
	Declare @DuplicateChallanNo INT  = NULL
	Declare @DisputeReason Varchar(500) = NULL
	Declare @FillingDate Date = NULL
	Declare @LoadDate Date = NULL

	IF @Id  IS NULL
		THROW 50000, '@Id is required to call [_OilRecociliation] for type 2.', 1
	
	Select @ChallanNo = ChallanNo From _OilFillingData Where Id = @Id
	Select @LoadingId = Id, @LoadDate = LoadDate From LoadingChallan Where ChallanNo = @ChallanNo

	IF @DisputeReason IS NULL AND @LoadingId IS NULL  
		SET @DisputeReason = 'Invalid Challan'
	
	--IF @DisputeReason IS NULL
	--BEGIN
	--	Select @DuplicateChallanNo = ChallanNo From _OilFillingData Where Id <> @Id AND ChallanNo = @ChallanNo
	--	IF @DuplicateChallanNo IS NOT NULL
	--		SET @DisputeReason = 'Duplicate Challan' 
	--END 
	
	IF @DisputeReason IS NULL
	BEGIN
		Declare @FillAmoount Decimal(18,2) = 0.0
		Declare @LoadAmoount Decimal(18,2) = 0.0
		Declare @FillPumpId Decimal(18,2) = 0.0
		Declare @LoadPumpId Decimal(18,2) = 0.0

		SELECT ChallanNo, SUM(LA.Amount) HSDCost, L.TruckId,  LA.PumpId PumpId INTO #temp FROM LoadingAdvance LA
		LEFT OUTER JOIN LoadingChallan L ON L.Id=LA.LoadingId
		where  LA.PumpId IS NOT NULL
		GROUP BY ChallanNo, TruckId, LA.PumpId

		Select 
			 @FillAmoount = IsNull(O.Amount,0)
			,@LoadAmoount = L.HSDCost
			,@FillPumpId = L.PumpId
			,@LoadPumpId = P.PumpNameId
			,@FillingDate = O.FillingDate
		From _OilFillingData O
		LEFT JOIN _OilFilling F ON F.Id = O.FillingId
		LEFT JOIN #temp L ON O.ChallanNo = L.ChallanNo
		LEFT JOIN Fleet_Vehicle V ON V.Id = L.TruckId
		LEFT JOIN Pump P ON P.PumpNameId = L.PumpId
		WHERE O.Id = @Id AND L.PumpId=F.PumpId -- And P.PumpNameId IS NOT NULL

		IF (@FillPumpId <> @LoadPumpId)
			SET @DisputeReason = 'Pump Mismatch'
		IF (@FillAmoount <> @LoadAmoount)
			SET @DisputeReason = 'Amount Mismatch'
	END
	IF @DisputeReason IS NULL
	Begin
		IF (@FillingDate IS NULL )
			SET @DisputeReason = 'Filled date not provided.'
		ELSE IF (@FillingDate < @LoadDate) 
			SET @DisputeReason = 'Filled before loading date.'
	End

	IF @DisputeReason IS NOT NULL
		Update _OilFillingData Set [Status] = 3, StatusRemarks = @DisputeReason/* Dispute */ Where Id = @Id
	ELSE
		Update _OilFillingData Set [Status] = 2 /* Reconsiled */ Where Id = @Id
		
	SELECT 'S'
END

ELSE IF @Type =3
BEGIN

	SELECT @PumpId=PumpId, @StartDate=DateFrom, @EndDate=DateTo FROM _OilFilling  WHERE Id=@FillingId  
	
	INSERT INTO _OilFillingData (FillingId, ChallanNo, TruckNo, FillingDate, Amount, MemoNo) 
	SELECT Distinct @FillingId, L.ChallanNo, V.VehicleNo, L.LoadDate, A.Amount, A.MemoNo FROM LoadingAdvance A
		INNER JOIN LoadingChallan L ON L.Id=A.LoadingId
		INNER JOIN Fleet_Vehicle V ON V.Id=L.TruckId
		LEFT OUTER JOIN _OilFillingData O ON O.ChallanNo=L.ChallanNo
		WHERE A.PumpId=@PumpId AND A.AdvanceType=2  AND A.PumpId IS NOT NULL 
		AND CONVERT(DATE,L.LoadDate,102) > = CONVERT(DATE,@StartDate,102) AND CONVERT(DATE,@EndDate,102) >= CONVERT(DATE,L.LoadDate,102)
		AND L.ChallanNo not in (Select ChallanNo from _OilFillingData where  FillingId =@FillingId)
		--AND A.MemoNo  <> O.MemoNo
       -- AND O.ChallanNo not in (select FillingId from _OilFillingData where FillingId = @FillingId)
		--AND O.ChallanNo IS NULL
	--SELECT @OilAmount=SUM(Amount) FROM _OilFillingData WHERE FillingId=@FillingId
	--UPDATE _OilFilling SET OilAmount=@OilAmount WHERE Id=@FillingId

	

	IF @TotalRecords IS NULL OR @FillingId IS NULL
		THROW 50000, '@TotalRecords and @FillingId is required to call [_OilRecociliation] for type 1.', 1
	IF @TotalRecords > 1300
		THROW 50000, 'Maximum 1300 Records are allowed to create.', 1

END
   
END












GO
/****** Object:  StoredProcedure [dbo].[_OilSummaryReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_OilSummaryReport] 
(
 @LoadDateFrom Date, 
 @LoadDateTo Date, 
 @BranchId INT = NULL,
 @JobId INT = NULL,
 @PumpNameId INT = NULL,
 @FinancialYearId INT = NULL
)
AS
Begin
 	IF (@FinancialYearId IS NULL)
		SELECT @FinancialYearId = Id From Accounts_FinancialYear WHERE GetDate() Between StartDate And EndDate;	
		
	Select L.JobNo,L.JobStartDate,l.JobEndDate, L.PumpName, PN.LedgerId, Count(1) as IssuedTruck, Sum(L.HSDCost) as IssuedAmount
	,Sum(Case When D.[Status] = 2 Then 1 Else 0 End) as ReconcileTruck  
	,Sum(Case When D.[Status] = 2 Then D.Amount Else 0 End) as ReconcileAmount
	,Sum(Case When D.[Status] = 3 Then 1 Else 0 End) as DisputeTruck  
	,Sum(Case When D.[Status] = 3 Then D.Amount Else 0 End) as DisputeAmount
	,(Select Dbo.FN_Accounts_GetLedgerClosingBalance(PN.LedgerId, NULL, DateAdd(DAY, -1, @LoadDateFrom))) as OpeningBalance
	,(Select Dbo.[FN_Accounts_GetLedgerTransaction](PN.LedgerId,2,@FinancialYearId, DateAdd(DAY, -1, @LoadDateFrom), DateAdd(DAY, -1, @LoadDateTo))) as DebitBalance
	from vw_loadingchallandetails L
	Left Join _Job J On J.Id = L.JobId
	Left Join _OilFillingData D On D.ChallanNo = L.ChallanNo
	Left Join Pump P On P.Id = L.PumpId
	Left Join PumpName PN On PN.Id = P.PumpNameId
	Where L.HSDCost > 0 And Convert(Date,L.LoadDate,103) >= @LoadDateFrom And Convert(Date,L.LoadDate,103) <= @LoadDateTo
	AND (@JobId IS NULL OR L.JobId = @JobId)
	AND (@BranchId IS NULL OR J.ExecutingBranch = @BranchId)
	AND (@PumpNameId IS NULL OR P.PumpNameId = @PumpNameId)
	Group By L.JobNo, L.JobStartDate,l.JobEndDate, L.PumpName, PN.LedgerId
	Order bY L.JobNo, L.PumpName
End

GO
/****** Object:  StoredProcedure [dbo].[_ReturnInvestmentList]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[_ReturnInvestmentList]
	@FYId INT=0,
	@FromDate Date,
	@ToDate Date,
	@UserId INT=NULL,
	@BranchId INT=null,
	@jobNo VARCHAR(50)=null,
	@ClientId INT=null,
	@Unload INT =0
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @jobNo
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN
	SELECT YY.JobId, NetWt LiftQty, GuaranteeWT, TotalAdvance, UnloadedNetWt, BudgetSale, BranchName, Sector, TotalChallan TotalTruck
	, ClientName, BudgetSale ClientRate 
	, ISNULL(InvoiceAmount,0) AS InvoiceAmount, ISNULL(OtherDeduction, 0) Deduction, ISNULL(PaymentReceived,0) AS PaymentReceived,  ISNULL(ShortageDeduction,0) AS ShortageDeduction , ISNULL(MoistureDeduction,0) AS MoistureDeduction,  ISNULL(TDSDeduction,0) AS TDSDeduction
	, TotalAdvance AdvancePaid, ISNULL(PaidAmount,0) BalancePaid, Balance BalanceToBePayable, BilledWt ClaimQty, 'Running' JobStatus
	, (ISNULL(InvoiceAmount,0) - ISNULL(PaymentReceived,0) - ISNULL(ShortageDeduction,0)) as AmountReceivale -- change here xx.deduction
	, ((ISNULL(InvoiceAmount,0) - ISNULL(ShortageDeduction,0))-(ISNULL(TotalAdvance,0)+ISNULL(PaidAmount,0)+ISNULL(Balance,0))) as NetFundRealized  
	, ((ISNULL(PaymentReceived,0))-(ISNULL(TotalAdvance,0)+ISNULL(PaidAmount,0))) as ActualRealized  
	, BudgetBuy
	, CASE WHEN ISNULL(ActualSale,0)=0 THEN BudgetSale ELSE  ActualSale END AS ActualSale, EffectiveWt
	, CASE WHEN PaidAmount IS NOT NULL THEN IsNull(TotalBuy,0)/EffectiveWt ELSE BudgetBuy END ActualBuy
	, UnBilled, Billed, UnBilledWt, BilledWt
	, PaidAmount, Balance, UnpaidChallans, PaidChallan, TotalChallan, MaxLoadDate , MinLoadDate
	, ExecutingBranch, JD.JobNo
	FROM (
	SELECT JobId, Max(LoadDate) MaxLoadDate, Min(LoadDate) MinLoadDate, SUM(NetWt) NetWt, SUM(GuaranteeWT) GuaranteeWT
	, SUM(TotalAdvance) TotalAdvance, SUM(UnloadedNetWt) UnloadedNetWt
	, AVG(BudgetSale) BudgetSale, SUM(ActualBuy) TotalBuy, IsNull(SUM(EffectiveWt),0) EffectiveWt
	, SUM(BudgetBuy)/SUM(NetWt) BudgetBuy
	, SUM(Unbilled) UnBilled, SUM(Billed) Billed, SUM(UnBilledWt) UnBilledWt, IsNull(SUM(BilledWt),0) BilledWt, SUM(PaidAmount) PaidAmount
	, SUM(NetPayable) Balance, SUM(UnpaidChallan) UnpaidChallans, SUM(PaidChallan) PaidChallan, SUM(TotalChallan) TotalChallan, JobNo, ExecutingBranch
	FROM(
	
	SELECT L.JobId, LoadDate, NetWt, L.GuaranteeWT, TotalAdvance, UnloadedNetWt, L.InvoiceClientRate BudgetSale
	, (CASE WHEN P.UnloadingId IS NOT NULL THEN ISNULL(PaidAmount,0)+isNull(TotalAdvance,0) ELSE 0 END) ActualBuy, NetWt*Freight BudgetBuy
	, IsNull(P.EffectiveWt,0) EffectiveWt, J.ExecutingBranch, J.JobNo
	  , CASE WHEN IC.ChallanNo IS NULL THEN 1 ELSE 0 END UnBilled
	  , CASE WHEN IC.ChallanNo IS NOT NULL THEN 1 ELSE 0 END Billed
	  , CASE WHEN IC.ChallanNo IS NULL THEN NetWt ELSE 0 END UnBilledWt
	  , CASE WHEN IC.ChallanNo IS NOT NULL THEN (
		(CASE 
			WHEN I.ClaimQtyType = 1 /*H*/ THEN  (CASE WHEN ISNULL(L.NetWT,0) > ISNULL(U.UnloadedNetWt,0) THEN ISNULL(L.NetWT,0) ELSE ISNULL(U.UnloadedNetWt,0) END)
				WHEN I.ClaimQtyType = 2 /*L*/ THEN  (CASE WHEN ISNULL(L.NetWT,0) < ISNULL(U.UnloadedNetWt,0) THEN ISNULL(L.NetWT,0) ELSE ISNULL(U.UnloadedNetWt,0) END)
				WHEN I.ClaimQtyType = 3 /*NL*/ THEN  ISNULL(L.NetWT,0)
				WHEN I.ClaimQtyType = 4 /*NU*/ THEN  ISNULL(U.UnloadedNetWt,0)
				WHEN I.ClaimQtyType = 5 /*GW*/ THEN  ISNULL(L.GuaranteeWT,0)
				ELSE 0
			END)
	  ) ELSE 0 END BilledWt , PaidAmount, (CASE WHEN P.UnloadingId IS NULL THEN L.NetWT*Freight-TotalAdvance ELSE 0 END) NetPayable
	  , CASE WHEN P.UnloadingId IS NULL THEN 1 ELSE 0 END UnpaidChallan
	  , CASE WHEN P.UnloadingId IS NOT NULL THEN 1 ELSE 0 END PaidChallan
	  , 1 TotalChallan
	  FROM LoadingChallan L 
	LEFT OUTER JOIN UnloadingChallan U ON U.LoadingChallanId=L.Id
	LEFT OUTER JOIN Payment P ON P.LoadingId=L.Id
	LEFT OUTER JOIN _InvoiceChallan IC ON IC.ChallanNO=L.ChallanNo
	LEFT OUTER JOIN _Invoice I ON I.Id=IC.InvoiceId
	LEFT OUTER JOIN _Job J ON J.Id=L.JobId
	WHERE NetWt>0 
		--AND JobNo='GNPL/T/17-18/073' AND (LoadDate BETWEEN CONVERT(DATETIME, '2017-11-01', 102 ) AND CONVERT(DATETIME, '2017-11-30', 102))
		AND (LoadDate BETWEEN CONVERT(DATETIME, @FromDate, 102 ) AND CONVERT(DATETIME, @ToDate, 102))
		AND (@Unload=0 OR (U.LoadingChallanId IS NOT NULL))
	) XX 
	GROUP BY JobId, ExecutingBranch, JobNo
	) YY
	LEFT OUTER JOIN ( 
	SELECT id.JobId,
		 ActualSale 
		, InvoiceAmount, OtherDeduction, PaymentReceived, ShortageDeduction, MoistureDeduction, TDSDeduction, ClaimWt
		FROM (
		SELECT JobId, COUNT(ic.ChallanNo) TotalChallan from _InvoiceChallan ic
		left outer join loadingchallan l on l.ChallanNo=ic.ChallanNo
		WHERE (LoadDate BETWEEN CONVERT(DATETIME, @FromDate, 102 ) AND CONVERT(DATETIME, @ToDate, 102))
		GROUP BY JobId) ZZ
		LEFT OUTER JOIN (SELECT JobId, SUM(ClaimWt) ClaimWt, SUM(TotalInvoiceAmount) InvoiceAmount, SUM(OtherDeduction) OtherDeduction
		, SUM(TotalAmountReceived) PaymentReceived, SUM(Deduction) ShortageDeduction, SUM(MoistureDeduction) MoistureDeduction
		, SUM(TDS) TDSDeduction 
		, AVG(CASE WHEN TotalInvoiceAmount>TotalAmountReceived AND TotalAmountReceived>0 THEN TotalAmountReceived/(((TotalAmountReceived)/TotalInvoiceAmount)*ClaimWt) END) ActualSale 
		FROM vw_InvoiceDetails /* WHERE  JobId=11117*/ GROUP BY JobId) 
		id ON id.JobId=ZZ.JobId) ZZ ON ZZ.JobId=YY.JobId
	LEFT OUTER JOIN vw_ReportJobDetails JD ON JD.JobId=YY.JobId
	WHERE 1=1 
		AND (@BranchId IS NULL OR ExecutingBranch = @BranchId)
		AND (@jobNo IS NULL OR JD.JobNo = @jobNo)
	
END	

GO
/****** Object:  StoredProcedure [dbo].[_ShortageReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_ShortageReport]
(
@ClientId INT=NULL,
@BranchId INT=NULL,
@JobId INT=NULL,
@LoadDateFrom DATE=NULL,
@LoadDateTo DATE=NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@TruckId INT=NULL,
@Status INT=NULL,
@ShortageStatus INT=NULL

)

AS
BEGIN
    
	-- Drop Table #Temp

    SELECT L.JobId, L.TruckId, L.Id, L.ChallanNo, L.TruckSource, L.LoadType, L.NetWT, CONVERT(date, L.LoadDate,103) AS LoadDate, L.Freight, L.TotalFreight
           ,L.Advance, L.HSDCost, L.TotalAdvance, L.OwnerId , U.UnloadedNetWt, U.UnloadedDate,
           (CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000 AS TotalShortage, F.TotalTyers, F.VehicleNo,
		   T.TokenNo, T.ReceivedOn, T.PaidOn
		   ,PT.PartyType + ':' + P.ContactNo + ':' + P.PartyName + ':' + P.PANNumber + ':' + CONVERT(VARCHAR, P.Id) AS PaidName,
		    PC.ShortageWt, PC.ShortagePenaltyWt, PC.PenaltyRate, PC.Penalty, PC.ChallanDeduction, PC.NetPayable INTO #Temp
    FROM Loadingchallan L
    LEFT OUTER JOIN
    Unloadingchallan U On U.LoadingChallanId=L.Id
    LEFT OUTER JOIN
    Fleet_Vehicle F ON F.Id=L.TruckId
	LEFT OUTER JOIN
	vw_ReportJobDetails J ON J.JobId=L.JobId
	LEFT OUTER JOIN
	_TokenChallans TC ON TC.ChallanNo=L.ChallanNo
	LEFT OUTER JOIN
	_Token T ON T.Id = TC.TokenId
	LEFT OUTER JOIN
	Common_Parties P ON P.Id = T.PartyId
	LEFT OUTER JOIN
	Common_PartyType PT ON PT.Id = P.PartyType
	LEFT OUTER JOIN
	Payment PC ON PC.LoadingId = L.Id
    WHERE U.Id IS NOT NULL AND (L.NetWt - U.UnloadedNetWt) > 0 AND 1=1
		AND (@ClientId IS NULL OR J.ClientId = @ClientId)
	AND (@BranchId IS NULL OR J.JobBranchId = @BranchId)
	AND (@JobId IS NULL OR L.JobId = @JobId)
	AND (@LoadDateFrom IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103) >= @LoadDateFrom) 
	AND (@LoadDateTo IS NULL OR CONVERT(smalldatetime, L.LoadDate, 103) <= @LoadDateTo) 
	AND (@LoadingPointId IS NULL OR J.LoadingPointId = @LoadingPointId)
	AND (@UnloadingPointId IS NULL OR J.UnLoadingPointId = @UnloadingPointId)
	AND (@Status IS NULL OR ((@Status=0 AND (PC.Id IS NULL)) OR (@Status=1 AND (PC.Id IS NOT NULL))))
	AND (@ShortageStatus IS NULL OR ((CASE WHEN L.NetWt<U.UnloadedNetWt THEN 0 ELSE L.NetWt-U.UnloadedNetWt END)*1000) >= @ShortageStatus)
	-- AND (@Status=1 OR (PC.Id IS NULL))
	-- AND (@Status=0 OR (PC.Id IS NOT NULL)) 

	  -- ORDER BY L.LoadDate ASC
    
    
    
    SELECT    T.JobId, J.JobNo,J.JobBranchId,J.BranchName, J.Sector, J.MaterialName, J.ClientName,T.TruckSource, T.ChallanNo,T.VehicleNo,C.PartyName, C.PANNumber, CONVERT(VARCHAR, T.LoadDate,103) AS LoadDate, T.NetWT, CONVERT(VARCHAR, T.UnloadedDate,103) AS UnloadedDate , T.UnloadedNetWt, T.LoadType, 
              T.Freight AS Rate, 
    		  T.Freight * CASE WHEN (T.NetWT<T.UnloadedNetWt) THEN T.NetWT ELSE T.UnloadedNetWt END AS Freight, ISNULL(T.TotalAdvance, 0) AS TotalAdvance,
    		  ISNULL(T.Advance,0) AS Advance, ISNULL(T.HSDCost,0) AS HSDCost, ISNULL(T.TotalShortage,0) AS TotalShortage, 
			  ISNULL(FC.PenaltyShortageWt, 0) AS PenaltyShortageWt, ISNULL(FC.ShortageAmt, 0) AS ShortageAmt, FC.DeductionType,
			  T.TokenNo, CONVERT(VARCHAR, T.ReceivedOn, 103) AS TokenDate, CONVERT(VARCHAR, T.PaidOn, 103) AS PaidDate, T.PaidName,
			  ISNULL(T.ShortageWt,0) AS ShortageWt, ISNULL(T.ShortagePenaltyWt,0) AS ShortagePenaltyWt,
			  ISNULL(T.PenaltyRate,0) AS PenaltyRate, ISNULL(T.Penalty,0) AS Penalty, ISNULL(T.ChallanDeduction,0) AS ChallanDeduction, ISNULL(T.NetPayable,0) AS NetPayble
    FROM #Temp T 
	LEFT OUTER JOIN
    vw_ReportJobDetails J ON J.JobId=T.JobId
    LEFT OUTER JOIN
    Common_Parties C ON C.Id=T.OwnerId AND C.PartyType = 1
    OUTER APPLY
    [FN_GetPenaltyForChallanDyanamic] (T.JobId, T.NetWT, T.TotalShortage, T.TotalTyers, T.LoadType, T.TruckSource)
    AS FC  ORDER BY T.LoadDate DESC


END
GO
/****** Object:  StoredProcedure [dbo].[_TokenBulkPaymentData]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_TokenBulkPaymentData](
	@BulkPaymentId INT,
	@Mode	Varchar(50))
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @Mode
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1

BEGIN
	DECLARE @FormatType Varchar(50) = NULL
	DECLARE @Type INT = 0
	Declare @DebitAmount Decimal(18,2) = 0.0
	Declare @GenerateDate Varchar(50) = NULL
	Declare @ErrorMsg Varchar(5000) = NULL
	SELECT @FormatType = UPPER(FieldValue) FROM [Common_Settings] Where FieldName = 'BulkTokenTransferType'
	IF @Mode = 'TOKEN'
		SELECT @Type = IsNull(BankNameId,-1), @GenerateDate = Convert(Varchar, ChkDate, 103) From _TokenBulkPayment WITH (NOLOCK) Where Id = @BulkPaymentId
	IF @Mode = 'LOAD'
		SELECT @Type = IsNull(BankNameId,-1), @GenerateDate = Convert(Varchar, ChkDate, 103) From LoadingAdvanceBulkPayment WITH (NOLOCK) Where Id = @BulkPaymentId
	
	IF @Mode = 'TOKEN'
		Select @DebitAmount = Convert(Decimal(18,0),Sum(T.TokenAmount)) 
		From  _TokenBulkPaymentId BPI  WITH (NOLOCK)
		Left Join vw_TokenDetails T On T.Id = BPI.TokenId
		Where BPI.BulkPaymentId = @BulkPaymentId
	IF @Mode = 'LOAD'
		Select @DebitAmount = Convert(Decimal(18,0),Sum(T.NetPayable)) 
		From  LoadingAdvanceBulkPaymentId BPI  WITH (NOLOCK)
		Left Join LoadingAdvance T On T.Id = BPI.LoadingAdvId
		Where BPI.BulkPaymentId = @BulkPaymentId
	SELECT @ErrorMsg = DBO.[FN__ValidateTokenBulkPayment](@BulkPaymentId, @Mode)
	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1
	IF @FormatType = 'TEXT'
	BEGIN
		IF @Type = 102 -- SBI Format
		BEGIN
			IF @Mode = 'TOKEN'
			BEGIN
				Select AmountRow From (
				Select 0 as SNo, Concat(
					ACNumber
					,'#', (Case When @Type = 102 THEN Right(IFSCCode,5) ELSE IFSCCode END)
					,'#', @GenerateDate
					,'#', Convert(Varchar, Convert(Decimal(18,0),@DebitAmount))
					,'#', ''
					,'#', Replace(Replace(BP.RefNo, '/', ''), '-','')
					,'#', B.ACName
					,'#', ''
					) as AmountRow
				from _TokenBulkPayment BP  WITH (NOLOCK)
				Left Join Accounts_Banks B  WITH (NOLOCK) ON B.LedgerId = BP.BankLedger
				Where BP.Id = @BulkPaymentId
				Union All
				Select B.Id as SNo, Concat(
					I.BankACNo
					,'#', (Case When @Type = 102 THEN Right(I.IFSCCode,5) ELSE I.IFSCCode END)
					,'#', @GenerateDate
					,'#', ''
					,'#', Convert(Varchar, Convert(Decimal(18,0),T.TokenAmount))
					,'#', Replace(Replace(T.TokenNo, '/', ''), '-','')
					,'#', I.PartyName
					,'#', (Case When @Type = 102 THEN '' ELSE (Case When T.TokenAmount >= 200000 THEN 'RTGS' ELSE 'NEFT' END) END) 
					) as AmountRow
				From _TokenBulkPaymentId I  WITH (NOLOCK)
				Left Join _TokenBulkPayment B WITH (NOLOCK)  On B.Id = I.BulkPaymentId
				Left Join vw_TokenDetails  T  WITH (NOLOCK) On T.Id = I.TokenId
				Left Join Common_BankNames BN  WITH (NOLOCK)  On BN.Id = I.BankNameId
				Where B.Id = @BulkPaymentId ) XX 
				Order By XX.SNo
			END
			ELSE IF @Mode = 'LOAD'
			BEGIN
				Select AmountRow From (
				Select 0 as SNo, Concat(
					ACNumber
					,'#', (Case When @Type = 102 THEN Right(IFSCCode,5) ELSE IFSCCode END)
					,'#', @GenerateDate
					,'#', Convert(Varchar, Convert(Decimal(18,0),@DebitAmount))
					,'#', ''
					,'#', Replace(Replace(BP.RefNo, '/', ''), '-','')
					,'#', B.ACName
					,'#', ''
					) as AmountRow
				from LoadingAdvanceBulkPayment BP
				Left Join Accounts_Banks B ON B.LedgerId = BP.BankLedger
				Where BP.Id = @BulkPaymentId
				Union All
				Select B.Id as SNo, Concat(
					P.BankACNo
					,'#', (Case When @Type = 102 THEN Right(P.IFSCCode,5) ELSE P.IFSCCode END)
					,'#', @GenerateDate
					,'#', ''
					,'#', Convert(Varchar, Convert(Decimal(18,0),T.NetPayable))
					,'#', Replace(Replace(L.ChallanNo, '/', ''), '-','')
					,'#', P.PartyName
					,'#', (Case When @Type = 102 THEN '' ELSE (Case When T.NetPayable >= 200000 THEN 'RTGS' ELSE 'NEFT' END) END) 
					) as AmountRow
				From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join LoadingChallan  L On L.Id = T.LoadingId
				Left Join Common_Parties P On P.Id = T.PartyId
				Left Join Common_BankNames BN On BN.Id = P.BankName
				Where B.Id = @BulkPaymentId ) XX 
				Order By XX.SNo
			END
		END
		ELSE IF (@Type = -1)  -- Other Bank Format
		BEGIN
			IF @Mode = 'TOKEN'
			BEGIN
				Select AmountRow From (
				Select 0 as SNo, Concat(
					ACNumber
					,'#', Right(IFSCCode,5)
					,'#', @GenerateDate
					,'#', Convert(Varchar, Convert(Decimal(18,2),@DebitAmount))
					,'#', ''
					,'#', Replace(Replace(BP.RefNo, '/', '_'), '-','')
					,'#', B.ACName
					,'#', ''
					) as AmountRow
				from _TokenBulkPayment BP  WITH (NOLOCK)
				Left Join Accounts_Banks B  WITH (NOLOCK) ON B.LedgerId = BP.BankLedger
				Where BP.Id = @BulkPaymentId
				Union All
				Select B.Id as SNo, Concat(
					I.BankACNo
					,'#', (Case When @Type = 102 THEN Right(I.IFSCCode,5) ELSE I.IFSCCode END)
					,'#', @GenerateDate
					,'#', ''
					,'#', Convert(Varchar, Convert(Decimal(18,2),T.TokenAmount))
					,'#', Replace(Replace(B.RefNo, '/', '_'), '-','') -- Replace(Replace(T.TokenNo, '/', ''), '-','')
					,'#', I.PartyName
					,'#', (Case When @Type = 102 THEN '' ELSE (Case When T.TokenAmount >= 200000 THEN 'RTGS' ELSE 'NEFT' END) END) 
					) as AmountRow
				From _TokenBulkPaymentId I  WITH (NOLOCK)
				Left Join _TokenBulkPayment B  WITH (NOLOCK) On B.Id = I.BulkPaymentId
				Left Join vw_TokenDetails  T  WITH (NOLOCK) On T.Id = I.TokenId
				Left Join Common_BankNames BN  WITH (NOLOCK) On BN.Id = I.BankNameId
				Where B.Id = @BulkPaymentId ) XX 
				Order By XX.SNo
			END
			ELSE IF @Mode = 'LOAD'
			BEGIN
				Select AmountRow From (
				Select 0 as SNo, Concat(
					ACNumber
					,'#', Right(IFSCCode,5)
					,'#', @GenerateDate
					,'#', Convert(Varchar, Convert(Decimal(18,2),@DebitAmount))
					,'#', ''
					,'#', Replace(Replace(BP.RefNo, '/', '_'), '-','')
					,'#', B.ACName
					,'#', ''
					) as AmountRow
				from LoadingAdvanceBulkPayment BP
				Left Join Accounts_Banks B ON B.LedgerId = BP.BankLedger
				Where BP.Id = @BulkPaymentId
				Union All
				Select B.Id as SNo, Concat(
					P.BankACNo
					,'#', (Case When @Type = 102 THEN Right(P.IFSCCode,5) ELSE P.IFSCCode END)
					,'#', @GenerateDate
					,'#', ''
					,'#', Convert(Varchar, Convert(Decimal(18,2),T.NetPayable))
					,'#', Replace(Replace(Convert(Varchar(50), L.ChallanNo), '/', '_'), '-','') -- Replace(Replace(T.TokenNo, '/', ''), '-','')
					,'#', P.PartyName
					,'#', (Case When @Type = 102 THEN '' ELSE (Case When T.NetPayable >= 200000 THEN 'RTGS' ELSE 'NEFT' END) END) 
					) as AmountRow
				From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join LoadingChallan  L On L.Id = T.LoadingId
				Left Join Common_Parties P On P.Id = T.PartyId
				Left Join Common_BankNames BN On BN.Id = P.BankName
				Where B.Id = @BulkPaymentId ) XX 
				Order By XX.SNo
			END
		END
	END
	ELSE IF  @FormatType = 'EXCEL'
	BEGIN
		IF	(@Type = 102) -- SBI Format
		BEGIN
			IF @Mode = 'TOKEN'
			BEGIN
				Select row_number() over(partition by B.Id order by B.Id) as SNo
					,I.PartyName  as [AC Holder Name]
					,BN.Name as BankName
					,I.BankACNo as [ACNumber]
					-- ,P.IFSCCode  as IFSCCode
					,T.TokenNo as ReferenceNo
					,T.TokenAmount as[Amount]
					-- ,Concat('Token Payment for ', T.TokenNo)  as Remarks
					-- ,Convert(Varchar, GetDate(), 103) as TransactionDate
				From _TokenBulkPaymentId I
				Left Join _TokenBulkPayment B On B.Id = I.BulkPaymentId
				Left Join vw_TokenDetails  T On T.Id = I.TokenId
				Left Join Common_BankNames BN On BN.Id = I.BankNameId
				Where B.Id = @BulkPaymentId Order BY SNo
			END
			ELSE IF @Mode = 'LOAD'
			BEGIN
				Select row_number() over(partition by B.Id order by B.Id) as SNo
					,P.PartyName  as [AC Holder Name]
					,BN.Name as BankName
					,P.BankACNo as [ACNumber]
					-- ,P.IFSCCode  as IFSCCode
					,L.ChallanNo ReferenceNo
					,T.NetPayable as[Amount]
					-- ,Concat('Token Payment for ', T.TokenNo)  as Remarks
					-- ,Convert(Varchar, GetDate(), 103) as TransactionDate
				From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join LoadingChallan  L On T.Id = T.LoadingId
				Left Join Common_Parties P On P.Id = T.PartyId
				Left Join Common_BankNames BN On BN.Id = P.BankName
				Where B.Id = @BulkPaymentId Order BY SNo
			END
		END
		ELSE IF (@Type = -1)  -- Other Bank Format
		BEGIN
			IF @Mode = 'TOKEN'
			BEGIN
				Select row_number() over(partition by B.Id order by B.Id) as SNo
					,I.IFSCCode  as [Beneficiary IFS Code]
					,T.TokenAmount as [Transaction Amount]
					,0 as [Comission Amount]
					,Banks.ACNumber [Remitter's Account Number]
					,Replace(Banks.ACName, ' ','') [Remiter's Name]
					,Concat(Banks.BranchName, IsNull(', ' + Banks.BranchAddress, '')) [Remiter's Address]
					,I.BankACNo as [Beneficiary A/c. No.]
					,Replace(I.PartyName, ' ','')  as [Benefinciary Name]
					,BN.Name as [Beneficiary Bank Name]
					,'Vendor Payment' as [Payment Details]
					,Replace(Replace(T.TokenNo,'/',''),'-','') as [Sender to receiver Information]
					,L.Email as [Email ID]
					-- ,Concat('Token Payment for ', T.TokenNo)  as Remarks
					-- ,Convert(Varchar, GetDate(), 103) as TransactionDate
				From _TokenBulkPaymentId I
				Left Join _TokenBulkPayment B On B.Id = I.BulkPaymentId
				Left Join Accounts_Ledgers L On L.Id = B.BankLedger
				Left Join Accounts_Banks Banks On Banks.LedgerId = L.Id
				Left Join vw_TokenDetails  T On T.Id = I.TokenId
				Left Join Common_BankNames BN On BN.Id = I.BankNameId
				Where B.Id = @BulkPaymentId Order BY SNo
			END
			ELSE IF @Mode = 'LOAD'
			BEGIN
				Select row_number() over(partition by B.Id order by B.Id) as SNo
					,P.IFSCCode  as [Beneficiary IFS Code]
					,T.NetPayable as [Transaction Amount]
					,0 as [Comission Amount]
					,Banks.ACNumber [Remitter's Account Number]
					,Replace(Banks.ACName, ' ','') [Remiter's Name]
					,Concat(Banks.BranchName, IsNull(', ' + Banks.BranchAddress, '')) [Remiter's Address]
					,P.BankACNo as [Beneficiary A/c. No.]
					,Replace(P.PartyName, ' ','')  as [Benefinciary Name]
					,BN.Name as [Beneficiary Bank Name]
					,'Vendor Payment' as [Payment Details]
					,Replace(Replace(LD.ChallanNo,'/',''),'-','') as [Sender to receiver Information]
					,L.Email as [Email ID]
					-- ,Concat('Token Payment for ', T.TokenNo)  as Remarks
					-- ,Convert(Varchar, GetDate(), 103) as TransactionDate
				From LoadingAdvanceBulkPaymentId I
				Left Join LoadingAdvanceBulkPayment B On B.Id = I.BulkPaymentId
				Left Join Accounts_Ledgers L On L.Id = B.BankLedger
				Left Join Accounts_Banks Banks On Banks.LedgerId = L.Id
				Left Join LoadingAdvance  T On T.Id = I.LoadingAdvId
				Left Join LoadingChallan  LD On LD.Id = T.LoadingId
				Left Join Common_Parties P On P.Id = T.PartyId
				Left Join Common_BankNames BN On BN.Id = P.BankName
				Where B.Id = @BulkPaymentId Order BY SNo
			END
		END
	END
END

GO
/****** Object:  StoredProcedure [dbo].[_TokenEmailReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_TokenEmailReport] (
@ToDate SMALLDATETIME = NULL
)
AS
BEGIN
    SELECT SUM(PendingToken) PendingToken, SUM(PendingTokenAmount) PendingTokenAmount, 
           SUM(PaidToken) PaidToken, SUM(PaidTokenAmount) PaidTokenAmount, BranchName 
    FROM
    (
        SELECT SUM(CASE WHEN voucherid IS NULL THEN 1 ELSE 0 END) PendingToken,
               0 PaidToken, 
               SUM(CASE WHEN voucherid IS NULL THEN Amount ELSE 0 END) PendingTokenAmount,
               0 PaidTokenAmount, CB.Name BranchName
        FROM token
        LEFT OUTER JOIN Common_Branch CB ON CB.Id = _token.TokenBranchId
        WHERE CONVERT(SMALLDATETIME, ReceivedOn, 102) = CONVERT(SMALLDATETIME, @ToDate, 102)
        GROUP BY CB.Name
        
        UNION ALL
        
        SELECT 0 PendingToken,
               SUM(CASE WHEN voucherid IS NULL THEN 0 ELSE 1 END) PaidToken,
               0 PendingTokenAmount,
               SUM(CASE WHEN voucherid IS NULL THEN 0 ELSE Amount END) PaidTokenAmount, CB.Name BranchName
        FROM token
        LEFT OUTER JOIN Common_Branch CB ON CB.Id = _token.TokenBranchId
        WHERE CONVERT(SMALLDATETIME, PaidOn, 102) = CONVERT(SMALLDATETIME, @ToDate, 102)
        GROUP BY CB.Name
    ) XX 
    GROUP BY BranchName
END


GO
/****** Object:  StoredProcedure [dbo].[_TokenMaterialCode]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[_TokenMaterialCode](@ChallanList Varchar(5000))
As
Begin
	DECLARE @MCode VARCHAR(50) =  NULL
	DECLARE @MId INT
	DECLARE @MCount INT
	DECLARE @MySQL NVarchar(MAX) =  ''

	DECLARE @MCount1 INT = NULL

	DECLARE @JobCount INT = NULL
	DECLARE @JobCount1 INT = NULL

	DECLARE @MId1 INT = NULL

	SELECT * INTO #ChallanList FROM (
	SELECT	Split.a.value('.', 'VARCHAR(100)') AS Challan
	FROM	
		(
			SELECT CAST ('<M>' + REPLACE(REPLACE(@ChallanList, ' ',''), ',', '</M><M>') + '</M>' AS XML) AS Challan  
		) AS A CROSS APPLY Challan.nodes ('/M') AS Split(a)
	) XX

	
	Select @MCount = Count(Distinct J.MaterialId), @JobCount=Count(Distinct L.JobId) From LoadingChallan L
		inner join #ChallanList C on c.Challan=l.ChallanNo
		Inner Join JobDetails J On J.Id = L.JobId
	--IF @JobCount > 1 
	--BEGIN
	--	IF 1=1
	--		THROW 50000, 'Token cannot be created for multiple jobs', 1
	--END

	IF @MCount > 1 
	BEGIN
		SET @MCode = 'OTH'
		
	END
	ELSE
	BEGIN
		
		Select TOP 1 @MCode =  J.MaterialId From LoadingChallan L
		inner join #ChallanList C on c.Challan=l.ChallanNo
		Inner Join JobDetails J On J.Id = L.JobId
		Inner Join  Materials M ON M.Id = J.MaterialId
	END
	SELECT @MCode
END
GO
/****** Object:  StoredProcedure [dbo].[_TokenSummaryReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_TokenSummaryReport] (
@TokenReference VARCHAR(50)=NULL,
@FromReceiveDate VARCHAR(10) = NULL,
@ToReceiveDate VARCHAR(10) = NULL,
@FromChequeDate VARCHAR(10) = NULL,
@ToChequeDate VARCHAR(10) = NULL,
@TokenStatus VARCHAR(50)=NULL,
@BranchId INT=NULL,
@JobId INT=0,
@LoadingPointsId VARCHAR(50)=NULL,
@UnloadingPointsId VARCHAR(50)=NULL,
@PartyId INT=0,
@MaterialId VARCHAR(50)='',
@PaymentMode INT = 0
)
AS

DECLARE @SQLInjectdata VARCHAR(8000)=''
 SET @SQLInjectdata = @TokenReference + @FromReceiveDate + @ToReceiveDate + @FromChequeDate + @ToChequeDate + @TokenStatus + @LoadingPointsId +@UnloadingPointsId
  + @PaymentMode
	
DECLARE @flag bit=0
 SELECT @flag = dbo.FN_EscapeSQLInjection(@SQLInjectdata)
	
IF @flag=0
	 THROW 50000, 'SQL Server encountered exception', 1


BEGIN 

IF @TokenReference IS NULL AND  @FromReceiveDate IS NULL AND @ToReceiveDate IS NULL AND @PaymentMode=0 AND @TokenStatus IS NULL AND  @BranchId IS NULL
	BEGIN
		SELECT 1 from Accounts_FinancialYear WHERE 1<>1
	END
ELSE
BEGIN
	DECLARE  @StartDate SMALLDATETIME
	IF @FromReceiveDate IS NULL
	SELECT @StartDate =StartDate FROM Accounts_FinancialYear WHERE GETDATE() BETWEEN StartDate AND EndDate
	ELSE
	SET @StartDate = CONVERT(SMALLDATETIME, @FromReceiveDate,103)
	
	DECLARE  @EndDate SMALLDATETIME
	IF @ToReceiveDate IS NULL
	SET @EndDate = GETDATE()
	ELSE
	SET @EndDate = CONVERT(SMALLDATETIME, @ToReceiveDate,103)
	
	SELECT *, case when VoucherId is NULL then 'Pending' else 'Paid' end TokenVoucherStatus INTO #tokentemp FROM _Token
	WHERE 
	(@TokenReference IS NULL OR TokenNo=@TokenReference) 
	AND  ReceivedOn >= @StartDate AND ReceivedOn<= @EndDate
	AND (@PaymentMode=0 OR PaymentMode=@PaymentMode) 
	AND (@TokenStatus IS NULL OR (IsNull(VoucherId,0)=@TokenStatus AND @TokenStatus=0) OR (VoucherId Is Not NULL AND @TokenStatus=1))
	AND  ( @BranchId IS NULL OR TokenBranchId=@BranchId) 

	SELECT Count(TC.ChallanNo) as ChallanCount, TokenId, JobNo, Sector, MaterialName, LoadingPoint, UnLoadingPoint
	INTO #tempchallan
	from _TokenChallans TC
	LEFT OUTER JOIN LoadingChallan L ON L.ChallanNo=TC.ChallanNo
	LEFT OUTER JOIN vw_jobdetails J ON J.JobId=L.JobId
	CROSS JOIN #tokentemp WHERE #tokentemp.Id=TC.TokenId
	GROUP BY JobNo, Sector, TokenId, MaterialName, LoadingPoint, UnLoadingPoint
	
	SELECT TokenNo as TokenReference, CONVERT(VARCHAR(12),ReceivedOn, 103) ReceivedOn, TT.ChkNeftRefNo as ChequeNo, AP.Name as Name, MaterialName as MaterialName, CB.Name As BranchCode, Amount as PaymentAmount, TokenVoucherStatus as StatusType, VoucherNo,AV.VoucherDate as VoucherDate,U.UserName as UserName, PartyName As PaidToName, ContactNo as Contact, CT.PartyType as PaidType,TM.* FROM #tokentemp TT
	LEFT OUTER JOIN  Accounts_Vouchers AV ON AV.Id=TT.VoucherId
	LEFT OUTER JOIN Common_Parties CP ON CP.Id=TT.PartyId
	LEFT OUTER JOIN Common_PartyType CT ON CT.Id=CP.PartyType
	LEFT OUTER JOIN #tempchallan TM ON TM.TokenId=TT.Id
	LEFT OUTER JOIN Users U ON U.Id=TT.InsertUserId
	LEFT OUTER JOIN Accounts_PaymentMode AP ON AP.Id=TT.PaymentMode
	LEFT OUTER JOIN Common_Branch CB ON CB.Id=TT.TokenBranchId 
	WHERE 
	(@TokenReference IS NULL OR TokenNo=@TokenReference) AND 
	ReceivedOn >= @StartDate AND ReceivedOn<= @EndDate
	AND (@UnloadingPointsId IS NULL OR TM.UnloadingPoint=@UnloadingPointsId) 
	AND (@LoadingPointsId IS NULL OR TM.LoadingPoint=@LoadingPointsId) 
	 ORDER BY ReceivedOn, CB.Name
	END
END
GO
/****** Object:  StoredProcedure [dbo].[_unLoadingChallanDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[_unLoadingChallanDetails]
@WOId INT = NULL,
@JobId INT = NULL,
@ClientId INT= NULL,
@LoadDateFrom Date = NULL,
@LoadDateTo Date = NULL,
@LoadingPoint VARCHAR(50)=NULL,
@UnloadingPoint VARCHAR(50)=NULL,
@UnloadDateFrom Date=NULL,
@UnloadDateTo Date=NULL,
@IsUnloadingPending Varchar(50)  = NULL,
@TPInvNo Varchar(50) = NULL,
@TruckNo Varchar(50) = NULL,
@OwnerId INT = NULL,
@PartyId INT=NULL,
 @IsBilled INT=NULL,
@AssociationId INT=NULL
AS
BEGIN
   SELECT TOP 10000 v.ChallanNo,LC.TP,CONVERT(VARCHAR(10),v.LoadDate, 103)  LoadDate,v.TruckNumber,v.NetWT,v.UnloadedNetWt,v.ClaimLoad
   ,CONVERT(VARCHAR(10),v.UnloadedDate, 103) UnloadedDate,v.ChallanSerialNo 
   , V.ChallanNoKey,c.Name as ClientName,V.Sector
   ,L.Address as ClientAddress,L.State as ClientState,L.PinCode as PinCode, v.UnloadedDate UnoadDateInDTFormat
  FROM   vw_ReportLoadingChallanReport v 
   Left Outer Join Common_Client C ON C.Id= v.ClientId
   Left Outer Join Accounts_Ledgers L ON C.LedgerId=L.Id
   Left outer join LoadingChallan LC ON LC.ChallanNo = V.ChallanNo
     Left outer join _InvoiceChallan IC ON IC.ChallanNo = V.ChallanNo
   WHERE 1=1 AND  v.UnloadedDate Is NOT NULL
    AND (@ClientId IS NULL OR v.ClientId = @ClientId)
   AND (@LoadingPoint IS NULL OR v.LoadingPointId = @LoadingPoint)
   AND (@UnloadingPoint IS NULL OR v.UnLoadingPointId = @UnloadingPoint)
   AND (@LoadDateFrom IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadDateFrom)
   AND (@LoadDateTo IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadDateTo)
   AND (@UnloadDateFrom IS NULL OR CONVERT(date, v.UnloadedDate, 103)>= @UnloadDateFrom)
   AND (@UnloadDateTo IS NULL OR CONVERT(date, v.UnloadedDate, 102) <= @UnloadDateTo)
   --AND (@OwnerId IS NULL OR [LOwnerId] = @OwnerId)
   AND (@AssociationId IS NULL OR V.LAssociationId = @AssociationId)
   And (@PartyId IS NULL OR v.LOwnerId = @PartyId)
   AND (@IsBilled IS NULL OR (@IsBilled=1 AND IC.ChallanNo IS NOT NULL) OR (@IsBilled=0 AND IC.ChallanNo IS NULL))
   ORDER BY v.UnloadedDate
   
END
GO
/****** Object:  StoredProcedure [dbo].[_ValidateAdvanceRequest]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[_ValidateAdvanceRequest] (@pAdvanceId INT)
AS
BEGIN
	DECLARE @AdvanceId INT = @pAdvanceId
	DECLARE @ErrorMsg VARCHAR(5000) = NULL
	DECLARE @LoadDate DATE = NULL
	DECLARE @BranchId INT = NULL
	DECLARE @JobNo VARCHAR(50) = NULL
	DECLARE @FYID INT = NULL
	DECLARE @FYStart DATE = NULL
	DECLARE @LedgerBalance DECIMAL(18,2)=0

	
	SELECT @LedgerBalance = SUM(DBO.FN_Accounts_GetLedgerClosingBalance(LedgerId, NULL, NULL)) 
FROM
    (SELECT DISTINCT ledgerid 
     FROM advancedetails a 
     INNER JOIN job j ON j.id = a.jobid 
     WHERE advanceid = @pAdvanceId) YY

	IF (@LedgerBalance <> 0)
			THROW 50000, 'One of the job in request has balance, please remove or settle the job', 1

	SELECT  @LoadDate = LoadDate, @BranchId = BranchId From _Advance Where Id = @pAdvanceId
	select @FYStart =StartDate from Accounts_FinancialYear where @LoadDate between StartDate and EndDate
	
	SELECT @ErrorMsg = 'Error: Following job are not approved.\n' +  STUFF((
		SELECT ', ' + Concat(J.JobNo, ' (', J.JobStatusName, ')') 
		FROM _AdvanceDetails AD
		LEFT JOIN _Advance A On A.Id = AD.AdvanceId
		LEFT JOIN vw_jobdetails J On J.JobId = AD.JobId
		WHERE AD.AdvanceId = @AdvanceId And J.JobStatus <> 4
	FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1
	SELECT @ErrorMsg = 'Error: Following job are from different branch.\n' + STUFF((
		SELECT ', ' + Concat(J.JobNo, ' (', B.Name, ')') 
		FROM _AdvanceDetails AD
		LEFT JOIN _Advance A On A.Id = AD.AdvanceId
		LEFT JOIN JobDetails J On J.Id = AD.JobId
		LEFT JOIN Common_Branch B ON B.Id = J.BranchId
		WHERE AD.AdvanceId = @AdvanceId AND A.BranchId <> B.Id
	FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1
	IF @ErrorMsg IS NULL
	BEGIN
		SELECT @LoadDate = LoadDate, @BranchId = BranchId FROM _Advance WHERE Id = @AdvanceId
		DECLARE @status INT=null
		SELECT @status=[status] FROM _AdvanceApprovals WHERE Id=(SELECT MAX(Id) FROM _AdvanceApprovals 
		WHERE AdvanceId=@AdvanceId)-- in (SELECT Id From _Advance WHERE LoadDate = @LoadDate AND BranchId = @BranchId))
		IF @status<>5
		BEGIN
			SELECT @ErrorMsg = Convert(Varchar(50), Id) 
			FROM _Advance 
			WHERE LoadDate = @LoadDate AND BranchId = @BranchId And Id <> @AdvanceId
		IF @ErrorMsg IS NOT NULL
			SET @ErrorMsg = 'Error: There is already a request for same LoadDate and Same branch with following Id.\n' + @ErrorMsg
		END
	END
	
	--SELECT @ErrorMsg = 'Error: There is already a request for same LoadDate with following Jobs.\n' + STUFF((
	--	Select ', ' + JobNo From _AdvanceDetails AD
	--	Inner Join jobdetails J On J.Id = AD.JobId
	--	Inner Join _Advance A On A.Id = AD.AdvanceId
	--	Where JobId in (Select JobId From _AdvanceDetails Where AdvanceId = @AdvanceId)
	--	And AdvanceId <> @AdvanceId And A.LoadDate = @LoadDate
	--	FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1
	
	

	/*SELECT @ErrorMsg = 'Error: Following job are not approved.\n' + STUFF((
		Select ', ' + JobNo From _AdvanceDetails AD
		Inner Join _Job J On J.Id = AD.JobId
		Inner Join _Advance A On A.Id = AD.AdvanceId
		Where A.Id = @AdvanceId and j.JobStatus <> 4
		FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '') */
	SELECT @ErrorMsg =  'Error: Following job are not approved.\n' + STUFF((
		Select ', ' + JobNo From _AdvanceDetails AD
		Inner Join _Job J On J.Id = AD.JobId
		Inner Join _Advance A On A.Id = AD.AdvanceId
		inner join (select JobId, Status from (select JobId, Status, row_number() over(partition by JobId order by ActionDate desc) as rn from _JobApprovals) as T where rn = 1) X ON X.JobId=J.Id
		Where A.Id = @AdvanceId and X.Status <> 4
		FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')

	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1


	--Select JobNo,  DBO.FN_Accounts_GetLedgerClosingBalance(LedgerId,NULL, @LoadDate) as ClosingBalance  
	Select JobNo,  DBO.FN_Accounts_GetLedgerClosingBalance(LedgerId,NULL, NULL) as ClosingBalance  
	INTO #TTEMP
	from _Job Where JobStatus<>3 AND ExecutingBranch = (Select BranchId From  _Advance Where Id = @AdvanceId) AND StartDate >=@FYStart
	-- UPDATE _Job set _Job.JobStatus=3  where jobno in (select JobNo from #TTEMP where ClosingBalance=0)
	
	SELECT @ErrorMsg = 'Error: Following job(s) have pending balance. Please close the pending balance in job before advance request -\n' + STUFF((
		Select ', ' + JobNo + ' (Rs.'+ Convert(varchar,ClosingBalance) +')' From #TTEMP
		Where ClosingBalance <> 0.0
		FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	IF @ErrorMsg IS NOT NULL
		THROW 50000, @ErrorMsg, 1
	
	Declare @MaxCashLimit Decimal(18,2) = 0.0
	Declare @BranchBalance Decimal(18,2) = 0.0
	Declare @BranchLedgerId INT =NULL
	Select @MaxCashLimit = MaxCashLimit, @BranchLedgerId = LedgerId From Common_Branch Where Id =  @BranchId
	Select @BranchBalance = DBO.FN_Accounts_GetLedgerClosingBalance(@BranchLedgerId,NULL, @LoadDate)
	SET @ErrorMsg = 'Branch already have Rs. ' + Convert(Varchar(50), @BranchBalance) + ' cash balance which exceed max limit. \n Failded to create advance request.'
	IF (@MaxCashLimit <= @BranchBalance)
		 THROW 50000, @ErrorMsg, 1
	
END













GO
/****** Object:  StoredProcedure [dbo].[_ValidateInvoice]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_ValidateInvoice](@InvoiceId INT, @FromReport Bit)
As
BEGIN
	--DECLARE @UnapprovedChallans VARCHAR(2500) = NULL
	--SELECT @UnapprovedChallans = STUFF((
	--   SELECT ', ' + Convert(Varchar,I.ChallanNo) FROM _InvoiceChallan I
	--   LEFT JOIN vw_loadingchallandetails L ON L.ChallanNo = I.ChallanNo
	--   WHERE I.InvoiceId = @InvoiceId and L.LoadingApprovalStatus <> 4
	--   FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
	--IF @UnapprovedChallans IS NOT NULL
	--	SET @UnapprovedChallans = 'Loading of following challans are not approved: ' + ' ' + @UnapprovedChallans
	--IF @UnapprovedChallans IS NOT NULL
	--THROW 50000, @UnapprovedChallans, 1
	
	Declare @UnloadCount INT  = 0
	
	Select @UnloadCount = Count(*) From _InvoiceChallan I
	inner Join vw_unloadingchallandetails L On L.ChallanNo = I.ChallanNo
	inner join _Job J On J.Id=L.JobId
	inner join _WorkOrderItems T On T.Id=J.WOSectorId
	inner Join _WorkOrder W On W.Id=T.OrderId
	Where I.InvoiceId = @InvoiceId AND W.IsInvoiceBeforeUnloading=0 AND L.UnloadingId IS NULL
	
	IF @UnloadCount > 0
	   THROW 50000, 'There are some challan which have unloading pending. Failed to create invoice', 1

END


GO
/****** Object:  StoredProcedure [dbo].[_ValidateInvoicePayment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[_ValidateInvoicePayment]
( 
@Type INT = 0,
@SettleId INT=0

)
AS
BEGIN
DECLARE @status INT = 0;
IF @Type = 1
BEGIN 
IF EXISTS (Select 1 from _PaymentReceived PR 
LEFT OUTER JOIN Accounts_Vouchers V ON V.Id=PR.VoucherId
WHERE Status IN (1,5) AND PR.Id=@SettleId)
THROW 50000, 'Recipt voucher not in Submit and approved state', 10

END

--IF @Type = 2
--BEGIN
--IF EXISTS (Select 1 from _PaymentReceived PR 
--LEFT OUTER JOIN _InvoicePayment P ON P.SettleId=PR.Id
--LEFT OUTER JOIN _Invoice I ON I.Id=P.InvoiceId
--WHERE PR.Id=@SettleId AND PaymentDate < = I.InvoiceDate)
--THROW 50000, 'please check Invoice Date and Settled Date', 10

--END

END
GO
/****** Object:  StoredProcedure [dbo].[_ValidateJob]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[_ValidateJob](@pJobId INT, @pForce INT)
As
BEGIN
	DECLARE @JobId INT
	DECLARE @JobStatus INT
	DECLARE @MktRuleCount INT
	DECLARE @AssRuleCount INT
	DECLARE @PaymentRuleCount INT
	DECLARE @ClientRate INT
	DECLARE @WOSectorId INT
	DECLARE @WOTolerance Decimal(18,2)
	DECLARE @WOToleranceUnit Varchar(50)
	DECLARE @WOStatus INT
	DECLARE @WOStartDate DateTime
	DECLARE @WOEndDate DateTime
    DECLARE @WOQty Decimal(18,2)
	DECLARE @TruckSource Varchar(50)
	DECLARE @IsAutoQuantity Bit = 0
	DECLARE @LedgerBalance Decimal(18,2)=0

	SET @JobId = @pJobId
	Select @JobStatus = JobStatus, @WOStatus = WO.WOStatus, @WOStartDate=WO.OrderStartDate,@WOQty=WI.Quantity, @TruckSource = Rules 
	,@WOEndDate=WO.OrderEndDate, @WOTolerance = WI.Tolerance, @WOToleranceUnit = WI.ToleranceUnit,@WOSectorId=WI.Id, @IsAutoQuantity=J.IsAutoQuantity
	--,@LedgerBalance = DBO.FN_Accounts_GetLedgerClosingBalance(LedgerId,NULL, NULL)
	From vw_jobdetails J
	Left Join _WorkOrderItems WI On WI.Id = J.WOSectorId
	Left Join vw_WODetails WO On WO.Id = WI.OrderId
	Where J.JobId = @JobId

	--IF (@LedgerBalance <> 0)
	--		THROW 50000, 'Job cannot be closed unless ledger is settled', 1

	--IF (@WOStatus <> 4)
	--		THROW 50000, 'Selected WO Order is not approved. Failed to create Job.', 1
	--IF (@pForce = 1 OR @JobStatus NOT IN (1,5))
	--BEGIN
		
	--	Select @MktRuleCount = Count(*) From _JobFreightMktRules Where JobId = @JobId
	--	Select @AssRuleCount = Count(*) From _JobFrieghtAssRules Where JobId = @JobId
	--	IF (@TruckSource = 'MARKET' AND @MktRuleCount = 0)
	--		THROW 50000, 'Job must contains freight rules for market trucks.', 1
	--	IF (@TruckSource = 'ASSOCIATION' AND @AssRuleCount = 0)
	--		THROW 50000, 'Job must contains freight rules for association trucks.', 1
	--	IF (@TruckSource = 'BOTH' AND (@AssRuleCount = 0 OR @MktRuleCount = 0))
	--		THROW 50000, 'Job must contains freight rules for association and market trucks.', 1
	--	Select @PaymentRuleCount = Count(*) From _JobPaymentRule Where JobId = @JobId
	--	IF (@PaymentRuleCount = 0)
	--		THROW 50000, 'Job must contains payment rules', 1
	--	IF((Select COUNT(*) from _Job Where Id = @JobId AND StartDate >= @WOStartDate AND EndDate <= @WOEndDate) = 0)
	--		THROW 50000, 'Job start date and End date should be between Work Order date' , 1
	--END
	
	--Select @ClientRate = Max(ClientRate)
	-- From _WOSectorRate  W
	--Inner Join _Job J on J.WOSectorId = W.WOSectorId
	--Where J.Id = @JobId AND W.DateTo IS NULL
	
	--IF 1=1
	--	THROW 50000, @JobStatus, 1
	--IF @ClientRate IS NULL Or @ClientRate < 0.0
	--	THROW 50000, 'Client Rate is not found for selected order. Please update WO first before creating Job', 1 
	--DECLARE @TotalJobQty Decimal(18,2) = 0.0
	--Select @TotalJobQty = Sum(Quantity) From _Job Where WOSectorId = @WOSectorId
 --   If(@WOToleranceUnit='%')
	--	SET @WOQty = @WOQty + (@WOQty * @WOTolerance / 100)
	--ELSE
	--	SET @WOQty = @WOQty + @WOTolerance
	--IF (@WOQty < @TotalJObQty)
	--	THROW 50000, 'Job Quantity cannot more than WO Quantity', 1
	--IF(@IsAutoQuantity>0)
	--BEGIN
	--    UPDATE _Job SET Quantity =(SELECT ISNULL(SUM(NetWT),0.00) FROM LoadingChallan WHERE JobId=@JobId) WHERE Id=@JobId
	--END
END

GO
/****** Object:  StoredProcedure [dbo].[_ValidateTruck]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_ValidateTruck](@OwnerId INT)
As
BEGIN
	DECLARE @TruckCount INT
	SELECT 	@TruckCount=COUNT(([Owner])) FROM Fleet_Vehicle WHERE [Owner]=@OwnerId
	--IF(@TruckCount >= 9 )
	--	THrow 50000, @TruckCount,1

END

GO
/****** Object:  StoredProcedure [dbo].[TZ_ReportLoadingSummary]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[TZ_ReportLoadingSummary] (

@LoadFromDate DATE= NULL,
@LoadToDate	DATE= NULL,
@ClientId INT = NULL
)
AS
BEGIN
	 SELECT TOP 10000  COUNT(v.Id)Trips,CONVERT(VARCHAR(10),v.LoadDate, 103)  LoadDate,Sum(v.NetWT) NetWT,Sum(v.UnloadedNetWt) UnloadedNetWt
	 ,SUM(v.Advance)Cash ,SUM(v.HSDCost)HSD ,ISNULL(Sum(p.Penalty),0) Penalty,isnull(Sum(p.TdsAmount),0) TdsAmount,
	Sum((CASE WHEN V.NetWT<V.UnloadedNetWt OR v.UnloadedNetWt IS NULL THEN v.NetWT ELSE v.UnloadedNetWt END)* v.FreightRate)  as Freight
  
   FROM   vw_ReportLoadingChallanReport v 
	Left Join Payment P On P.LoadingId = v.Id
	
	WHere 
	  (@LoadFromDate IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadFromDate)
      AND (@LoadToDate IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadToDate)
	 AND (@ClientId IS NULL OR v.ClientId = @ClientId)
	Group By   v.LoadDate
	Order By v.LoadDate Asc
END

GO
/****** Object:  StoredProcedure [dbo].[TZ_ReportLoadingSummaryReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[TZ_ReportLoadingSummaryReport] (
@GroupBy INT,
@LoadFromDate DATE,
@LoadToDate	DATE,
@JobId INT = NULL,
@ClientId INT = NULL
)
AS
BEGIN
	Select 
		 J.ClientName
		,J.WO
		,L.JobId
		,J.JobNo
		,J.Sector
		,L.LoadDate
		,J.JobQuantity
		,Count(L.ChallanNo) TotalLoad
		,Sum(IsNull(U.UnloadedNetWt,IsNull(L.NetWT, 0.0)) * IsNull(L.Freight, 0.0)) as TotalFreight
		,Sum(L.NetWT) as LoadWT
		,Sum(Case When U.Id Is Null Then 0 Else 1 END) as TotalUnload
		,Sum(IsNull(U.UnloadedNetWt, 0.0)) as UnloadWT
		,Sum(IsNull(L.Advance, 0.0)) as CashAdv
		,Sum(IsNull(L.HSD, 0.0)) as HSD
		,Sum(IsNull(L.Advance, 0.0) + IsNull(L.HSD, 0.0)) as TotalAdv
		,Sum(IsNull(P.NetPayable, 0.0)) as BalancePaid
		,Sum(Case When IC.InvoiceId Is Null Then 0 Else 1 END) as TotalBilled
		,Sum(IsNull(IC.ClaimWt, 0.0)) as BilledWT
		,Sum(IsNull(IC.TotalInvoiceAmount, 0.0)) as BilledAmount
	from LoadingChallan L
	Left Join UnloadingChallan U On U.LoadingChallanId = L.Id
	Left Join Payment P On P.LoadingId = L.Id
	Left Join vw_InvoiceChallanDetails IC On IC.ChallanNo= L.ChallanNo
	Left Join vw_jobdetails J On J.JobId = L.JobId
	WHere L.LoadDate >= @LoadFromDate AND L.LoadDate <= @LoadToDate 
	AND (@JobId IS NULL OR L.JobId = @JobId)
	AND (@ClientId IS NULL OR J.ClientId = @ClientId)
	Group By  J.ClientName, J.WO, J.Sector, J.JobNo, L.JobId, J.JobQuantity, L.LoadDate
	Order By L.LoadDate Desc, L.JobId Desc, J.JobNo
END

GO
/****** Object:  StoredProcedure [dbo].[TZ_ReportNewLoadingSummaryReport]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[TZ_ReportNewLoadingSummaryReport] (
@GroupBy INT,
@LoadFromDate DATE,
@LoadToDate	DATE,
@WOId INT = NULL,
@JobId INT = NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@ClientId INT = NULL
)
AS
BEGIN
Select 
J.ClientName
,L.JobId
,J.JobNo
,L.UnloadingPointName
,L.LoadingPointName
,L.LoadDate
,J.JobQuantity
,Count(L.ChallanNo) TotalLoad
,Sum(IsNull(L.TotalFreight, 0.0)) as TotalFreight
,Sum(L.NetWT) as LoadWT
,Sum(Case When U.Id Is Null Then 0 Else 1 END) as TotalUnload
,Sum(IsNull(U.UnloadedNetWt, 0.0)) as UnloadWT
,Sum(IsNull(L.Advance, 0.0)) as CashAdv
,Sum(IsNull(L.HSDCost, 0.0)) as HSD
,Sum(IsNull(L.TotalAdvance, 0.0)) as TotalAdv
,Sum(IsNull(P.PaidAmount, 0.0)) as BalancePaid
,Sum(Case When IC.InvoiceId Is Null Then 0 Else 1 END) as TotalBilled
,Sum(IsNull(IC.ClaimWt, 0.0)) as BilledWT
,Sum(IsNull(IC.TotalInvoiceAmount, 0.0)) as BilledAmount
,Sum(IsNull(U.Detention, 0.0)+IsNull(P.TollGate, 0.0)) as Expense
,Sum(IsNull(P.ChallanDeduction, 0.0)+IsNull(P.ChallanLost, 0.0)+IsNull(P.Penalty, 0.0)) as Income
from vw_ReportLoadingChallanReport L
Left Join UnloadingChallan U On U.LoadingChallanId = L.Id
Left Join Payment P On P.LoadingId = L.Id
Left Join vw_InvoiceChallanDetails IC On IC.ChallanNo= L.ChallanNo
Left Join vw_jobdetails J On J.JobId = L.JobId
WHere L.LoadDate >= @LoadFromDate AND L.LoadDate <= @LoadToDate 
AND U.LoadingChallanId IS  NULL
AND (@WOId IS NULL OR J.WOId = @WOId)
AND (@JobId IS NULL OR L.JobId = @JobId)
AND (@ClientId IS NULL OR J.ClientId = @ClientId)
AND (@LoadingPointId IS NULL OR L.LoadingPointId = @LoadingPointId)
AND (@UnloadingPointId IS NULL OR L.UnloadingPointId = @UnloadingPointId)
Group By J.ClientName,L.UnloadingPointName,L.LoadingPointName, J.JobNo, L.JobId, J.JobQuantity, L.LoadDate
Order By L.LoadDate Desc, L.JobId Desc, J.JobNo
END

GO
/****** Object:  StoredProcedure [dbo].[TZ_ReportNotReportedVehile]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[TZ_ReportNotReportedVehile] (
@GroupBy INT,
@LoadFromDate DATE,
@LoadToDate	DATE,
@WOId INT = NULL,
@JobId INT = NULL,
@LoadingPointId INT = NULL,
@UnloadingPointId INT = NULL,
@ClientId INT = NULL
)
AS
BEGIN
Select 
J.ClientName
,L.JobId
,J.JobNo
,L.UnloadingPointName
,L.LoadingPointName
,L.LoadDate
,J.JobQuantity
,Count(L.ChallanNo) TotalLoad
,Sum(IsNull(L.TotalFreight, 0.0)) as TotalFreight
,Sum(L.NetWT) as LoadWT
,Sum(Case When U.Id Is Null Then 0 Else 1 END) as TotalUnload
,Sum(IsNull(U.UnloadedNetWt, 0.0)) as UnloadWT
,Sum(IsNull(L.Advance, 0.0)) as CashAdv
,Sum(IsNull(L.HSDCost, 0.0)) as HSD
,Sum(IsNull(L.TotalAdvance, 0.0)) as TotalAdv
,Sum(IsNull(P.PaidAmount, 0.0)) as BalancePaid
,Sum(Case When IC.InvoiceId Is Null Then 0 Else 1 END) as TotalBilled
,Sum(IsNull(IC.ClaimWt, 0.0)) as BilledWT
,Sum(IsNull(IC.TotalInvoiceAmount, 0.0)) as BilledAmount
,Sum(IsNull(U.Detention, 0.0)+IsNull(P.TollGate, 0.0)) as Expense
,Sum(IsNull(P.ChallanDeduction, 0.0)+IsNull(P.ChallanLost, 0.0)+IsNull(P.Penalty, 0.0)) as Income
from vw_ReportLoadingChallanReport L
Left Join UnloadingChallan U On U.LoadingChallanId = L.Id
Left Join Payment P On P.LoadingId = L.Id
Left Join vw_InvoiceChallanDetails IC On IC.ChallanNo= L.ChallanNo
Left Join vw_jobdetails J On J.JobId = L.JobId
WHere L.LoadDate >= @LoadFromDate AND L.LoadDate <= @LoadToDate 
AND U.LoadingChallanId IS  NULL
AND (@WOId IS NULL OR J.WOId = @WOId)
AND (@JobId IS NULL OR L.JobId = @JobId)
AND (@ClientId IS NULL OR J.ClientId = @ClientId)
AND (@LoadingPointId IS NULL OR L.LoadingPointId = @LoadingPointId)
AND (@UnloadingPointId IS NULL OR L.UnloadingPointId = @UnloadingPointId)
Group By J.ClientName,L.UnloadingPointName,L.LoadingPointName, J.JobNo, L.JobId, J.JobQuantity, L.LoadDate
Order By L.LoadDate Desc, L.JobId Desc, J.JobNo
END

GO
/****** Object:  StoredProcedure [dbo].[TZ_ReportNotReportedVehileDetails]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[TZ_ReportNotReportedVehileDetails] (
@WOId INT = NULL,
@JobId INT = NULL,
@ClientId INT= NULL,
@LoadDateFrom Date = NULL,
@LoadDateTo Date = NULL,
@LoadingPoint VARCHAR(50)=NULL,
@UnloadingPoint VARCHAR(50)=NULL,
@UnloadDateFrom Date=NULL,
@UnloadDateTo Date=NULL,
@IsUnloadingPending Varchar(50)  = NULL,
@TPInvNo Varchar(50) = NULL,
@TruckNo Varchar(50) = NULL,
@OwnerId INT = NULL,
@PartyId INT=NULL,
@AssociationId INT=NULL
)
AS
BEGIN
   SELECT TOP 10000 v.ChallanNo,v.TP,CONVERT(VARCHAR(10),v.LoadDate, 103)  LoadDate,v.TruckNumber,v.NetWT,v.UnloadedNetWt,v.ClaimLoad
   ,CONVERT(VARCHAR(10),v.UnloadedDate, 103) UnloadedDate,v.ChallanSerialNo 
   , V.ChallanNoKey,v. ClientName,v.Advance,v.HSDCost,v.OwnerName,v.OwnerPan,V.OwnerContact
FROM   vw_ReportLoadingChallanReport v 

   WHERE 1=1
   AND v.UnloadingId IS NULL
    AND (@ClientId IS NULL OR v.ClientId = @ClientId)
   AND (@LoadingPoint IS NULL OR v.LoadingPointId = @LoadingPoint)
   AND (@UnloadingPoint IS NULL OR v.UnLoadingPointId = @UnloadingPoint)
   AND (@LoadDateFrom IS NULL OR CONVERT(date, v.LoadDate, 103)>= @LoadDateFrom)
   AND (@LoadDateTo IS NULL OR CONVERT(date, v.LoadDate, 103) <= @LoadDateTo)
   AND (@UnloadDateFrom IS NULL OR CONVERT(date, v.UnloadedDate, 103)>= @UnloadDateFrom)
   AND (@UnloadDateTo IS NULL OR CONVERT(date, v.UnloadedDate, 102) <= @UnloadDateTo)
   --AND (@OwnerId IS NULL OR [LOwnerId] = @OwnerId)
   AND (@AssociationId IS NULL OR V.LAssociationId = @AssociationId)
   And (@PartyId IS NULL OR v.LOwnerId = @PartyId)
END

GO
/****** Object:  StoredProcedure [dbo].[ValidateReceivedInvoicePayment]    Script Date: 2/15/2025 9:02:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ValidateReceivedInvoicePayment] (@InvoiceId INT)
AS
	BEGIN
			DECLARE @TotalInvoice DECIMAL(18,2)=0
		DECLARE @TotalTax DECIMAL(18,2)=0
		DECLARE @TotalReceived DECIMAL(18,2)=0
		DECLARE @InvoiceNo VARCHAR(200)=''
		SELECT @TotalInvoice =  ROUND(TotalInvoiceAmount,0), @InvoiceNo=InvoiceNo from vw_InvoiceAmount V LEFT OUTER JOIN _Invoice T ON T.Id=V.Id where V.id=@InvoiceId
		SELECT @TotalTax=TaxAmount from vw_InvoiceTotalTaxHandlingDetails where InvoiceId=@InvoiceId
		SET @TotalInvoice = @TotalInvoice+@TotalTax

		select @TotalReceived = IsNULL(SUM(ReceivedAmount)+SUM(ShortageDeduction)+SUM(MoistureDeduction)+SUM(TDSAmount)+SUM(OtherDeduction),0)
		from _InvoicePayment
		where InvoiceId=@InvoiceId
		SET @InvoiceNo = 'Invoice '+ @InvoiceNo + ' Difference Amount ' + convert(varchar(50), @TotalReceived - @TotalInvoice )+ ' amount is more than received. Please use bulk mode to settle'
		IF (@TotalReceived+1) - @TotalInvoice > 1
			throw 50000, @InvoiceNo,1
	END
GO
USE [master]
GO
ALTER DATABASE [I3MSExtracted] SET  READ_WRITE 
GO
